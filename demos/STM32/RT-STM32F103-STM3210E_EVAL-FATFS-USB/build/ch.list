
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023b 	.word	0x0800023b
 8000010:	0800023b 	.word	0x0800023b
 8000014:	0800023b 	.word	0x0800023b
 8000018:	0800023b 	.word	0x0800023b
 800001c:	0800023b 	.word	0x0800023b
 8000020:	0800023b 	.word	0x0800023b
 8000024:	0800023b 	.word	0x0800023b
 8000028:	0800023b 	.word	0x0800023b
 800002c:	080061f1 	.word	0x080061f1
 8000030:	0800023b 	.word	0x0800023b
 8000034:	0800023b 	.word	0x0800023b
 8000038:	0800023b 	.word	0x0800023b
 800003c:	0800023b 	.word	0x0800023b
 8000040:	0800023b 	.word	0x0800023b
 8000044:	0800023b 	.word	0x0800023b
 8000048:	0800023b 	.word	0x0800023b
 800004c:	0800023b 	.word	0x0800023b
 8000050:	0800023b 	.word	0x0800023b
 8000054:	0800023b 	.word	0x0800023b
 8000058:	0800023b 	.word	0x0800023b
 800005c:	0800023b 	.word	0x0800023b
 8000060:	0800023b 	.word	0x0800023b
 8000064:	0800023b 	.word	0x0800023b
 8000068:	0800023b 	.word	0x0800023b
 800006c:	08001de1 	.word	0x08001de1
 8000070:	08001e51 	.word	0x08001e51
 8000074:	08001ed1 	.word	0x08001ed1
 8000078:	08001f51 	.word	0x08001f51
 800007c:	08001fd1 	.word	0x08001fd1
 8000080:	08002051 	.word	0x08002051
 8000084:	080020d1 	.word	0x080020d1
 8000088:	0800023b 	.word	0x0800023b
 800008c:	0800023b 	.word	0x0800023b
 8000090:	080026e1 	.word	0x080026e1
 8000094:	0800023b 	.word	0x0800023b
 8000098:	0800023b 	.word	0x0800023b
 800009c:	0800023b 	.word	0x0800023b
 80000a0:	0800023b 	.word	0x0800023b
 80000a4:	0800023b 	.word	0x0800023b
 80000a8:	0800023b 	.word	0x0800023b
 80000ac:	0800023b 	.word	0x0800023b
 80000b0:	08002451 	.word	0x08002451
 80000b4:	0800023b 	.word	0x0800023b
 80000b8:	0800023b 	.word	0x0800023b
 80000bc:	0800023b 	.word	0x0800023b
 80000c0:	0800023b 	.word	0x0800023b
 80000c4:	0800023b 	.word	0x0800023b
 80000c8:	0800023b 	.word	0x0800023b
 80000cc:	0800023b 	.word	0x0800023b
 80000d0:	0800023b 	.word	0x0800023b
 80000d4:	0800023b 	.word	0x0800023b
 80000d8:	0800023b 	.word	0x0800023b
 80000dc:	0800023b 	.word	0x0800023b
 80000e0:	0800023b 	.word	0x0800023b
 80000e4:	0800023b 	.word	0x0800023b
 80000e8:	0800023b 	.word	0x0800023b
 80000ec:	0800023b 	.word	0x0800023b
 80000f0:	0800023b 	.word	0x0800023b
 80000f4:	0800023b 	.word	0x0800023b
 80000f8:	0800023b 	.word	0x0800023b
 80000fc:	0800023b 	.word	0x0800023b
 8000100:	0800023b 	.word	0x0800023b
 8000104:	080023c1 	.word	0x080023c1
 8000108:	0800023b 	.word	0x0800023b
 800010c:	0800023b 	.word	0x0800023b
 8000110:	0800023b 	.word	0x0800023b
 8000114:	0800023b 	.word	0x0800023b
 8000118:	0800023b 	.word	0x0800023b
 800011c:	0800023b 	.word	0x0800023b
 8000120:	08002151 	.word	0x08002151
 8000124:	080021c1 	.word	0x080021c1
 8000128:	08002241 	.word	0x08002241
 800012c:	080022c1 	.word	0x080022c1
 8000130:	08002341 	.word	0x08002341
 8000134:	0800023b 	.word	0x0800023b
 8000138:	0800023b 	.word	0x0800023b
 800013c:	0800023b 	.word	0x0800023b
 8000140:	0800023b 	.word	0x0800023b
 8000144:	0800023b 	.word	0x0800023b
 8000148:	0800023b 	.word	0x0800023b
 800014c:	0800023b 	.word	0x0800023b
 8000150:	0800023b 	.word	0x0800023b
 8000154:	0800023b 	.word	0x0800023b
 8000158:	0800023b 	.word	0x0800023b
 800015c:	0800023b 	.word	0x0800023b

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4827      	ldr	r0, [pc, #156]	; (8000200 <endfiniloop+0x4>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4826      	ldr	r0, [pc, #152]	; (8000204 <endfiniloop+0x8>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800016e:	4826      	ldr	r0, [pc, #152]	; (8000208 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000170:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000174:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000178:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800017a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800017c:	f380 8814 	msr	CONTROL, r0
                isb
 8000180:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 8000184:	f001 fb14 	bl	80017b0 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000188:	f002 fc7a 	bl	8002a80 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800018c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000190:	491e      	ldr	r1, [pc, #120]	; (800020c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000192:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <endfiniloop+0x4>)

08000194 <msloop>:
msloop:
                cmp     r1, r2
 8000194:	4291      	cmp	r1, r2
                itt     lo
 8000196:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000198:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800019c:	e7fa      	bcc.n	8000194 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800019e:	491c      	ldr	r1, [pc, #112]	; (8000210 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001a0:	4a18      	ldr	r2, [pc, #96]	; (8000204 <endfiniloop+0x8>)

080001a2 <psloop>:
psloop:
                cmp     r1, r2
 80001a2:	4291      	cmp	r1, r2
                itt     lo
 80001a4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001aa:	e7fa      	bcc.n	80001a2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80001ac:	4919      	ldr	r1, [pc, #100]	; (8000214 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80001ae:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80001b0:	4b1a      	ldr	r3, [pc, #104]	; (800021c <endfiniloop+0x20>)

080001b2 <dloop>:
dloop:
                cmp     r2, r3
 80001b2:	429a      	cmp	r2, r3
                ittt    lo
 80001b4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ba:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001be:	e7f8      	bcc.n	80001b2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001c0:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001c2:	4917      	ldr	r1, [pc, #92]	; (8000220 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <endfiniloop+0x28>)

080001c6 <bloop>:
bloop:
                cmp     r1, r2
 80001c6:	4291      	cmp	r1, r2
                itt     lo
 80001c8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001ca:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001ce:	e7fa      	bcc.n	80001c6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001d0:	f001 fb06 	bl	80017e0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001d4:	f001 faf4 	bl	80017c0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001d8:	4c13      	ldr	r4, [pc, #76]	; (8000228 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 80001da:	4d14      	ldr	r5, [pc, #80]	; (800022c <endfiniloop+0x30>)

080001dc <initloop>:
initloop:
                cmp     r4, r5
 80001dc:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001de:	da03      	bge.n	80001e8 <endinitloop>
                ldr     r1, [r4], #4
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001e4:	4788      	blx	r1
                b       initloop
 80001e6:	e7f9      	b.n	80001dc <initloop>

080001e8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e8:	f00e f9fa 	bl	800e5e0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001ec:	4c10      	ldr	r4, [pc, #64]	; (8000230 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 80001ee:	4d11      	ldr	r5, [pc, #68]	; (8000234 <endfiniloop+0x38>)

080001f0 <finiloop>:
finiloop:
                cmp     r4, r5
 80001f0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001f2:	da03      	bge.n	80001fc <endfiniloop>
                ldr     r1, [r4], #4
 80001f4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f8:	4788      	blx	r1
                b       finiloop
 80001fa:	e7f9      	b.n	80001f0 <finiloop>

080001fc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001fc:	f001 bae8 	b.w	80017d0 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000200:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000204:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000208:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000214:	080130b8 	.word	0x080130b8
                ldr     r2, =__data_base__
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800021c:	200008e4 	.word	0x200008e4
                ldr     r1, =__bss_base__
 8000220:	200008e8 	.word	0x200008e8
                ldr     r2, =__bss_end__
 8000224:	20002e80 	.word	0x20002e80
                ldr     r4, =__init_array_base__
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_base__
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end__
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800023a:	f000 f800 	bl	800023e <_unhandled_exception>

0800023e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023e:	e7fe      	b.n	800023e <_unhandled_exception>

08000240 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <__port_thread_start>:
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000250:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000252:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000256:	4628      	mov	r0, r5
                blx     r4
 8000258:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800025a:	2000      	movs	r0, #0
                bl      chThdExit
 800025c:	f004 f8a8 	bl	80043b0 <chThdExit>

08000260 <.zombies>:
.zombies:       b       .zombies
 8000260:	e7fe      	b.n	8000260 <.zombies>

08000262 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 8000262:	f003 fcad 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>

08000266 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000266:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000268:	e7fe      	b.n	8000268 <__port_exit_from_isr+0x2>
	...

0800026c <memcpy>:
 800026c:	4684      	mov	ip, r0
 800026e:	ea41 0300 	orr.w	r3, r1, r0
 8000272:	f013 0303 	ands.w	r3, r3, #3
 8000276:	d149      	bne.n	800030c <memcpy+0xa0>
 8000278:	3a40      	subs	r2, #64	; 0x40
 800027a:	d323      	bcc.n	80002c4 <memcpy+0x58>
 800027c:	680b      	ldr	r3, [r1, #0]
 800027e:	6003      	str	r3, [r0, #0]
 8000280:	684b      	ldr	r3, [r1, #4]
 8000282:	6043      	str	r3, [r0, #4]
 8000284:	688b      	ldr	r3, [r1, #8]
 8000286:	6083      	str	r3, [r0, #8]
 8000288:	68cb      	ldr	r3, [r1, #12]
 800028a:	60c3      	str	r3, [r0, #12]
 800028c:	690b      	ldr	r3, [r1, #16]
 800028e:	6103      	str	r3, [r0, #16]
 8000290:	694b      	ldr	r3, [r1, #20]
 8000292:	6143      	str	r3, [r0, #20]
 8000294:	698b      	ldr	r3, [r1, #24]
 8000296:	6183      	str	r3, [r0, #24]
 8000298:	69cb      	ldr	r3, [r1, #28]
 800029a:	61c3      	str	r3, [r0, #28]
 800029c:	6a0b      	ldr	r3, [r1, #32]
 800029e:	6203      	str	r3, [r0, #32]
 80002a0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80002a2:	6243      	str	r3, [r0, #36]	; 0x24
 80002a4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80002a6:	6283      	str	r3, [r0, #40]	; 0x28
 80002a8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80002aa:	62c3      	str	r3, [r0, #44]	; 0x2c
 80002ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80002ae:	6303      	str	r3, [r0, #48]	; 0x30
 80002b0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80002b2:	6343      	str	r3, [r0, #52]	; 0x34
 80002b4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80002b6:	6383      	str	r3, [r0, #56]	; 0x38
 80002b8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80002ba:	63c3      	str	r3, [r0, #60]	; 0x3c
 80002bc:	3040      	adds	r0, #64	; 0x40
 80002be:	3140      	adds	r1, #64	; 0x40
 80002c0:	3a40      	subs	r2, #64	; 0x40
 80002c2:	d2db      	bcs.n	800027c <memcpy+0x10>
 80002c4:	3230      	adds	r2, #48	; 0x30
 80002c6:	d30b      	bcc.n	80002e0 <memcpy+0x74>
 80002c8:	680b      	ldr	r3, [r1, #0]
 80002ca:	6003      	str	r3, [r0, #0]
 80002cc:	684b      	ldr	r3, [r1, #4]
 80002ce:	6043      	str	r3, [r0, #4]
 80002d0:	688b      	ldr	r3, [r1, #8]
 80002d2:	6083      	str	r3, [r0, #8]
 80002d4:	68cb      	ldr	r3, [r1, #12]
 80002d6:	60c3      	str	r3, [r0, #12]
 80002d8:	3010      	adds	r0, #16
 80002da:	3110      	adds	r1, #16
 80002dc:	3a10      	subs	r2, #16
 80002de:	d2f3      	bcs.n	80002c8 <memcpy+0x5c>
 80002e0:	320c      	adds	r2, #12
 80002e2:	d305      	bcc.n	80002f0 <memcpy+0x84>
 80002e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e8:	f840 3b04 	str.w	r3, [r0], #4
 80002ec:	3a04      	subs	r2, #4
 80002ee:	d2f9      	bcs.n	80002e4 <memcpy+0x78>
 80002f0:	3204      	adds	r2, #4
 80002f2:	d008      	beq.n	8000306 <memcpy+0x9a>
 80002f4:	07d2      	lsls	r2, r2, #31
 80002f6:	bf1c      	itt	ne
 80002f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000300:	d301      	bcc.n	8000306 <memcpy+0x9a>
 8000302:	880b      	ldrh	r3, [r1, #0]
 8000304:	8003      	strh	r3, [r0, #0]
 8000306:	4660      	mov	r0, ip
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	2a08      	cmp	r2, #8
 800030e:	d313      	bcc.n	8000338 <memcpy+0xcc>
 8000310:	078b      	lsls	r3, r1, #30
 8000312:	d0b1      	beq.n	8000278 <memcpy+0xc>
 8000314:	f010 0303 	ands.w	r3, r0, #3
 8000318:	d0ae      	beq.n	8000278 <memcpy+0xc>
 800031a:	f1c3 0304 	rsb	r3, r3, #4
 800031e:	1ad2      	subs	r2, r2, r3
 8000320:	07db      	lsls	r3, r3, #31
 8000322:	bf1c      	itt	ne
 8000324:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000328:	f800 3b01 	strbne.w	r3, [r0], #1
 800032c:	d3a4      	bcc.n	8000278 <memcpy+0xc>
 800032e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000332:	f820 3b02 	strh.w	r3, [r0], #2
 8000336:	e79f      	b.n	8000278 <memcpy+0xc>
 8000338:	3a04      	subs	r2, #4
 800033a:	d3d9      	bcc.n	80002f0 <memcpy+0x84>
 800033c:	3a01      	subs	r2, #1
 800033e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000342:	f800 3b01 	strb.w	r3, [r0], #1
 8000346:	d2f9      	bcs.n	800033c <memcpy+0xd0>
 8000348:	780b      	ldrb	r3, [r1, #0]
 800034a:	7003      	strb	r3, [r0, #0]
 800034c:	784b      	ldrb	r3, [r1, #1]
 800034e:	7043      	strb	r3, [r0, #1]
 8000350:	788b      	ldrb	r3, [r1, #2]
 8000352:	7083      	strb	r3, [r0, #2]
 8000354:	4660      	mov	r0, ip
 8000356:	4770      	bx	lr

08000358 <strcmp>:
 8000358:	ea80 0c01 	eor.w	ip, r0, r1
 800035c:	f01c 0f03 	tst.w	ip, #3
 8000360:	d137      	bne.n	80003d2 <strcmp+0x7a>
 8000362:	f010 0c03 	ands.w	ip, r0, #3
 8000366:	f020 0003 	bic.w	r0, r0, #3
 800036a:	f021 0103 	bic.w	r1, r1, #3
 800036e:	f850 2b04 	ldr.w	r2, [r0], #4
 8000372:	bf08      	it	eq
 8000374:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000378:	d00e      	beq.n	8000398 <strcmp+0x40>
 800037a:	f08c 0c03 	eor.w	ip, ip, #3
 800037e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000382:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000386:	fa23 fc0c 	lsr.w	ip, r3, ip
 800038a:	f851 3b04 	ldr.w	r3, [r1], #4
 800038e:	ea42 020c 	orr.w	r2, r2, ip
 8000392:	ea43 030c 	orr.w	r3, r3, ip
 8000396:	bf00      	nop
 8000398:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800039c:	429a      	cmp	r2, r3
 800039e:	bf01      	itttt	eq
 80003a0:	ea2c 0c02 	biceq.w	ip, ip, r2
 80003a4:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 80003a8:	f850 2b04 	ldreq.w	r2, [r0], #4
 80003ac:	f851 3b04 	ldreq.w	r3, [r1], #4
 80003b0:	d0f2      	beq.n	8000398 <strcmp+0x40>
 80003b2:	ea4f 6002 	mov.w	r0, r2, lsl #24
 80003b6:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80003ba:	2801      	cmp	r0, #1
 80003bc:	bf28      	it	cs
 80003be:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 80003c2:	bf08      	it	eq
 80003c4:	0a1b      	lsreq	r3, r3, #8
 80003c6:	d0f4      	beq.n	80003b2 <strcmp+0x5a>
 80003c8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80003cc:	0e00      	lsrs	r0, r0, #24
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4770      	bx	lr
 80003d2:	f010 0f03 	tst.w	r0, #3
 80003d6:	d00a      	beq.n	80003ee <strcmp+0x96>
 80003d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80003dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003e0:	2a01      	cmp	r2, #1
 80003e2:	bf28      	it	cs
 80003e4:	429a      	cmpcs	r2, r3
 80003e6:	d0f4      	beq.n	80003d2 <strcmp+0x7a>
 80003e8:	eba2 0003 	sub.w	r0, r2, r3
 80003ec:	4770      	bx	lr
 80003ee:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80003f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80003f6:	f001 0503 	and.w	r5, r1, #3
 80003fa:	f021 0103 	bic.w	r1, r1, #3
 80003fe:	f851 3b04 	ldr.w	r3, [r1], #4
 8000402:	2d02      	cmp	r5, #2
 8000404:	d026      	beq.n	8000454 <strcmp+0xfc>
 8000406:	d84d      	bhi.n	80004a4 <strcmp+0x14c>
 8000408:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 800040c:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 8000410:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000414:	ea2c 0c02 	bic.w	ip, ip, r2
 8000418:	d10d      	bne.n	8000436 <strcmp+0xde>
 800041a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 800041e:	bf08      	it	eq
 8000420:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000424:	d10a      	bne.n	800043c <strcmp+0xe4>
 8000426:	ea85 0502 	eor.w	r5, r5, r2
 800042a:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 800042e:	d10c      	bne.n	800044a <strcmp+0xf2>
 8000430:	f850 2b04 	ldr.w	r2, [r0], #4
 8000434:	e7e8      	b.n	8000408 <strcmp+0xb0>
 8000436:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800043a:	e05b      	b.n	80004f4 <strcmp+0x19c>
 800043c:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 8000440:	d154      	bne.n	80004ec <strcmp+0x194>
 8000442:	780b      	ldrb	r3, [r1, #0]
 8000444:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000448:	e054      	b.n	80004f4 <strcmp+0x19c>
 800044a:	ea4f 6512 	mov.w	r5, r2, lsr #24
 800044e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000452:	e04f      	b.n	80004f4 <strcmp+0x19c>
 8000454:	ea4f 4502 	mov.w	r5, r2, lsl #16
 8000458:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800045c:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8000460:	ea2c 0c02 	bic.w	ip, ip, r2
 8000464:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 8000468:	d118      	bne.n	800049c <strcmp+0x144>
 800046a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 800046e:	bf08      	it	eq
 8000470:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000474:	d107      	bne.n	8000486 <strcmp+0x12e>
 8000476:	ea85 0502 	eor.w	r5, r5, r2
 800047a:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 800047e:	d109      	bne.n	8000494 <strcmp+0x13c>
 8000480:	f850 2b04 	ldr.w	r2, [r0], #4
 8000484:	e7e6      	b.n	8000454 <strcmp+0xfc>
 8000486:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 800048a:	d12f      	bne.n	80004ec <strcmp+0x194>
 800048c:	880b      	ldrh	r3, [r1, #0]
 800048e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000492:	e02f      	b.n	80004f4 <strcmp+0x19c>
 8000494:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8000498:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800049c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80004a0:	e028      	b.n	80004f4 <strcmp+0x19c>
 80004a2:	bf00      	nop
 80004a4:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 80004a8:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 80004ac:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80004b0:	ea2c 0c02 	bic.w	ip, ip, r2
 80004b4:	d10d      	bne.n	80004d2 <strcmp+0x17a>
 80004b6:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 80004ba:	bf08      	it	eq
 80004bc:	f851 3b04 	ldreq.w	r3, [r1], #4
 80004c0:	d10a      	bne.n	80004d8 <strcmp+0x180>
 80004c2:	ea85 0502 	eor.w	r5, r5, r2
 80004c6:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 80004ca:	d10a      	bne.n	80004e2 <strcmp+0x18a>
 80004cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80004d0:	e7e8      	b.n	80004a4 <strcmp+0x14c>
 80004d2:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80004d6:	e00d      	b.n	80004f4 <strcmp+0x19c>
 80004d8:	f012 0fff 	tst.w	r2, #255	; 0xff
 80004dc:	d006      	beq.n	80004ec <strcmp+0x194>
 80004de:	f851 3b04 	ldr.w	r3, [r1], #4
 80004e2:	ea4f 2512 	mov.w	r5, r2, lsr #8
 80004e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80004ea:	e003      	b.n	80004f4 <strcmp+0x19c>
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	bc20      	pop	{r5}
 80004f2:	4770      	bx	lr
 80004f4:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 80004f8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80004fc:	2801      	cmp	r0, #1
 80004fe:	bf28      	it	cs
 8000500:	4290      	cmpcs	r0, r2
 8000502:	bf04      	itt	eq
 8000504:	0a2d      	lsreq	r5, r5, #8
 8000506:	0a1b      	lsreq	r3, r3, #8
 8000508:	d0f4      	beq.n	80004f4 <strcmp+0x19c>
 800050a:	eba2 0000 	sub.w	r0, r2, r0
 800050e:	bc20      	pop	{r5}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
	...

08000520 <_mmcsd_get_capacity>:
  /* One or two pieces?*/
  if (startidx < endidx) {
    return (data[startidx] >> startoff) |               /* Two pieces case. */
           ((data[endidx] & endmask) << (32U - startoff));
  }
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 8000520:	68c3      	ldr	r3, [r0, #12]
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
  uint32_t a, b, c;

  osalDbgCheck(NULL != csd);

  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8000522:	0f9b      	lsrs	r3, r3, #30
 8000524:	d00c      	beq.n	8000540 <_mmcsd_get_capacity+0x20>
 8000526:	2b01      	cmp	r3, #1
 8000528:	d108      	bne.n	800053c <_mmcsd_get_capacity+0x1c>
           ((data[endidx] & endmask) << (32U - startoff));
 800052a:	6883      	ldr	r3, [r0, #8]
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 800052c:	88c2      	ldrh	r2, [r0, #6]
           ((data[endidx] & endmask) << (32U - startoff));
 800052e:	0418      	lsls	r0, r3, #16
 8000530:	f400 107c 	and.w	r0, r0, #4128768	; 0x3f0000
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8000534:	4310      	orrs	r0, r2
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
  case 1:
    /* CSD version 2.0.*/
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
 8000536:	3001      	adds	r0, #1
 8000538:	0280      	lsls	r0, r0, #10
  default:
    /* Reserved value detected.*/
    break;
  }
  return 0U;
}
 800053a:	4770      	bx	lr
  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 800053c:	2000      	movs	r0, #0
 800053e:	4770      	bx	lr
           ((data[endidx] & endmask) << (32U - startoff));
 8000540:	f640 73fc 	movw	r3, #4092	; 0xffc
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
 8000544:	b430      	push	{r4, r5}
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8000546:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
           ((data[endidx] & endmask) << (32U - startoff));
 800054a:	ea03 0085 	and.w	r0, r3, r5, lsl #2
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 800054e:	f3c4 31c2 	ubfx	r1, r4, #15, #3
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8000552:	ea40 7094 	orr.w	r0, r0, r4, lsr #30
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 8000556:	f3c5 4203 	ubfx	r2, r5, #16, #4
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
 800055a:	3102      	adds	r1, #2
 800055c:	3001      	adds	r0, #1
 800055e:	3a09      	subs	r2, #9
 8000560:	4088      	lsls	r0, r1
 8000562:	4090      	lsls	r0, r2
}
 8000564:	bc30      	pop	{r4, r5}
 8000566:	4770      	bx	lr
	...

08000570 <sdcSync>:
bool sdcSync(SDCDriver *sdcp) {
  bool result;

  osalDbgCheck(sdcp != NULL);

  if (sdcp->state != BLK_READY) {
 8000570:	7900      	ldrb	r0, [r0, #4]
  result = sdc_lld_sync(sdcp);

  /* Synchronization operation finished.*/
  sdcp->state = BLK_READY;
  return result;
}
 8000572:	3805      	subs	r0, #5
 8000574:	bf18      	it	ne
 8000576:	2001      	movne	r0, #1
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	0000      	movs	r0, r0
	...

08000580 <sdcGetInfo>:
 */
bool sdcGetInfo(SDCDriver *sdcp, BlockDeviceInfo *bdip) {

  osalDbgCheck((sdcp != NULL) && (bdip != NULL));

  if (sdcp->state != BLK_READY) {
 8000580:	7903      	ldrb	r3, [r0, #4]
 8000582:	2b05      	cmp	r3, #5
 8000584:	d106      	bne.n	8000594 <sdcGetInfo+0x14>
    return HAL_FAILED;
  }

  bdip->blk_num = sdcp->capacity;
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 8000586:	f44f 7300 	mov.w	r3, #512	; 0x200
  bdip->blk_num = sdcp->capacity;
 800058a:	6a82      	ldr	r2, [r0, #40]	; 0x28

  return HAL_SUCCESS;
 800058c:	2000      	movs	r0, #0
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 800058e:	e9c1 3200 	strd	r3, r2, [r1]
  return HAL_SUCCESS;
 8000592:	4770      	bx	lr
    return HAL_FAILED;
 8000594:	2001      	movs	r0, #1
}
 8000596:	4770      	bx	lr
	...

080005a0 <_ctl.lto_priv.0>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 80005a0:	2000      	movs	r0, #0
 80005a2:	4770      	bx	lr
	...

080005b0 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 80005b0:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 80005b4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80005b8:	2a20      	cmp	r2, #32
 80005ba:	d001      	beq.n	80005c0 <sduRequestsHook+0x10>
      return true;
    default:
      return false;
    }
  }
  return false;
 80005bc:	2000      	movs	r0, #0
}
 80005be:	4770      	bx	lr
    switch (usbp->setup[1]) {
 80005c0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 80005c4:	4603      	mov	r3, r0
 80005c6:	2a21      	cmp	r2, #33	; 0x21
 80005c8:	d80b      	bhi.n	80005e2 <sduRequestsHook+0x32>
 80005ca:	2a1f      	cmp	r2, #31
 80005cc:	d9f6      	bls.n	80005bc <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80005ce:	2107      	movs	r1, #7
 80005d0:	2200      	movs	r2, #0
bool sduRequestsHook(USBDriver *usbp) {
 80005d2:	b410      	push	{r4}
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80005d4:	4c07      	ldr	r4, [pc, #28]	; (80005f4 <sduRequestsHook+0x44>)
      return true;
 80005d6:	2001      	movs	r0, #1
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80005d8:	e9c3 411a 	strd	r4, r1, [r3, #104]	; 0x68
 80005dc:	671a      	str	r2, [r3, #112]	; 0x70
}
 80005de:	bc10      	pop	{r4}
 80005e0:	4770      	bx	lr
    switch (usbp->setup[1]) {
 80005e2:	2a22      	cmp	r2, #34	; 0x22
 80005e4:	d1ea      	bne.n	80005bc <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80005e6:	2200      	movs	r2, #0
      return true;
 80005e8:	2001      	movs	r0, #1
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80005ea:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
 80005ee:	671a      	str	r2, [r3, #112]	; 0x70
      return true;
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000810 	.word	0x20000810
	...

08000600 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
	...

08000610 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8000610:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <set_address+0x24>)
 8000616:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 800061a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
static void set_address(USBDriver *usbp) {
 800061e:	b510      	push	{r4, lr}
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8000622:	6843      	ldr	r3, [r0, #4]
static void set_address(USBDriver *usbp) {
 8000624:	4604      	mov	r4, r0
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	b10b      	cbz	r3, 800062e <set_address+0x1e>
 800062a:	2101      	movs	r1, #1
 800062c:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 800062e:	2303      	movs	r3, #3
 8000630:	7023      	strb	r3, [r4, #0]
}
 8000632:	bd10      	pop	{r4, pc}
 8000634:	40005c00 	.word	0x40005c00
	...

08000640 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 8000640:	b4f0      	push	{r4, r5, r6, r7}
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000642:	2401      	movs	r4, #1
 8000644:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8000648:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800064c:	68ed      	ldr	r5, [r5, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800064e:	408c      	lsls	r4, r1
 8000650:	ea44 040c 	orr.w	r4, r4, ip
 8000654:	8104      	strh	r4, [r0, #8]
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8000656:	8a2c      	ldrh	r4, [r5, #16]
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 8000658:	2700      	movs	r7, #0
 800065a:	429c      	cmp	r4, r3
 800065c:	bf28      	it	cs
 800065e:	461c      	movcs	r4, r3
  isp = usbp->epc[ep]->in_state;
 8000660:	6968      	ldr	r0, [r5, #20]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8000662:	4e1b      	ldr	r6, [pc, #108]	; (80006d0 <usbStartTransmitI+0x90>)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
 8000664:	e9c0 2402 	strd	r2, r4, [r0, #8]
  isp->txcnt  = 0;
 8000668:	6047      	str	r7, [r0, #4]
  isp->txsize = n;
 800066a:	6003      	str	r3, [r0, #0]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800066c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800066e:	0108      	lsls	r0, r1, #4
 8000670:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000674:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8000678:	58c0      	ldr	r0, [r0, r3]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800067a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 800067e:	605c      	str	r4, [r3, #4]
  while (i > 0) {
 8000680:	b1a4      	cbz	r4, 80006ac <usbStartTransmitI+0x6c>
 8000682:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8000686:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800068a:	0040      	lsls	r0, r0, #1
 800068c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8000690:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8000694:	1d03      	adds	r3, r0, #4
 8000696:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800069a:	e000      	b.n	800069e <usbStartTransmitI+0x5e>
 800069c:	3304      	adds	r3, #4
    w  = *buf++;
 800069e:	4604      	mov	r4, r0
    w |= *buf++ << 8;
 80006a0:	f832 5b02 	ldrh.w	r5, [r2], #2
  while (i > 0) {
 80006a4:	459c      	cmp	ip, r3
    *pmap++ = (stm32_usb_pma_t)w;
 80006a6:	4618      	mov	r0, r3
 80006a8:	6025      	str	r5, [r4, #0]
  while (i > 0) {
 80006aa:	d1f7      	bne.n	800069c <usbStartTransmitI+0x5c>
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
}
 80006ac:	bcf0      	pop	{r4, r5, r6, r7}
  usb_packet_write_from_buffer(ep, isp->txbuf, n);

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <usbStartTransmitI+0x90>)
 80006b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80006b4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80006b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006bc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80006c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40005c00 	.word	0x40005c00
	...

080006e0 <obnotify.lto_priv.0>:
static void obnotify(io_buffers_queue_t *bqp) {
 80006e0:	b530      	push	{r4, r5, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 80006e2:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80006e4:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80006e8:	6810      	ldr	r0, [r2, #0]
 80006ea:	7801      	ldrb	r1, [r0, #0]
 80006ec:	2904      	cmp	r1, #4
 80006ee:	d102      	bne.n	80006f6 <obnotify.lto_priv.0+0x16>
 80006f0:	7a21      	ldrb	r1, [r4, #8]
 80006f2:	2902      	cmp	r1, #2
 80006f4:	d000      	beq.n	80006f8 <obnotify.lto_priv.0+0x18>
}
 80006f6:	bd30      	pop	{r4, r5, pc}
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80006f8:	f04f 0c01 	mov.w	ip, #1
 80006fc:	7911      	ldrb	r1, [r2, #4]
 80006fe:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8000702:	fa0c f201 	lsl.w	r2, ip, r1
 8000706:	ea12 020e 	ands.w	r2, r2, lr
 800070a:	d1f4      	bne.n	80006f6 <obnotify.lto_priv.0+0x16>
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 800070c:	e9d4 c515 	ldrd	ip, r5, [r4, #84]	; 0x54
 8000710:	45ac      	cmp	ip, r5
 8000712:	d006      	beq.n	8000722 <obnotify.lto_priv.0+0x42>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 8000714:	462a      	mov	r2, r5
 8000716:	f852 3b04 	ldr.w	r3, [r2], #4
}
 800071a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 800071e:	f7ff bf8f 	b.w	8000640 <usbStartTransmitI>
  if (obqIsEmptyI(obqp)) {
 8000722:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8000724:	2c00      	cmp	r4, #0
 8000726:	d0f5      	beq.n	8000714 <obnotify.lto_priv.0+0x34>
 8000728:	e7f7      	b.n	800071a <obnotify.lto_priv.0+0x3a>
 800072a:	bf00      	nop
 800072c:	0000      	movs	r0, r0
	...

08000730 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8000730:	b538      	push	{r3, r4, r5, lr}
 8000732:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8000736:	4604      	mov	r4, r0
 8000738:	2b15      	cmp	r3, #21
 800073a:	d82a      	bhi.n	8000792 <_usb_ep0out+0x62>
 800073c:	e8df f003 	tbb	[pc, r3]
 8000740:	2929290b 	.word	0x2929290b
 8000744:	290b2929 	.word	0x290b2929
 8000748:	0b0b0b29 	.word	0x0b0b0b29
 800074c:	29292929 	.word	0x29292929
 8000750:	29292929 	.word	0x29292929
 8000754:	2a38      	.short	0x2a38
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000756:	f248 0080 	movw	r0, #32896	; 0x8080
 800075a:	491b      	ldr	r1, [pc, #108]	; (80007c8 <_usb_ep0out+0x98>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800075c:	6863      	ldr	r3, [r4, #4]
 800075e:	680a      	ldr	r2, [r1, #0]
 8000760:	681d      	ldr	r5, [r3, #0]
 8000762:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800076a:	f082 0210 	eor.w	r2, r2, #16
 800076e:	4302      	orrs	r2, r0
 8000770:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000772:	680b      	ldr	r3, [r1, #0]
 8000774:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800077c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000780:	4303      	orrs	r3, r0
 8000782:	600b      	str	r3, [r1, #0]
 8000784:	b115      	cbz	r5, 800078c <_usb_ep0out+0x5c>
 8000786:	2106      	movs	r1, #6
 8000788:	4620      	mov	r0, r4
 800078a:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 800078c:	2306      	movs	r3, #6
 800078e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8000792:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8000794:	220b      	movs	r2, #11
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000796:	2320      	movs	r3, #32
 8000798:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 800079c:	f383 8811 	msr	BASEPRI, r3
    usbStartTransmitI(usbp, 0, NULL, 0);
 80007a0:	2300      	movs	r3, #0
 80007a2:	461a      	mov	r2, r3
 80007a4:	4619      	mov	r1, r3
 80007a6:	f7ff ff4b 	bl	8000640 <usbStartTransmitI>
 80007aa:	f381 8811 	msr	BASEPRI, r1
}
 80007ae:	bd38      	pop	{r3, r4, r5, pc}
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 80007b0:	68c3      	ldr	r3, [r0, #12]
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1eb      	bne.n	8000792 <_usb_ep0out+0x62>
    if (usbp->ep0endcb != NULL) {
 80007ba:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80007bc:	b103      	cbz	r3, 80007c0 <_usb_ep0out+0x90>
      usbp->ep0endcb(usbp);
 80007be:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 80007c6:	bd38      	pop	{r3, r4, r5, pc}
 80007c8:	40005c00 	.word	0x40005c00
 80007cc:	00000000 	.word	0x00000000

080007d0 <sdc_lld_collect_errors>:
 * @notapi
 */
static void sdc_lld_collect_errors(SDCDriver *sdcp, uint32_t sta) {
  uint32_t errors = SDC_NO_ERROR;

  if (sta & SDIO_STA_CCRCFAIL)
 80007d0:	f001 0301 	and.w	r3, r1, #1
    errors |= SDC_CMD_CRC_ERROR;
  if (sta & SDIO_STA_DCRCFAIL)
 80007d4:	078a      	lsls	r2, r1, #30
    errors |= SDC_DATA_CRC_ERROR;
 80007d6:	bf48      	it	mi
 80007d8:	f043 0302 	orrmi.w	r3, r3, #2
  if (sta & SDIO_STA_CTIMEOUT)
 80007dc:	074a      	lsls	r2, r1, #29
    errors |= SDC_COMMAND_TIMEOUT;
 80007de:	bf48      	it	mi
 80007e0:	f043 0308 	orrmi.w	r3, r3, #8
  if (sta & SDIO_STA_DTIMEOUT)
 80007e4:	070a      	lsls	r2, r1, #28
    errors |= SDC_DATA_TIMEOUT;
 80007e6:	bf48      	it	mi
 80007e8:	f043 0304 	orrmi.w	r3, r3, #4
  if (sta & SDIO_STA_TXUNDERR)
 80007ec:	06ca      	lsls	r2, r1, #27
    errors |= SDC_TX_UNDERRUN;
 80007ee:	bf48      	it	mi
 80007f0:	f043 0310 	orrmi.w	r3, r3, #16
  if (sta & SDIO_STA_RXOVERR)
 80007f4:	068a      	lsls	r2, r1, #26
    errors |= SDC_RX_OVERRUN;
 80007f6:	bf48      	it	mi
 80007f8:	f043 0320 	orrmi.w	r3, r3, #32
  if (sta & SDIO_STA_STBITERR)
 80007fc:	058a      	lsls	r2, r1, #22
    errors |= SDC_STARTBIT_ERROR;

  sdcp->errors |= errors;
 80007fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
    errors |= SDC_STARTBIT_ERROR;
 8000800:	bf48      	it	mi
 8000802:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
  sdcp->errors |= errors;
 8000806:	4313      	orrs	r3, r2
 8000808:	6343      	str	r3, [r0, #52]	; 0x34
}
 800080a:	4770      	bx	lr
 800080c:	0000      	movs	r0, r0
	...

08000810 <sdc_lld_error_cleanup>:
 *
 * @notapi
 */
static void sdc_lld_error_cleanup(SDCDriver *sdcp,
                                  uint32_t n,
                                  uint32_t *resp) {
 8000810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t sta = sdcp->sdio->STA;

  dmaStreamClearInterrupt(sdcp->dma);
 8000814:	250e      	movs	r5, #14
  dmaStreamDisable(sdcp->dma);
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
  sdcp->sdio->MASK  = 0;
 8000816:	f04f 0800 	mov.w	r8, #0
                                  uint32_t *resp) {
 800081a:	460f      	mov	r7, r1
 800081c:	4616      	mov	r6, r2
  dmaStreamClearInterrupt(sdcp->dma);
 800081e:	e9d0 2311 	ldrd	r2, r3, [r0, #68]	; 0x44
 8000822:	f892 c00d 	ldrb.w	ip, [r2, #13]
  uint32_t sta = sdcp->sdio->STA;
 8000826:	6b59      	ldr	r1, [r3, #52]	; 0x34
  dmaStreamClearInterrupt(sdcp->dma);
 8000828:	fa05 f50c 	lsl.w	r5, r5, ip
  dmaStreamDisable(sdcp->dma);
 800082c:	e9d2 c900 	ldrd	ip, r9, [r2]
  dmaStreamClearInterrupt(sdcp->dma);
 8000830:	f8cc 5004 	str.w	r5, [ip, #4]
  dmaStreamDisable(sdcp->dma);
 8000834:	f8d9 2000 	ldr.w	r2, [r9]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8000838:	f8df e054 	ldr.w	lr, [pc, #84]	; 8000890 <sdc_lld_error_cleanup+0x80>
  dmaStreamDisable(sdcp->dma);
 800083c:	f022 020f 	bic.w	r2, r2, #15
 8000840:	f8c9 2000 	str.w	r2, [r9]
 8000844:	f8cc 5004 	str.w	r5, [ip, #4]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8000848:	f8c3 e038 	str.w	lr, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = 0;
 800084c:	f8c3 803c 	str.w	r8, [r3, #60]	; 0x3c
  sdcp->sdio->DCTRL = 0;
 8000850:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
  sdc_lld_collect_errors(sdcp, sta);
 8000854:	f7ff ffbc 	bl	80007d0 <sdc_lld_collect_errors>
  if (n > 1)
 8000858:	2f01      	cmp	r7, #1
 800085a:	d801      	bhi.n	8000860 <sdc_lld_error_cleanup+0x50>
    sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
}
 800085c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
bool sdc_lld_send_cmd_short_crc(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                                uint32_t *resp) {
  uint32_t sta;

  sdcp->sdio->ARG = arg;
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8000860:	f240 424c 	movw	r2, #1100	; 0x44c
 8000864:	4604      	mov	r4, r0
  sdcp->sdio->ARG = arg;
 8000866:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000868:	f8c3 8008 	str.w	r8, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 800086c:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800086e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000870:	f011 0045 	ands.w	r0, r1, #69	; 0x45
 8000874:	d0fb      	beq.n	800086e <sdc_lld_error_cleanup+0x5e>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8000876:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 800087a:	6398      	str	r0, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 800087c:	d103      	bne.n	8000886 <sdc_lld_error_cleanup+0x76>
    sdc_lld_collect_errors(sdcp, sta);
    return HAL_FAILED;
  }
  *resp = sdcp->sdio->RESP1;
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	6033      	str	r3, [r6, #0]
}
 8000882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    sdc_lld_collect_errors(sdcp, sta);
 8000886:	4620      	mov	r0, r4
}
 8000888:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    sdc_lld_collect_errors(sdcp, sta);
 800088c:	f7ff bfa0 	b.w	80007d0 <sdc_lld_collect_errors>
 8000890:	00c007ff 	.word	0x00c007ff
	...

080008a0 <sdc_lld_is_card_inserted>:
#if HAL_USE_SDC
/* Board-related functions related to the SDC driver.*/
bool sdc_lld_is_card_inserted(SDCDriver *sdcp) {

  (void)sdcp;
  return !palReadPad(GPIOF, GPIOF_SD_DETECT);
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <sdc_lld_is_card_inserted+0x10>)
 80008a2:	6898      	ldr	r0, [r3, #8]
 80008a4:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
}
 80008a8:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40011c00 	.word	0x40011c00
	...

080008c0 <__idle_thread.lto_priv.0>:
__STATIC_FORCEINLINE void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 80008c0:	e7fe      	b.n	80008c0 <__idle_thread.lto_priv.0>
 80008c2:	bf00      	nop
	...

080008d0 <chCoreAllocFromTop>:
 80008d0:	2320      	movs	r3, #32
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80008d2:	b410      	push	{r4}
 80008d4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <chCoreAllocFromTop+0x38>)
 80008da:	4249      	negs	r1, r1
 80008dc:	685c      	ldr	r4, [r3, #4]
 80008de:	1a20      	subs	r0, r4, r0
 80008e0:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80008e2:	6819      	ldr	r1, [r3, #0]
  prev = p - offset;
 80008e4:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80008e6:	428a      	cmp	r2, r1
 80008e8:	d307      	bcc.n	80008fa <chCoreAllocFromTop+0x2a>
 80008ea:	4294      	cmp	r4, r2
 80008ec:	d305      	bcc.n	80008fa <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	2300      	movs	r3, #0
 80008f2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 80008f6:	bc10      	pop	{r4}
 80008f8:	4770      	bx	lr
    return NULL;
 80008fa:	2000      	movs	r0, #0
 80008fc:	2300      	movs	r3, #0
 80008fe:	f383 8811 	msr	BASEPRI, r3
}
 8000902:	bc10      	pop	{r4}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20001120 	.word	0x20001120
 800090c:	00000000 	.word	0x00000000

08000910 <__ch_delegate_fn0>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn0(va_list *argsp) {
  delegate_fn0_t fn0 = (delegate_fn0_t)va_arg(*argsp, delegate_fn0_t);
 8000910:	6803      	ldr	r3, [r0, #0]
 8000912:	1d1a      	adds	r2, r3, #4
 8000914:	6002      	str	r2, [r0, #0]
  return fn0();
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4718      	bx	r3
 800091a:	bf00      	nop
 800091c:	0000      	movs	r0, r0
	...

08000920 <__ch_delegate_fn1>:
 * @brief   Veneer for functions with one parameter.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000920:	4602      	mov	r2, r0
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000922:	6803      	ldr	r3, [r0, #0]
 8000924:	1d19      	adds	r1, r3, #4
 8000926:	6001      	str	r1, [r0, #0]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  return fn1(p1);
 8000928:	6858      	ldr	r0, [r3, #4]
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 800092a:	f853 1b08 	ldr.w	r1, [r3], #8
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 800092e:	6013      	str	r3, [r2, #0]
  return fn1(p1);
 8000930:	4708      	bx	r1
 8000932:	bf00      	nop
	...

08000940 <__ch_delegate_fn2>:
 * @brief   Veneer for functions with two parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn2(va_list *argsp) {
 8000940:	4603      	mov	r3, r0
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000942:	6802      	ldr	r2, [r0, #0]
msg_t __ch_delegate_fn2(va_list *argsp) {
 8000944:	b430      	push	{r4, r5}
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000946:	1d11      	adds	r1, r2, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8000948:	6850      	ldr	r0, [r2, #4]
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 800094a:	6019      	str	r1, [r3, #0]
 800094c:	6814      	ldr	r4, [r2, #0]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 800094e:	f102 050c 	add.w	r5, r2, #12
  return fn2(p1, p2);
 8000952:	6891      	ldr	r1, [r2, #8]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000954:	601d      	str	r5, [r3, #0]
  return fn2(p1, p2);
 8000956:	4623      	mov	r3, r4
}
 8000958:	bc30      	pop	{r4, r5}
  return fn2(p1, p2);
 800095a:	4718      	bx	r3
 800095c:	0000      	movs	r0, r0
	...

08000960 <__ch_delegate_fn3>:
 * @brief   Veneer for functions with three parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn3(va_list *argsp) {
 8000960:	4602      	mov	r2, r0
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 8000962:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn3(va_list *argsp) {
 8000964:	b430      	push	{r4, r5}
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000966:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 800096a:	1d1c      	adds	r4, r3, #4
 800096c:	6014      	str	r4, [r2, #0]
 800096e:	681c      	ldr	r4, [r3, #0]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 8000970:	f103 0510 	add.w	r5, r3, #16
 8000974:	6015      	str	r5, [r2, #0]
  return fn3(p1, p2, p3);
 8000976:	68da      	ldr	r2, [r3, #12]
 8000978:	4623      	mov	r3, r4
}
 800097a:	bc30      	pop	{r4, r5}
  return fn3(p1, p2, p3);
 800097c:	4718      	bx	r3
 800097e:	bf00      	nop

08000980 <__ch_delegate_fn4>:
 * @brief   Veneer for functions with four parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn4(va_list *argsp) {
 8000980:	4684      	mov	ip, r0
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 8000982:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn4(va_list *argsp) {
 8000984:	b430      	push	{r4, r5}
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000986:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 800098a:	1d1c      	adds	r4, r3, #4
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 800098c:	68da      	ldr	r2, [r3, #12]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 800098e:	f8cc 4000 	str.w	r4, [ip]
 8000992:	681c      	ldr	r4, [r3, #0]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 8000994:	f103 0514 	add.w	r5, r3, #20
 8000998:	f8cc 5000 	str.w	r5, [ip]
  return fn4(p1, p2, p3, p4);
 800099c:	691b      	ldr	r3, [r3, #16]
 800099e:	46a4      	mov	ip, r4
}
 80009a0:	bc30      	pop	{r4, r5}
  return fn4(p1, p2, p3, p4);
 80009a2:	4760      	bx	ip
	...

080009b0 <chCoreAllocAlignedI.lto_priv.0>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <chCoreAllocAlignedI.lto_priv.0+0x1c>)
 80009b2:	4249      	negs	r1, r1
 80009b4:	685a      	ldr	r2, [r3, #4]
 80009b6:	1a10      	subs	r0, r2, r0
 80009b8:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80009ba:	6819      	ldr	r1, [r3, #0]
 80009bc:	4288      	cmp	r0, r1
 80009be:	d303      	bcc.n	80009c8 <chCoreAllocAlignedI.lto_priv.0+0x18>
 80009c0:	4282      	cmp	r2, r0
 80009c2:	d301      	bcc.n	80009c8 <chCoreAllocAlignedI.lto_priv.0+0x18>
  ch_memcore.topmem = prev;
 80009c4:	6058      	str	r0, [r3, #4]
  return p;
 80009c6:	4770      	bx	lr
    return NULL;
 80009c8:	2000      	movs	r0, #0
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80009ca:	4770      	bx	lr
 80009cc:	20001120 	.word	0x20001120

080009d0 <get_descriptor.lto_priv.0>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 80009d0:	2902      	cmp	r1, #2
 80009d2:	d006      	beq.n	80009e2 <get_descriptor.lto_priv.0+0x12>
 80009d4:	2903      	cmp	r1, #3
 80009d6:	d006      	beq.n	80009e6 <get_descriptor.lto_priv.0+0x16>
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
 80009d8:	2901      	cmp	r1, #1
 80009da:	4807      	ldr	r0, [pc, #28]	; (80009f8 <get_descriptor.lto_priv.0+0x28>)
 80009dc:	bf18      	it	ne
 80009de:	2000      	movne	r0, #0
 80009e0:	4770      	bx	lr
  switch (dtype) {
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <get_descriptor.lto_priv.0+0x2c>)
 80009e4:	4770      	bx	lr
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 80009e6:	2a03      	cmp	r2, #3
 80009e8:	d803      	bhi.n	80009f2 <get_descriptor.lto_priv.0+0x22>
      return &vcom_strings[dindex];
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <get_descriptor.lto_priv.0+0x30>)
 80009ec:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 80009f0:	4770      	bx	lr
  }
  return NULL;
 80009f2:	2000      	movs	r0, #0
}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	08012400 	.word	0x08012400
 80009fc:	080123b4 	.word	0x080123b4
 8000a00:	08012488 	.word	0x08012488
	...

08000a10 <sof_handler.lto_priv.0>:
 8000a10:	2220      	movs	r2, #32
 8000a12:	f382 8811 	msr	BASEPRI, r2
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000a16:	4a25      	ldr	r2, [pc, #148]	; (8000aac <sof_handler.lto_priv.0+0x9c>)
 8000a18:	f8d2 148c 	ldr.w	r1, [r2, #1164]	; 0x48c
 8000a1c:	6808      	ldr	r0, [r1, #0]
 8000a1e:	f890 c000 	ldrb.w	ip, [r0]
 8000a22:	f1bc 0f04 	cmp.w	ip, #4
 8000a26:	d104      	bne.n	8000a32 <sof_handler.lto_priv.0+0x22>
 8000a28:	f892 c008 	ldrb.w	ip, [r2, #8]
 8000a2c:	f1bc 0f02 	cmp.w	ip, #2
 8000a30:	d003      	beq.n	8000a3a <sof_handler.lto_priv.0+0x2a>
 8000a32:	2300      	movs	r3, #0
 8000a34:	f383 8811 	msr	BASEPRI, r3
 8000a38:	4770      	bx	lr
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8000a3a:	f04f 0c01 	mov.w	ip, #1
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8000a3e:	b570      	push	{r4, r5, r6, lr}
 8000a40:	7909      	ldrb	r1, [r1, #4]
 8000a42:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8000a46:	fa0c fc01 	lsl.w	ip, ip, r1
 8000a4a:	ea1c 0f0e 	tst.w	ip, lr
 8000a4e:	d003      	beq.n	8000a58 <sof_handler.lto_priv.0+0x48>
 8000a50:	2300      	movs	r3, #0
 8000a52:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
  osalSysUnlockFromISR();
}
 8000a56:	bd70      	pop	{r4, r5, r6, pc}

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8000a58:	e9d2 5415 	ldrd	r5, r4, [r2, #84]	; 0x54
 8000a5c:	42a5      	cmp	r5, r4
 8000a5e:	d1f7      	bne.n	8000a50 <sof_handler.lto_priv.0+0x40>
 8000a60:	6d15      	ldr	r5, [r2, #80]	; 0x50
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d0f4      	beq.n	8000a50 <sof_handler.lto_priv.0+0x40>
 8000a66:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d0f1      	beq.n	8000a50 <sof_handler.lto_priv.0+0x40>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8000a6c:	3d04      	subs	r5, #4

    if (size > 0U) {
 8000a6e:	1b2d      	subs	r5, r5, r4
 8000a70:	d0ee      	beq.n	8000a50 <sof_handler.lto_priv.0+0x40>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8000a72:	6025      	str	r5, [r4, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8000a74:	6d15      	ldr	r5, [r2, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
 8000a76:	6e16      	ldr	r6, [r2, #96]	; 0x60
      obqp->bcounter--;
 8000a78:	3d01      	subs	r5, #1
 8000a7a:	6515      	str	r5, [r2, #80]	; 0x50
      if (obqp->bwrptr >= obqp->btop) {
 8000a7c:	6dd5      	ldr	r5, [r2, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 8000a7e:	4426      	add	r6, r4
      if (obqp->bwrptr >= obqp->btop) {
 8000a80:	42ae      	cmp	r6, r5
        obqp->bwrptr = obqp->buffers;
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8000a82:	f04f 0500 	mov.w	r5, #0
      obqp->bwrptr += obqp->bsize;
 8000a86:	6556      	str	r6, [r2, #84]	; 0x54
        obqp->bwrptr = obqp->buffers;
 8000a88:	bf28      	it	cs
 8000a8a:	6e96      	ldrcs	r6, [r2, #104]	; 0x68
      obqp->ptr = NULL;
 8000a8c:	66d5      	str	r5, [r2, #108]	; 0x6c
        obqp->bwrptr = obqp->buffers;
 8000a8e:	bf28      	it	cs
 8000a90:	6556      	strcs	r6, [r2, #84]	; 0x54
  if (obqIsEmptyI(obqp)) {
 8000a92:	42b4      	cmp	r4, r6
 8000a94:	d005      	beq.n	8000aa2 <sof_handler.lto_priv.0+0x92>
  *sizep = *((size_t *)obqp->brdptr);
 8000a96:	4622      	mov	r2, r4
 8000a98:	f852 3b04 	ldr.w	r3, [r2], #4
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8000a9c:	f7ff fdd0 	bl	8000640 <usbStartTransmitI>
 8000aa0:	e7d6      	b.n	8000a50 <sof_handler.lto_priv.0+0x40>
  if (obqIsEmptyI(obqp)) {
 8000aa2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	d0f6      	beq.n	8000a96 <sof_handler.lto_priv.0+0x86>
    return NULL;
 8000aa8:	462a      	mov	r2, r5
 8000aaa:	e7f7      	b.n	8000a9c <sof_handler.lto_priv.0+0x8c>
 8000aac:	20000b34 	.word	0x20000b34

08000ab0 <test_stream_putchar>:
/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

#if (TEST_CFG_CHIBIOS_SUPPORT == TRUE) || defined(__DOXYGEN__)
static int test_stream_putchar(int c) {
 8000ab0:	b510      	push	{r4, lr}
 8000ab2:	4604      	mov	r4, r0

  streamPut(chtest.stream, (uint8_t)c);
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <test_stream_putchar+0x14>)
 8000ab6:	b2e1      	uxtb	r1, r4
 8000ab8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000aba:	6803      	ldr	r3, [r0, #0]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	4798      	blx	r3

  return c;
}
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	bd10      	pop	{r4, pc}
 8000ac4:	20001134 	.word	0x20001134
	...

08000ad0 <rt_test_002_001_execute>:

static void rt_test_002_001_execute(void) {
  bool result;

  /* [2.1.1] Testing Ready List integrity.*/
  test_set_step(1);
 8000ad0:	2201      	movs	r2, #1
static void rt_test_002_001_execute(void) {
 8000ad2:	b410      	push	{r4}
  test_set_step(1);
 8000ad4:	4c3e      	ldr	r4, [pc, #248]	; (8000bd0 <rt_test_002_001_execute+0x100>)
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	6022      	str	r2, [r4, #0]
 8000ada:	f383 8811 	msr	BASEPRI, r3
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    ch_priority_queue_t *pqp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    pqp = oip->rlist.pqueue.next;
 8000ade:	493d      	ldr	r1, [pc, #244]	; (8000bd4 <rt_test_002_001_execute+0x104>)
 8000ae0:	680a      	ldr	r2, [r1, #0]
    while (pqp != &oip->rlist.pqueue) {
 8000ae2:	428a      	cmp	r2, r1
 8000ae4:	d05d      	beq.n	8000ba2 <rt_test_002_001_execute+0xd2>
    n = (cnt_t)0;
 8000ae6:	2300      	movs	r3, #0
      n++;
      pqp = pqp->next;
 8000ae8:	6812      	ldr	r2, [r2, #0]
      n++;
 8000aea:	3301      	adds	r3, #1
    while (pqp != &oip->rlist.pqueue) {
 8000aec:	428a      	cmp	r2, r1
 8000aee:	d1fb      	bne.n	8000ae8 <rt_test_002_001_execute+0x18>
    }

    /* Scanning the ready list backward.*/
    pqp = oip->rlist.pqueue.prev;
 8000af0:	684a      	ldr	r2, [r1, #4]
    while (pqp != &oip->rlist.pqueue) {
 8000af2:	428a      	cmp	r2, r1
 8000af4:	d041      	beq.n	8000b7a <rt_test_002_001_execute+0xaa>
      n--;
      pqp = pqp->prev;
 8000af6:	6852      	ldr	r2, [r2, #4]
      n--;
 8000af8:	3b01      	subs	r3, #1
    while (pqp != &oip->rlist.pqueue) {
 8000afa:	428a      	cmp	r2, r1
 8000afc:	d1fb      	bne.n	8000af6 <rt_test_002_001_execute+0x26>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d13b      	bne.n	8000b7a <rt_test_002_001_execute+0xaa>
 8000b02:	2300      	movs	r3, #0
 8000b04:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
  }
  test_end_step(1);

  /* [2.1.2] Testing Virtual Timers List integrity.*/
  test_set_step(2);
 8000b08:	2002      	movs	r0, #2
 8000b0a:	2220      	movs	r2, #32
 8000b0c:	6020      	str	r0, [r4, #0]
 8000b0e:	f382 8811 	msr	BASEPRI, r2
    ch_delta_list_t *dlp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    dlp = oip->vtlist.dlist.next;
    while (dlp != &oip->vtlist.dlist) {
 8000b12:	4831      	ldr	r0, [pc, #196]	; (8000bd8 <rt_test_002_001_execute+0x108>)
    dlp = oip->vtlist.dlist.next;
 8000b14:	690a      	ldr	r2, [r1, #16]
    while (dlp != &oip->vtlist.dlist) {
 8000b16:	4282      	cmp	r2, r0
 8000b18:	d049      	beq.n	8000bae <rt_test_002_001_execute+0xde>
      n++;
      dlp = dlp->next;
 8000b1a:	6812      	ldr	r2, [r2, #0]
      n++;
 8000b1c:	3301      	adds	r3, #1
    while (dlp != &oip->vtlist.dlist) {
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	d1fb      	bne.n	8000b1a <rt_test_002_001_execute+0x4a>
    }

    /* Scanning the timers list backward.*/
    dlp = oip->vtlist.dlist.prev;
 8000b22:	694a      	ldr	r2, [r1, #20]
    while (dlp != &oip->vtlist.dlist) {
 8000b24:	4282      	cmp	r2, r0
 8000b26:	d032      	beq.n	8000b8e <rt_test_002_001_execute+0xbe>
      n--;
      dlp = dlp->prev;
 8000b28:	6852      	ldr	r2, [r2, #4]
      n--;
 8000b2a:	3b01      	subs	r3, #1
    while (dlp != &oip->vtlist.dlist) {
 8000b2c:	4282      	cmp	r2, r0
 8000b2e:	d1fb      	bne.n	8000b28 <rt_test_002_001_execute+0x58>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000b30:	bb6b      	cbnz	r3, 8000b8e <rt_test_002_001_execute+0xbe>
 8000b32:	2300      	movs	r3, #0
 8000b34:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "virtual timers list check failed");
  }
  test_end_step(2);

  /* [2.1.3] Testing Registry List integrity.*/
  test_set_step(3);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	6020      	str	r0, [r4, #0]
 8000b3e:	f382 8811 	msr	BASEPRI, r2
    rqp = REG_HEADER(oip);

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    qp = rqp->next;
    while (qp != rqp) {
 8000b42:	4826      	ldr	r0, [pc, #152]	; (8000bdc <rt_test_002_001_execute+0x10c>)
    qp = rqp->next;
 8000b44:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    while (qp != rqp) {
 8000b46:	4282      	cmp	r2, r0
 8000b48:	d03e      	beq.n	8000bc8 <rt_test_002_001_execute+0xf8>
      n++;
      qp = qp->next;
 8000b4a:	6812      	ldr	r2, [r2, #0]
      n++;
 8000b4c:	3301      	adds	r3, #1
    while (qp != rqp) {
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	d1fb      	bne.n	8000b4a <rt_test_002_001_execute+0x7a>
    }

    /* Scanning the ready list backward.*/
    qp = rqp->prev;
 8000b52:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    while (qp != rqp) {
 8000b54:	4282      	cmp	r2, r0
 8000b56:	d02e      	beq.n	8000bb6 <rt_test_002_001_execute+0xe6>
      n--;
      qp = qp->prev;
 8000b58:	6852      	ldr	r2, [r2, #4]
      n--;
 8000b5a:	3b01      	subs	r3, #1
    while (qp != rqp) {
 8000b5c:	4282      	cmp	r2, r0
 8000b5e:	d1fb      	bne.n	8000b58 <rt_test_002_001_execute+0x88>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000b60:	bb4b      	cbnz	r3, 8000bb6 <rt_test_002_001_execute+0xe6>
 8000b62:	2300      	movs	r3, #0
 8000b64:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "registry list check failed");
  }
  test_end_step(3);

  /* [2.1.4] Testing Port-defined integrity.*/
  test_set_step(4);
 8000b68:	2104      	movs	r1, #4
 8000b6a:	2220      	movs	r2, #32
 8000b6c:	6021      	str	r1, [r4, #0]
 8000b6e:	f382 8811 	msr	BASEPRI, r2
 8000b72:	f383 8811 	msr	BASEPRI, r3
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
    chSysUnlock();
    test_assert(result == false, "port layer check failed");
  }
  test_end_step(4);
}
 8000b76:	bc10      	pop	{r4}
 8000b78:	4770      	bx	lr
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f383 8811 	msr	BASEPRI, r3
/*===========================================================================*/

bool __test_fail(const char *msg) {

  chtest.local_fail      = true;
  chtest.global_fail     = true;
 8000b80:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8000b84:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <rt_test_002_001_execute+0x110>)
  chtest.global_fail     = true;
 8000b86:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8000b88:	60a2      	str	r2, [r4, #8]
 8000b8a:	bc10      	pop	{r4}
 8000b8c:	4770      	bx	lr
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 8000b94:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8000b98:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <rt_test_002_001_execute+0x114>)
  chtest.global_fail     = true;
 8000b9a:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8000b9c:	60a2      	str	r2, [r4, #8]
 8000b9e:	bc10      	pop	{r4}
 8000ba0:	4770      	bx	lr
    pqp = oip->rlist.pqueue.prev;
 8000ba2:	684a      	ldr	r2, [r1, #4]
    while (pqp != &oip->rlist.pqueue) {
 8000ba4:	428a      	cmp	r2, r1
    n = (cnt_t)0;
 8000ba6:	bf18      	it	ne
 8000ba8:	2300      	movne	r3, #0
    while (pqp != &oip->rlist.pqueue) {
 8000baa:	d1a4      	bne.n	8000af6 <rt_test_002_001_execute+0x26>
 8000bac:	e7a9      	b.n	8000b02 <rt_test_002_001_execute+0x32>
    dlp = oip->vtlist.dlist.prev;
 8000bae:	694a      	ldr	r2, [r1, #20]
    while (dlp != &oip->vtlist.dlist) {
 8000bb0:	4282      	cmp	r2, r0
 8000bb2:	d1b9      	bne.n	8000b28 <rt_test_002_001_execute+0x58>
 8000bb4:	e7bd      	b.n	8000b32 <rt_test_002_001_execute+0x62>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 8000bbc:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8000bc0:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <rt_test_002_001_execute+0x118>)
  chtest.global_fail     = true;
 8000bc2:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8000bc4:	60a2      	str	r2, [r4, #8]
 8000bc6:	e7e0      	b.n	8000b8a <rt_test_002_001_execute+0xba>
    qp = rqp->prev;
 8000bc8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    while (qp != rqp) {
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	d1c4      	bne.n	8000b58 <rt_test_002_001_execute+0x88>
 8000bce:	e7c8      	b.n	8000b62 <rt_test_002_001_execute+0x92>
 8000bd0:	20001134 	.word	0x20001134
 8000bd4:	20001050 	.word	0x20001050
 8000bd8:	20001060 	.word	0x20001060
 8000bdc:	20001078 	.word	0x20001078
 8000be0:	0800fe90 	.word	0x0800fe90
 8000be4:	0800fea8 	.word	0x0800fea8
 8000be8:	0800fecc 	.word	0x0800fecc
 8000bec:	00000000 	.word	0x00000000

08000bf0 <rt_test_002_003_execute>:

static void rt_test_002_003_execute(void) {

  /* [2.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <rt_test_002_003_execute+0x20>)
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	6011      	str	r1, [r2, #0]
 8000bf8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000bfc:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfe:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000c00:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000c04:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000c06:	2300      	movs	r3, #0
 8000c08:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000c0c:	b662      	cpsie	i
    chSysDisable();
    chSysSuspend();
    chSysEnable();
  }
  test_end_step(1);
}
 8000c0e:	4770      	bx	lr
 8000c10:	20001134 	.word	0x20001134
	...

08000c20 <rt_test_003_001_execute>:

static void rt_test_003_001_execute(void) {

  /* [3.1.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 8000c20:	2201      	movs	r2, #1
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000c22:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <rt_test_003_001_execute+0x18>)
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000c2c:	b292      	uxth	r2, r2
 8000c2e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d0fb      	beq.n	8000c2e <rt_test_003_001_execute+0xe>
        _sim_check_for_interrupts();
#endif
    }
  }
  test_end_step(1);
}
 8000c36:	4770      	bx	lr
 8000c38:	20001134 	.word	0x20001134
 8000c3c:	00000000 	.word	0x00000000

08000c40 <rt_test_003_002_execute>:
    test_assert(b == false, "in range");
  }
  test_end_step(2);

  /* [3.2.3] Checking boundaries for start > end.*/
  test_set_step(3);
 8000c40:	2203      	movs	r2, #3
 8000c42:	4b01      	ldr	r3, [pc, #4]	; (8000c48 <rt_test_003_002_execute+0x8>)
 8000c44:	601a      	str	r2, [r3, #0]
    test_assert(b == true, "not in range");
    b = chTimeIsInRangeX((systime_t)10, (systime_t)100, (systime_t)10);
    test_assert(b == false, "in range");
  }
  test_end_step(3);
}
 8000c46:	4770      	bx	lr
 8000c48:	20001134 	.word	0x20001134
 8000c4c:	00000000 	.word	0x00000000

08000c50 <thread>:
 *
 * @api
 */
void test_emit_token(char token) {

  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <thread+0x18>)
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	f103 0120 	add.w	r1, r3, #32
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	d203      	bcs.n	8000c64 <thread+0x14>
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8000c5c:	7801      	ldrb	r1, [r0, #0]
    *chtest.tokp++ = token;
 8000c5e:	1c50      	adds	r0, r2, #1
 8000c60:	60d8      	str	r0, [r3, #12]
 8000c62:	7011      	strb	r1, [r2, #0]
}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20001134 	.word	0x20001134
 8000c6c:	00000000 	.word	0x00000000

08000c70 <rt_test_006_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_006_001_setup(void) {
  tr1 = NULL;
 8000c70:	2200      	movs	r2, #0
 8000c72:	4b01      	ldr	r3, [pc, #4]	; (8000c78 <rt_test_006_001_setup+0x8>)
 8000c74:	601a      	str	r2, [r3, #0]
}
 8000c76:	4770      	bx	lr
 8000c78:	200019b4 	.word	0x200019b4
 8000c7c:	00000000 	.word	0x00000000

08000c80 <rt_test_007_001_setup>:
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  ch_queue_init(&sp->queue);
  sp->cnt = n;
 8000c80:	2201      	movs	r2, #1
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 8000c82:	4b02      	ldr	r3, [pc, #8]	; (8000c8c <rt_test_007_001_setup+0xc>)
  qp->prev = qp;
 8000c84:	e9c3 3300 	strd	r3, r3, [r3]
 8000c88:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_007_001_setup(void) {
  chSemObjectInit(&sem1, 1);
}
 8000c8a:	4770      	bx	lr
 8000c8c:	20001254 	.word	0x20001254

08000c90 <rt_test_007_005_setup>:
 8000c90:	2200      	movs	r2, #0
  qp->next = qp;
 8000c92:	4b02      	ldr	r3, [pc, #8]	; (8000c9c <rt_test_007_005_setup+0xc>)
  qp->prev = qp;
 8000c94:	e9c3 3300 	strd	r3, r3, [r3]
 8000c98:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_007_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 8000c9a:	4770      	bx	lr
 8000c9c:	20001254 	.word	0x20001254

08000ca0 <rt_test_007_002_setup>:
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4b02      	ldr	r3, [pc, #8]	; (8000cac <rt_test_007_002_setup+0xc>)
 8000ca4:	e9c3 3300 	strd	r3, r3, [r3]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	4770      	bx	lr
 8000cac:	20001254 	.word	0x20001254

08000cb0 <rt_test_007_003_setup>:
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4b02      	ldr	r3, [pc, #8]	; (8000cbc <rt_test_007_003_setup+0xc>)
 8000cb4:	e9c3 3300 	strd	r3, r3, [r3]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	4770      	bx	lr
 8000cbc:	20001254 	.word	0x20001254

08000cc0 <rt_test_007_004_setup>:
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <rt_test_007_004_setup+0xc>)
 8000cc4:	e9c3 3300 	strd	r3, r3, [r3]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	4770      	bx	lr
 8000ccc:	20001254 	.word	0x20001254

08000cd0 <rt_test_008_005_setup>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8000cd0:	2200      	movs	r2, #0
  qp->next = qp;
 8000cd2:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <rt_test_008_005_setup+0xc>)
  qp->prev = qp;
 8000cd4:	e9c3 3300 	strd	r3, r3, [r3]
 8000cd8:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_008_005_setup(void) {
  chMtxObjectInit(&m1);
}
 8000cda:	4770      	bx	lr
 8000cdc:	20000818 	.word	0x20000818

08000ce0 <rt_test_008_001_setup>:
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4b02      	ldr	r3, [pc, #8]	; (8000cec <rt_test_008_001_setup+0xc>)
 8000ce4:	e9c3 3300 	strd	r3, r3, [r3]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	4770      	bx	lr
 8000cec:	20000818 	.word	0x20000818

08000cf0 <rt_test_008_004_setup>:
 8000cf0:	2100      	movs	r1, #0
  qp->next = qp;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <rt_test_008_004_setup+0x14>)
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <rt_test_008_004_setup+0x18>)
  qp->prev = qp;
 8000cf6:	e9c2 2200 	strd	r2, r2, [r2]
 8000cfa:	e9c3 3300 	strd	r3, r3, [r3]
 8000cfe:	6091      	str	r1, [r2, #8]
 8000d00:	6099      	str	r1, [r3, #8]
}
 8000d02:	4770      	bx	lr
 8000d04:	20000818 	.word	0x20000818
 8000d08:	20000828 	.word	0x20000828
 8000d0c:	00000000 	.word	0x00000000

08000d10 <rt_test_008_008_setup>:
 8000d10:	2100      	movs	r1, #0
  qp->next = qp;
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <rt_test_008_008_setup+0x14>)
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <rt_test_008_008_setup+0x18>)
 8000d16:	e9c3 3101 	strd	r3, r1, [r3, #4]
  qp->prev = qp;
 8000d1a:	e9c2 2200 	strd	r2, r2, [r2]
  qp->next = qp;
 8000d1e:	601b      	str	r3, [r3, #0]
 */

static void rt_test_008_008_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000818 	.word	0x20000818
 8000d28:	20000800 	.word	0x20000800
 8000d2c:	00000000 	.word	0x00000000

08000d30 <rt_test_008_007_setup>:
 8000d30:	2100      	movs	r1, #0
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <rt_test_008_007_setup+0x14>)
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <rt_test_008_007_setup+0x18>)
 8000d36:	e9c3 3101 	strd	r3, r1, [r3, #4]
 8000d3a:	e9c2 2200 	strd	r2, r2, [r2]
 8000d3e:	601b      	str	r3, [r3, #0]
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000818 	.word	0x20000818
 8000d48:	20000800 	.word	0x20000800
 8000d4c:	00000000 	.word	0x00000000

08000d50 <rt_test_008_009_setup>:
 8000d50:	2000      	movs	r0, #0
 8000d52:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <rt_test_008_009_setup+0x1c>)
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <rt_test_008_009_setup+0x20>)
 8000d56:	4907      	ldr	r1, [pc, #28]	; (8000d74 <rt_test_008_009_setup+0x24>)
  qp->prev = qp;
 8000d58:	e9c3 3300 	strd	r3, r3, [r3]
 8000d5c:	e9c1 1100 	strd	r1, r1, [r1]
  qp->next = qp;
 8000d60:	6012      	str	r2, [r2, #0]
  qp->prev = qp;
 8000d62:	6052      	str	r2, [r2, #4]
 8000d64:	6090      	str	r0, [r2, #8]
 8000d66:	6098      	str	r0, [r3, #8]

static void rt_test_008_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000818 	.word	0x20000818
 8000d70:	20000828 	.word	0x20000828
 8000d74:	20000800 	.word	0x20000800
	...

08000d80 <h1>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <h1+0x18>)
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	f103 0120 	add.w	r1, r3, #32
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	d203      	bcs.n	8000d94 <h1+0x14>
    *chtest.tokp++ = token;
 8000d8c:	2141      	movs	r1, #65	; 0x41
 8000d8e:	1c50      	adds	r0, r2, #1
 8000d90:	60d8      	str	r0, [r3, #12]
 8000d92:	7011      	strb	r1, [r2, #0]
 ****************************************************************************/

static EVENTSOURCE_DECL(es1);
static EVENTSOURCE_DECL(es2);

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20001134 	.word	0x20001134
 8000d9c:	00000000 	.word	0x00000000

08000da0 <h2>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <h2+0x18>)
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	f103 0120 	add.w	r1, r3, #32
 8000da8:	428a      	cmp	r2, r1
 8000daa:	d203      	bcs.n	8000db4 <h2+0x14>
    *chtest.tokp++ = token;
 8000dac:	2142      	movs	r1, #66	; 0x42
 8000dae:	1c50      	adds	r0, r2, #1
 8000db0:	60d8      	str	r0, [r3, #12]
 8000db2:	7011      	strb	r1, [r2, #0]
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20001134 	.word	0x20001134
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <h3>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <h3+0x18>)
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	f103 0120 	add.w	r1, r3, #32
 8000dc8:	428a      	cmp	r2, r1
 8000dca:	d203      	bcs.n	8000dd4 <h3+0x14>
    *chtest.tokp++ = token;
 8000dcc:	2143      	movs	r1, #67	; 0x43
 8000dce:	1c50      	adds	r0, r2, #1
 8000dd0:	60d8      	str	r0, [r3, #12]
 8000dd2:	7011      	strb	r1, [r2, #0]
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20001134 	.word	0x20001134
 8000ddc:	00000000 	.word	0x00000000

08000de0 <rt_test_010_001_execute>:
 * - [10.1.4] An Event Listener is unregistered, the Event Source must
 *   not have listeners.
 * .
 */

static void rt_test_010_001_execute(void) {
 8000de0:	b4f0      	push	{r4, r5, r6, r7}
  }
  test_end_step(1);

  /* [10.1.2] Two Event Listeners are registered on the Event Source,
     the Event Source is tested to have listeners.*/
  test_set_step(2);
 8000de2:	2702      	movs	r7, #2
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000de4:	4a38      	ldr	r2, [pc, #224]	; (8000ec8 <rt_test_010_001_execute+0xe8>)
 8000de6:	4c39      	ldr	r4, [pc, #228]	; (8000ecc <rt_test_010_001_execute+0xec>)
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000de8:	2020      	movs	r0, #32
static void rt_test_010_001_execute(void) {
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	6012      	str	r2, [r2, #0]
  test_set_step(2);
 8000dee:	6027      	str	r7, [r4, #0]
 8000df0:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currtp;
  elp->events   = events;
 8000df4:	2301      	movs	r3, #1
  elp->flags    = (eventflags_t)0;
  elp->wflags   = wflags;
 8000df6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  elp->events   = events;
 8000dfa:	9307      	str	r3, [sp, #28]
  elp->flags    = (eventflags_t)0;
 8000dfc:	2300      	movs	r3, #0
  elp->next     = esp->next;
 8000dfe:	6811      	ldr	r1, [r2, #0]
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
 8000e00:	4d33      	ldr	r5, [pc, #204]	; (8000ed0 <rt_test_010_001_execute+0xf0>)
 8000e02:	9105      	str	r1, [sp, #20]
 8000e04:	68e9      	ldr	r1, [r5, #12]
  elp->wflags   = wflags;
 8000e06:	e9cd 3608 	strd	r3, r6, [sp, #32]
  elp->listener = currtp;
 8000e0a:	9106      	str	r1, [sp, #24]
  esp->next     = elp;
 8000e0c:	a905      	add	r1, sp, #20
 8000e0e:	6011      	str	r1, [r2, #0]
 8000e10:	f383 8811 	msr	BASEPRI, r3
 8000e14:	f380 8811 	msr	BASEPRI, r0
 8000e18:	68ed      	ldr	r5, [r5, #12]
  elp->events   = events;
 8000e1a:	9702      	str	r7, [sp, #8]
  elp->listener = currtp;
 8000e1c:	9501      	str	r5, [sp, #4]
  elp->next     = esp->next;
 8000e1e:	6815      	ldr	r5, [r2, #0]
  elp->wflags   = wflags;
 8000e20:	9604      	str	r6, [sp, #16]
  elp->next     = esp->next;
 8000e22:	9500      	str	r5, [sp, #0]
  esp->next     = elp;
 8000e24:	466d      	mov	r5, sp
  elp->flags    = (eventflags_t)0;
 8000e26:	9303      	str	r3, [sp, #12]
  esp->next     = elp;
 8000e28:	6015      	str	r5, [r2, #0]
 8000e2a:	f383 8811 	msr	BASEPRI, r3
 8000e2e:	f380 8811 	msr	BASEPRI, r0
  if (!condition) {
 8000e32:	6816      	ldr	r6, [r2, #0]
 8000e34:	4296      	cmp	r6, r2
 8000e36:	d037      	beq.n	8000ea8 <rt_test_010_001_execute+0xc8>
 8000e38:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(2);

  /* [10.1.3] An Event Listener is unregistered, the Event Source must
     still have listeners.*/
  test_set_step(3);
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	6023      	str	r3, [r4, #0]
 8000e40:	f380 8811 	msr	BASEPRI, r0
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8000e44:	4613      	mov	r3, r2
static inline void chSysLock(void) {

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
}
 8000e46:	e001      	b.n	8000e4c <rt_test_010_001_execute+0x6c>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->next == elp) {
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d037      	beq.n	8000ebc <rt_test_010_001_execute+0xdc>
  while (p->next != (event_listener_t *)esp) {
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d1f9      	bne.n	8000e48 <rt_test_010_001_execute+0x68>
 8000e54:	2300      	movs	r3, #0
 8000e56:	f383 8811 	msr	BASEPRI, r3
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	f381 8811 	msr	BASEPRI, r1
 8000e60:	6810      	ldr	r0, [r2, #0]
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d020      	beq.n	8000ea8 <rt_test_010_001_execute+0xc8>
 8000e66:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(3);

  /* [10.1.4] An Event Listener is unregistered, the Event Source must
     not have listeners.*/
  test_set_step(4);
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	6023      	str	r3, [r4, #0]
 8000e6e:	f381 8811 	msr	BASEPRI, r1
  p = (event_listener_t *)esp;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <rt_test_010_001_execute+0xe8>)
 8000e74:	e001      	b.n	8000e7a <rt_test_010_001_execute+0x9a>
    if (p->next == elp) {
 8000e76:	42ab      	cmp	r3, r5
 8000e78:	d023      	beq.n	8000ec2 <rt_test_010_001_execute+0xe2>
  while (p->next != (event_listener_t *)esp) {
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d1f9      	bne.n	8000e76 <rt_test_010_001_execute+0x96>
 8000e82:	2300      	movs	r3, #0
 8000e84:	f383 8811 	msr	BASEPRI, r3
 8000e88:	2120      	movs	r1, #32
 8000e8a:	f381 8811 	msr	BASEPRI, r1
 8000e8e:	6811      	ldr	r1, [r2, #0]
 8000e90:	4291      	cmp	r1, r2
  chtest.global_fail     = true;
 8000e92:	bf1f      	itttt	ne
 8000e94:	f240 1201 	movwne	r2, #257	; 0x101
  chtest.failure_message = msg;
 8000e98:	490e      	ldrne	r1, [pc, #56]	; (8000ed4 <rt_test_010_001_execute+0xf4>)
  chtest.global_fail     = true;
 8000e9a:	80a2      	strhne	r2, [r4, #4]
  chtest.failure_message = msg;
 8000e9c:	60a1      	strne	r1, [r4, #8]
 8000e9e:	f383 8811 	msr	BASEPRI, r3
  {
    chEvtUnregister(&es1, &el2);
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
  }
  test_end_step(4);
}
 8000ea2:	b00a      	add	sp, #40	; 0x28
 8000ea4:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea6:	4770      	bx	lr
  chtest.global_fail     = true;
 8000ea8:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 8000eac:	490a      	ldr	r1, [pc, #40]	; (8000ed8 <rt_test_010_001_execute+0xf8>)
  chtest.global_fail     = true;
 8000eae:	80a2      	strh	r2, [r4, #4]
  chtest.failure_message = msg;
 8000eb0:	60a1      	str	r1, [r4, #8]
 8000eb2:	f383 8811 	msr	BASEPRI, r3
 8000eb6:	b00a      	add	sp, #40	; 0x28
 8000eb8:	bcf0      	pop	{r4, r5, r6, r7}
 8000eba:	4770      	bx	lr
      p->next = elp->next;
 8000ebc:	9b05      	ldr	r3, [sp, #20]
 8000ebe:	6003      	str	r3, [r0, #0]
      break;
 8000ec0:	e7c8      	b.n	8000e54 <rt_test_010_001_execute+0x74>
      p->next = elp->next;
 8000ec2:	9b00      	ldr	r3, [sp, #0]
 8000ec4:	600b      	str	r3, [r1, #0]
      break;
 8000ec6:	e7dc      	b.n	8000e82 <rt_test_010_001_execute+0xa2>
 8000ec8:	20000808 	.word	0x20000808
 8000ecc:	20001134 	.word	0x20001134
 8000ed0:	20001050 	.word	0x20001050
 8000ed4:	0800fef4 	.word	0x0800fef4
 8000ed8:	0800fee8 	.word	0x0800fee8
 8000edc:	00000000 	.word	0x00000000

08000ee0 <rt_test_010_002_setup>:
 8000ee0:	2320      	movs	r3, #32
 8000ee2:	f383 8811 	msr	BASEPRI, r3
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	4a02      	ldr	r2, [pc, #8]	; (8000ef4 <rt_test_010_002_setup+0x14>)
 8000eea:	68d2      	ldr	r2, [r2, #12]
 8000eec:	6393      	str	r3, [r2, #56]	; 0x38
 8000eee:	f383 8811 	msr	BASEPRI, r3
 8000ef2:	4770      	bx	lr
 8000ef4:	20001050 	.word	0x20001050
	...

08000f00 <rt_test_010_003_setup>:
 8000f00:	2320      	movs	r3, #32
 8000f02:	f383 8811 	msr	BASEPRI, r3
 8000f06:	2300      	movs	r3, #0
 8000f08:	4a02      	ldr	r2, [pc, #8]	; (8000f14 <rt_test_010_003_setup+0x14>)
 8000f0a:	68d2      	ldr	r2, [r2, #12]
 8000f0c:	6393      	str	r3, [r2, #56]	; 0x38
 8000f0e:	f383 8811 	msr	BASEPRI, r3
 8000f12:	4770      	bx	lr
 8000f14:	20001050 	.word	0x20001050
	...

08000f20 <rt_test_010_004_setup>:
 8000f20:	2320      	movs	r3, #32
 8000f22:	f383 8811 	msr	BASEPRI, r3
 8000f26:	2300      	movs	r3, #0
 8000f28:	4a02      	ldr	r2, [pc, #8]	; (8000f34 <rt_test_010_004_setup+0x14>)
 8000f2a:	68d2      	ldr	r2, [r2, #12]
 8000f2c:	6393      	str	r3, [r2, #56]	; 0x38
 8000f2e:	f383 8811 	msr	BASEPRI, r3
 8000f32:	4770      	bx	lr
 8000f34:	20001050 	.word	0x20001050
	...

08000f40 <rt_test_010_005_setup>:
 8000f40:	2320      	movs	r3, #32
 8000f42:	f383 8811 	msr	BASEPRI, r3
 8000f46:	2300      	movs	r3, #0
 8000f48:	4a02      	ldr	r2, [pc, #8]	; (8000f54 <rt_test_010_005_setup+0x14>)
 8000f4a:	68d2      	ldr	r2, [r2, #12]
 8000f4c:	6393      	str	r3, [r2, #56]	; 0x38
 8000f4e:	f383 8811 	msr	BASEPRI, r3
 8000f52:	4770      	bx	lr
 8000f54:	20001050 	.word	0x20001050
	...

08000f60 <rt_test_010_006_setup>:
 8000f60:	2320      	movs	r3, #32
 8000f62:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chDbgCheckClassI();

  m = currtp->epending & events;
  currtp->epending &= ~events;
 8000f66:	2300      	movs	r3, #0
 8000f68:	4a02      	ldr	r2, [pc, #8]	; (8000f74 <rt_test_010_006_setup+0x14>)
 8000f6a:	68d2      	ldr	r2, [r2, #12]
 8000f6c:	6393      	str	r3, [r2, #56]	; 0x38
 8000f6e:	f383 8811 	msr	BASEPRI, r3
 * .
 */

static void rt_test_010_006_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}
 8000f72:	4770      	bx	lr
 8000f74:	20001050 	.word	0x20001050
	...

08000f80 <rt_test_010_007_setup>:
 8000f80:	2320      	movs	r3, #32
 8000f82:	f383 8811 	msr	BASEPRI, r3
 8000f86:	2300      	movs	r3, #0
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <rt_test_010_007_setup+0x1c>)
 8000f8a:	68d2      	ldr	r2, [r2, #12]
 8000f8c:	6393      	str	r3, [r2, #56]	; 0x38
 8000f8e:	f383 8811 	msr	BASEPRI, r3
 8000f92:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <rt_test_010_007_setup+0x20>)
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <rt_test_010_007_setup+0x24>)
 8000f96:	6012      	str	r2, [r2, #0]
 8000f98:	601b      	str	r3, [r3, #0]

static void rt_test_010_007_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 8000f9a:	4770      	bx	lr
 8000f9c:	20001050 	.word	0x20001050
 8000fa0:	20000808 	.word	0x20000808
 8000fa4:	2000080c 	.word	0x2000080c
	...

08000fb0 <dyn_thread1.lto_priv.0>:
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <dyn_thread1.lto_priv.0+0x18>)
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	f103 0120 	add.w	r1, r3, #32
 8000fb8:	428a      	cmp	r2, r1
 8000fba:	d203      	bcs.n	8000fc4 <dyn_thread1.lto_priv.0+0x14>
 8000fbc:	7801      	ldrb	r1, [r0, #0]
 8000fbe:	1c50      	adds	r0, r2, #1
 8000fc0:	60d8      	str	r0, [r3, #12]
 8000fc2:	7011      	strb	r1, [r2, #0]
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20001134 	.word	0x20001134
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <rt_test_011_001_setup>:
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 8000fd0:	2000      	movs	r0, #0
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <rt_test_011_001_setup+0x2c>)
  heapp->provider = NULL;
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <rt_test_011_001_setup+0x30>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000fd6:	1dd9      	adds	r1, r3, #7
 8000fd8:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 8000fdc:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000fde:	f5c3 63e5 	rsb	r3, r3, #1832	; 0x728
 8000fe2:	08db      	lsrs	r3, r3, #3
  H_NEXT(&heapp->header) = hp;
 8000fe4:	6051      	str	r1, [r2, #4]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000fe6:	604b      	str	r3, [r1, #4]
  qp->next = qp;
 8000fe8:	f102 030c 	add.w	r3, r2, #12
  qp->prev = qp;
 8000fec:	e9c2 3303 	strd	r3, r3, [r2, #12]
  heapp->provider = NULL;
 8000ff0:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 8000ff2:	6090      	str	r0, [r2, #8]
  H_NEXT(hp) = NULL;
 8000ff4:	6008      	str	r0, [r1, #0]
 8000ff6:	6150      	str	r0, [r2, #20]
 * .
 */

static void rt_test_011_001_setup(void) {
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20001270 	.word	0x20001270
 8001000:	20001228 	.word	0x20001228
	...

08001010 <rt_test_011_002_setup>:
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8001010:	2200      	movs	r2, #0
  mp->object_size = size;
 8001012:	f44f 70b8 	mov.w	r0, #368	; 0x170
  mp->align = align;
 8001016:	2104      	movs	r1, #4
  mp->next = NULL;
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <rt_test_011_002_setup+0x14>)
  mp->object_size = size;
 800101a:	e9c3 2000 	strd	r2, r0, [r3]
  mp->provider = provider;
 800101e:	e9c3 1202 	strd	r1, r2, [r3, #8]
 * .
 */

static void rt_test_011_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 8001022:	4770      	bx	lr
 8001024:	20001244 	.word	0x20001244
	...

08001030 <tmo.lto_priv.0>:

static void tmo(virtual_timer_t *vtp, void *param) {

  (void)vtp;
  (void)param;
}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
	...

08001040 <__sch_wakeup.lto_priv.0>:
 8001040:	2320      	movs	r3, #32
 8001042:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  (void)vtp;

  chSysLockFromISR();
  switch (tp->state) {
 8001046:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 800104a:	2b07      	cmp	r3, #7
 800104c:	d80d      	bhi.n	800106a <__sch_wakeup.lto_priv.0+0x2a>
 800104e:	e8df f003 	tbb	[pc, r3]
 8001052:	0c27      	.short	0x0c27
 8001054:	0408230c 	.word	0x0408230c
 8001058:	080c      	.short	0x080c
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800105a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800105c:	6893      	ldr	r3, [r2, #8]
 800105e:	3301      	adds	r3, #1
 8001060:	6093      	str	r3, [r2, #8]
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 8001062:	e9d1 3200 	ldrd	r3, r2, [r1]
 8001066:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8001068:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 800106a:	2200      	movs	r2, #0
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 800106c:	b410      	push	{r4}
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 800106e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001072:	698b      	ldr	r3, [r1, #24]
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio >= p->prio));
 8001074:	6888      	ldr	r0, [r1, #8]
  tp->u.rdymsg = MSG_TIMEOUT;
 8001076:	628c      	str	r4, [r1, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8001078:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
    pqp = pqp->next;
 800107c:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	4282      	cmp	r2, r0
 8001082:	d2fb      	bcs.n	800107c <__sch_wakeup.lto_priv.0+0x3c>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	2000      	movs	r0, #0
 8001088:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 800108c:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 800108e:	6059      	str	r1, [r3, #4]
 8001090:	f380 8811 	msr	BASEPRI, r0
  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  chSysUnlockFromISR();

  return;
}
 8001094:	bc10      	pop	{r4}
 8001096:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8001098:	2200      	movs	r2, #0
 800109a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800109c:	601a      	str	r2, [r3, #0]
    break;
 800109e:	e7e4      	b.n	800106a <__sch_wakeup.lto_priv.0+0x2a>
 80010a0:	2300      	movs	r3, #0
 80010a2:	f383 8811 	msr	BASEPRI, r3
 80010a6:	4770      	bx	lr
	...

080010b0 <chMtxUnlockS>:
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <chMtxUnlockS+0x64>)
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80010b2:	6802      	ldr	r2, [r0, #0]
void chMtxUnlockS(mutex_t *mp) {
 80010b4:	b410      	push	{r4}
 80010b6:	68dc      	ldr	r4, [r3, #12]
    currtp->mtxlist = mp->next;
 80010b8:	68c3      	ldr	r3, [r0, #12]
    if (chMtxQueueNotEmptyS(mp)) {
 80010ba:	4282      	cmp	r2, r0
    currtp->mtxlist = mp->next;
 80010bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (chMtxQueueNotEmptyS(mp)) {
 80010be:	d025      	beq.n	800110c <chMtxUnlockS+0x5c>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 80010c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
      lmp = currtp->mtxlist;
      while (lmp != NULL) {
 80010c2:	b14b      	cbz	r3, 80010d8 <chMtxUnlockS+0x28>
  return (bool)(qp->next != qp);
 80010c4:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d003      	beq.n	80010d2 <chMtxUnlockS+0x22>
 80010ca:	6892      	ldr	r2, [r2, #8]
 80010cc:	4291      	cmp	r1, r2
 80010ce:	bf38      	it	cc
 80010d0:	4611      	movcc	r1, r2
            (((thread_t *)lmp->queue.next)->hdr.pqueue.prio > newprio)) {
          newprio = ((thread_t *)lmp->queue.next)->hdr.pqueue.prio;
        }
        lmp = lmp->next;
 80010d2:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f5      	bne.n	80010c4 <chMtxUnlockS+0x14>
  tp->state = CH_STATE_READY;
 80010d8:	f04f 0c00 	mov.w	ip, #0
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 80010dc:	60a1      	str	r1, [r4, #8]
  ch_queue_t *p = qp->next;
 80010de:	6803      	ldr	r3, [r0, #0]
  qp->next       = p->next;
 80010e0:	681a      	ldr	r2, [r3, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = (thread_t *)ch_queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80010e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  } while (unlikely(pqp->prio >= p->prio));
 80010e4:	689c      	ldr	r4, [r3, #8]
  qp->next       = p->next;
 80010e6:	6002      	str	r2, [r0, #0]
  qp->next->prev = qp;
 80010e8:	6050      	str	r0, [r2, #4]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80010ea:	699a      	ldr	r2, [r3, #24]
 80010ec:	e9c0 3102 	strd	r3, r1, [r0, #8]
      tp->mtxlist = mp;
 80010f0:	63d8      	str	r0, [r3, #60]	; 0x3c
  tp->state = CH_STATE_READY;
 80010f2:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
    pqp = pqp->next;
 80010f6:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80010f8:	6891      	ldr	r1, [r2, #8]
 80010fa:	42a1      	cmp	r1, r4
 80010fc:	d2fb      	bcs.n	80010f6 <chMtxUnlockS+0x46>
  p->prev       = pqp->prev;
 80010fe:	6851      	ldr	r1, [r2, #4]
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8001100:	bc10      	pop	{r4}
 8001102:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8001106:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8001108:	6053      	str	r3, [r2, #4]
 800110a:	4770      	bx	lr
      mp->owner = NULL;
 800110c:	2300      	movs	r3, #0
}
 800110e:	bc10      	pop	{r4}
      mp->owner = NULL;
 8001110:	6093      	str	r3, [r2, #8]
}
 8001112:	4770      	bx	lr
 8001114:	20001050 	.word	0x20001050
	...

08001120 <sdc_lld_wait_transaction_end>:
                                         uint32_t *resp) {
 8001120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001122:	2320      	movs	r3, #32
 8001124:	4605      	mov	r5, r0
 8001126:	460f      	mov	r7, r1
 8001128:	4616      	mov	r6, r2
 800112a:	f383 8811 	msr	BASEPRI, r3
  if (sdcp->sdio->MASK != 0)
 800112e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001130:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001132:	bb03      	cbnz	r3, 8001176 <sdc_lld_wait_transaction_end+0x56>
  if ((sdcp->sdio->STA & SDIO_STA_DATAEND) == 0) {
 8001134:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001136:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800113a:	d018      	beq.n	800116e <sdc_lld_wait_transaction_end+0x4e>
  dmaWaitCompletion(sdcp->dma);
 800113c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800113e:	684c      	ldr	r4, [r1, #4]
 8001140:	6863      	ldr	r3, [r4, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1fc      	bne.n	8001140 <sdc_lld_wait_transaction_end+0x20>
 8001146:	220e      	movs	r2, #14
 8001148:	f8d4 c000 	ldr.w	ip, [r4]
 800114c:	f02c 0c0f 	bic.w	ip, ip, #15
 8001150:	f8c4 c000 	str.w	ip, [r4]
 8001154:	7b4c      	ldrb	r4, [r1, #13]
 8001156:	6809      	ldr	r1, [r1, #0]
 8001158:	40a2      	lsls	r2, r4
 800115a:	604a      	str	r2, [r1, #4]
  sdcp->sdio->ICR = STM32_SDIO_ICR_ALL_FLAGS;
 800115c:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <sdc_lld_wait_transaction_end+0xb0>)
 800115e:	6382      	str	r2, [r0, #56]	; 0x38
  sdcp->sdio->DCTRL = 0;
 8001160:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001162:	f383 8811 	msr	BASEPRI, r3
  if (n > 1)
 8001166:	2f01      	cmp	r7, #1
 8001168:	d81b      	bhi.n	80011a2 <sdc_lld_wait_transaction_end+0x82>
  return HAL_SUCCESS;
 800116a:	4618      	mov	r0, r3
}
 800116c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800116e:	f383 8811 	msr	BASEPRI, r3
    return HAL_FAILED;
 8001172:	2001      	movs	r0, #1
}
 8001174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (unlikely(TIME_IMMEDIATE == timeout)) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8001176:	462a      	mov	r2, r5

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 8001178:	f04f 0c03 	mov.w	ip, #3
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = (thread_t *)ch_pqueue_remove_highest(&oip->rlist.pqueue);
  ntp->state = CH_STATE_CURRENT;
 800117c:	2401      	movs	r4, #1
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <sdc_lld_wait_transaction_end+0xb4>)
 8001180:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	f842 1f3c 	str.w	r1, [r2, #60]!
  otp->state = newstate;
 8001188:	f881 c024 	strb.w	ip, [r1, #36]	; 0x24
  tp->u.wttrp = trp;
 800118c:	628a      	str	r2, [r1, #40]	; 0x28
  pqp->next       = p->next;
 800118e:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8001190:	6053      	str	r3, [r2, #4]
  pqp->next       = p->next;
 8001192:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 8001194:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8001198:	60d8      	str	r0, [r3, #12]
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 800119a:	f7ff f851 	bl	8000240 <__port_switch>
  if ((sdcp->sdio->STA & SDIO_STA_DATAEND) == 0) {
 800119e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80011a0:	e7c8      	b.n	8001134 <sdc_lld_wait_transaction_end+0x14>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80011a2:	f240 414c 	movw	r1, #1100	; 0x44c
  sdcp->sdio->ARG = arg;
 80011a6:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80011a8:	6093      	str	r3, [r2, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80011aa:	60d1      	str	r1, [r2, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80011ac:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80011ae:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 80011b2:	d0fb      	beq.n	80011ac <sdc_lld_wait_transaction_end+0x8c>
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 80011b4:	6393      	str	r3, [r2, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80011b6:	f011 0305 	ands.w	r3, r1, #5
 80011ba:	d103      	bne.n	80011c4 <sdc_lld_wait_transaction_end+0xa4>
  *resp = sdcp->sdio->RESP1;
 80011bc:	6952      	ldr	r2, [r2, #20]
  return HAL_SUCCESS;
 80011be:	4618      	mov	r0, r3
  *resp = sdcp->sdio->RESP1;
 80011c0:	6032      	str	r2, [r6, #0]
}
 80011c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdc_lld_collect_errors(sdcp, sta);
 80011c4:	4628      	mov	r0, r5
 80011c6:	f7ff fb03 	bl	80007d0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 80011ca:	2001      	movs	r0, #1
}
 80011cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	00c007ff 	.word	0x00c007ff
 80011d4:	20001050 	.word	0x20001050
	...

080011e0 <sdc_lld_read_aligned.part.0>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
 80011e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e2:	461d      	mov	r5, r3
 80011e4:	4604      	mov	r4, r0
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
  dmaStreamEnable(sdcp->dma);

  /* Setting up data transfer.*/
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 80011e6:	f240 372a 	movw	r7, #810	; 0x32a
                      SDIO_MASK_RXOVERRIE |
                      SDIO_MASK_DATAENDIE;
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;

  /* Transaction starts just after DTEN bit setting.*/
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 80011ea:	269b      	movs	r6, #155	; 0x9b
  dmaStreamSetMemory0(sdcp->dma, buf);
 80011ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 80011ee:	f8df c094 	ldr.w	ip, [pc, #148]	; 8001284 <sdc_lld_read_aligned.part.0+0xa4>
  dmaStreamSetMemory0(sdcp->dma, buf);
 80011f2:	685b      	ldr	r3, [r3, #4]
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
 80011f4:	b083      	sub	sp, #12
  dmaStreamSetMemory0(sdcp->dma, buf);
 80011f6:	60da      	str	r2, [r3, #12]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 80011f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  dmaStreamSetTransactionSize(sdcp->dma,
 80011fa:	0268      	lsls	r0, r5, #9
 80011fc:	ea4f 0e90 	mov.w	lr, r0, lsr #2
 8001200:	f8c3 e004 	str.w	lr, [r3, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 8001204:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	f042 0201 	orr.w	r2, r2, #1
 800120c:	601a      	str	r2, [r3, #0]
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 800120e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8001210:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8001212:	06db      	lsls	r3, r3, #27
    startblk *= MMCSD_BLOCK_SIZE;
 8001214:	bf58      	it	pl
 8001216:	0249      	lslpl	r1, r1, #9
  if (n > 1) {
 8001218:	2d01      	cmp	r5, #1
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 800121a:	f8c2 c038 	str.w	ip, [r2, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 800121e:	63d7      	str	r7, [r2, #60]	; 0x3c
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8001220:	6290      	str	r0, [r2, #40]	; 0x28
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 8001222:	62d6      	str	r6, [r2, #44]	; 0x2c
  if (n > 1) {
 8001224:	d925      	bls.n	8001272 <sdc_lld_read_aligned.part.0+0x92>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8001226:	f240 4352 	movw	r3, #1106	; 0x452
  sdcp->sdio->ARG = arg;
 800122a:	6091      	str	r1, [r2, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 800122c:	60d3      	str	r3, [r2, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800122e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001230:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 8001234:	d0fb      	beq.n	800122e <sdc_lld_read_aligned.part.0+0x4e>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8001236:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 800123a:	6393      	str	r3, [r2, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 800123c:	d10d      	bne.n	800125a <sdc_lld_read_aligned.part.0+0x7a>
  *resp = sdcp->sdio->RESP1;
 800123e:	6952      	ldr	r2, [r2, #20]
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <sdc_lld_read_aligned.part.0+0xa8>)
  *resp = sdcp->sdio->RESP1;
 8001242:	9201      	str	r2, [sp, #4]
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8001244:	4013      	ands	r3, r2
 8001246:	ae01      	add	r6, sp, #4
 8001248:	b95b      	cbnz	r3, 8001262 <sdc_lld_read_aligned.part.0+0x82>
                      SDIO_DCTRL_DTEN;

  if (sdc_lld_prepare_read(sdcp, startblk, blocks, resp) == true)
    goto error;

  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 800124a:	4632      	mov	r2, r6
 800124c:	4629      	mov	r1, r5
 800124e:	4620      	mov	r0, r4
 8001250:	f7ff ff66 	bl	8001120 <sdc_lld_wait_transaction_end>
 8001254:	b928      	cbnz	r0, 8001262 <sdc_lld_read_aligned.part.0+0x82>
  return HAL_SUCCESS;

error:
  sdc_lld_error_cleanup(sdcp, blocks, resp);
  return HAL_FAILED;
}
 8001256:	b003      	add	sp, #12
 8001258:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdc_lld_collect_errors(sdcp, sta);
 800125a:	4620      	mov	r0, r4
 800125c:	f7ff fab8 	bl	80007d0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 8001260:	ae01      	add	r6, sp, #4
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8001262:	4620      	mov	r0, r4
 8001264:	4632      	mov	r2, r6
 8001266:	4629      	mov	r1, r5
 8001268:	f7ff fad2 	bl	8000810 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 800126c:	2001      	movs	r0, #1
}
 800126e:	b003      	add	sp, #12
 8001270:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8001272:	f240 4351 	movw	r3, #1105	; 0x451
  sdcp->sdio->ARG = arg;
 8001276:	6091      	str	r1, [r2, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8001278:	60d3      	str	r3, [r2, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800127a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800127c:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 8001280:	d0fb      	beq.n	800127a <sdc_lld_read_aligned.part.0+0x9a>
 8001282:	e7d8      	b.n	8001236 <sdc_lld_read_aligned.part.0+0x56>
 8001284:	00c007ff 	.word	0x00c007ff
 8001288:	fdffe008 	.word	0xfdffe008
 800128c:	00000000 	.word	0x00000000

08001290 <sdc_lld_write_aligned.part.0>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	461e      	mov	r6, r3
 8001294:	4605      	mov	r5, r0
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
  dmaStreamEnable(sdcp->dma);

  /* Setting up data transfer.*/
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8001296:	f240 371a 	movw	r7, #794	; 0x31a
  dmaStreamSetMemory0(sdcp->dma, buf);
 800129a:	6c43      	ldr	r3, [r0, #68]	; 0x44
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 800129c:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 800134c <sdc_lld_write_aligned.part.0+0xbc>
  dmaStreamSetMemory0(sdcp->dma, buf);
 80012a0:	685b      	ldr	r3, [r3, #4]
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
 80012a2:	b083      	sub	sp, #12
  dmaStreamSetMemory0(sdcp->dma, buf);
 80012a4:	60da      	str	r2, [r3, #12]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 80012a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  dmaStreamSetTransactionSize(sdcp->dma,
 80012a8:	0270      	lsls	r0, r6, #9
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 80012aa:	f042 0210 	orr.w	r2, r2, #16
  dmaStreamSetTransactionSize(sdcp->dma,
 80012ae:	0884      	lsrs	r4, r0, #2
 80012b0:	605c      	str	r4, [r3, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 80012b2:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 80012b4:	681a      	ldr	r2, [r3, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 80012b6:	6cac      	ldr	r4, [r5, #72]	; 0x48
  dmaStreamEnable(sdcp->dma);
 80012b8:	f042 0201 	orr.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 80012be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 80012c0:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 80012c4:	06db      	lsls	r3, r3, #27
    startblk *= MMCSD_BLOCK_SIZE;
 80012c6:	bf58      	it	pl
 80012c8:	0249      	lslpl	r1, r1, #9
  if (n > 1) {
 80012ca:	2e01      	cmp	r6, #1
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 80012cc:	63e7      	str	r7, [r4, #60]	; 0x3c
                      SDIO_MASK_DTIMEOUTIE |
                      SDIO_MASK_STBITERRIE |
                      SDIO_MASK_TXUNDERRIE |
                      SDIO_MASK_DATAENDIE;
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 80012ce:	62a0      	str	r0, [r4, #40]	; 0x28
  if (n > 1) {
 80012d0:	d924      	bls.n	800131c <sdc_lld_write_aligned.part.0+0x8c>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80012d2:	f240 4359 	movw	r3, #1113	; 0x459
  sdcp->sdio->ARG = arg;
 80012d6:	60a1      	str	r1, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80012d8:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80012da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012dc:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 80012e0:	d0fb      	beq.n	80012da <sdc_lld_write_aligned.part.0+0x4a>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80012e2:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 80012e6:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80012e8:	d124      	bne.n	8001334 <sdc_lld_write_aligned.part.0+0xa4>
  *resp = sdcp->sdio->RESP1;
 80012ea:	6962      	ldr	r2, [r4, #20]
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <sdc_lld_write_aligned.part.0+0xc0>)
  *resp = sdcp->sdio->RESP1;
 80012ee:	9201      	str	r2, [sp, #4]
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 80012f0:	4013      	ands	r3, r2
 80012f2:	b953      	cbnz	r3, 800130a <sdc_lld_write_aligned.part.0+0x7a>
  /* Talk to card what we want from it.*/
  if (sdc_lld_prepare_write(sdcp, startblk, blocks, resp) == true)
    goto error;

  /* Transaction starts just after DTEN bit setting.*/
  sdcp->sdio->DCTRL = SDIO_DCTRL_DBLOCKSIZE_3 |
 80012f4:	2399      	movs	r3, #153	; 0x99
                      SDIO_DCTRL_DBLOCKSIZE_0 |
                      SDIO_DCTRL_DMAEN |
                      SDIO_DCTRL_DTEN;

  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 80012f6:	af01      	add	r7, sp, #4
 80012f8:	463a      	mov	r2, r7
 80012fa:	4631      	mov	r1, r6
 80012fc:	4628      	mov	r0, r5
  sdcp->sdio->DCTRL = SDIO_DCTRL_DBLOCKSIZE_3 |
 80012fe:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 8001300:	f7ff ff0e 	bl	8001120 <sdc_lld_wait_transaction_end>
 8001304:	b910      	cbnz	r0, 800130c <sdc_lld_write_aligned.part.0+0x7c>
  return HAL_SUCCESS;

error:
  sdc_lld_error_cleanup(sdcp, blocks, resp);
  return HAL_FAILED;
}
 8001306:	b003      	add	sp, #12
 8001308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130a:	af01      	add	r7, sp, #4
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 800130c:	4628      	mov	r0, r5
 800130e:	463a      	mov	r2, r7
 8001310:	4631      	mov	r1, r6
 8001312:	f7ff fa7d 	bl	8000810 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8001316:	2001      	movs	r0, #1
}
 8001318:	b003      	add	sp, #12
 800131a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 800131c:	f44f 638b 	mov.w	r3, #1112	; 0x458
  sdcp->sdio->ARG = arg;
 8001320:	60a1      	str	r1, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8001322:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8001324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001326:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 800132a:	d0fb      	beq.n	8001324 <sdc_lld_write_aligned.part.0+0x94>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 800132c:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8001330:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8001332:	d0da      	beq.n	80012ea <sdc_lld_write_aligned.part.0+0x5a>
    sdc_lld_collect_errors(sdcp, sta);
 8001334:	4628      	mov	r0, r5
 8001336:	af01      	add	r7, sp, #4
 8001338:	f7ff fa4a 	bl	80007d0 <sdc_lld_collect_errors>
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 800133c:	4628      	mov	r0, r5
 800133e:	463a      	mov	r2, r7
 8001340:	4631      	mov	r1, r6
 8001342:	f7ff fa65 	bl	8000810 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8001346:	2001      	movs	r0, #1
 8001348:	e7e6      	b.n	8001318 <sdc_lld_write_aligned.part.0+0x88>
 800134a:	bf00      	nop
 800134c:	00c007ff 	.word	0x00c007ff
 8001350:	fdffe008 	.word	0xfdffe008
	...

08001360 <chThdYield>:
 8001360:	2320      	movs	r3, #32
void chThdYield(void) {
 8001362:	b510      	push	{r4, lr}
 8001364:	f383 8811 	msr	BASEPRI, r3
 *
 * @sclass
 */
void chSchDoYieldS(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <chThdYield+0x4c>)
 800136a:	68d9      	ldr	r1, [r3, #12]

  chDbgCheckClassS();

  /* If this function has been called then it is likely there are threads
     at same priority level.*/
  if (likely(firstprio(&oip->rlist.pqueue) >= tp->hdr.pqueue.prio)) {
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	688a      	ldr	r2, [r1, #8]
 8001370:	6884      	ldr	r4, [r0, #8]
 8001372:	4294      	cmp	r4, r2
 8001374:	d315      	bcc.n	80013a2 <chThdYield+0x42>
 8001376:	6804      	ldr	r4, [r0, #0]
  pqp->next->prev = pqp;
 8001378:	6063      	str	r3, [r4, #4]
  pqp->next       = p->next;
 800137a:	601c      	str	r4, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 800137c:	2401      	movs	r4, #1
  __instance_set_currthread(oip, ntp);
 800137e:	60d8      	str	r0, [r3, #12]
  tp->state = CH_STATE_READY;
 8001380:	2300      	movs	r3, #0
  ntp->state = CH_STATE_CURRENT;
 8001382:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8001386:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800138a:	698b      	ldr	r3, [r1, #24]
    pqp = pqp->next;
 800138c:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800138e:	689c      	ldr	r4, [r3, #8]
 8001390:	42a2      	cmp	r2, r4
 8001392:	d9fb      	bls.n	800138c <chThdYield+0x2c>
  p->prev       = pqp->prev;
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 800139a:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 800139c:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 800139e:	f7fe ff4f 	bl	8000240 <__port_switch>
 80013a2:	2300      	movs	r3, #0
 80013a4:	f383 8811 	msr	BASEPRI, r3
}
 80013a8:	bd10      	pop	{r4, pc}
 80013aa:	bf00      	nop
 80013ac:	20001050 	.word	0x20001050

080013b0 <chMsgSend>:
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 80013b0:	b538      	push	{r3, r4, r5, lr}
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <chMsgSend+0x6c>)
 80013b4:	2220      	movs	r2, #32
 80013b6:	68dc      	ldr	r4, [r3, #12]
 80013b8:	f382 8811 	msr	BASEPRI, r2
  p->prev       = qp->prev;
 80013bc:	6b42      	ldr	r2, [r0, #52]	; 0x34

  chDbgCheck(tp != NULL);

  chSysLock();
  currtp->u.sentmsg = msg;
  __ch_msg_insert(&tp->msgqueue, currtp);
 80013be:	f100 0530 	add.w	r5, r0, #48	; 0x30
  p->next       = qp;
 80013c2:	6025      	str	r5, [r4, #0]
  currtp->u.sentmsg = msg;
 80013c4:	62a1      	str	r1, [r4, #40]	; 0x28
  p->prev       = qp->prev;
 80013c6:	6062      	str	r2, [r4, #4]
  p->prev->next = p;
 80013c8:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 80013ca:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
  qp->prev      = p;
 80013ce:	6344      	str	r4, [r0, #52]	; 0x34
 80013d0:	2a0e      	cmp	r2, #14
 80013d2:	d013      	beq.n	80013fc <chMsgSend+0x4c>
  otp->state = newstate;
 80013d4:	220c      	movs	r2, #12
  ntp->state = CH_STATE_CURRENT;
 80013d6:	f04f 0c01 	mov.w	ip, #1
  thread_t *otp = __instance_get_currthread(oip);
 80013da:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 80013dc:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 80013de:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pqp->next       = p->next;
 80013e2:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 80013e4:	6053      	str	r3, [r2, #4]
  pqp->next       = p->next;
 80013e6:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 80013e8:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 80013ec:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 80013ee:	f7fe ff27 	bl	8000240 <__port_switch>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
  msg = currtp->u.rdymsg;
 80013f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80013f4:	2300      	movs	r3, #0
 80013f6:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 80013fa:	bd38      	pop	{r3, r4, r5, pc}
  tp->state = CH_STATE_READY;
 80013fc:	2100      	movs	r1, #0
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80013fe:	6982      	ldr	r2, [r0, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001400:	6885      	ldr	r5, [r0, #8]
  tp->state = CH_STATE_READY;
 8001402:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    pqp = pqp->next;
 8001406:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001408:	6891      	ldr	r1, [r2, #8]
 800140a:	42a9      	cmp	r1, r5
 800140c:	d2fb      	bcs.n	8001406 <chMsgSend+0x56>
  p->prev       = pqp->prev;
 800140e:	6851      	ldr	r1, [r2, #4]
 8001410:	e9c0 2100 	strd	r2, r1, [r0]
  p->prev->next = p;
 8001414:	6008      	str	r0, [r1, #0]
  pqp->prev     = p;
 8001416:	6050      	str	r0, [r2, #4]
  return __sch_ready_behind(tp);
 8001418:	e7dc      	b.n	80013d4 <chMsgSend+0x24>
 800141a:	bf00      	nop
 800141c:	20001050 	.word	0x20001050

08001420 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8001420:	b510      	push	{r4, lr}
 8001422:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8001424:	2141      	movs	r1, #65	; 0x41
 8001426:	f7ff ffc3 	bl	80013b0 <chMsgSend>
  chMsgSend(p, 'B');
 800142a:	2142      	movs	r1, #66	; 0x42
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff ffbf 	bl	80013b0 <chMsgSend>
  chMsgSend(p, 'C');
 8001432:	2143      	movs	r1, #67	; 0x43
 8001434:	4620      	mov	r0, r4
 8001436:	f7ff ffbb 	bl	80013b0 <chMsgSend>
  chMsgSend(p, 'D');
 800143a:	4620      	mov	r0, r4
}
 800143c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 8001440:	2144      	movs	r1, #68	; 0x44
 8001442:	f7ff bfb5 	b.w	80013b0 <chMsgSend>
 8001446:	bf00      	nop
	...

08001450 <thread1.lto_priv.1>:
static THD_FUNCTION(thread1, p) {
 8001450:	b510      	push	{r4, lr}
 8001452:	2320      	movs	r3, #32
 8001454:	4604      	mov	r4, r0
 8001456:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 800145a:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <thread1.lto_priv.1+0x64>)
 800145c:	6893      	ldr	r3, [r2, #8]
 800145e:	3b01      	subs	r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	6093      	str	r3, [r2, #8]
 8001464:	db0d      	blt.n	8001482 <thread1.lto_priv.1+0x32>
 8001466:	2300      	movs	r3, #0
 8001468:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <thread1.lto_priv.1+0x68>)
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	f103 0120 	add.w	r1, r3, #32
 8001474:	428a      	cmp	r2, r1
 8001476:	d203      	bcs.n	8001480 <thread1.lto_priv.1+0x30>
  test_emit_token(*(char *)p);
 8001478:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 800147a:	1c50      	adds	r0, r2, #1
 800147c:	60d8      	str	r0, [r3, #12]
 800147e:	7011      	strb	r1, [r2, #0]
}
 8001480:	bd10      	pop	{r4, pc}
  otp->state = newstate;
 8001482:	f04f 0e05 	mov.w	lr, #5
  ntp->state = CH_STATE_CURRENT;
 8001486:	f04f 0c01 	mov.w	ip, #1
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <thread1.lto_priv.1+0x6c>)
  p->prev       = qp->prev;
 800148c:	6850      	ldr	r0, [r2, #4]
 800148e:	68d9      	ldr	r1, [r3, #12]
 8001490:	e9c1 2000 	strd	r2, r0, [r1]
    thread_t *currtp = chThdGetSelfX();
    currtp->u.wtsemp = sp;
 8001494:	628a      	str	r2, [r1, #40]	; 0x28
  p->prev->next = p;
 8001496:	6001      	str	r1, [r0, #0]
  ch_priority_queue_t *p = pqp->next;
 8001498:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 800149a:	f881 e024 	strb.w	lr, [r1, #36]	; 0x24
  qp->prev      = p;
 800149e:	6051      	str	r1, [r2, #4]
  pqp->next       = p->next;
 80014a0:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 80014a2:	6053      	str	r3, [r2, #4]
  pqp->next       = p->next;
 80014a4:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 80014a6:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 80014aa:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 80014ac:	f7fe fec8 	bl	8000240 <__port_switch>
    sem_insert(&sp->queue, currtp);
    chSchGoSleepS(CH_STATE_WTSEM);

    return currtp->u.rdymsg;
 80014b0:	e7d9      	b.n	8001466 <thread1.lto_priv.1+0x16>
 80014b2:	bf00      	nop
 80014b4:	20001254 	.word	0x20001254
 80014b8:	20001134 	.word	0x20001134
 80014bc:	20001050 	.word	0x20001050

080014c0 <bmk_thread3.lto_priv.0>:
 80014c0:	2320      	movs	r3, #32
  (void)chMsgSend(tp, 0);
  return n;
}
#endif

static THD_FUNCTION(bmk_thread3, p) {
 80014c2:	b570      	push	{r4, r5, r6, lr}
 80014c4:	f383 8811 	msr	BASEPRI, r3
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <bmk_thread3.lto_priv.0+0x84>)
 80014ca:	68d9      	ldr	r1, [r3, #12]
  return (bool)(lp->next != lp);
 80014cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 80014ce:	f101 0c2c 	add.w	ip, r1, #44	; 0x2c
 80014d2:	4594      	cmp	ip, r2
  tp->state = CH_STATE_READY;
 80014d4:	bf18      	it	ne
 80014d6:	f04f 0e00 	movne.w	lr, #0
  currtp->u.exitcode = msg;
 80014da:	6288      	str	r0, [r1, #40]	; 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 80014dc:	d113      	bne.n	8001506 <bmk_thread3.lto_priv.0+0x46>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 80014de:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 80014e2:	b32a      	cbz	r2, 8001530 <bmk_thread3.lto_priv.0+0x70>
  otp->state = newstate;
 80014e4:	220f      	movs	r2, #15
  ntp->state = CH_STATE_CURRENT;
 80014e6:	f04f 0c01 	mov.w	ip, #1
  ch_priority_queue_t *p = pqp->next;
 80014ea:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 80014ec:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pqp->next       = p->next;
 80014f0:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 80014f2:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 80014f4:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
  pqp->next       = p->next;
 80014f8:	601a      	str	r2, [r3, #0]

  chThdExit((msg_t)p);
}
 80014fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __instance_set_currthread(oip, ntp);
 80014fe:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8001500:	f7fe be9e 	b.w	8000240 <__port_switch>
 8001504:	4622      	mov	r2, r4
  lp->next = p->next;
 8001506:	6814      	ldr	r4, [r2, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001508:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800150a:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 800150c:	62cc      	str	r4, [r1, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800150e:	f882 e024 	strb.w	lr, [r2, #36]	; 0x24
    pqp = pqp->next;
 8001512:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001514:	6885      	ldr	r5, [r0, #8]
 8001516:	42b5      	cmp	r5, r6
 8001518:	d2fb      	bcs.n	8001512 <bmk_thread3.lto_priv.0+0x52>
  p->prev       = pqp->prev;
 800151a:	6845      	ldr	r5, [r0, #4]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 800151c:	4564      	cmp	r4, ip
  p->next       = pqp;
 800151e:	6010      	str	r0, [r2, #0]
  p->prev       = pqp->prev;
 8001520:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 8001522:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 8001524:	6042      	str	r2, [r0, #4]
 8001526:	d1ed      	bne.n	8001504 <bmk_thread3.lto_priv.0+0x44>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8001528:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 800152c:	2a00      	cmp	r2, #0
 800152e:	d1d9      	bne.n	80014e4 <bmk_thread3.lto_priv.0+0x24>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 8001530:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 8001534:	0792      	lsls	r2, r2, #30
 8001536:	d1d5      	bne.n	80014e4 <bmk_thread3.lto_priv.0+0x24>
  p->prev->next = p->next;
 8001538:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 800153c:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 800153e:	6050      	str	r0, [r2, #4]
  return p;
 8001540:	e7d0      	b.n	80014e4 <bmk_thread3.lto_priv.0+0x24>
 8001542:	bf00      	nop
 8001544:	20001050 	.word	0x20001050
	...

08001550 <bmk_thread4.lto_priv.0>:

static THD_FUNCTION(bmk_thread4, p) {
 8001550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001552:	4c0d      	ldr	r4, [pc, #52]	; (8001588 <bmk_thread4.lto_priv.0+0x38>)
 8001554:	2320      	movs	r3, #32
 8001556:	68e7      	ldr	r7, [r4, #12]
 8001558:	f383 8811 	msr	BASEPRI, r3
  otp->state = newstate;
 800155c:	2603      	movs	r6, #3
  ntp->state = CH_STATE_CURRENT;
 800155e:	2501      	movs	r5, #1
  thread_t *otp = __instance_get_currthread(oip);
 8001560:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8001562:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8001564:	f881 6024 	strb.w	r6, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8001568:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800156a:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800156c:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8001570:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 8001572:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8001574:	f7fe fe64 	bl	8000240 <__port_switch>
  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
    msg = self->u.rdymsg;
  } while (msg == MSG_OK);
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <bmk_thread4.lto_priv.0+0x10>
 800157e:	2300      	movs	r3, #0
 8001580:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8001584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001586:	bf00      	nop
 8001588:	20001050 	.word	0x20001050
 800158c:	00000000 	.word	0x00000000

08001590 <bmk_thread7.lto_priv.0>:

#if CH_CFG_USE_SEMAPHORES
static THD_FUNCTION(bmk_thread7, p) {
 8001590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001594:	4f17      	ldr	r7, [pc, #92]	; (80015f4 <bmk_thread7.lto_priv.0+0x64>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8001596:	68fb      	ldr	r3, [r7, #12]

  (void)p;
  while (!chThdShouldTerminateX())
 8001598:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800159c:	075a      	lsls	r2, r3, #29
 800159e:	d427      	bmi.n	80015f0 <bmk_thread7.lto_priv.0+0x60>
 80015a0:	f04f 0820 	mov.w	r8, #32
  otp->state = newstate;
 80015a4:	2605      	movs	r6, #5
  ntp->state = CH_STATE_CURRENT;
 80015a6:	2501      	movs	r5, #1
 80015a8:	4c13      	ldr	r4, [pc, #76]	; (80015f8 <bmk_thread7.lto_priv.0+0x68>)
 80015aa:	e007      	b.n	80015bc <bmk_thread7.lto_priv.0+0x2c>
 80015ac:	2300      	movs	r3, #0
 80015ae:	f383 8811 	msr	BASEPRI, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b8:	075b      	lsls	r3, r3, #29
 80015ba:	d419      	bmi.n	80015f0 <bmk_thread7.lto_priv.0+0x60>
 80015bc:	f388 8811 	msr	BASEPRI, r8
  if (--sp->cnt < (cnt_t)0) {
 80015c0:	68a3      	ldr	r3, [r4, #8]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	60a3      	str	r3, [r4, #8]
 80015c8:	daf0      	bge.n	80015ac <bmk_thread7.lto_priv.0+0x1c>
  return __sch_get_currthread();
 80015ca:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 80015cc:	6863      	ldr	r3, [r4, #4]
  ch_priority_queue_t *p = pqp->next;
 80015ce:	6838      	ldr	r0, [r7, #0]
    currtp->u.wtsemp = sp;
 80015d0:	628c      	str	r4, [r1, #40]	; 0x28
  p->prev       = qp->prev;
 80015d2:	e9c1 4300 	strd	r4, r3, [r1]
  p->prev->next = p;
 80015d6:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 80015d8:	f881 6024 	strb.w	r6, [r1, #36]	; 0x24
  pqp->next       = p->next;
 80015dc:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 80015de:	6061      	str	r1, [r4, #4]
  pqp->next->prev = pqp;
 80015e0:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80015e2:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  pqp->next       = p->next;
 80015e6:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 80015e8:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 80015ea:	f7fe fe29 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 80015ee:	e7dd      	b.n	80015ac <bmk_thread7.lto_priv.0+0x1c>
    chSemWait(&sem1);
}
 80015f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015f4:	20001050 	.word	0x20001050
 80015f8:	20001260 	.word	0x20001260
 80015fc:	00000000 	.word	0x00000000

08001600 <bmk_thread8.lto_priv.0>:
#endif

static THD_FUNCTION(bmk_thread8, p) {
 8001600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001604:	2720      	movs	r7, #32
  ntp->state = CH_STATE_CURRENT;
 8001606:	f04f 0801 	mov.w	r8, #1
  tp->state = CH_STATE_READY;
 800160a:	2600      	movs	r6, #0
 800160c:	4605      	mov	r5, r0
 800160e:	4c18      	ldr	r4, [pc, #96]	; (8001670 <bmk_thread8.lto_priv.0+0x70>)

  do {
    chThdYield();
 8001610:	f7ff fea6 	bl	8001360 <chThdYield>
    chThdYield();
 8001614:	f7ff fea4 	bl	8001360 <chThdYield>
    chThdYield();
 8001618:	f7ff fea2 	bl	8001360 <chThdYield>
 800161c:	f387 8811 	msr	BASEPRI, r7
  thread_t *tp = __instance_get_currthread(oip);
 8001620:	68e1      	ldr	r1, [r4, #12]
  if (likely(firstprio(&oip->rlist.pqueue) >= tp->hdr.pqueue.prio)) {
 8001622:	6820      	ldr	r0, [r4, #0]
 8001624:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8001628:	6883      	ldr	r3, [r0, #8]
 800162a:	4563      	cmp	r3, ip
 800162c:	d313      	bcc.n	8001656 <bmk_thread8.lto_priv.0+0x56>
 800162e:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8001630:	6054      	str	r4, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8001632:	f880 8024 	strb.w	r8, [r0, #36]	; 0x24
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001636:	698b      	ldr	r3, [r1, #24]
  pqp->next       = p->next;
 8001638:	6022      	str	r2, [r4, #0]
  __instance_set_currthread(oip, ntp);
 800163a:	60e0      	str	r0, [r4, #12]
  tp->state = CH_STATE_READY;
 800163c:	f881 6024 	strb.w	r6, [r1, #36]	; 0x24
    pqp = pqp->next;
 8001640:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	4594      	cmp	ip, r2
 8001646:	d9fb      	bls.n	8001640 <bmk_thread8.lto_priv.0+0x40>
  p->prev       = pqp->prev;
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 800164e:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8001650:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 8001652:	f7fe fdf5 	bl	8000240 <__port_switch>
 8001656:	f386 8811 	msr	BASEPRI, r6
    chThdYield();
    (*(uint32_t *)p) += 4;
 800165a:	682b      	ldr	r3, [r5, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 800165c:	68e2      	ldr	r2, [r4, #12]
 800165e:	3304      	adds	r3, #4
 8001660:	602b      	str	r3, [r5, #0]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8001662:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001666:	075b      	lsls	r3, r3, #29
 8001668:	d5d2      	bpl.n	8001610 <bmk_thread8.lto_priv.0+0x10>
}
 800166a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800166e:	bf00      	nop
 8001670:	20001050 	.word	0x20001050
	...

08001680 <parse_arguments>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static char *parse_arguments(char *str, char **saveptr) {
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	460d      	mov	r5, r1
  char *p;

  if (str != NULL)
 8001684:	b1b0      	cbz	r0, 80016b4 <parse_arguments+0x34>
 8001686:	4604      	mov	r4, r0
    *saveptr = str;
 8001688:	6028      	str	r0, [r5, #0]
  if (!p) {
    return NULL;
  }

  /* Skipping white space.*/
  p += strspn(p, " \t");
 800168a:	4620      	mov	r0, r4
 800168c:	4910      	ldr	r1, [pc, #64]	; (80016d0 <parse_arguments+0x50>)
 800168e:	f00e fbe5 	bl	800fe5c <strspn>

  if (*p == '"') {
 8001692:	5c21      	ldrb	r1, [r4, r0]
  p += strspn(p, " \t");
 8001694:	4404      	add	r4, r0
  if (*p == '"') {
 8001696:	2922      	cmp	r1, #34	; 0x22
 8001698:	d012      	beq.n	80016c0 <parse_arguments+0x40>
    p++;
    *saveptr = strpbrk(p, "\"");
  }
  else {
    /* The delimiter is white space.*/
    *saveptr = strpbrk(p, " \t");
 800169a:	4620      	mov	r0, r4
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <parse_arguments+0x50>)
 800169e:	f00e fbc1 	bl	800fe24 <strpbrk>
  }

  /* Replacing the delimiter with a zero.*/
  if (*saveptr != NULL) {
 80016a2:	b198      	cbz	r0, 80016cc <parse_arguments+0x4c>
    *(*saveptr)++ = '\0';
 80016a4:	2300      	movs	r3, #0
 80016a6:	1c42      	adds	r2, r0, #1
 80016a8:	602a      	str	r2, [r5, #0]
 80016aa:	7003      	strb	r3, [r0, #0]
  }

  return *p != '\0' ? p : NULL;
 80016ac:	7823      	ldrb	r3, [r4, #0]
 80016ae:	b123      	cbz	r3, 80016ba <parse_arguments+0x3a>
}
 80016b0:	4620      	mov	r0, r4
 80016b2:	bd38      	pop	{r3, r4, r5, pc}
  p = *saveptr;
 80016b4:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 80016b6:	2c00      	cmp	r4, #0
 80016b8:	d1e7      	bne.n	800168a <parse_arguments+0xa>
    return NULL;
 80016ba:	2400      	movs	r4, #0
}
 80016bc:	4620      	mov	r0, r4
 80016be:	bd38      	pop	{r3, r4, r5, pc}
    p++;
 80016c0:	3401      	adds	r4, #1
    *saveptr = strpbrk(p, "\"");
 80016c2:	4620      	mov	r0, r4
 80016c4:	f00e fa7e 	bl	800fbc4 <strchr>
  if (*saveptr != NULL) {
 80016c8:	2800      	cmp	r0, #0
 80016ca:	d1eb      	bne.n	80016a4 <parse_arguments+0x24>
 80016cc:	6028      	str	r0, [r5, #0]
 80016ce:	e7ed      	b.n	80016ac <parse_arguments+0x2c>
 80016d0:	0800ff04 	.word	0x0800ff04
	...

080016e0 <test_rt>:
  } while (tp != NULL);
}
#endif

#if (SHELL_CMD_TEST_ENABLED == TRUE) || defined(__DOXYGEN__)
static THD_FUNCTION(test_rt, arg) {
 80016e0:	4602      	mov	r2, r0
 */
bool test_execute_stream(BaseSequentialStream *stream,
                         const testsuite_t *tsp) {

  /* Output initialization using streams.*/
  chtest.stream  = stream;
 80016e2:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <test_rt+0x10>)
  chtest.putchar = test_stream_putchar;
 80016e4:	4903      	ldr	r1, [pc, #12]	; (80016f4 <test_rt+0x14>)

  /* Test execution.*/
  return test_execute_inner(tsp);
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <test_rt+0x18>)
  chtest.stream  = stream;
 80016e8:	e9c3 1208 	strd	r1, r2, [r3, #32]
  return test_execute_inner(tsp);
 80016ec:	f00e b830 	b.w	800f750 <test_execute_inner.isra.0>
 80016f0:	20001134 	.word	0x20001134
 80016f4:	08000ab1 	.word	0x08000ab1
 80016f8:	080122f8 	.word	0x080122f8
 80016fc:	00000000 	.word	0x00000000

08001700 <test_oslib>:
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &rt_test_suite);
}

static THD_FUNCTION(test_oslib, arg) {
 8001700:	4602      	mov	r2, r0
  chtest.stream  = stream;
 8001702:	4b03      	ldr	r3, [pc, #12]	; (8001710 <test_oslib+0x10>)
  chtest.putchar = test_stream_putchar;
 8001704:	4903      	ldr	r1, [pc, #12]	; (8001714 <test_oslib+0x14>)
  return test_execute_inner(tsp);
 8001706:	4804      	ldr	r0, [pc, #16]	; (8001718 <test_oslib+0x18>)
  chtest.stream  = stream;
 8001708:	e9c3 1208 	strd	r1, r2, [r3, #32]
  return test_execute_inner(tsp);
 800170c:	f00e b820 	b.w	800f750 <test_execute_inner.isra.0>
 8001710:	20001134 	.word	0x20001134
 8001714:	08000ab1 	.word	0x08000ab1
 8001718:	08011df8 	.word	0x08011df8
 800171c:	00000000 	.word	0x00000000

08001720 <rt_test_007_001_teardown>:
  chSemResetWithMessage(sp, n, MSG_RESET);
 8001720:	2100      	movs	r1, #0
 8001722:	4801      	ldr	r0, [pc, #4]	; (8001728 <rt_test_007_001_teardown+0x8>)
 8001724:	f00c bbf4 	b.w	800df10 <chSemResetWithMessage.constprop.0>
 8001728:	20001254 	.word	0x20001254
 800172c:	00000000 	.word	0x00000000

08001730 <rt_test_007_005_execute>:

static void rt_test_007_005_teardown(void) {
  test_wait_threads();
}

static void rt_test_007_005_execute(void) {
 8001730:	b538      	push	{r3, r4, r5, lr}

  /* [7.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8001732:	2501      	movs	r5, #1
  return __sch_get_currthread();
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <rt_test_007_005_execute+0x60>)
 8001736:	4c17      	ldr	r4, [pc, #92]	; (8001794 <rt_test_007_005_execute+0x64>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8001738:	68da      	ldr	r2, [r3, #12]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 800173a:	4817      	ldr	r0, [pc, #92]	; (8001798 <rt_test_007_005_execute+0x68>)
 800173c:	6891      	ldr	r1, [r2, #8]
 800173e:	2300      	movs	r3, #0
 8001740:	4429      	add	r1, r5
 8001742:	4a16      	ldr	r2, [pc, #88]	; (800179c <rt_test_007_005_execute+0x6c>)
  test_set_step(1);
 8001744:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001746:	f00c fc13 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_end_step(1);

  /* [7.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 800174a:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 800174c:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <rt_test_007_005_execute+0x70>)
  test_set_step(2);
 800174e:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001750:	6010      	str	r0, [r2, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8001752:	f00d ffad 	bl	800f6b0 <chSemSignalWait.constprop.0.isra.0>
  return (bool)(qp->next == qp);
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <rt_test_007_005_execute+0x74>)
  if (!condition) {
 8001758:	681d      	ldr	r5, [r3, #0]
 800175a:	429d      	cmp	r5, r3
 800175c:	d111      	bne.n	8001782 <rt_test_007_005_execute+0x52>
 800175e:	68ab      	ldr	r3, [r5, #8]
 8001760:	b94b      	cbnz	r3, 8001776 <rt_test_007_005_execute+0x46>
  test_end_step(2);

  /* [7.5.3] The function chSemSignalWait() is invoked again by
     specifying the same semaphore for the wait and signal phases. The
     counter value must be one on exit.*/
  test_set_step(3);
 8001762:	2303      	movs	r3, #3
 8001764:	6023      	str	r3, [r4, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8001766:	f00d ffa3 	bl	800f6b0 <chSemSignalWait.constprop.0.isra.0>
 800176a:	682b      	ldr	r3, [r5, #0]
 800176c:	42ab      	cmp	r3, r5
 800176e:	d108      	bne.n	8001782 <rt_test_007_005_execute+0x52>
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	b903      	cbnz	r3, 8001776 <rt_test_007_005_execute+0x46>
    test_assert(ch_queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
  test_end_step(3);
}
 8001774:	bd38      	pop	{r3, r4, r5, pc}
  chtest.global_fail     = true;
 8001776:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800177a:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <rt_test_007_005_execute+0x78>)
  chtest.global_fail     = true;
 800177c:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 800177e:	60a2      	str	r2, [r4, #8]
 8001780:	bd38      	pop	{r3, r4, r5, pc}
  chtest.global_fail     = true;
 8001782:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8001786:	4a09      	ldr	r2, [pc, #36]	; (80017ac <rt_test_007_005_execute+0x7c>)
  chtest.global_fail     = true;
 8001788:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 800178a:	60a2      	str	r2, [r4, #8]
 800178c:	bd38      	pop	{r3, r4, r5, pc}
 800178e:	bf00      	nop
 8001790:	20001050 	.word	0x20001050
 8001794:	20001134 	.word	0x20001134
 8001798:	20001270 	.word	0x20001270
 800179c:	08004231 	.word	0x08004231
 80017a0:	200019a0 	.word	0x200019a0
 80017a4:	20001254 	.word	0x20001254
 80017a8:	0800ff18 	.word	0x0800ff18
 80017ac:	0800ff08 	.word	0x0800ff08

080017b0 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
	...

080017c0 <__late_init>:
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
	...

080017d0 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 80017d0:	e7fe      	b.n	80017d0 <__default_exit>
 80017d2:	bf00      	nop
	...

080017e0 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e2:	4d15      	ldr	r5, [pc, #84]	; (8001838 <__init_ram_areas+0x58>)
 80017e4:	4f15      	ldr	r7, [pc, #84]	; (800183c <__init_ram_areas+0x5c>)
 80017e6:	4916      	ldr	r1, [pc, #88]	; (8001840 <__init_ram_areas+0x60>)
 80017e8:	4816      	ldr	r0, [pc, #88]	; (8001844 <__init_ram_areas+0x64>)
 80017ea:	4a17      	ldr	r2, [pc, #92]	; (8001848 <__init_ram_areas+0x68>)
 80017ec:	f105 0470 	add.w	r4, r5, #112	; 0x70
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 80017f0:	4281      	cmp	r1, r0
 80017f2:	d90d      	bls.n	8001810 <__init_ram_areas+0x30>
 80017f4:	4603      	mov	r3, r0
 80017f6:	3a04      	subs	r2, #4
      *p = *tp;
 80017f8:	f852 6f04 	ldr.w	r6, [r2, #4]!
 80017fc:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8001800:	4299      	cmp	r1, r3
 8001802:	d8f9      	bhi.n	80017f8 <__init_ram_areas+0x18>
      p++;
 8001804:	1e4b      	subs	r3, r1, #1
 8001806:	1a1b      	subs	r3, r3, r0
 8001808:	f023 0303 	bic.w	r3, r3, #3
 800180c:	3304      	adds	r3, #4
 800180e:	4418      	add	r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001810:	4287      	cmp	r7, r0
 8001812:	d907      	bls.n	8001824 <__init_ram_areas+0x44>
      *p = 0;
 8001814:	1e7a      	subs	r2, r7, #1
 8001816:	1a12      	subs	r2, r2, r0
 8001818:	f022 0203 	bic.w	r2, r2, #3
 800181c:	2100      	movs	r1, #0
 800181e:	3204      	adds	r2, #4
 8001820:	f00e f97e 	bl	800fb20 <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8001824:	42a5      	cmp	r5, r4
 8001826:	d005      	beq.n	8001834 <__init_ram_areas+0x54>
    uint32_t *p = rap->init_area;
 8001828:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    while (p < rap->no_init_area) {
 800182c:	e9d5 1706 	ldrd	r1, r7, [r5, #24]
 8001830:	3510      	adds	r5, #16
 8001832:	e7dd      	b.n	80017f0 <__init_ram_areas+0x10>
#endif
}
 8001834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001836:	bf00      	nop
 8001838:	08011e28 	.word	0x08011e28
 800183c:	20002e80 	.word	0x20002e80
 8001840:	20002e80 	.word	0x20002e80
 8001844:	20002e80 	.word	0x20002e80
 8001848:	0801319c 	.word	0x0801319c
 800184c:	00000000 	.word	0x00000000

08001850 <sdc_lld_is_write_protected>:
bool sdc_lld_sync(SDCDriver *sdcp) {

  /* CHTODO: Implement.*/
  (void)sdcp;
  return HAL_SUCCESS;
}
 8001850:	2000      	movs	r0, #0
 8001852:	4770      	bx	lr
	...

08001860 <usbStartReceiveI>:
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001860:	f04f 0c01 	mov.w	ip, #1
                      uint8_t *buf, size_t n) {
 8001864:	b570      	push	{r4, r5, r6, lr}
  osp->rxcnt  = 0;
 8001866:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001868:	8946      	ldrh	r6, [r0, #10]
  osp = usbp->epc[ep]->out_state;
 800186a:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 800186e:	68e4      	ldr	r4, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001870:	fa0c fe01 	lsl.w	lr, ip, r1
 8001874:	ea4e 0e06 	orr.w	lr, lr, r6
 8001878:	f8a0 e00a 	strh.w	lr, [r0, #10]
  osp = usbp->epc[ep]->out_state;
 800187c:	69a0      	ldr	r0, [r4, #24]
  osp->rxcnt  = 0;
 800187e:	e9c0 5201 	strd	r5, r2, [r0, #4]
  osp->rxsize = n;
 8001882:	6003      	str	r3, [r0, #0]
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8001884:	b133      	cbz	r3, 8001894 <usbStartReceiveI+0x34>
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8001886:	8a62      	ldrh	r2, [r4, #18]
 8001888:	3b01      	subs	r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001890:	fa1f fc83 	uxth.w	ip, r3
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8001894:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <usbStartReceiveI+0x58>)
 8001896:	f8a0 c00c 	strh.w	ip, [r0, #12]
 800189a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800189e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80018a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018a6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80018aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
 80018b8:	40005c00 	.word	0x40005c00
 80018bc:	00000000 	.word	0x00000000

080018c0 <ibnotify.lto_priv.0>:
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 80018c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80018c2:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 80018c6:	6810      	ldr	r0, [r2, #0]
 80018c8:	7801      	ldrb	r1, [r0, #0]
 80018ca:	2904      	cmp	r1, #4
 80018cc:	d000      	beq.n	80018d0 <ibnotify.lto_priv.0+0x10>
 80018ce:	4770      	bx	lr
 80018d0:	7a19      	ldrb	r1, [r3, #8]
 80018d2:	2902      	cmp	r1, #2
 80018d4:	d1fb      	bne.n	80018ce <ibnotify.lto_priv.0+0xe>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 80018d6:	f04f 0c01 	mov.w	ip, #1
static void ibnotify(io_buffers_queue_t *bqp) {
 80018da:	b500      	push	{lr}
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 80018dc:	7951      	ldrb	r1, [r2, #5]
 80018de:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 80018e2:	fa0c f201 	lsl.w	r2, ip, r1
 80018e6:	ea12 0f0e 	tst.w	r2, lr
 80018ea:	d001      	beq.n	80018f0 <ibnotify.lto_priv.0+0x30>
}
 80018ec:	f85d fb04 	ldr.w	pc, [sp], #4
  if (ibqIsFullI(ibqp)) {
 80018f0:	e9d3 2c07 	ldrd	r2, ip, [r3, #28]
 80018f4:	4562      	cmp	r2, ip
 80018f6:	d006      	beq.n	8001906 <ibnotify.lto_priv.0+0x46>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80018f8:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 80018fc:	f85d eb04 	ldr.w	lr, [sp], #4
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001900:	3204      	adds	r2, #4
 8001902:	f7ff bfad 	b.w	8001860 <usbStartReceiveI>
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1ef      	bne.n	80018ec <ibnotify.lto_priv.0+0x2c>
 800190c:	e7f4      	b.n	80018f8 <ibnotify.lto_priv.0+0x38>
 800190e:	bf00      	nop

08001910 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001910:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001912:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001916:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001918:	b113      	cbz	r3, 8001920 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 800191a:	2300      	movs	r3, #0
 800191c:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  udp = USB_GET_DESCRIPTOR(ep);
 8001920:	4bbc      	ldr	r3, [pc, #752]	; (8001c14 <_usb_ep0setup+0x304>)
  usbReadSetup(usbp, ep, usbp->setup);
 8001922:	f104 0274 	add.w	r2, r4, #116	; 0x74
 8001926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001928:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800192c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001930:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800193a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	f103 0010 	add.w	r0, r3, #16
 8001944:	4619      	mov	r1, r3
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8001946:	3304      	adds	r3, #4
 8001948:	6809      	ldr	r1, [r1, #0]
  for (n = 0; n < 4; n++) {
 800194a:	4283      	cmp	r3, r0
    *(uint16_t *)buf = (uint16_t)*pmap++;
 800194c:	f822 1b02 	strh.w	r1, [r2], #2
  for (n = 0; n < 4; n++) {
 8001950:	d1f8      	bne.n	8001944 <_usb_ep0setup+0x34>
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001952:	6863      	ldr	r3, [r4, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	b303      	cbz	r3, 800199a <_usb_ep0setup+0x8a>
      !(usbp->config->requests_hook_cb(usbp))) {
 8001958:	4620      	mov	r0, r4
 800195a:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 800195c:	b1e8      	cbz	r0, 800199a <_usb_ep0setup+0x8a>
  if (usbp->ep0n > max) {
 800195e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001960:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
  max = (size_t)get_hword(&usbp->setup[6]);
 8001964:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
  if (usbp->ep0n > max) {
 8001968:	429a      	cmp	r2, r3
    usbp->ep0n = max;
 800196a:	bf3c      	itt	cc
 800196c:	4613      	movcc	r3, r2
 800196e:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001970:	060a      	lsls	r2, r1, #24
 8001972:	f100 80d7 	bmi.w	8001b24 <_usb_ep0setup+0x214>
    if (usbp->ep0n != 0U) {
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8091 	beq.w	8001a9e <_usb_ep0setup+0x18e>
      usbp->ep0state = USB_EP0_OUT_RX;
 800197c:	2215      	movs	r2, #21
 800197e:	2320      	movs	r3, #32
 8001980:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001984:	f383 8811 	msr	BASEPRI, r3
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8001988:	2100      	movs	r1, #0
 800198a:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 800198e:	4620      	mov	r0, r4
 8001990:	f7ff ff66 	bl	8001860 <usbStartReceiveI>
 8001994:	f381 8811 	msr	BASEPRI, r1
}
 8001998:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800199a:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
 800199e:	f011 0660 	ands.w	r6, r1, #96	; 0x60
 80019a2:	d11c      	bne.n	80019de <_usb_ep0setup+0xce>
           ((uint32_t)usbp->setup[1] << 8U))) {
 80019a4:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80019a8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 80019ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80019b0:	f240 3202 	movw	r2, #770	; 0x302
 80019b4:	4293      	cmp	r3, r2
 80019b6:	f000 8169 	beq.w	8001c8c <_usb_ep0setup+0x37c>
 80019ba:	d84f      	bhi.n	8001a5c <_usb_ep0setup+0x14c>
 80019bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c0:	f000 8118 	beq.w	8001bf4 <_usb_ep0setup+0x2e4>
 80019c4:	d92a      	bls.n	8001a1c <_usb_ep0setup+0x10c>
 80019c6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80019ca:	f000 812b 	beq.w	8001c24 <_usb_ep0setup+0x314>
 80019ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019d2:	d104      	bne.n	80019de <_usb_ep0setup+0xce>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80019d4:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80019d8:	2b01      	cmp	r3, #1
 80019da:	f000 80d2 	beq.w	8001b82 <_usb_ep0setup+0x272>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80019de:	f248 0080 	movw	r0, #32896	; 0x8080
 80019e2:	498c      	ldr	r1, [pc, #560]	; (8001c14 <_usb_ep0setup+0x304>)
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80019e4:	6863      	ldr	r3, [r4, #4]
 80019e6:	680a      	ldr	r2, [r1, #0]
 80019e8:	681d      	ldr	r5, [r3, #0]
 80019ea:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80019ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019f2:	f082 0210 	eor.w	r2, r2, #16
 80019f6:	4302      	orrs	r2, r0
 80019f8:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80019fa:	680b      	ldr	r3, [r1, #0]
 80019fc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a08:	4303      	orrs	r3, r0
 8001a0a:	600b      	str	r3, [r1, #0]
 8001a0c:	b115      	cbz	r5, 8001a14 <_usb_ep0setup+0x104>
 8001a0e:	2106      	movs	r1, #6
 8001a10:	4620      	mov	r0, r4
 8001a12:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8001a14:	2306      	movs	r3, #6
 8001a16:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d05b      	beq.n	8001ad8 <_usb_ep0setup+0x1c8>
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d14b      	bne.n	8001abc <_usb_ep0setup+0x1ac>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8001a24:	f994 0078 	ldrsb.w	r0, [r4, #120]	; 0x78
 8001a28:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8001a2c:	2800      	cmp	r0, #0
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8001a2e:	4879      	ldr	r0, [pc, #484]	; (8001c14 <_usb_ep0setup+0x304>)
 8001a30:	f002 020f 	and.w	r2, r2, #15
 8001a34:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8001a38:	f2c0 8093 	blt.w	8001b62 <_usb_ep0setup+0x252>
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8001a3c:	f412 5240 	ands.w	r2, r2, #12288	; 0x3000
 8001a40:	d0cd      	beq.n	80019de <_usb_ep0setup+0xce>
 8001a42:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001a46:	f04f 0002 	mov.w	r0, #2
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f000 8093 	beq.w	8001b78 <_usb_ep0setup+0x268>
 8001a52:	4d71      	ldr	r5, [pc, #452]	; (8001c18 <_usb_ep0setup+0x308>)
 8001a54:	6722      	str	r2, [r4, #112]	; 0x70
 8001a56:	e9c4 501a 	strd	r5, r0, [r4, #104]	; 0x68
        return true;
 8001a5a:	e783      	b.n	8001964 <_usb_ep0setup+0x54>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a60:	f000 810c 	beq.w	8001c7c <_usb_ep0setup+0x36c>
 8001a64:	d940      	bls.n	8001ae8 <_usb_ep0setup+0x1d8>
 8001a66:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8001a6a:	d131      	bne.n	8001ad0 <_usb_ep0setup+0x1c0>
      if (usbp->state == USB_ACTIVE) {
 8001a6c:	7823      	ldrb	r3, [r4, #0]
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	f000 8091 	beq.w	8001b96 <_usb_ep0setup+0x286>
      if (usbp->setup[2] != 0U) {
 8001a74:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001a78:	b14b      	cbz	r3, 8001a8e <_usb_ep0setup+0x17e>
        usbp->state = USB_ACTIVE;
 8001a7a:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001a7c:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 8001a7e:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_ACTIVE;
 8001a82:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001a84:	6813      	ldr	r3, [r2, #0]
 8001a86:	b113      	cbz	r3, 8001a8e <_usb_ep0setup+0x17e>
 8001a88:	2102      	movs	r1, #2
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001a94:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001a98:	6723      	str	r3, [r4, #112]	; 0x70
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001a9a:	060b      	lsls	r3, r1, #24
 8001a9c:	d452      	bmi.n	8001b44 <_usb_ep0setup+0x234>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001a9e:	220b      	movs	r2, #11
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001aa6:	f383 8811 	msr	BASEPRI, r3
      usbStartTransmitI(usbp, 0, NULL, 0);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	4620      	mov	r0, r4
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7fe fdc5 	bl	8000640 <usbStartTransmitI>
 8001ab6:	f381 8811 	msr	BASEPRI, r1
}
 8001aba:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d18e      	bne.n	80019de <_usb_ep0setup+0xce>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8001ac6:	6723      	str	r3, [r4, #112]	; 0x70
 8001ac8:	66a0      	str	r0, [r4, #104]	; 0x68
 8001aca:	4613      	mov	r3, r2
 8001acc:	66e2      	str	r2, [r4, #108]	; 0x6c
    return true;
 8001ace:	e749      	b.n	8001964 <_usb_ep0setup+0x54>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001ad0:	f640 4202 	movw	r2, #3074	; 0xc02
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d182      	bne.n	80019de <_usb_ep0setup+0xce>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8001ad8:	2202      	movs	r2, #2
 8001ada:	2000      	movs	r0, #0
 8001adc:	4b4f      	ldr	r3, [pc, #316]	; (8001c1c <_usb_ep0setup+0x30c>)
 8001ade:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
 8001ae2:	66a3      	str	r3, [r4, #104]	; 0x68
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	e73d      	b.n	8001964 <_usb_ep0setup+0x54>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001ae8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001aec:	f000 80c1 	beq.w	8001c72 <_usb_ep0setup+0x362>
 8001af0:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	f63f af72 	bhi.w	80019de <_usb_ep0setup+0xce>
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8001afa:	6862      	ldr	r2, [r4, #4]
 8001afc:	4620      	mov	r0, r4
 8001afe:	6855      	ldr	r5, [r2, #4]
 8001b00:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
 8001b04:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8001b08:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8001b0c:	47a8      	blx	r5
    if (dp == NULL) {
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	f43f af65 	beq.w	80019de <_usb_ep0setup+0xce>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8001b14:	e9d0 3200 	ldrd	r3, r2, [r0]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001b18:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8001b1c:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 8001b20:	6726      	str	r6, [r4, #112]	; 0x70
    return true;
 8001b22:	e71f      	b.n	8001964 <_usb_ep0setup+0x54>
    if (usbp->ep0n != 0U) {
 8001b24:	b173      	cbz	r3, 8001b44 <_usb_ep0setup+0x234>
      usbp->ep0state = USB_EP0_IN_TX;
 8001b26:	2209      	movs	r2, #9
 8001b28:	2320      	movs	r3, #32
 8001b2a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001b2e:	f383 8811 	msr	BASEPRI, r3
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8001b32:	2100      	movs	r1, #0
 8001b34:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7fe fd81 	bl	8000640 <usbStartTransmitI>
 8001b3e:	f381 8811 	msr	BASEPRI, r1
}
 8001b42:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001b44:	2214      	movs	r2, #20
 8001b46:	2320      	movs	r3, #32
 8001b48:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001b4c:	f383 8811 	msr	BASEPRI, r3
      usbStartReceiveI(usbp, 0, NULL, 0);
 8001b50:	2300      	movs	r3, #0
 8001b52:	4620      	mov	r0, r4
 8001b54:	461a      	mov	r2, r3
 8001b56:	4619      	mov	r1, r3
 8001b58:	f7ff fe82 	bl	8001860 <usbStartReceiveI>
 8001b5c:	f381 8811 	msr	BASEPRI, r1
}
 8001b60:	bd70      	pop	{r4, r5, r6, pc}
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8001b62:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 8001b66:	f43f af3a 	beq.w	80019de <_usb_ep0setup+0xce>
 8001b6a:	2a10      	cmp	r2, #16
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001b6c:	f04f 0002 	mov.w	r0, #2
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f47f af6d 	bne.w	8001a52 <_usb_ep0setup+0x142>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8001b78:	4d29      	ldr	r5, [pc, #164]	; (8001c20 <_usb_ep0setup+0x310>)
 8001b7a:	6722      	str	r2, [r4, #112]	; 0x70
 8001b7c:	e9c4 501a 	strd	r5, r0, [r4, #104]	; 0x68
        return true;
 8001b80:	e6f0      	b.n	8001964 <_usb_ep0setup+0x54>
      usbp->status |= 2U;
 8001b82:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001b86:	e9c4 661b 	strd	r6, r6, [r4, #108]	; 0x6c
      usbp->status |= 2U;
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001b8e:	66a6      	str	r6, [r4, #104]	; 0x68
      usbp->status |= 2U;
 8001b90:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
      return true;
 8001b94:	e781      	b.n	8001a9a <_usb_ep0setup+0x18a>
 8001b96:	2320      	movs	r3, #32
 8001b98:	f383 8811 	msr	BASEPRI, r3
  usbp->pmnext = 64;
 8001b9c:	2140      	movs	r1, #64	; 0x40
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8001b9e:	2201      	movs	r2, #1
    EPR_TOGGLE(i, 0);
 8001ba0:	f248 0080 	movw	r0, #32896	; 0x8080
  usbp->transmitting &= 1U;
 8001ba4:	68a3      	ldr	r3, [r4, #8]
    usbp->epc[i] = NULL;
 8001ba6:	e9c4 6605 	strd	r6, r6, [r4, #20]
 8001baa:	e9c4 6607 	strd	r6, r6, [r4, #28]
 8001bae:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
  usbp->transmitting &= 1U;
 8001bb2:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    usbp->epc[i] = NULL;
 8001bb6:	6126      	str	r6, [r4, #16]
  usbp->transmitting &= 1U;
 8001bb8:	60a3      	str	r3, [r4, #8]
  usbp->pmnext = 64;
 8001bba:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    EPR_TOGGLE(i, 0);
 8001bbe:	0093      	lsls	r3, r2, #2
 8001bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bc4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001bc8:	6819      	ldr	r1, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8001bca:	3201      	adds	r2, #1
    EPR_TOGGLE(i, 0);
 8001bcc:	4301      	orrs	r1, r0
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8001bce:	2a08      	cmp	r2, #8
    EPR_TOGGLE(i, 0);
 8001bd0:	6019      	str	r1, [r3, #0]
    EPR_SET(i, 0);
 8001bd2:	6018      	str	r0, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8001bd4:	d1f3      	bne.n	8001bbe <_usb_ep0setup+0x2ae>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f383 8811 	msr	BASEPRI, r3
        usbp->state = USB_SELECTED;
 8001bdc:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001bde:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = 0U;
 8001be0:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_SELECTED;
 8001be4:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001be6:	6813      	ldr	r3, [r2, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f43f af43 	beq.w	8001a74 <_usb_ep0setup+0x164>
 8001bee:	4620      	mov	r0, r4
 8001bf0:	4798      	blx	r3
 8001bf2:	e73f      	b.n	8001a74 <_usb_ep0setup+0x164>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001bf4:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	f47f aef0 	bne.w	80019de <_usb_ep0setup+0xce>
      usbp->status &= ~2U;
 8001bfe:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001c02:	e9c4 661b 	strd	r6, r6, [r4, #108]	; 0x6c
      usbp->status &= ~2U;
 8001c06:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001c0a:	66a6      	str	r6, [r4, #104]	; 0x68
      usbp->status &= ~2U;
 8001c0c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
      return true;
 8001c10:	e743      	b.n	8001a9a <_usb_ep0setup+0x18a>
 8001c12:	bf00      	nop
 8001c14:	40005c00 	.word	0x40005c00
 8001c18:	080118a4 	.word	0x080118a4
 8001c1c:	080124bc 	.word	0x080124bc
 8001c20:	08011bd0 	.word	0x08011bd0
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8001c24:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f47f aed8 	bne.w	80019de <_usb_ep0setup+0xce>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001c2e:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8001c32:	f012 030f 	ands.w	r3, r2, #15
 8001c36:	d017      	beq.n	8001c68 <_usb_ep0setup+0x358>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c3e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001c42:	f012 0f80 	tst.w	r2, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	d13d      	bne.n	8001cc6 <_usb_ep0setup+0x3b6>
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8001c4a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8001c4e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8001c52:	d009      	beq.n	8001c68 <_usb_ep0setup+0x358>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c5e:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 8001c62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c66:	601a      	str	r2, [r3, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8001c6e:	6723      	str	r3, [r4, #112]	; 0x70
    return true;
 8001c70:	e713      	b.n	8001a9a <_usb_ep0setup+0x18a>
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <_usb_ep0setup+0x3f4>)
 8001c74:	e9c4 661a 	strd	r6, r6, [r4, #104]	; 0x68
 8001c78:	6723      	str	r3, [r4, #112]	; 0x70
    return true;
 8001c7a:	e70e      	b.n	8001a9a <_usb_ep0setup+0x18a>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8001c82:	66a3      	str	r3, [r4, #104]	; 0x68
 8001c84:	6726      	str	r6, [r4, #112]	; 0x70
 8001c86:	4613      	mov	r3, r2
 8001c88:	66e2      	str	r2, [r4, #108]	; 0x6c
    return true;
 8001c8a:	e66b      	b.n	8001964 <_usb_ep0setup+0x54>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8001c8c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f47f aea4 	bne.w	80019de <_usb_ep0setup+0xce>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001c96:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8001c9a:	f013 020f 	ands.w	r2, r3, #15
 8001c9e:	d0e3      	beq.n	8001c68 <_usb_ep0setup+0x358>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001ca0:	4819      	ldr	r0, [pc, #100]	; (8001d08 <_usb_ep0setup+0x3f8>)
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001ca2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ca6:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8001caa:	d11d      	bne.n	8001ce8 <_usb_ep0setup+0x3d8>
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001cac:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8001cc4:	e7d0      	b.n	8001c68 <_usb_ep0setup+0x358>
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8001cc6:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001cca:	2a30      	cmp	r2, #48	; 0x30
 8001ccc:	d0cc      	beq.n	8001c68 <_usb_ep0setup+0x358>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cd8:	f082 0220 	eor.w	r2, r2, #32
 8001cdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ce0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e7bf      	b.n	8001c68 <_usb_ep0setup+0x358>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001ce8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cf0:	f083 0310 	eor.w	r3, r3, #16
 8001cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cfc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8001d00:	e7b2      	b.n	8001c68 <_usb_ep0setup+0x358>
 8001d02:	bf00      	nop
 8001d04:	08000611 	.word	0x08000611
 8001d08:	40005c00 	.word	0x40005c00
 8001d0c:	00000000 	.word	0x00000000

08001d10 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8001d10:	b538      	push	{r3, r4, r5, lr}
 8001d12:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8001d16:	4604      	mov	r4, r0
 8001d18:	2b15      	cmp	r3, #21
 8001d1a:	d81f      	bhi.n	8001d5c <_usb_ep0in+0x4c>
 8001d1c:	e8df f003 	tbb	[pc, r3]
 8001d20:	1e1e1e1f 	.word	0x1e1e1e1f
 8001d24:	1e1f1e1e 	.word	0x1e1f1e1e
 8001d28:	3e100b1e 	.word	0x3e100b1e
 8001d2c:	1e1e1e1e 	.word	0x1e1e1e1e
 8001d30:	1e1e1e1e 	.word	0x1e1e1e1e
 8001d34:	1f1f      	.short	0x1f1f
    if ((usbp->ep0n < max) &&
 8001d36:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    max = (size_t)get_hword(&usbp->setup[6]);
 8001d38:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    if ((usbp->ep0n < max) &&
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d334      	bcc.n	8001daa <_usb_ep0in+0x9a>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001d40:	2214      	movs	r2, #20
 8001d42:	2320      	movs	r3, #32
 8001d44:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001d48:	f383 8811 	msr	BASEPRI, r3
    usbStartReceiveI(usbp, 0, NULL, 0);
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	4620      	mov	r0, r4
 8001d50:	461a      	mov	r2, r3
 8001d52:	4619      	mov	r1, r3
 8001d54:	f7ff fd84 	bl	8001860 <usbStartReceiveI>
 8001d58:	f381 8811 	msr	BASEPRI, r1
}
 8001d5c:	bd38      	pop	{r3, r4, r5, pc}
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001d5e:	f248 0080 	movw	r0, #32896	; 0x8080
 8001d62:	491c      	ldr	r1, [pc, #112]	; (8001dd4 <_usb_ep0in+0xc4>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001d64:	6863      	ldr	r3, [r4, #4]
 8001d66:	680a      	ldr	r2, [r1, #0]
 8001d68:	681d      	ldr	r5, [r3, #0]
 8001d6a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d72:	f082 0210 	eor.w	r2, r2, #16
 8001d76:	4302      	orrs	r2, r0
 8001d78:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001d7a:	680b      	ldr	r3, [r1, #0]
 8001d7c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d88:	4303      	orrs	r3, r0
 8001d8a:	600b      	str	r3, [r1, #0]
 8001d8c:	b115      	cbz	r5, 8001d94 <_usb_ep0in+0x84>
 8001d8e:	2106      	movs	r1, #6
 8001d90:	4620      	mov	r0, r4
 8001d92:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001d94:	2306      	movs	r3, #6
 8001d96:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001d9a:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8001d9c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001d9e:	b103      	cbz	r3, 8001da2 <_usb_ep0in+0x92>
      usbp->ep0endcb(usbp);
 8001da0:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001da8:	bd38      	pop	{r3, r4, r5, pc}
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8001daa:	68c2      	ldr	r2, [r0, #12]
 8001dac:	8a11      	ldrh	r1, [r2, #16]
 8001dae:	fbb3 f2f1 	udiv	r2, r3, r1
 8001db2:	fb01 3112 	mls	r1, r1, r2, r3
    if ((usbp->ep0n < max) &&
 8001db6:	2900      	cmp	r1, #0
 8001db8:	d1c2      	bne.n	8001d40 <_usb_ep0in+0x30>
 8001dba:	2320      	movs	r3, #32
 8001dbc:	f383 8811 	msr	BASEPRI, r3
      usbStartTransmitI(usbp, 0, NULL, 0);
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	f7fe fc3c 	bl	8000640 <usbStartTransmitI>
 8001dc8:	f381 8811 	msr	BASEPRI, r1
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8001dcc:	230a      	movs	r3, #10
 8001dce:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001dd2:	bd38      	pop	{r3, r4, r5, pc}
 8001dd4:	40005c00 	.word	0x40005c00
	...

08001de0 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001de0:	b508      	push	{r3, lr}
 */
void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
  uint32_t flags;
  uint32_t selfindex = (uint32_t)dmastp->selfindex;

  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <Vector6C+0x58>)
 8001de4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001de6:	689a      	ldr	r2, [r3, #8]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001de8:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001dec:	4211      	tst	r1, r2
 8001dee:	d005      	beq.n	8001dfc <Vector6C+0x1c>
    dmastp->dma->IFCR = flags << dmastp->shift;
    if (dma.streams[selfindex].func) {
 8001df0:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <Vector6C+0x5c>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001df2:	6059      	str	r1, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001df4:	6893      	ldr	r3, [r2, #8]
 8001df6:	b10b      	cbz	r3, 8001dfc <Vector6C+0x1c>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001df8:	68d0      	ldr	r0, [r2, #12]
 8001dfa:	4798      	blx	r3
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001e02:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <Vector6C+0x60>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001e0a:	d102      	bne.n	8001e12 <Vector6C+0x32>
 8001e0c:	f383 8811 	msr	BASEPRI, r3
}
 8001e10:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001e12:	f3ef 8309 	mrs	r3, PSP

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8001e16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001e1a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001e1c:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001e1e:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <Vector6C+0x64>)
 8001e24:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8001e26:	68d2      	ldr	r2, [r2, #12]
    /* Writing back the modified S-PSP value.*/
    __set_PSP(s_psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001e28:	6889      	ldr	r1, [r1, #8]
 8001e2a:	6892      	ldr	r2, [r2, #8]
 8001e2c:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8001e2e:	bf8c      	ite	hi
 8001e30:	4a05      	ldrhi	r2, [pc, #20]	; (8001e48 <Vector6C+0x68>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8001e32:	4a06      	ldrls	r2, [pc, #24]	; (8001e4c <Vector6C+0x6c>)
 8001e34:	619a      	str	r2, [r3, #24]
 8001e36:	bd08      	pop	{r3, pc}
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	20001178 	.word	0x20001178
 8001e40:	e000ed00 	.word	0xe000ed00
 8001e44:	20001050 	.word	0x20001050
 8001e48:	08000263 	.word	0x08000263
 8001e4c:	08000266 	.word	0x08000266

08001e50 <Vector70>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001e50:	4b16      	ldr	r3, [pc, #88]	; (8001eac <Vector70+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8001e52:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001e54:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001e56:	69da      	ldr	r2, [r3, #28]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001e58:	0909      	lsrs	r1, r1, #4
 8001e5a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001e5e:	4211      	tst	r1, r2
 8001e60:	d006      	beq.n	8001e70 <Vector70+0x20>
    if (dma.streams[selfindex].func) {
 8001e62:	4813      	ldr	r0, [pc, #76]	; (8001eb0 <Vector70+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001e64:	010a      	lsls	r2, r1, #4
    if (dma.streams[selfindex].func) {
 8001e66:	6904      	ldr	r4, [r0, #16]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001e68:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001e6a:	b10c      	cbz	r4, 8001e70 <Vector70+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001e6c:	6940      	ldr	r0, [r0, #20]
 8001e6e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001e70:	2320      	movs	r3, #32
 8001e72:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <Vector70+0x64>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001e7e:	d102      	bne.n	8001e86 <Vector70+0x36>
 8001e80:	f383 8811 	msr	BASEPRI, r3
}
 8001e84:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001e86:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001e8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001e8e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001e90:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001e92:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <Vector70+0x68>)
 8001e98:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8001e9a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8001e9c:	6889      	ldr	r1, [r1, #8]
 8001e9e:	6892      	ldr	r2, [r2, #8]
 8001ea0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8001ea2:	bf8c      	ite	hi
 8001ea4:	4a05      	ldrhi	r2, [pc, #20]	; (8001ebc <Vector70+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8001ea6:	4a06      	ldrls	r2, [pc, #24]	; (8001ec0 <Vector70+0x70>)
 8001ea8:	619a      	str	r2, [r3, #24]
 8001eaa:	bd10      	pop	{r4, pc}
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	20001178 	.word	0x20001178
 8001eb4:	e000ed00 	.word	0xe000ed00
 8001eb8:	20001050 	.word	0x20001050
 8001ebc:	08000263 	.word	0x08000263
 8001ec0:	08000266 	.word	0x08000266
	...

08001ed0 <Vector74>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001ed0:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <Vector74+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8001ed2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001ed4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001ed8:	0a09      	lsrs	r1, r1, #8
 8001eda:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001ede:	4211      	tst	r1, r2
 8001ee0:	d006      	beq.n	8001ef0 <Vector74+0x20>
    if (dma.streams[selfindex].func) {
 8001ee2:	4813      	ldr	r0, [pc, #76]	; (8001f30 <Vector74+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001ee4:	020a      	lsls	r2, r1, #8
    if (dma.streams[selfindex].func) {
 8001ee6:	6984      	ldr	r4, [r0, #24]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001ee8:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001eea:	b10c      	cbz	r4, 8001ef0 <Vector74+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001eec:	69c0      	ldr	r0, [r0, #28]
 8001eee:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <Vector74+0x64>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001efe:	d102      	bne.n	8001f06 <Vector74+0x36>
 8001f00:	f383 8811 	msr	BASEPRI, r3
}
 8001f04:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001f06:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001f0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001f0e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001f10:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001f12:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <Vector74+0x68>)
 8001f18:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8001f1a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8001f1c:	6889      	ldr	r1, [r1, #8]
 8001f1e:	6892      	ldr	r2, [r2, #8]
 8001f20:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8001f22:	bf8c      	ite	hi
 8001f24:	4a05      	ldrhi	r2, [pc, #20]	; (8001f3c <Vector74+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8001f26:	4a06      	ldrls	r2, [pc, #24]	; (8001f40 <Vector74+0x70>)
 8001f28:	619a      	str	r2, [r3, #24]
 8001f2a:	bd10      	pop	{r4, pc}
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	20001178 	.word	0x20001178
 8001f34:	e000ed00 	.word	0xe000ed00
 8001f38:	20001050 	.word	0x20001050
 8001f3c:	08000263 	.word	0x08000263
 8001f40:	08000266 	.word	0x08000266
	...

08001f50 <Vector78>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <Vector78+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001f52:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001f54:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001f58:	0b09      	lsrs	r1, r1, #12
 8001f5a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001f5e:	4211      	tst	r1, r2
 8001f60:	d006      	beq.n	8001f70 <Vector78+0x20>
    if (dma.streams[selfindex].func) {
 8001f62:	4813      	ldr	r0, [pc, #76]	; (8001fb0 <Vector78+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001f64:	030a      	lsls	r2, r1, #12
    if (dma.streams[selfindex].func) {
 8001f66:	6a04      	ldr	r4, [r0, #32]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001f68:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001f6a:	b10c      	cbz	r4, 8001f70 <Vector78+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001f6c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001f6e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001f70:	2320      	movs	r3, #32
 8001f72:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <Vector78+0x64>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001f7e:	d102      	bne.n	8001f86 <Vector78+0x36>
 8001f80:	f383 8811 	msr	BASEPRI, r3
}
 8001f84:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001f86:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001f8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001f8e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001f90:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001f92:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <Vector78+0x68>)
 8001f98:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8001f9a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8001f9c:	6889      	ldr	r1, [r1, #8]
 8001f9e:	6892      	ldr	r2, [r2, #8]
 8001fa0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8001fa2:	bf8c      	ite	hi
 8001fa4:	4a05      	ldrhi	r2, [pc, #20]	; (8001fbc <Vector78+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8001fa6:	4a06      	ldrls	r2, [pc, #24]	; (8001fc0 <Vector78+0x70>)
 8001fa8:	619a      	str	r2, [r3, #24]
 8001faa:	bd10      	pop	{r4, pc}
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	20001178 	.word	0x20001178
 8001fb4:	e000ed00 	.word	0xe000ed00
 8001fb8:	20001050 	.word	0x20001050
 8001fbc:	08000263 	.word	0x08000263
 8001fc0:	08000266 	.word	0x08000266
	...

08001fd0 <Vector7C>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <Vector7C+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8001fd2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001fd4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001fd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001fd8:	0c09      	lsrs	r1, r1, #16
 8001fda:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001fde:	4211      	tst	r1, r2
 8001fe0:	d006      	beq.n	8001ff0 <Vector7C+0x20>
    if (dma.streams[selfindex].func) {
 8001fe2:	4813      	ldr	r0, [pc, #76]	; (8002030 <Vector7C+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001fe4:	040a      	lsls	r2, r1, #16
    if (dma.streams[selfindex].func) {
 8001fe6:	6a84      	ldr	r4, [r0, #40]	; 0x28
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001fe8:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001fea:	b10c      	cbz	r4, 8001ff0 <Vector7C+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001fec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001fee:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <Vector7C+0x64>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001ffe:	d102      	bne.n	8002006 <Vector7C+0x36>
 8002000:	f383 8811 	msr	BASEPRI, r3
}
 8002004:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002006:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800200a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800200e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002010:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002012:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <Vector7C+0x68>)
 8002018:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800201a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800201c:	6889      	ldr	r1, [r1, #8]
 800201e:	6892      	ldr	r2, [r2, #8]
 8002020:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002022:	bf8c      	ite	hi
 8002024:	4a05      	ldrhi	r2, [pc, #20]	; (800203c <Vector7C+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002026:	4a06      	ldrls	r2, [pc, #24]	; (8002040 <Vector7C+0x70>)
 8002028:	619a      	str	r2, [r3, #24]
 800202a:	bd10      	pop	{r4, pc}
 800202c:	40020000 	.word	0x40020000
 8002030:	20001178 	.word	0x20001178
 8002034:	e000ed00 	.word	0xe000ed00
 8002038:	20001050 	.word	0x20001050
 800203c:	08000263 	.word	0x08000263
 8002040:	08000266 	.word	0x08000266
	...

08002050 <Vector80>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002050:	4b16      	ldr	r3, [pc, #88]	; (80020ac <Vector80+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8002052:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002054:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8002056:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002058:	0d09      	lsrs	r1, r1, #20
 800205a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 800205e:	4211      	tst	r1, r2
 8002060:	d006      	beq.n	8002070 <Vector80+0x20>
    if (dma.streams[selfindex].func) {
 8002062:	4813      	ldr	r0, [pc, #76]	; (80020b0 <Vector80+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002064:	050a      	lsls	r2, r1, #20
    if (dma.streams[selfindex].func) {
 8002066:	6b04      	ldr	r4, [r0, #48]	; 0x30
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002068:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 800206a:	b10c      	cbz	r4, 8002070 <Vector80+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800206c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800206e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002070:	2320      	movs	r3, #32
 8002072:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002076:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <Vector80+0x64>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800207e:	d102      	bne.n	8002086 <Vector80+0x36>
 8002080:	f383 8811 	msr	BASEPRI, r3
}
 8002084:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002086:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800208a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800208e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002090:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002092:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <Vector80+0x68>)
 8002098:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800209a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800209c:	6889      	ldr	r1, [r1, #8]
 800209e:	6892      	ldr	r2, [r2, #8]
 80020a0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80020a2:	bf8c      	ite	hi
 80020a4:	4a05      	ldrhi	r2, [pc, #20]	; (80020bc <Vector80+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80020a6:	4a06      	ldrls	r2, [pc, #24]	; (80020c0 <Vector80+0x70>)
 80020a8:	619a      	str	r2, [r3, #24]
 80020aa:	bd10      	pop	{r4, pc}
 80020ac:	40020000 	.word	0x40020000
 80020b0:	20001178 	.word	0x20001178
 80020b4:	e000ed00 	.word	0xe000ed00
 80020b8:	20001050 	.word	0x20001050
 80020bc:	08000263 	.word	0x08000263
 80020c0:	08000266 	.word	0x08000266
	...

080020d0 <Vector84>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <Vector84+0x60>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80020d2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80020d4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 80020d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80020da:	0e09      	lsrs	r1, r1, #24
 80020dc:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 80020e0:	4211      	tst	r1, r2
 80020e2:	d006      	beq.n	80020f2 <Vector84+0x22>
    if (dma.streams[selfindex].func) {
 80020e4:	4813      	ldr	r0, [pc, #76]	; (8002134 <Vector84+0x64>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 80020e6:	060a      	lsls	r2, r1, #24
    if (dma.streams[selfindex].func) {
 80020e8:	6b84      	ldr	r4, [r0, #56]	; 0x38
    dmastp->dma->IFCR = flags << dmastp->shift;
 80020ea:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 80020ec:	b10c      	cbz	r4, 80020f2 <Vector84+0x22>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 80020ee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80020f0:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80020f2:	2320      	movs	r3, #32
 80020f4:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <Vector84+0x68>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002100:	d102      	bne.n	8002108 <Vector84+0x38>
 8002102:	f383 8811 	msr	BASEPRI, r3
}
 8002106:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002108:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800210c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8002110:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002112:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002114:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002118:	4a08      	ldr	r2, [pc, #32]	; (800213c <Vector84+0x6c>)
 800211a:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800211c:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800211e:	6889      	ldr	r1, [r1, #8]
 8002120:	6892      	ldr	r2, [r2, #8]
 8002122:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002124:	bf8c      	ite	hi
 8002126:	4a06      	ldrhi	r2, [pc, #24]	; (8002140 <Vector84+0x70>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002128:	4a06      	ldrls	r2, [pc, #24]	; (8002144 <Vector84+0x74>)
 800212a:	619a      	str	r2, [r3, #24]
 800212c:	bd10      	pop	{r4, pc}
 800212e:	bf00      	nop
 8002130:	40020000 	.word	0x40020000
 8002134:	20001178 	.word	0x20001178
 8002138:	e000ed00 	.word	0xe000ed00
 800213c:	20001050 	.word	0x20001050
 8002140:	08000263 	.word	0x08000263
 8002144:	08000266 	.word	0x08000266
	...

08002150 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002150:	b508      	push	{r3, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <Vector120+0x58>)
 8002154:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8002156:	689a      	ldr	r2, [r3, #8]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002158:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 800215c:	4211      	tst	r1, r2
 800215e:	d005      	beq.n	800216c <Vector120+0x1c>
    if (dma.streams[selfindex].func) {
 8002160:	4a12      	ldr	r2, [pc, #72]	; (80021ac <Vector120+0x5c>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002162:	6059      	str	r1, [r3, #4]
    if (dma.streams[selfindex].func) {
 8002164:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002166:	b10b      	cbz	r3, 800216c <Vector120+0x1c>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8002168:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800216a:	4798      	blx	r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800216c:	2320      	movs	r3, #32
 800216e:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <Vector120+0x60>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800217a:	d102      	bne.n	8002182 <Vector120+0x32>
 800217c:	f383 8811 	msr	BASEPRI, r3
}
 8002180:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002182:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8002186:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800218a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800218c:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800218e:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <Vector120+0x64>)
 8002194:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8002196:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8002198:	6889      	ldr	r1, [r1, #8]
 800219a:	6892      	ldr	r2, [r2, #8]
 800219c:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800219e:	bf8c      	ite	hi
 80021a0:	4a05      	ldrhi	r2, [pc, #20]	; (80021b8 <Vector120+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80021a2:	4a06      	ldrls	r2, [pc, #24]	; (80021bc <Vector120+0x6c>)
 80021a4:	619a      	str	r2, [r3, #24]
 80021a6:	bd08      	pop	{r3, pc}
 80021a8:	40020400 	.word	0x40020400
 80021ac:	20001178 	.word	0x20001178
 80021b0:	e000ed00 	.word	0xe000ed00
 80021b4:	20001050 	.word	0x20001050
 80021b8:	08000263 	.word	0x08000263
 80021bc:	08000266 	.word	0x08000266

080021c0 <Vector124>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80021c0:	4b16      	ldr	r3, [pc, #88]	; (800221c <Vector124+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80021c2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80021c4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 80021c6:	69da      	ldr	r2, [r3, #28]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80021c8:	0909      	lsrs	r1, r1, #4
 80021ca:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 80021ce:	4211      	tst	r1, r2
 80021d0:	d006      	beq.n	80021e0 <Vector124+0x20>
    if (dma.streams[selfindex].func) {
 80021d2:	4813      	ldr	r0, [pc, #76]	; (8002220 <Vector124+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 80021d4:	010a      	lsls	r2, r1, #4
    if (dma.streams[selfindex].func) {
 80021d6:	6c84      	ldr	r4, [r0, #72]	; 0x48
    dmastp->dma->IFCR = flags << dmastp->shift;
 80021d8:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 80021da:	b10c      	cbz	r4, 80021e0 <Vector124+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 80021dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80021de:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80021e0:	2320      	movs	r3, #32
 80021e2:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <Vector124+0x64>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80021ee:	d102      	bne.n	80021f6 <Vector124+0x36>
 80021f0:	f383 8811 	msr	BASEPRI, r3
}
 80021f4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80021f6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80021fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 80021fe:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002200:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002202:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <Vector124+0x68>)
 8002208:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800220a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800220c:	6889      	ldr	r1, [r1, #8]
 800220e:	6892      	ldr	r2, [r2, #8]
 8002210:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002212:	bf8c      	ite	hi
 8002214:	4a05      	ldrhi	r2, [pc, #20]	; (800222c <Vector124+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002216:	4a06      	ldrls	r2, [pc, #24]	; (8002230 <Vector124+0x70>)
 8002218:	619a      	str	r2, [r3, #24]
 800221a:	bd10      	pop	{r4, pc}
 800221c:	40020400 	.word	0x40020400
 8002220:	20001178 	.word	0x20001178
 8002224:	e000ed00 	.word	0xe000ed00
 8002228:	20001050 	.word	0x20001050
 800222c:	08000263 	.word	0x08000263
 8002230:	08000266 	.word	0x08000266
	...

08002240 <Vector128>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <Vector128+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8002242:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002244:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8002246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002248:	0a09      	lsrs	r1, r1, #8
 800224a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 800224e:	4211      	tst	r1, r2
 8002250:	d006      	beq.n	8002260 <Vector128+0x20>
    if (dma.streams[selfindex].func) {
 8002252:	4813      	ldr	r0, [pc, #76]	; (80022a0 <Vector128+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002254:	020a      	lsls	r2, r1, #8
    if (dma.streams[selfindex].func) {
 8002256:	6d04      	ldr	r4, [r0, #80]	; 0x50
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002258:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 800225a:	b10c      	cbz	r4, 8002260 <Vector128+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800225c:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800225e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002260:	2320      	movs	r3, #32
 8002262:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <Vector128+0x64>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800226e:	d102      	bne.n	8002276 <Vector128+0x36>
 8002270:	f383 8811 	msr	BASEPRI, r3
}
 8002274:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002276:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800227a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800227e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002280:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002282:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002286:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <Vector128+0x68>)
 8002288:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800228a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800228c:	6889      	ldr	r1, [r1, #8]
 800228e:	6892      	ldr	r2, [r2, #8]
 8002290:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002292:	bf8c      	ite	hi
 8002294:	4a05      	ldrhi	r2, [pc, #20]	; (80022ac <Vector128+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002296:	4a06      	ldrls	r2, [pc, #24]	; (80022b0 <Vector128+0x70>)
 8002298:	619a      	str	r2, [r3, #24]
 800229a:	bd10      	pop	{r4, pc}
 800229c:	40020400 	.word	0x40020400
 80022a0:	20001178 	.word	0x20001178
 80022a4:	e000ed00 	.word	0xe000ed00
 80022a8:	20001050 	.word	0x20001050
 80022ac:	08000263 	.word	0x08000263
 80022b0:	08000266 	.word	0x08000266
	...

080022c0 <Vector12C>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <Vector12C+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80022c2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80022c4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 80022c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80022c8:	0b09      	lsrs	r1, r1, #12
 80022ca:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 80022ce:	4211      	tst	r1, r2
 80022d0:	d006      	beq.n	80022e0 <Vector12C+0x20>
    if (dma.streams[selfindex].func) {
 80022d2:	4813      	ldr	r0, [pc, #76]	; (8002320 <Vector12C+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 80022d4:	030a      	lsls	r2, r1, #12
    if (dma.streams[selfindex].func) {
 80022d6:	6d84      	ldr	r4, [r0, #88]	; 0x58
    dmastp->dma->IFCR = flags << dmastp->shift;
 80022d8:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 80022da:	b10c      	cbz	r4, 80022e0 <Vector12C+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 80022dc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80022de:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80022e0:	2320      	movs	r3, #32
 80022e2:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <Vector12C+0x64>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80022ee:	d102      	bne.n	80022f6 <Vector12C+0x36>
 80022f0:	f383 8811 	msr	BASEPRI, r3
}
 80022f4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80022f6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80022fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 80022fe:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002300:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002302:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002306:	4a08      	ldr	r2, [pc, #32]	; (8002328 <Vector12C+0x68>)
 8002308:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800230a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800230c:	6889      	ldr	r1, [r1, #8]
 800230e:	6892      	ldr	r2, [r2, #8]
 8002310:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002312:	bf8c      	ite	hi
 8002314:	4a05      	ldrhi	r2, [pc, #20]	; (800232c <Vector12C+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002316:	4a06      	ldrls	r2, [pc, #24]	; (8002330 <Vector12C+0x70>)
 8002318:	619a      	str	r2, [r3, #24]
 800231a:	bd10      	pop	{r4, pc}
 800231c:	40020400 	.word	0x40020400
 8002320:	20001178 	.word	0x20001178
 8002324:	e000ed00 	.word	0xe000ed00
 8002328:	20001050 	.word	0x20001050
 800232c:	08000263 	.word	0x08000263
 8002330:	08000266 	.word	0x08000266
	...

08002340 <Vector130>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <Vector130+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002342:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002344:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8002346:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002348:	0c09      	lsrs	r1, r1, #16
 800234a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 800234e:	4211      	tst	r1, r2
 8002350:	d006      	beq.n	8002360 <Vector130+0x20>
    if (dma.streams[selfindex].func) {
 8002352:	4813      	ldr	r0, [pc, #76]	; (80023a0 <Vector130+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002354:	040a      	lsls	r2, r1, #16
    if (dma.streams[selfindex].func) {
 8002356:	6e04      	ldr	r4, [r0, #96]	; 0x60
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002358:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 800235a:	b10c      	cbz	r4, 8002360 <Vector130+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800235c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800235e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002360:	2320      	movs	r3, #32
 8002362:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <Vector130+0x64>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800236e:	d102      	bne.n	8002376 <Vector130+0x36>
 8002370:	f383 8811 	msr	BASEPRI, r3
}
 8002374:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002376:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800237a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800237e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002380:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002382:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <Vector130+0x68>)
 8002388:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800238a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800238c:	6889      	ldr	r1, [r1, #8]
 800238e:	6892      	ldr	r2, [r2, #8]
 8002390:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002392:	bf8c      	ite	hi
 8002394:	4a05      	ldrhi	r2, [pc, #20]	; (80023ac <Vector130+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002396:	4a06      	ldrls	r2, [pc, #24]	; (80023b0 <Vector130+0x70>)
 8002398:	619a      	str	r2, [r3, #24]
 800239a:	bd10      	pop	{r4, pc}
 800239c:	40020400 	.word	0x40020400
 80023a0:	20001178 	.word	0x20001178
 80023a4:	e000ed00 	.word	0xe000ed00
 80023a8:	20001050 	.word	0x20001050
 80023ac:	08000263 	.word	0x08000263
 80023b0:	08000266 	.word	0x08000266
	...

080023c0 <Vector104>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80023c0:	2320      	movs	r3, #32
OSAL_IRQ_HANDLER(STM32_SDIO_HANDLER) {
 80023c2:	b410      	push	{r4}
 80023c4:	f383 8811 	msr	BASEPRI, r3
  SDIO->MASK = 0;
 80023c8:	2100      	movs	r1, #0
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80023ca:	481b      	ldr	r0, [pc, #108]	; (8002438 <Vector104+0x78>)
 80023cc:	4a1b      	ldr	r2, [pc, #108]	; (800243c <Vector104+0x7c>)
 80023ce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80023d0:	63d1      	str	r1, [r2, #60]	; 0x3c
 80023d2:	b173      	cbz	r3, 80023f2 <Vector104+0x32>
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80023d4:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80023d6:	689c      	ldr	r4, [r3, #8]
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 80023d8:	63c1      	str	r1, [r0, #60]	; 0x3c
    tp->u.rdymsg = msg;
 80023da:	6299      	str	r1, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80023dc:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 80023e0:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80023e2:	6891      	ldr	r1, [r2, #8]
 80023e4:	42a1      	cmp	r1, r4
 80023e6:	d2fb      	bcs.n	80023e0 <Vector104+0x20>
  p->prev       = pqp->prev;
 80023e8:	6851      	ldr	r1, [r2, #4]
 80023ea:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 80023ee:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80023f0:	6053      	str	r3, [r2, #4]
 80023f2:	2300      	movs	r3, #0
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	2320      	movs	r3, #32
 80023fa:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <Vector104+0x80>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002406:	d103      	bne.n	8002410 <Vector104+0x50>
 8002408:	f383 8811 	msr	BASEPRI, r3
}
 800240c:	bc10      	pop	{r4}
 800240e:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002410:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8002414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8002418:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800241a:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800241c:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002420:	4a08      	ldr	r2, [pc, #32]	; (8002444 <Vector104+0x84>)
 8002422:	bc10      	pop	{r4}
 8002424:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8002426:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8002428:	6889      	ldr	r1, [r1, #8]
 800242a:	6892      	ldr	r2, [r2, #8]
 800242c:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800242e:	bf8c      	ite	hi
 8002430:	4a05      	ldrhi	r2, [pc, #20]	; (8002448 <Vector104+0x88>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002432:	4a06      	ldrls	r2, [pc, #24]	; (800244c <Vector104+0x8c>)
 8002434:	619a      	str	r2, [r3, #24]
 8002436:	4770      	bx	lr
 8002438:	200008e8 	.word	0x200008e8
 800243c:	40018000 	.word	0x40018000
 8002440:	e000ed00 	.word	0xe000ed00
 8002444:	20001050 	.word	0x20001050
 8002448:	08000263 	.word	0x08000263
 800244c:	08000266 	.word	0x08000266

08002450 <VectorB0>:
/**
 * @brief   Interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8002450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8002454:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8002458:	f8da 3010 	ldr.w	r3, [sl, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 800245c:	f8da 200c 	ldr.w	r2, [sl, #12]
 8002460:	4013      	ands	r3, r2
 8002462:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8002464:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8002466:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8002468:	f8ca 2010 	str.w	r2, [sl, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 800246c:	d40b      	bmi.n	8002486 <VectorB0+0x36>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800246e:	2320      	movs	r3, #32
 8002470:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002474:	4b57      	ldr	r3, [pc, #348]	; (80025d4 <VectorB0+0x184>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800247c:	d16a      	bne.n	8002554 <VectorB0+0x104>
 800247e:	f383 8811 	msr	BASEPRI, r3
}
 8002482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002486:	2320      	movs	r3, #32
 8002488:	f383 8811 	msr	BASEPRI, r3
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
 800248c:	f04f 0900 	mov.w	r9, #0
 8002490:	4e51      	ldr	r6, [pc, #324]	; (80025d8 <VectorB0+0x188>)
 8002492:	f106 0710 	add.w	r7, r6, #16
 8002496:	f04f 0820 	mov.w	r8, #32
 800249a:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 800249e:	8bb0      	ldrh	r0, [r6, #28]
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 80024a0:	6934      	ldr	r4, [r6, #16]
 80024a2:	b292      	uxth	r2, r2
    if (nowdelta < vtp->dlist.delta) {
 80024a4:	68a1      	ldr	r1, [r4, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 80024a6:	1a13      	subs	r3, r2, r0
 80024a8:	b29b      	uxth	r3, r3
  return systime + (systime_t)interval;
 80024aa:	1845      	adds	r5, r0, r1
 80024ac:	428b      	cmp	r3, r1
 80024ae:	b2ad      	uxth	r5, r5
 80024b0:	d335      	bcc.n	800251e <VectorB0+0xce>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 80024b2:	e9d4 3200 	ldrd	r3, r2, [r4]
    vtlp->lasttime = lasttime;
 80024b6:	83b5      	strh	r5, [r6, #28]
 80024b8:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80024ba:	605a      	str	r2, [r3, #4]
    vtp->dlist.next = NULL;
 80024bc:	f8c4 9000 	str.w	r9, [r4]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80024c0:	6933      	ldr	r3, [r6, #16]
 80024c2:	42bb      	cmp	r3, r7
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 80024c4:	bf08      	it	eq
 80024c6:	f8ca 900c 	streq.w	r9, [sl, #12]
 80024ca:	f389 8811 	msr	BASEPRI, r9

    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();
    vtp->func(vtp, vtp->par);
 80024ce:	4620      	mov	r0, r4
 80024d0:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 80024d4:	4798      	blx	r3
 80024d6:	f388 8811 	msr	BASEPRI, r8
    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 80024da:	6963      	ldr	r3, [r4, #20]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0dc      	beq.n	800249a <VectorB0+0x4a>
  return (systime_t)STM32_ST_TIM->CNT;
 80024e0:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 80024e4:	b289      	uxth	r1, r1
  return (sysinterval_t)((systime_t)(end - start));
 80024e6:	1b4d      	subs	r5, r1, r5
 80024e8:	b2ad      	uxth	r5, r5
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 80024ea:	42ab      	cmp	r3, r5
 80024ec:	d34b      	bcc.n	8002586 <VectorB0+0x136>
  return (bool)(dlhp == dlhp->next);
 80024ee:	6932      	ldr	r2, [r6, #16]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 80024f0:	42ba      	cmp	r2, r7
 80024f2:	d051      	beq.n	8002598 <VectorB0+0x148>
  while (likely(dlp->delta < delta)) {
 80024f4:	6891      	ldr	r1, [r2, #8]
 80024f6:	428b      	cmp	r3, r1
 80024f8:	d904      	bls.n	8002504 <VectorB0+0xb4>
    dlp = dlp->next;
 80024fa:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 80024fc:	1a5b      	subs	r3, r3, r1
  while (likely(dlp->delta < delta)) {
 80024fe:	6891      	ldr	r1, [r2, #8]
 8002500:	4299      	cmp	r1, r3
 8002502:	d3fa      	bcc.n	80024fa <VectorB0+0xaa>
  dlhp->delta = (sysinterval_t)-1;
 8002504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  dlp->delta      = delta;
 8002508:	60a3      	str	r3, [r4, #8]
  dlp->delta -= delta;
 800250a:	6891      	ldr	r1, [r2, #8]
  dlp->next       = dlhp;
 800250c:	6022      	str	r2, [r4, #0]
  dlp->delta -= delta;
 800250e:	1acb      	subs	r3, r1, r3
  dlp->prev       = dlp->next->prev;
 8002510:	6851      	ldr	r1, [r2, #4]
 8002512:	6061      	str	r1, [r4, #4]
  dlp->prev->next = dlp;
 8002514:	600c      	str	r4, [r1, #0]
  dlp->delta -= delta;
 8002516:	e9c2 4301 	strd	r4, r3, [r2, #4]
  dlhp->delta = (sysinterval_t)-1;
 800251a:	61b0      	str	r0, [r6, #24]
}
 800251c:	e7bb      	b.n	8002496 <VectorB0+0x46>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 800251e:	42bc      	cmp	r4, r7
 8002520:	d014      	beq.n	800254c <VectorB0+0xfc>
    return;
  }

  /* Calculating the delta to the next alarm time.*/
  delta = vtp->dlist.delta - nowdelta;
 8002522:	1acb      	subs	r3, r1, r3
 8002524:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002528:	428b      	cmp	r3, r1
 800252a:	bf28      	it	cs
 800252c:	460b      	movcs	r3, r1
  return systime + (systime_t)interval;
 800252e:	2b02      	cmp	r3, #2
 8002530:	bf2c      	ite	cs
 8002532:	18d2      	addcs	r2, r2, r3
 8002534:	3202      	addcc	r2, #2
 8002536:	b292      	uxth	r2, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002538:	f8ca 2034 	str.w	r2, [sl, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800253c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8002540:	1a12      	subs	r2, r2, r0
 8002542:	1a18      	subs	r0, r3, r0
    sysinterval_t next_alarm = chTimeAddX(now, delta);

    port_timer_set_alarm(next_alarm);

#if !defined(CH_VT_RFCU_DISABLED)
    if (chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX()) >
 8002544:	b280      	uxth	r0, r0
 8002546:	b292      	uxth	r2, r2
 8002548:	4290      	cmp	r0, r2
 800254a:	d817      	bhi.n	800257c <VectorB0+0x12c>
 800254c:	2300      	movs	r3, #0
 800254e:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void osalSysUnlockFromISR(void) {

  chSysUnlockFromISR();
}
 8002552:	e78c      	b.n	800246e <VectorB0+0x1e>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002554:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8002558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800255c:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800255e:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002560:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <VectorB0+0x188>)
 8002566:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8002568:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800256a:	6889      	ldr	r1, [r1, #8]
 800256c:	6892      	ldr	r2, [r2, #8]
 800256e:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002570:	bf8c      	ite	hi
 8002572:	4a1a      	ldrhi	r2, [pc, #104]	; (80025dc <VectorB0+0x18c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002574:	4a1a      	ldrls	r2, [pc, #104]	; (80025e0 <VectorB0+0x190>)
 8002576:	619a      	str	r2, [r3, #24]
 8002578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 800257c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6373      	str	r3, [r6, #52]	; 0x34
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
 8002584:	e7e2      	b.n	800254c <VectorB0+0xfc>
  currcore->rfcu.mask |= mask;
 8002586:	6b73      	ldr	r3, [r6, #52]	; 0x34
  return (bool)(dlhp == dlhp->next);
 8002588:	6932      	ldr	r2, [r6, #16]
 800258a:	f043 0302 	orr.w	r3, r3, #2
      if (ch_dlist_isempty(&vtlp->dlist)) {
 800258e:	42ba      	cmp	r2, r7
 8002590:	6373      	str	r3, [r6, #52]	; 0x34
 8002592:	d01b      	beq.n	80025cc <VectorB0+0x17c>
 8002594:	462b      	mov	r3, r5
 8002596:	e7ad      	b.n	80024f4 <VectorB0+0xa4>
  return systime + (systime_t)interval;
 8002598:	f64f 72ff 	movw	r2, #65535	; 0xffff
        delay = vtp->reload - nowdelta;
 800259c:	1b5b      	subs	r3, r3, r5
 800259e:	429a      	cmp	r2, r3
 80025a0:	bf28      	it	cs
 80025a2:	461a      	movcs	r2, r3
 80025a4:	2a02      	cmp	r2, #2
 80025a6:	bf38      	it	cc
 80025a8:	2202      	movcc	r2, #2
 80025aa:	b292      	uxth	r2, r2
  vtlp->lasttime = now;
 80025ac:	83b1      	strh	r1, [r6, #28]
 80025ae:	440a      	add	r2, r1
  dlp->prev       = dlhp;
 80025b0:	e9c4 7301 	strd	r7, r3, [r4, #4]
  STM32_ST_TIM->SR     = 0;
 80025b4:	2000      	movs	r0, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80025b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80025ba:	2102      	movs	r1, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80025bc:	b292      	uxth	r2, r2
  dlp->next       = dlp->prev->next;
 80025be:	6027      	str	r7, [r4, #0]
  dlhp->next      = dlp;
 80025c0:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80025c4:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80025c6:	6118      	str	r0, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80025c8:	60d9      	str	r1, [r3, #12]
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
}
 80025ca:	e7bf      	b.n	800254c <VectorB0+0xfc>
      if (ch_dlist_isempty(&vtlp->dlist)) {
 80025cc:	2202      	movs	r2, #2
        delay = (sysinterval_t)0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e7ec      	b.n	80025ac <VectorB0+0x15c>
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00
 80025d8:	20001050 	.word	0x20001050
 80025dc:	08000263 	.word	0x08000263
 80025e0:	08000266 	.word	0x08000266
	...

080025f0 <usb_lld_init_endpoint>:
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80025f0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 80025f4:	b570      	push	{r4, r5, r6, lr}
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80025f6:	68dd      	ldr	r5, [r3, #12]
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d158      	bne.n	80026b4 <usb_lld_init_endpoint+0xc4>
 8002602:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  dp = USB_GET_DESCRIPTOR(ep);
 8002606:	4a33      	ldr	r2, [pc, #204]	; (80026d4 <usb_lld_init_endpoint+0xe4>)
  if (epcp->in_state != NULL) {
 8002608:	696c      	ldr	r4, [r5, #20]
  dp = USB_GET_DESCRIPTOR(ep);
 800260a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800260c:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8002610:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002614:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8002618:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
  if (epcp->in_state != NULL) {
 800261c:	b17c      	cbz	r4, 800263e <usb_lld_init_endpoint+0x4e>
    dp->TXCOUNT0 = 0;
 800261e:	2400      	movs	r4, #0
 8002620:	f8cc 4004 	str.w	r4, [ip, #4]
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8002624:	8a2c      	ldrh	r4, [r5, #16]
  next = usbp->pmnext;
 8002626:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 800262a:	3401      	adds	r4, #1
 800262c:	f024 0401 	bic.w	r4, r4, #1
 8002630:	4434      	add	r4, r6
 8002632:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
    epr |= EPR_STAT_TX_NAK;
 8002636:	f043 0320 	orr.w	r3, r3, #32
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 800263a:	f84e 6002 	str.w	r6, [lr, r2]
  if (epcp->out_state != NULL) {
 800263e:	69aa      	ldr	r2, [r5, #24]
 8002640:	b1c2      	cbz	r2, 8002674 <usb_lld_init_endpoint+0x84>
    if (epcp->out_maxsize > 62)
 8002642:	8a6a      	ldrh	r2, [r5, #18]
 8002644:	2a3e      	cmp	r2, #62	; 0x3e
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8002646:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (epcp->out_maxsize > 62)
 800264a:	d839      	bhi.n	80026c0 <usb_lld_init_endpoint+0xd0>
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 800264c:	f044 0401 	orr.w	r4, r4, #1
 8002650:	3401      	adds	r4, #1
 8002652:	0264      	lsls	r4, r4, #9
 8002654:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
    dp->RXCOUNT0 = nblocks;
 8002658:	f8cc 400c 	str.w	r4, [ip, #12]
  usbp->pmnext += (size + 1) & ~1;
 800265c:	3201      	adds	r2, #1
  next = usbp->pmnext;
 800265e:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	4422      	add	r2, r4
 8002668:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    epr |= EPR_STAT_RX_NAK;
 800266c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8002670:	f8cc 4008 	str.w	r4, [ip, #8]
    epr |= EPR_DTOG_RX;
 8002674:	008a      	lsls	r2, r1, #2
 8002676:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800267a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  if (STM32_USB->EPR[ep] & EPR_DTOG_RX) {
 800267e:	6810      	ldr	r0, [r2, #0]
 8002680:	0444      	lsls	r4, r0, #17
  if (STM32_USB->EPR[ep] & EPR_DTOG_TX) {
 8002682:	6810      	ldr	r0, [r2, #0]
    epr |= EPR_DTOG_RX;
 8002684:	bf48      	it	mi
 8002686:	f443 4380 	orrmi.w	r3, r3, #16384	; 0x4000
  if (STM32_USB->EPR[ep] & EPR_DTOG_TX) {
 800268a:	0640      	lsls	r0, r0, #25
  EPR_SET(ep, epr | ep);
 800268c:	f248 0080 	movw	r0, #32896	; 0x8080
  EPR_TOGGLE(ep, epr);
 8002690:	f647 0470 	movw	r4, #30832	; 0x7870
    epr |= EPR_DTOG_TX;
 8002694:	bf48      	it	mi
 8002696:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
  EPR_SET(ep, epr | ep);
 800269a:	4319      	orrs	r1, r3
 800269c:	f421 4178 	bic.w	r1, r1, #63488	; 0xf800
 80026a0:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80026a4:	4301      	orrs	r1, r0
 80026a6:	6011      	str	r1, [r2, #0]
  EPR_TOGGLE(ep, epr);
 80026a8:	6811      	ldr	r1, [r2, #0]
 80026aa:	4023      	ands	r3, r4
 80026ac:	404b      	eors	r3, r1
 80026ae:	4303      	orrs	r3, r0
 80026b0:	6013      	str	r3, [r2, #0]
}
 80026b2:	bd70      	pop	{r4, r5, r6, pc}
    epr = EPR_EP_TYPE_BULK;
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf0c      	ite	eq
 80026b8:	f44f 7300 	moveq.w	r3, #512	; 0x200
 80026bc:	2300      	movne	r3, #0
 80026be:	e7a2      	b.n	8002606 <usb_lld_init_endpoint+0x16>
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 80026c0:	f044 041f 	orr.w	r4, r4, #31
 80026c4:	3401      	adds	r4, #1
 80026c6:	1165      	asrs	r5, r4, #5
 80026c8:	4c03      	ldr	r4, [pc, #12]	; (80026d8 <usb_lld_init_endpoint+0xe8>)
 80026ca:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 80026ce:	b2a4      	uxth	r4, r4
 80026d0:	e7c2      	b.n	8002658 <usb_lld_init_endpoint+0x68>
 80026d2:	bf00      	nop
 80026d4:	40005c00 	.word	0x40005c00
 80026d8:	ffff8000 	.word	0xffff8000
 80026dc:	00000000 	.word	0x00000000

080026e0 <Vector90>:
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80026e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  istr = STM32_USB->ISTR;
 80026e4:	4cac      	ldr	r4, [pc, #688]	; (8002998 <Vector90+0x2b8>)
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80026e6:	b085      	sub	sp, #20
  istr = STM32_USB->ISTR;
 80026e8:	6c65      	ldr	r5, [r4, #68]	; 0x44
  if (istr & ISTR_RESET) {
 80026ea:	056b      	lsls	r3, r5, #21
 80026ec:	f100 815a 	bmi.w	80029a4 <Vector90+0x2c4>
  if (istr & ISTR_SUSP) {
 80026f0:	052e      	lsls	r6, r5, #20
 80026f2:	f100 8134 	bmi.w	800295e <Vector90+0x27e>
  if (istr & ISTR_WKUP) {
 80026f6:	04ec      	lsls	r4, r5, #19
 80026f8:	d508      	bpl.n	800270c <Vector90+0x2c>
    uint32_t fnr = STM32_USB->FNR;
 80026fa:	4ba7      	ldr	r3, [pc, #668]	; (8002998 <Vector90+0x2b8>)
 80026fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 80026fe:	0410      	lsls	r0, r2, #16
 8002700:	f140 819e 	bpl.w	8002a40 <Vector90+0x360>
    STM32_USB->ISTR = ~ISTR_WKUP;
 8002704:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 8002708:	4ba3      	ldr	r3, [pc, #652]	; (8002998 <Vector90+0x2b8>)
 800270a:	645a      	str	r2, [r3, #68]	; 0x44
  if (istr & ISTR_SOF) {
 800270c:	05a9      	lsls	r1, r5, #22
 800270e:	d50b      	bpl.n	8002728 <Vector90+0x48>
    _usb_isr_invoke_sof_cb(usbp);
 8002710:	f8df 9288 	ldr.w	r9, [pc, #648]	; 800299c <Vector90+0x2bc>
 8002714:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	b10b      	cbz	r3, 8002720 <Vector90+0x40>
 800271c:	4648      	mov	r0, r9
 800271e:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 8002720:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002724:	4b9c      	ldr	r3, [pc, #624]	; (8002998 <Vector90+0x2b8>)
 8002726:	645a      	str	r2, [r3, #68]	; 0x44
  while (istr & ISTR_CTR) {
 8002728:	042a      	lsls	r2, r5, #16
 800272a:	f140 80fe 	bpl.w	800292a <Vector90+0x24a>
 800272e:	f8df 926c 	ldr.w	r9, [pc, #620]	; 800299c <Vector90+0x2bc>
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002732:	f8df a264 	ldr.w	sl, [pc, #612]	; 8002998 <Vector90+0x2b8>
      _usb_isr_invoke_in_cb(usbp, ep);
 8002736:	46cb      	mov	fp, r9
 8002738:	e026      	b.n	8002788 <Vector90+0xa8>
 800273a:	2101      	movs	r1, #1
 800273c:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	40a9      	lsls	r1, r5
 8002744:	ea23 0301 	bic.w	r3, r3, r1
 8002748:	f8a9 3008 	strh.w	r3, [r9, #8]
 800274c:	b112      	cbz	r2, 8002754 <Vector90+0x74>
 800274e:	4629      	mov	r1, r5
 8002750:	4658      	mov	r0, fp
 8002752:	4790      	blx	r2
  if (epr & EPR_CTR_RX) {
 8002754:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8002758:	d011      	beq.n	800277e <Vector90+0x9e>
    EPR_CLEAR_CTR_RX(ep);
 800275a:	6823      	ldr	r3, [r4, #0]
    if (epr & EPR_SETUP) {
 800275c:	f418 6f00 	tst.w	r8, #2048	; 0x800
    EPR_CLEAR_CTR_RX(ep);
 8002760:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8002764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276c:	6023      	str	r3, [r4, #0]
    if (epr & EPR_SETUP) {
 800276e:	d067      	beq.n	8002840 <Vector90+0x160>
      _usb_isr_invoke_setup_cb(usbp, ep);
 8002770:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8002774:	6873      	ldr	r3, [r6, #4]
 8002776:	4629      	mov	r1, r5
 8002778:	4658      	mov	r0, fp
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4798      	blx	r3
    istr = STM32_USB->ISTR;
 800277e:	f8da 5044 	ldr.w	r5, [sl, #68]	; 0x44
  while (istr & ISTR_CTR) {
 8002782:	042b      	lsls	r3, r5, #16
 8002784:	f140 80d1 	bpl.w	800292a <Vector90+0x24a>
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
 8002788:	f005 050f 	and.w	r5, r5, #15
static void usb_serve_endpoints(USBDriver *usbp, uint32_t ep) {
 800278c:	00ac      	lsls	r4, r5, #2
 800278e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002792:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  uint32_t epr = STM32_USB->EPR[ep];
 8002796:	f8d4 8000 	ldr.w	r8, [r4]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 800279a:	1cae      	adds	r6, r5, #2
 800279c:	eb09 0386 	add.w	r3, r9, r6, lsl #2
  if (epr & EPR_CTR_TX) {
 80027a0:	f018 0f80 	tst.w	r8, #128	; 0x80
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80027a4:	685f      	ldr	r7, [r3, #4]
  if (epr & EPR_CTR_TX) {
 80027a6:	d0d5      	beq.n	8002754 <Vector90+0x74>
    EPR_CLEAR_CTR_TX(ep);
 80027a8:	6822      	ldr	r2, [r4, #0]
    USBInEndpointState *isp = epcp->in_state;
 80027aa:	f8d7 c014 	ldr.w	ip, [r7, #20]
    EPR_CLEAR_CTR_TX(ep);
 80027ae:	f422 4278 	bic.w	r2, r2, #63488	; 0xf800
 80027b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
    isp->txcnt += isp->txlast;
 80027b6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80027ba:	f8dc 300c 	ldr.w	r3, [ip, #12]
    EPR_CLEAR_CTR_TX(ep);
 80027be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027c2:	6022      	str	r2, [r4, #0]
    n = isp->txsize - isp->txcnt;
 80027c4:	f8dc 2000 	ldr.w	r2, [ip]
    isp->txcnt += isp->txlast;
 80027c8:	4419      	add	r1, r3
    if (n > 0) {
 80027ca:	1a52      	subs	r2, r2, r1
    isp->txcnt += isp->txlast;
 80027cc:	f8cc 1004 	str.w	r1, [ip, #4]
    if (n > 0) {
 80027d0:	d0b3      	beq.n	800273a <Vector90+0x5a>
      if (n > epcp->in_maxsize)
 80027d2:	8a39      	ldrh	r1, [r7, #16]
      isp->txbuf += isp->txlast;
 80027d4:	f8dc 0008 	ldr.w	r0, [ip, #8]
 80027d8:	4291      	cmp	r1, r2
 80027da:	bf28      	it	cs
 80027dc:	4611      	movcs	r1, r2
 80027de:	4418      	add	r0, r3
      isp->txlast = n;
 80027e0:	e9cc 0102 	strd	r0, r1, [ip, #8]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80027e4:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 80027e8:	012a      	lsls	r2, r5, #4
 80027ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027ee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80027f2:	58d2      	ldr	r2, [r2, r3]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80027f4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80027f8:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 80027fc:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8002800:	6059      	str	r1, [r3, #4]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002802:	0052      	lsls	r2, r2, #1
  while (i > 0) {
 8002804:	b179      	cbz	r1, 8002826 <Vector90+0x146>
 8002806:	3901      	subs	r1, #1
 8002808:	0849      	lsrs	r1, r1, #1
 800280a:	1d13      	adds	r3, r2, #4
 800280c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002810:	468e      	mov	lr, r1
 8002812:	e000      	b.n	8002816 <Vector90+0x136>
 8002814:	3304      	adds	r3, #4
    w  = *buf++;
 8002816:	4694      	mov	ip, r2
    w |= *buf++ << 8;
 8002818:	f830 1b02 	ldrh.w	r1, [r0], #2
  while (i > 0) {
 800281c:	459e      	cmp	lr, r3
    *pmap++ = (stm32_usb_pma_t)w;
 800281e:	461a      	mov	r2, r3
 8002820:	f8cc 1000 	str.w	r1, [ip]
  while (i > 0) {
 8002824:	d1f6      	bne.n	8002814 <Vector90+0x134>
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8002826:	6823      	ldr	r3, [r4, #0]
 8002828:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800282c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002830:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283c:	6023      	str	r3, [r4, #0]
 800283e:	e789      	b.n	8002754 <Vector90+0x74>
  while (i >= 2) {
 8002840:	f240 32fe 	movw	r2, #1022	; 0x3fe
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002844:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
      USBOutEndpointState *osp = epcp->out_state;
 8002848:	f8d7 e018 	ldr.w	lr, [r7, #24]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800284c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002850:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8002854:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8002858:	6898      	ldr	r0, [r3, #8]
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 800285a:	68d9      	ldr	r1, [r3, #12]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800285c:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 8002860:	f8de 3008 	ldr.w	r3, [lr, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8002864:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
  while (i >= 2) {
 8002868:	4211      	tst	r1, r2
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 800286a:	9102      	str	r1, [sp, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800286c:	ea4f 0040 	mov.w	r0, r0, lsl #1
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8002870:	f3c1 0809 	ubfx	r8, r1, #0, #10
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 8002874:	9301      	str	r3, [sp, #4]
  while (i >= 2) {
 8002876:	f000 80f7 	beq.w	8002a68 <Vector90+0x388>
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800287a:	4601      	mov	r1, r0
 800287c:	f1a8 0302 	sub.w	r3, r8, #2
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	f100 0c04 	add.w	ip, r0, #4
 8002886:	9303      	str	r3, [sp, #12]
 8002888:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800288c:	9b01      	ldr	r3, [sp, #4]
 800288e:	1c9a      	adds	r2, r3, #2
    uint32_t w = *pmap++;
 8002890:	460b      	mov	r3, r1
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3104      	adds	r1, #4
    *buf++ = (uint8_t)w;
 8002896:	f802 3c02 	strb.w	r3, [r2, #-2]
  while (i >= 2) {
 800289a:	4561      	cmp	r1, ip
    *buf++ = (uint8_t)(w >> 8);
 800289c:	ea4f 2313 	mov.w	r3, r3, lsr #8
  while (i >= 2) {
 80028a0:	f102 0202 	add.w	r2, r2, #2
    *buf++ = (uint8_t)(w >> 8);
 80028a4:	f802 3c03 	strb.w	r3, [r2, #-3]
  while (i >= 2) {
 80028a8:	d1f2      	bne.n	8002890 <Vector90+0x1b0>
 80028aa:	9b03      	ldr	r3, [sp, #12]
    *buf++ = (uint8_t)(w >> 8);
 80028ac:	9a01      	ldr	r2, [sp, #4]
 80028ae:	3301      	adds	r3, #1
    uint32_t w = *pmap++;
 80028b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    *buf++ = (uint8_t)(w >> 8);
 80028b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80028b8:	9301      	str	r3, [sp, #4]
    i -= 2;
 80028ba:	9b02      	ldr	r3, [sp, #8]
 80028bc:	f003 0301 	and.w	r3, r3, #1
  if (i >= 1) {
 80028c0:	b113      	cbz	r3, 80028c8 <Vector90+0x1e8>
    *buf = (uint8_t)*pmap;
 80028c2:	6803      	ldr	r3, [r0, #0]
 80028c4:	9a01      	ldr	r2, [sp, #4]
 80028c6:	7013      	strb	r3, [r2, #0]
      osp->rxbuf += n;
 80028c8:	f8de 2008 	ldr.w	r2, [lr, #8]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 80028cc:	8a79      	ldrh	r1, [r7, #18]
      osp->rxbuf += n;
 80028ce:	4442      	add	r2, r8
 80028d0:	f8ce 2008 	str.w	r2, [lr, #8]
      osp->rxcnt  += n;
 80028d4:	f8de 2004 	ldr.w	r2, [lr, #4]
      osp->rxpkts -= 1;
 80028d8:	f8be 300c 	ldrh.w	r3, [lr, #12]
      osp->rxcnt  += n;
 80028dc:	4442      	add	r2, r8
 80028de:	f8ce 2004 	str.w	r2, [lr, #4]
      osp->rxsize -= n;
 80028e2:	f8de 2000 	ldr.w	r2, [lr]
      osp->rxpkts -= 1;
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29b      	uxth	r3, r3
      osp->rxsize -= n;
 80028ea:	eba2 0208 	sub.w	r2, r2, r8
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 80028ee:	4541      	cmp	r1, r8
      osp->rxpkts -= 1;
 80028f0:	f8ae 300c 	strh.w	r3, [lr, #12]
      osp->rxsize -= n;
 80028f4:	f8ce 2000 	str.w	r2, [lr]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 80028f8:	d800      	bhi.n	80028fc <Vector90+0x21c>
 80028fa:	bb1b      	cbnz	r3, 8002944 <Vector90+0x264>
        _usb_isr_invoke_out_cb(usbp, ep);
 80028fc:	2201      	movs	r2, #1
 80028fe:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8002902:	6873      	ldr	r3, [r6, #4]
 8002904:	40aa      	lsls	r2, r5
 8002906:	68dc      	ldr	r4, [r3, #12]
 8002908:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800290c:	ea23 0302 	bic.w	r3, r3, r2
 8002910:	f8a9 300a 	strh.w	r3, [r9, #10]
 8002914:	2c00      	cmp	r4, #0
 8002916:	f43f af32 	beq.w	800277e <Vector90+0x9e>
 800291a:	4629      	mov	r1, r5
 800291c:	4658      	mov	r0, fp
 800291e:	47a0      	blx	r4
    istr = STM32_USB->ISTR;
 8002920:	f8da 5044 	ldr.w	r5, [sl, #68]	; 0x44
  while (istr & ISTR_CTR) {
 8002924:	042b      	lsls	r3, r5, #16
 8002926:	f53f af2f 	bmi.w	8002788 <Vector90+0xa8>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800292a:	2320      	movs	r3, #32
 800292c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <Vector90+0x2c0>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002938:	d16d      	bne.n	8002a16 <Vector90+0x336>
 800293a:	f383 8811 	msr	BASEPRI, r3
}
 800293e:	b005      	add	sp, #20
 8002940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295a:	6023      	str	r3, [r4, #0]
 800295c:	e70f      	b.n	800277e <Vector90+0x9e>
    STM32_USB->ISTR = ~ISTR_SUSP;
 800295e:	f46f 6000 	mvn.w	r0, #2048	; 0x800
  usbp->state       = USB_SUSPENDED;
 8002962:	2105      	movs	r1, #5
    STM32_USB->CNTR |= CNTR_FSUSP;
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <Vector90+0x2b8>)
  usbp->saved_state = usbp->state;
 8002966:	f8df 9034 	ldr.w	r9, [pc, #52]	; 800299c <Vector90+0x2bc>
 800296a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800296c:	f042 0208 	orr.w	r2, r2, #8
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002972:	f8d9 2004 	ldr.w	r2, [r9, #4]
    STM32_USB->ISTR = ~ISTR_SUSP;
 8002976:	6458      	str	r0, [r3, #68]	; 0x44
  usbp->saved_state = usbp->state;
 8002978:	f899 3000 	ldrb.w	r3, [r9]
  usbp->state       = USB_SUSPENDED;
 800297c:	f889 1000 	strb.w	r1, [r9]
  usbp->saved_state = usbp->state;
 8002980:	f889 3080 	strb.w	r3, [r9, #128]	; 0x80
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002984:	6813      	ldr	r3, [r2, #0]
 8002986:	b113      	cbz	r3, 800298e <Vector90+0x2ae>
 8002988:	2104      	movs	r1, #4
 800298a:	4648      	mov	r0, r9
 800298c:	4798      	blx	r3
  usbp->transmitting  = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	f8c9 3008 	str.w	r3, [r9, #8]
}
 8002994:	e6af      	b.n	80026f6 <Vector90+0x16>
 8002996:	bf00      	nop
 8002998:	40005c00 	.word	0x40005c00
 800299c:	20000fc4 	.word	0x20000fc4
 80029a0:	e000ed00 	.word	0xe000ed00
  usbp->status        = 0;
 80029a4:	2600      	movs	r6, #0
    STM32_USB->ISTR = ~ISTR_RESET;
 80029a6:	f46f 6180 	mvn.w	r1, #1024	; 0x400
  usbp->state         = USB_READY;
 80029aa:	2302      	movs	r3, #2
 80029ac:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8002a6c <Vector90+0x38c>
 80029b0:	6461      	str	r1, [r4, #68]	; 0x44
    usbp->epc[i] = NULL;
 80029b2:	2220      	movs	r2, #32
 80029b4:	4631      	mov	r1, r6
 80029b6:	f109 000c 	add.w	r0, r9, #12
  usbp->state         = USB_READY;
 80029ba:	f889 3000 	strb.w	r3, [r9]
  usbp->status        = 0;
 80029be:	f8c9 607c 	str.w	r6, [r9, #124]	; 0x7c
  usbp->transmitting  = 0;
 80029c2:	f8c9 6008 	str.w	r6, [r9, #8]
    usbp->epc[i] = NULL;
 80029c6:	f00d f8ab 	bl	800fb20 <memset>
  if (usbp->config->sof_cb != NULL)
 80029ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
  usbp->ep0state = USB_EP0_STP_WAITING;
 80029ce:	f889 6064 	strb.w	r6, [r9, #100]	; 0x64
 80029d2:	68db      	ldr	r3, [r3, #12]
  STM32_USB->DADDR  = DADDR_EF;
 80029d4:	f04f 0c80 	mov.w	ip, #128	; 0x80
    cntr |= CNTR_SOFM;
 80029d8:	42b3      	cmp	r3, r6
 80029da:	bf0c      	ite	eq
 80029dc:	f44f 471c 	moveq.w	r7, #39936	; 0x9c00
 80029e0:	f44f 471e 	movne.w	r7, #40448	; 0x9e00
  usbp->pmnext = 64;
 80029e4:	2240      	movs	r2, #64	; 0x40
  usbp->epc[0] = &ep0config;
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <Vector90+0x390>)
  STM32_USB->BTABLE = BTABLE_ADDR;
 80029e8:	6526      	str	r6, [r4, #80]	; 0x50
  usb_lld_init_endpoint(usbp, 0);
 80029ea:	4631      	mov	r1, r6
  STM32_USB->ISTR   = 0;
 80029ec:	6466      	str	r6, [r4, #68]	; 0x44
  usb_lld_init_endpoint(usbp, 0);
 80029ee:	4648      	mov	r0, r9
  STM32_USB->DADDR  = DADDR_EF;
 80029f0:	f8c4 c04c 	str.w	ip, [r4, #76]	; 0x4c
  STM32_USB->CNTR = cntr;
 80029f4:	6427      	str	r7, [r4, #64]	; 0x40
  usbp->epc[0] = &ep0config;
 80029f6:	f8c9 300c 	str.w	r3, [r9, #12]
  usbp->pmnext = 64;
 80029fa:	f8c9 2084 	str.w	r2, [r9, #132]	; 0x84
  usb_lld_init_endpoint(usbp, 0);
 80029fe:	f7ff fdf7 	bl	80025f0 <usb_lld_init_endpoint>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8002a02:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f43f ae71 	beq.w	80026f0 <Vector90+0x10>
 8002a0e:	4631      	mov	r1, r6
 8002a10:	4648      	mov	r0, r9
 8002a12:	4798      	blx	r3
 8002a14:	e66c      	b.n	80026f0 <Vector90+0x10>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002a16:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8002a1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8002a1e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002a20:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002a22:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002a26:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <Vector90+0x394>)
 8002a28:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8002a2a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8002a2c:	6889      	ldr	r1, [r1, #8]
 8002a2e:	6892      	ldr	r2, [r2, #8]
 8002a30:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002a32:	bf8c      	ite	hi
 8002a34:	4a10      	ldrhi	r2, [pc, #64]	; (8002a78 <Vector90+0x398>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002a36:	4a11      	ldrls	r2, [pc, #68]	; (8002a7c <Vector90+0x39c>)
 8002a38:	619a      	str	r2, [r3, #24]
}
 8002a3a:	b005      	add	sp, #20
 8002a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8002a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  usbp->state = usbp->saved_state;
 8002a42:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8002a6c <Vector90+0x38c>
 8002a46:	f022 0208 	bic.w	r2, r2, #8
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a4c:	f899 2080 	ldrb.w	r2, [r9, #128]	; 0x80
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002a50:	f8d9 3004 	ldr.w	r3, [r9, #4]
  usbp->state = usbp->saved_state;
 8002a54:	f889 2000 	strb.w	r2, [r9]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f43f ae52 	beq.w	8002704 <Vector90+0x24>
 8002a60:	2105      	movs	r1, #5
 8002a62:	4648      	mov	r0, r9
 8002a64:	4798      	blx	r3
 8002a66:	e64d      	b.n	8002704 <Vector90+0x24>
  i = n;
 8002a68:	4643      	mov	r3, r8
 8002a6a:	e729      	b.n	80028c0 <Vector90+0x1e0>
 8002a6c:	20000fc4 	.word	0x20000fc4
 8002a70:	08011b58 	.word	0x08011b58
 8002a74:	20001050 	.word	0x20001050
 8002a78:	08000263 	.word	0x08000263
 8002a7c:	08000266 	.word	0x08000266

08002a80 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002a80:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <__early_init+0x70>)
 8002a82:	6813      	ldr	r3, [r2, #0]
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002a8a:	6813      	ldr	r3, [r2, #0]
 8002a8c:	0798      	lsls	r0, r3, #30
 8002a8e:	d5fc      	bpl.n	8002a8a <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002a90:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002a92:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002a94:	4916      	ldr	r1, [pc, #88]	; (8002af0 <__early_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002a96:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8002a9a:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002a9c:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002a9e:	684b      	ldr	r3, [r1, #4]
 8002aa0:	f013 0f0c 	tst.w	r3, #12
 8002aa4:	d1fb      	bne.n	8002a9e <__early_init+0x1e>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8002aa6:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8002aa8:	4a11      	ldr	r2, [pc, #68]	; (8002af0 <__early_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 8002aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aae:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8002ab0:	6813      	ldr	r3, [r2, #0]
 8002ab2:	0399      	lsls	r1, r3, #14
 8002ab4:	d5fc      	bpl.n	8002ab0 <__early_init+0x30>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002ab6:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002ab8:	490d      	ldr	r1, [pc, #52]	; (8002af0 <__early_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002aba:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002abe:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8002ac0:	6813      	ldr	r3, [r2, #0]
 8002ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002ac8:	680b      	ldr	r3, [r1, #0]
 8002aca:	019b      	lsls	r3, r3, #6
 8002acc:	d5fc      	bpl.n	8002ac8 <__early_init+0x48>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8002ace:	2012      	movs	r0, #18
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8002ad0:	4a08      	ldr	r2, [pc, #32]	; (8002af4 <__early_init+0x74>)
  FLASH->ACR = STM32_FLASHBITS;
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <__early_init+0x78>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8002ad4:	604a      	str	r2, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 8002ad6:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8002ad8:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002ada:	4a05      	ldr	r2, [pc, #20]	; (8002af0 <__early_init+0x70>)
  RCC->CFGR |= STM32_SW;
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002ae2:	6853      	ldr	r3, [r2, #4]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d1fa      	bne.n	8002ae2 <__early_init+0x62>
}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	001d6400 	.word	0x001d6400
 8002af8:	40022000 	.word	0x40022000
 8002afc:	00000000 	.word	0x00000000

08002b00 <chVTDoResetI>:
  return (bool)(dlhp->next == dlp);
 8002b00:	491f      	ldr	r1, [pc, #124]	; (8002b80 <chVTDoResetI+0x80>)
void chVTDoResetI(virtual_timer_t *vtp) {
 8002b02:	b430      	push	{r4, r5}
 8002b04:	690b      	ldr	r3, [r1, #16]
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 8002b06:	4298      	cmp	r0, r3
 8002b08:	d00e      	beq.n	8002b28 <chVTDoResetI+0x28>
  dlp->prev->next = dlp->next;
 8002b0a:	6803      	ldr	r3, [r0, #0]
    vtp->dlist.next->delta += vtp->dlist.delta;
 8002b0c:	6884      	ldr	r4, [r0, #8]
 8002b0e:	689a      	ldr	r2, [r3, #8]
    vtp->dlist.next = NULL;
 8002b10:	2500      	movs	r5, #0
    vtp->dlist.next->delta += vtp->dlist.delta;
 8002b12:	4422      	add	r2, r4
 8002b14:	6844      	ldr	r4, [r0, #4]
 8002b16:	6023      	str	r3, [r4, #0]
 8002b18:	e9c3 4201 	strd	r4, r2, [r3, #4]
    vtlp->dlist.delta = (sysinterval_t)-1;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    vtp->dlist.next = NULL;
 8002b20:	6005      	str	r5, [r0, #0]
    vtlp->dlist.delta = (sysinterval_t)-1;
 8002b22:	618b      	str	r3, [r1, #24]
}
 8002b24:	bc30      	pop	{r4, r5}
 8002b26:	4770      	bx	lr
  dlhp->next       = dlp->next;
 8002b28:	460b      	mov	r3, r1
  vtp->dlist.next = NULL;
 8002b2a:	2400      	movs	r4, #0
 8002b2c:	6802      	ldr	r2, [r0, #0]
 8002b2e:	f843 2f10 	str.w	r2, [r3, #16]!
  dlhp->next->prev = dlhp;
 8002b32:	6053      	str	r3, [r2, #4]
 8002b34:	6004      	str	r4, [r0, #0]
  return (bool)(dlhp == dlhp->next);
 8002b36:	690a      	ldr	r2, [r1, #16]
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d01c      	beq.n	8002b76 <chVTDoResetI+0x76>
  return (systime_t)STM32_ST_TIM->CNT;
 8002b3c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  vtlp->dlist.next->delta += vtp->dlist.delta;
 8002b40:	6893      	ldr	r3, [r2, #8]
 8002b42:	6880      	ldr	r0, [r0, #8]
  nowdelta = chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 8002b44:	8b89      	ldrh	r1, [r1, #28]
  vtlp->dlist.next->delta += vtp->dlist.delta;
 8002b46:	4403      	add	r3, r0
 8002b48:	6093      	str	r3, [r2, #8]
 8002b4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8002b4c:	1a52      	subs	r2, r2, r1
 8002b4e:	b292      	uxth	r2, r2
  if (nowdelta >= vtlp->dlist.next->delta) {
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d9e7      	bls.n	8002b24 <chVTDoResetI+0x24>
  delta = vtlp->dlist.next->delta - nowdelta;
 8002b54:	1a98      	subs	r0, r3, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8002b56:	2801      	cmp	r0, #1
 8002b58:	d90b      	bls.n	8002b72 <chVTDoResetI+0x72>
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 8002b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	bf28      	it	cs
 8002b62:	4613      	movcs	r3, r2
}
 8002b64:	bc30      	pop	{r4, r5}
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8002b6a:	440b      	add	r3, r1
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	6353      	str	r3, [r2, #52]	; 0x34
 8002b70:	4770      	bx	lr
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8002b72:	1c93      	adds	r3, r2, #2
 8002b74:	e7f6      	b.n	8002b64 <chVTDoResetI+0x64>
  STM32_ST_TIM->DIER = 0U;
 8002b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b7a:	60dc      	str	r4, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 8002b7c:	e7d2      	b.n	8002b24 <chVTDoResetI+0x24>
 8002b7e:	bf00      	nop
 8002b80:	20001050 	.word	0x20001050
	...

08002b90 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002b90:	b570      	push	{r4, r5, r6, lr}
  thread_t *tp = __instance_get_currthread(currcore);
 8002b92:	4c1c      	ldr	r4, [pc, #112]	; (8002c04 <chSchGoSleepTimeoutS+0x74>)
  if (TIME_INFINITE != timeout) {
 8002b94:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002b96:	4605      	mov	r5, r0
  thread_t *tp = __instance_get_currthread(currcore);
 8002b98:	68e6      	ldr	r6, [r4, #12]
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002b9a:	b086      	sub	sp, #24
  if (TIME_INFINITE != timeout) {
 8002b9c:	d021      	beq.n	8002be2 <chSchGoSleepTimeoutS+0x52>
  vtp->func    = vtfunc;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <chSchGoSleepTimeoutS+0x78>)
 8002ba0:	460a      	mov	r2, r1
  vtp->reload  = (sysinterval_t)0;
 8002ba2:	2100      	movs	r1, #0
  vtp->func    = vtfunc;
 8002ba4:	e9cd 3603 	strd	r3, r6, [sp, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8002ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  vtp->reload  = (sysinterval_t)0;
 8002bac:	9105      	str	r1, [sp, #20]
 8002bae:	6a59      	ldr	r1, [r3, #36]	; 0x24
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 8002bb0:	4668      	mov	r0, sp
 8002bb2:	b289      	uxth	r1, r1
 8002bb4:	f00b fcc4 	bl	800e540 <vt_enqueue.constprop.0>
  ntp->state = CH_STATE_CURRENT;
 8002bb8:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 8002bba:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8002bbc:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8002bbe:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8002bc2:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8002bc4:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8002bc6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8002bca:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 8002bcc:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8002bce:	f7fd fb37 	bl	8000240 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8002bd2:	9b00      	ldr	r3, [sp, #0]
 8002bd4:	b113      	cbz	r3, 8002bdc <chSchGoSleepTimeoutS+0x4c>
      chVTDoResetI(&vt);
 8002bd6:	4668      	mov	r0, sp
 8002bd8:	f7ff ff92 	bl	8002b00 <chVTDoResetI>
}
 8002bdc:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8002bde:	b006      	add	sp, #24
 8002be0:	bd70      	pop	{r4, r5, r6, pc}
  ntp->state = CH_STATE_CURRENT;
 8002be2:	2201      	movs	r2, #1
  ch_priority_queue_t *p = pqp->next;
 8002be4:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8002be6:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
  pqp->next       = p->next;
 8002bea:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(ntp, otp);
 8002bec:	4631      	mov	r1, r6
  pqp->next->prev = pqp;
 8002bee:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8002bf0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8002bf4:	60e0      	str	r0, [r4, #12]
  pqp->next       = p->next;
 8002bf6:	6023      	str	r3, [r4, #0]
  chSysSwitch(ntp, otp);
 8002bf8:	f7fd fb22 	bl	8000240 <__port_switch>
}
 8002bfc:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8002bfe:	b006      	add	sp, #24
 8002c00:	bd70      	pop	{r4, r5, r6, pc}
 8002c02:	bf00      	nop
 8002c04:	20001050 	.word	0x20001050
 8002c08:	08001041 	.word	0x08001041
 8002c0c:	00000000 	.word	0x00000000

08002c10 <obqPutTimeout>:
                    sysinterval_t timeout) {
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002c12:	2320      	movs	r3, #32
 8002c14:	4604      	mov	r4, r0
 8002c16:	460e      	mov	r6, r1
 8002c18:	f383 8811 	msr	BASEPRI, r3
  if (obqp->ptr == NULL) {
 8002c1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c1e:	b313      	cbz	r3, 8002c66 <obqPutTimeout+0x56>
  *obqp->ptr = b;
 8002c20:	701e      	strb	r6, [r3, #0]
  if (obqp->ptr >= obqp->top) {
 8002c22:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8002c26:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8002c28:	4293      	cmp	r3, r2
  obqp->ptr++;
 8002c2a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 8002c2c:	d203      	bcs.n	8002c36 <obqPutTimeout+0x26>
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f380 8811 	msr	BASEPRI, r0
}
 8002c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8002c36:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 8002c38:	6923      	ldr	r3, [r4, #16]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8002c3a:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8002c3c:	601a      	str	r2, [r3, #0]
  obqp->bcounter--;
 8002c3e:	68e2      	ldr	r2, [r4, #12]
  if (obqp->bwrptr >= obqp->btop) {
 8002c40:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  obqp->bcounter--;
 8002c44:	3a01      	subs	r2, #1
 8002c46:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 8002c48:	2200      	movs	r2, #0
  obqp->bwrptr += obqp->bsize;
 8002c4a:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 8002c4c:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8002c4e:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8002c50:	bf28      	it	cs
 8002c52:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  obqp->ptr = NULL;
 8002c54:	62a2      	str	r2, [r4, #40]	; 0x28
    obqp->bwrptr = obqp->buffers;
 8002c56:	bf28      	it	cs
 8002c58:	6123      	strcs	r3, [r4, #16]
  if (obqp->notify != NULL) {
 8002c5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0e6      	beq.n	8002c2e <obqPutTimeout+0x1e>
    obqp->notify(obqp);
 8002c60:	4620      	mov	r0, r4
 8002c62:	4798      	blx	r3
 8002c64:	e7e3      	b.n	8002c2e <obqPutTimeout+0x1e>
 8002c66:	4615      	mov	r5, r2
  return __sch_get_currthread();
 8002c68:	4f11      	ldr	r7, [pc, #68]	; (8002cb0 <obqPutTimeout+0xa0>)
 8002c6a:	e00a      	b.n	8002c82 <obqPutTimeout+0x72>
  p->prev       = qp->prev;
 8002c6c:	6862      	ldr	r2, [r4, #4]
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002c6e:	4629      	mov	r1, r5
 8002c70:	e9c3 4200 	strd	r4, r2, [r3]
 8002c74:	2004      	movs	r0, #4
  p->prev->next = p;
 8002c76:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8002c78:	6063      	str	r3, [r4, #4]
 8002c7a:	f7ff ff89 	bl	8002b90 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	db08      	blt.n	8002c94 <obqPutTimeout+0x84>
  while (obqIsFullI(obqp)) {
 8002c82:	68e3      	ldr	r3, [r4, #12]
 8002c84:	b953      	cbnz	r3, 8002c9c <obqPutTimeout+0x8c>
    if (obqp->suspended) {
 8002c86:	7a23      	ldrb	r3, [r4, #8]
 8002c88:	b97b      	cbnz	r3, 8002caa <obqPutTimeout+0x9a>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002c8c:	2d00      	cmp	r5, #0
 8002c8e:	d1ed      	bne.n	8002c6c <obqPutTimeout+0x5c>
    return MSG_TIMEOUT;
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c94:	2300      	movs	r3, #0
 8002c96:	f383 8811 	msr	BASEPRI, r3
}
 8002c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8002c9c:	6922      	ldr	r2, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8002c9e:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8002ca0:	1d13      	adds	r3, r2, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8002ca2:	440a      	add	r2, r1
 8002ca4:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
    if (msg != MSG_OK) {
 8002ca8:	e7ba      	b.n	8002c20 <obqPutTimeout+0x10>
      return MSG_RESET;
 8002caa:	f06f 0001 	mvn.w	r0, #1
 8002cae:	e7f1      	b.n	8002c94 <obqPutTimeout+0x84>
 8002cb0:	20001050 	.word	0x20001050
	...

08002cc0 <_put.lto_priv.0>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cc4:	3044      	adds	r0, #68	; 0x44
 8002cc6:	f7ff bfa3 	b.w	8002c10 <obqPutTimeout>
 8002cca:	bf00      	nop
 8002ccc:	0000      	movs	r0, r0
	...

08002cd0 <_putt.lto_priv.0>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8002cd0:	3044      	adds	r0, #68	; 0x44
 8002cd2:	f7ff bf9d 	b.w	8002c10 <obqPutTimeout>
 8002cd6:	bf00      	nop
	...

08002ce0 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr == NULL) {
 8002cea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cec:	b313      	cbz	r3, 8002d34 <ibqGetTimeout+0x54>
  if (ibqp->ptr >= ibqp->top) {
 8002cee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  msg = (msg_t)*ibqp->ptr;
 8002cf0:	f813 6b01 	ldrb.w	r6, [r3], #1
  if (ibqp->ptr >= ibqp->top) {
 8002cf4:	4293      	cmp	r3, r2
  ibqp->ptr++;
 8002cf6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8002cf8:	d204      	bcs.n	8002d04 <ibqGetTimeout+0x24>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f383 8811 	msr	BASEPRI, r3
}
 8002d00:	4630      	mov	r0, r6
 8002d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ibqp->bcounter--;
 8002d04:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8002d06:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8002d08:	3a01      	subs	r2, #1
 8002d0a:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8002d0c:	2200      	movs	r2, #0
  ibqp->brdptr += ibqp->bsize;
 8002d0e:	69e1      	ldr	r1, [r4, #28]
  ibqp->ptr = NULL;
 8002d10:	62a2      	str	r2, [r4, #40]	; 0x28
  ibqp->brdptr += ibqp->bsize;
 8002d12:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 8002d14:	69a1      	ldr	r1, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 8002d16:	6163      	str	r3, [r4, #20]
  if (ibqp->brdptr >= ibqp->btop) {
 8002d18:	428b      	cmp	r3, r1
    ibqp->brdptr = ibqp->buffers;
 8002d1a:	bf24      	itt	cs
 8002d1c:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8002d1e:	6163      	strcs	r3, [r4, #20]
  if (ibqp->notify != NULL) {
 8002d20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0e9      	beq.n	8002cfa <ibqGetTimeout+0x1a>
    ibqp->notify(ibqp);
 8002d26:	4620      	mov	r0, r4
 8002d28:	4798      	blx	r3
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f383 8811 	msr	BASEPRI, r3
}
 8002d30:	4630      	mov	r0, r6
 8002d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d34:	460d      	mov	r5, r1
 8002d36:	4f12      	ldr	r7, [pc, #72]	; (8002d80 <ibqGetTimeout+0xa0>)
 8002d38:	e00a      	b.n	8002d50 <ibqGetTimeout+0x70>
  p->prev       = qp->prev;
 8002d3a:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	e9c3 4200 	strd	r4, r2, [r3]
 8002d42:	2004      	movs	r0, #4
  p->prev->next = p;
 8002d44:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8002d46:	6063      	str	r3, [r4, #4]
 8002d48:	f7ff ff22 	bl	8002b90 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002d4c:	1e06      	subs	r6, r0, #0
 8002d4e:	dbd4      	blt.n	8002cfa <ibqGetTimeout+0x1a>
  while (ibqIsEmptyI(ibqp)) {
 8002d50:	68e3      	ldr	r3, [r4, #12]
 8002d52:	b95b      	cbnz	r3, 8002d6c <ibqGetTimeout+0x8c>
    if (ibqp->suspended) {
 8002d54:	7a23      	ldrb	r3, [r4, #8]
 8002d56:	b983      	cbnz	r3, 8002d7a <ibqGetTimeout+0x9a>
 8002d58:	68fb      	ldr	r3, [r7, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002d5a:	2d00      	cmp	r5, #0
 8002d5c:	d1ed      	bne.n	8002d3a <ibqGetTimeout+0x5a>
    return MSG_TIMEOUT;
 8002d5e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002d62:	2300      	movs	r3, #0
 8002d64:	f383 8811 	msr	BASEPRI, r3
}
 8002d68:	4630      	mov	r0, r6
 8002d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002d6c:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002d6e:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002d70:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002d72:	441a      	add	r2, r3
 8002d74:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
    if (msg != MSG_OK) {
 8002d78:	e7ba      	b.n	8002cf0 <ibqGetTimeout+0x10>
      return MSG_RESET;
 8002d7a:	f06f 0601 	mvn.w	r6, #1
 8002d7e:	e7bc      	b.n	8002cfa <ibqGetTimeout+0x1a>
 8002d80:	20001050 	.word	0x20001050
	...

08002d90 <_get.lto_priv.0>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8002d90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d94:	300c      	adds	r0, #12
 8002d96:	f7ff bfa3 	b.w	8002ce0 <ibqGetTimeout>
 8002d9a:	bf00      	nop
 8002d9c:	0000      	movs	r0, r0
	...

08002da0 <_gett.lto_priv.0>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8002da0:	300c      	adds	r0, #12
 8002da2:	f7ff bf9d 	b.w	8002ce0 <ibqGetTimeout>
 8002da6:	bf00      	nop
	...

08002db0 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 8002db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db4:	2420      	movs	r4, #32
 8002db6:	4681      	mov	r9, r0
 8002db8:	460d      	mov	r5, r1
 8002dba:	4617      	mov	r7, r2
 8002dbc:	461e      	mov	r6, r3
 8002dbe:	f384 8811 	msr	BASEPRI, r4
  size_t r = 0;
 8002dc2:	2400      	movs	r4, #0
 8002dc4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8002ee0 <ibqReadTimeout+0x130>
    if (ibqp->ptr == NULL) {
 8002dc8:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8002dcc:	2900      	cmp	r1, #0
 8002dce:	d041      	beq.n	8002e54 <ibqReadTimeout+0xa4>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8002dd0:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
    if (size > (n - r)) {
 8002dd4:	eba7 0a04 	sub.w	sl, r7, r4
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8002dd8:	1a52      	subs	r2, r2, r1
    if (size > (n - r)) {
 8002dda:	4592      	cmp	sl, r2
 8002ddc:	bf28      	it	cs
 8002dde:	4692      	movcs	sl, r2
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8002de0:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8002de4:	d946      	bls.n	8002e74 <ibqReadTimeout+0xc4>
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8002de6:	462b      	mov	r3, r5
 8002de8:	f101 0a40 	add.w	sl, r1, #64	; 0x40
 8002dec:	f8d1 e000 	ldr.w	lr, [r1]
 8002df0:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8002df4:	6888      	ldr	r0, [r1, #8]
 8002df6:	68ca      	ldr	r2, [r1, #12]
 8002df8:	3110      	adds	r1, #16
 8002dfa:	4551      	cmp	r1, sl
 8002dfc:	f8c3 e000 	str.w	lr, [r3]
 8002e00:	f8c3 c004 	str.w	ip, [r3, #4]
 8002e04:	6098      	str	r0, [r3, #8]
 8002e06:	60da      	str	r2, [r3, #12]
 8002e08:	f103 0310 	add.w	r3, r3, #16
 8002e0c:	d1ee      	bne.n	8002dec <ibqReadTimeout+0x3c>
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002e0e:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8002e12:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002e16:	3340      	adds	r3, #64	; 0x40
    if (ibqp->ptr >= ibqp->top) {
 8002e18:	4293      	cmp	r3, r2
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 8002e1a:	f105 0540 	add.w	r5, r5, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002e1e:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 8002e22:	f104 0440 	add.w	r4, r4, #64	; 0x40
    if (ibqp->ptr >= ibqp->top) {
 8002e26:	d234      	bcs.n	8002e92 <ibqReadTimeout+0xe2>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f383 8811 	msr	BASEPRI, r3
    if (r >= n) {
 8002e2e:	42bc      	cmp	r4, r7
 8002e30:	d21d      	bcs.n	8002e6e <ibqReadTimeout+0xbe>
 8002e32:	2320      	movs	r3, #32
 8002e34:	f383 8811 	msr	BASEPRI, r3
}
 8002e38:	e7c6      	b.n	8002dc8 <ibqReadTimeout+0x18>
  p->prev       = qp->prev;
 8002e3a:	f8d9 2004 	ldr.w	r2, [r9, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002e3e:	4631      	mov	r1, r6
 8002e40:	e9c3 9200 	strd	r9, r2, [r3]
 8002e44:	2004      	movs	r0, #4
  p->prev->next = p;
 8002e46:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8002e48:	f8c9 3004 	str.w	r3, [r9, #4]
 8002e4c:	f7ff fea0 	bl	8002b90 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002e50:	2800      	cmp	r0, #0
 8002e52:	db09      	blt.n	8002e68 <ibqReadTimeout+0xb8>
  while (ibqIsEmptyI(ibqp)) {
 8002e54:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002e58:	bbd3      	cbnz	r3, 8002ed0 <ibqReadTimeout+0x120>
    if (ibqp->suspended) {
 8002e5a:	f899 3008 	ldrb.w	r3, [r9, #8]
 8002e5e:	b91b      	cbnz	r3, 8002e68 <ibqReadTimeout+0xb8>
 8002e60:	f8d8 300c 	ldr.w	r3, [r8, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002e64:	2e00      	cmp	r6, #0
 8002e66:	d1e8      	bne.n	8002e3a <ibqReadTimeout+0x8a>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f383 8811 	msr	BASEPRI, r3
}
 8002e6e:	4620      	mov	r0, r4
 8002e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      memcpy(bp, ibqp->ptr, size);
 8002e74:	4628      	mov	r0, r5
 8002e76:	4652      	mov	r2, sl
 8002e78:	f7fd f9f8 	bl	800026c <memcpy>
      ibqp->ptr += size;
 8002e7c:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8002e80:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
      ibqp->ptr += size;
 8002e84:	4453      	add	r3, sl
    if (ibqp->ptr >= ibqp->top) {
 8002e86:	4293      	cmp	r3, r2
      bp        += size;
 8002e88:	4455      	add	r5, sl
      ibqp->ptr += size;
 8002e8a:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      r         += size;
 8002e8e:	4454      	add	r4, sl
    if (ibqp->ptr >= ibqp->top) {
 8002e90:	d3ca      	bcc.n	8002e28 <ibqReadTimeout+0x78>
  if (ibqp->brdptr >= ibqp->btop) {
 8002e92:	e9d9 2106 	ldrd	r2, r1, [r9, #24]
  ibqp->brdptr += ibqp->bsize;
 8002e96:	f8d9 3014 	ldr.w	r3, [r9, #20]
  ibqp->bcounter--;
 8002e9a:	f8d9 000c 	ldr.w	r0, [r9, #12]
  ibqp->brdptr += ibqp->bsize;
 8002e9e:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 8002ea0:	4293      	cmp	r3, r2
  ibqp->ptr = NULL;
 8002ea2:	f04f 0200 	mov.w	r2, #0
  ibqp->brdptr += ibqp->bsize;
 8002ea6:	f8c9 3014 	str.w	r3, [r9, #20]
    ibqp->brdptr = ibqp->buffers;
 8002eaa:	bf28      	it	cs
 8002eac:	f8d9 3024 	ldrcs.w	r3, [r9, #36]	; 0x24
  ibqp->bcounter--;
 8002eb0:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    ibqp->brdptr = ibqp->buffers;
 8002eb4:	bf28      	it	cs
 8002eb6:	f8c9 3014 	strcs.w	r3, [r9, #20]
  if (ibqp->notify != NULL) {
 8002eba:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
  ibqp->bcounter--;
 8002ebe:	f8c9 000c 	str.w	r0, [r9, #12]
  ibqp->ptr = NULL;
 8002ec2:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
  if (ibqp->notify != NULL) {
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0ae      	beq.n	8002e28 <ibqReadTimeout+0x78>
    ibqp->notify(ibqp);
 8002eca:	4648      	mov	r0, r9
 8002ecc:	4798      	blx	r3
 8002ece:	e7ab      	b.n	8002e28 <ibqReadTimeout+0x78>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002ed0:	f8d9 1014 	ldr.w	r1, [r9, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002ed4:	680a      	ldr	r2, [r1, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002ed6:	3104      	adds	r1, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002ed8:	440a      	add	r2, r1
 8002eda:	e9c9 120a 	strd	r1, r2, [r9, #40]	; 0x28
      if (msg != MSG_OK) {
 8002ede:	e779      	b.n	8002dd4 <ibqReadTimeout+0x24>
 8002ee0:	20001050 	.word	0x20001050
	...

08002ef0 <_read.lto_priv.0>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ef4:	300c      	adds	r0, #12
 8002ef6:	f7ff bf5b 	b.w	8002db0 <ibqReadTimeout>
 8002efa:	bf00      	nop
 8002efc:	0000      	movs	r0, r0
	...

08002f00 <_readt.lto_priv.0>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8002f00:	300c      	adds	r0, #12
 8002f02:	f7ff bf55 	b.w	8002db0 <ibqReadTimeout>
 8002f06:	bf00      	nop
	...

08002f10 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 8002f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f14:	2520      	movs	r5, #32
 8002f16:	4604      	mov	r4, r0
 8002f18:	4689      	mov	r9, r1
 8002f1a:	4617      	mov	r7, r2
 8002f1c:	461e      	mov	r6, r3
 8002f1e:	f385 8811 	msr	BASEPRI, r5
  size_t w = 0;
 8002f22:	2500      	movs	r5, #0
 8002f24:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8003018 <obqWriteTimeout+0x108>
    if (obqp->ptr == NULL) {
 8002f28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d03a      	beq.n	8002fa4 <obqWriteTimeout+0x94>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8002f2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if (size > (n - w)) {
 8002f30:	eba7 0a05 	sub.w	sl, r7, r5
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8002f34:	1a12      	subs	r2, r2, r0
    if (size > (n - w)) {
 8002f36:	4592      	cmp	sl, r2
 8002f38:	bf28      	it	cs
 8002f3a:	4692      	movcs	sl, r2
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8002f3c:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8002f40:	4649      	mov	r1, r9
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8002f42:	d93e      	bls.n	8002fc2 <obqWriteTimeout+0xb2>
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8002f44:	f109 0940 	add.w	r9, r9, #64	; 0x40
 8002f48:	f8d1 e000 	ldr.w	lr, [r1]
 8002f4c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8002f50:	688a      	ldr	r2, [r1, #8]
 8002f52:	68cb      	ldr	r3, [r1, #12]
 8002f54:	3110      	adds	r1, #16
 8002f56:	4549      	cmp	r1, r9
 8002f58:	f8c0 e000 	str.w	lr, [r0]
 8002f5c:	f8c0 c004 	str.w	ip, [r0, #4]
 8002f60:	6082      	str	r2, [r0, #8]
 8002f62:	60c3      	str	r3, [r0, #12]
 8002f64:	f100 0010 	add.w	r0, r0, #16
 8002f68:	d1ee      	bne.n	8002f48 <obqWriteTimeout+0x38>
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002f6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 8002f6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002f6e:	3340      	adds	r3, #64	; 0x40
    if (obqp->ptr >= obqp->top) {
 8002f70:	4293      	cmp	r3, r2
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 8002f72:	4689      	mov	r9, r1
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002f74:	62a3      	str	r3, [r4, #40]	; 0x28
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 8002f76:	f105 0540 	add.w	r5, r5, #64	; 0x40
    if (obqp->ptr >= obqp->top) {
 8002f7a:	d22d      	bcs.n	8002fd8 <obqWriteTimeout+0xc8>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f383 8811 	msr	BASEPRI, r3
    if (w >= n) {
 8002f82:	42bd      	cmp	r5, r7
 8002f84:	d21a      	bcs.n	8002fbc <obqWriteTimeout+0xac>
 8002f86:	2320      	movs	r3, #32
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	e7cc      	b.n	8002f28 <obqWriteTimeout+0x18>
  p->prev       = qp->prev;
 8002f8e:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002f90:	4631      	mov	r1, r6
 8002f92:	e9c3 4200 	strd	r4, r2, [r3]
 8002f96:	2004      	movs	r0, #4
  p->prev->next = p;
 8002f98:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8002f9a:	6063      	str	r3, [r4, #4]
 8002f9c:	f7ff fdf8 	bl	8002b90 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	db08      	blt.n	8002fb6 <obqWriteTimeout+0xa6>
  while (obqIsFullI(obqp)) {
 8002fa4:	68e3      	ldr	r3, [r4, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d12f      	bne.n	800300a <obqWriteTimeout+0xfa>
    if (obqp->suspended) {
 8002faa:	7a23      	ldrb	r3, [r4, #8]
 8002fac:	b91b      	cbnz	r3, 8002fb6 <obqWriteTimeout+0xa6>
 8002fae:	f8d8 300c 	ldr.w	r3, [r8, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002fb2:	2e00      	cmp	r6, #0
 8002fb4:	d1eb      	bne.n	8002f8e <obqWriteTimeout+0x7e>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f383 8811 	msr	BASEPRI, r3
}
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      memcpy(obqp->ptr, bp, size);
 8002fc2:	4652      	mov	r2, sl
 8002fc4:	f7fd f952 	bl	800026c <memcpy>
      obqp->ptr += size;
 8002fc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 8002fca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      obqp->ptr += size;
 8002fcc:	4453      	add	r3, sl
    if (obqp->ptr >= obqp->top) {
 8002fce:	4293      	cmp	r3, r2
      bp        += size;
 8002fd0:	44d1      	add	r9, sl
      obqp->ptr += size;
 8002fd2:	62a3      	str	r3, [r4, #40]	; 0x28
      w         += size;
 8002fd4:	4455      	add	r5, sl
    if (obqp->ptr >= obqp->top) {
 8002fd6:	d3d1      	bcc.n	8002f7c <obqWriteTimeout+0x6c>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8002fd8:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 8002fda:	6923      	ldr	r3, [r4, #16]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8002fdc:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8002fde:	601a      	str	r2, [r3, #0]
  if (obqp->bwrptr >= obqp->btop) {
 8002fe0:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
  obqp->bwrptr += obqp->bsize;
 8002fe4:	440b      	add	r3, r1
  if (obqp->bwrptr >= obqp->btop) {
 8002fe6:	4293      	cmp	r3, r2
  obqp->ptr = NULL;
 8002fe8:	f04f 0200 	mov.w	r2, #0
  obqp->bwrptr += obqp->bsize;
 8002fec:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8002fee:	bf28      	it	cs
 8002ff0:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  obqp->bcounter--;
 8002ff2:	68e0      	ldr	r0, [r4, #12]
    obqp->bwrptr = obqp->buffers;
 8002ff4:	bf28      	it	cs
 8002ff6:	6123      	strcs	r3, [r4, #16]
  if (obqp->notify != NULL) {
 8002ff8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 8002ffa:	3801      	subs	r0, #1
 8002ffc:	60e0      	str	r0, [r4, #12]
  obqp->ptr = NULL;
 8002ffe:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0bb      	beq.n	8002f7c <obqWriteTimeout+0x6c>
    obqp->notify(obqp);
 8003004:	4620      	mov	r0, r4
 8003006:	4798      	blx	r3
 8003008:	e7b8      	b.n	8002f7c <obqWriteTimeout+0x6c>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800300a:	6920      	ldr	r0, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 800300c:	69e2      	ldr	r2, [r4, #28]
 800300e:	4402      	add	r2, r0
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8003010:	3004      	adds	r0, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8003012:	e9c4 020a 	strd	r0, r2, [r4, #40]	; 0x28
      if (msg != MSG_OK) {
 8003016:	e78b      	b.n	8002f30 <obqWriteTimeout+0x20>
 8003018:	20001050 	.word	0x20001050
 800301c:	00000000 	.word	0x00000000

08003020 <_write.lto_priv.0>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8003020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003024:	3044      	adds	r0, #68	; 0x44
 8003026:	f7ff bf73 	b.w	8002f10 <obqWriteTimeout>
 800302a:	bf00      	nop
 800302c:	0000      	movs	r0, r0
	...

08003030 <_writet.lto_priv.0>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8003030:	3044      	adds	r0, #68	; 0x44
 8003032:	f7ff bf6d 	b.w	8002f10 <obqWriteTimeout>
 8003036:	bf00      	nop
	...

08003040 <_sdc_wait_for_transfer_state>:
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
 8003040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003044:	f240 454d 	movw	r5, #1101	; 0x44d
 8003048:	2620      	movs	r6, #32
 800304a:	4607      	mov	r7, r0
        MMCSD_R1_ERROR(resp[0])) {
 800304c:	4c16      	ldr	r4, [pc, #88]	; (80030a8 <_sdc_wait_for_transfer_state+0x68>)
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
 800304e:	6bba      	ldr	r2, [r7, #56]	; 0x38
  sdcp->sdio->ARG = arg;
 8003050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003052:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003054:	60dd      	str	r5, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003056:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003058:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 800305c:	d0fb      	beq.n	8003056 <_sdc_wait_for_transfer_state+0x16>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 800305e:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003062:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8003064:	d119      	bne.n	800309a <_sdc_wait_for_transfer_state+0x5a>
  *resp = sdcp->sdio->RESP1;
 8003066:	695b      	ldr	r3, [r3, #20]
                                   sdcp->rca, resp) ||
 8003068:	ea13 0804 	ands.w	r8, r3, r4
 800306c:	d112      	bne.n	8003094 <_sdc_wait_for_transfer_state+0x54>
    switch (MMCSD_R1_STS(resp[0])) {
 800306e:	f3c3 2343 	ubfx	r3, r3, #9, #4
 8003072:	2b04      	cmp	r3, #4
 8003074:	d00b      	beq.n	800308e <_sdc_wait_for_transfer_state+0x4e>
 8003076:	3b05      	subs	r3, #5
 8003078:	2b02      	cmp	r3, #2
 800307a:	d80b      	bhi.n	8003094 <_sdc_wait_for_transfer_state+0x54>
 800307c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003080:	2102      	movs	r1, #2
 8003082:	2008      	movs	r0, #8
 8003084:	f7ff fd84 	bl	8002b90 <chSchGoSleepTimeoutS>
 8003088:	f388 8811 	msr	BASEPRI, r8
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
 800308c:	e7df      	b.n	800304e <_sdc_wait_for_transfer_state+0xe>
      return HAL_SUCCESS;
 800308e:	4640      	mov	r0, r8
}
 8003090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (MMCSD_R1_STS(resp[0])) {
 8003094:	2001      	movs	r0, #1
}
 8003096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdc_lld_collect_errors(sdcp, sta);
 800309a:	4638      	mov	r0, r7
 800309c:	f7fd fb98 	bl	80007d0 <sdc_lld_collect_errors>
      return HAL_FAILED;
 80030a0:	2001      	movs	r0, #1
}
 80030a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030a6:	bf00      	nop
 80030a8:	fdffe008 	.word	0xfdffe008
 80030ac:	00000000 	.word	0x00000000

080030b0 <sdcDisconnect>:
bool sdcDisconnect(SDCDriver *sdcp) {
 80030b0:	b538      	push	{r3, r4, r5, lr}
 80030b2:	2320      	movs	r3, #32
 80030b4:	f383 8811 	msr	BASEPRI, r3
  if (sdcp->state == BLK_ACTIVE) {
 80030b8:	7903      	ldrb	r3, [r0, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d012      	beq.n	80030e4 <sdcDisconnect+0x34>
  sdcp->state = BLK_DISCONNECTING;
 80030be:	2304      	movs	r3, #4
 80030c0:	4604      	mov	r4, r0
 80030c2:	2500      	movs	r5, #0
 80030c4:	7103      	strb	r3, [r0, #4]
 80030c6:	f385 8811 	msr	BASEPRI, r5
  if (_sdc_wait_for_transfer_state(sdcp)) {
 80030ca:	f7ff ffb9 	bl	8003040 <_sdc_wait_for_transfer_state>
    sdcp->state = BLK_ACTIVE;
 80030ce:	2202      	movs	r2, #2
 80030d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (_sdc_wait_for_transfer_state(sdcp)) {
 80030d2:	b918      	cbnz	r0, 80030dc <sdcDisconnect+0x2c>
  sdcp->sdio->CLKCR = 0;
 80030d4:	6058      	str	r0, [r3, #4]
  sdcp->sdio->POWER = 0;
 80030d6:	6018      	str	r0, [r3, #0]
  sdcp->state = BLK_ACTIVE;
 80030d8:	7122      	strb	r2, [r4, #4]
}
 80030da:	bd38      	pop	{r3, r4, r5, pc}
  sdcp->sdio->CLKCR = 0;
 80030dc:	605d      	str	r5, [r3, #4]
  sdcp->sdio->POWER = 0;
 80030de:	601d      	str	r5, [r3, #0]
    sdcp->state = BLK_ACTIVE;
 80030e0:	7122      	strb	r2, [r4, #4]
}
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
 80030e4:	2000      	movs	r0, #0
 80030e6:	f380 8811 	msr	BASEPRI, r0
 80030ea:	bd38      	pop	{r3, r4, r5, pc}
 80030ec:	0000      	movs	r0, r0
	...

080030f0 <sdcRead>:
bool sdcRead(SDCDriver *sdcp, uint32_t startblk, uint8_t *buf, uint32_t n) {
 80030f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030f4:	460d      	mov	r5, r1
 80030f6:	461e      	mov	r6, r3
  if ((startblk + n - 1U) > sdcp->capacity) {
 80030f8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80030fa:	3b01      	subs	r3, #1
 80030fc:	442b      	add	r3, r5
 80030fe:	428b      	cmp	r3, r1
bool sdcRead(SDCDriver *sdcp, uint32_t startblk, uint8_t *buf, uint32_t n) {
 8003100:	4604      	mov	r4, r0
  if ((startblk + n - 1U) > sdcp->capacity) {
 8003102:	d906      	bls.n	8003112 <sdcRead+0x22>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8003104:	6b43      	ldr	r3, [r0, #52]	; 0x34
    return HAL_FAILED;
 8003106:	2001      	movs	r0, #1
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8003108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800310e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  sdcp->state = BLK_READING;
 8003112:	2306      	movs	r3, #6
 8003114:	7103      	strb	r3, [r0, #4]
  if (((unsigned)buf & 3) != 0) {
 8003116:	0793      	lsls	r3, r2, #30
 8003118:	4617      	mov	r7, r2
 800311a:	d02b      	beq.n	8003174 <sdcRead+0x84>
    for (i = 0; i < blocks; i++) {
 800311c:	b346      	cbz	r6, 8003170 <sdcRead+0x80>
 800311e:	ebc5 52c5 	rsb	r2, r5, r5, lsl #23
  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 8003122:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8003190 <sdcRead+0xa0>
 8003126:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8003194 <sdcRead+0xa4>
 800312a:	442e      	add	r6, r5
 800312c:	eb07 2742 	add.w	r7, r7, r2, lsl #9
 8003130:	e011      	b.n	8003156 <sdcRead+0x66>
 8003132:	4629      	mov	r1, r5
 8003134:	2301      	movs	r3, #1
 8003136:	4642      	mov	r2, r8
 8003138:	4620      	mov	r0, r4
 800313a:	f7fe f851 	bl	80011e0 <sdc_lld_read_aligned.part.0>
      memcpy(buf, u.buf, MMCSD_BLOCK_SIZE);
 800313e:	4603      	mov	r3, r0
 8003140:	eb07 2045 	add.w	r0, r7, r5, lsl #9
      startblk++;
 8003144:	3501      	adds	r5, #1
      if (sdc_lld_read_aligned(sdcp, startblk, u.buf, 1))
 8003146:	b973      	cbnz	r3, 8003166 <sdcRead+0x76>
      memcpy(buf, u.buf, MMCSD_BLOCK_SIZE);
 8003148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800314c:	4641      	mov	r1, r8
 800314e:	f7fd f88d 	bl	800026c <memcpy>
    for (i = 0; i < blocks; i++) {
 8003152:	42b5      	cmp	r5, r6
 8003154:	d00c      	beq.n	8003170 <sdcRead+0x80>
  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 8003156:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (_sdc_wait_for_transfer_state(sdcp))
 8003158:	4620      	mov	r0, r4
  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 800315a:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 800315e:	f7ff ff6f 	bl	8003040 <_sdc_wait_for_transfer_state>
 8003162:	2800      	cmp	r0, #0
 8003164:	d0e5      	beq.n	8003132 <sdcRead+0x42>
        return HAL_FAILED;
 8003166:	2001      	movs	r0, #1
  sdcp->state = BLK_READY;
 8003168:	2305      	movs	r3, #5
 800316a:	7123      	strb	r3, [r4, #4]
}
 800316c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_SUCCESS;
 8003170:	2000      	movs	r0, #0
 8003172:	e7f9      	b.n	8003168 <sdcRead+0x78>
  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 8003174:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003176:	4a06      	ldr	r2, [pc, #24]	; (8003190 <sdcRead+0xa0>)
 8003178:	625a      	str	r2, [r3, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 800317a:	f7ff ff61 	bl	8003040 <_sdc_wait_for_transfer_state>
 800317e:	2800      	cmp	r0, #0
 8003180:	d1f1      	bne.n	8003166 <sdcRead+0x76>
 8003182:	4633      	mov	r3, r6
 8003184:	463a      	mov	r2, r7
 8003186:	4629      	mov	r1, r5
 8003188:	4620      	mov	r0, r4
 800318a:	f7fe f829 	bl	80011e0 <sdc_lld_read_aligned.part.0>
 800318e:	e7eb      	b.n	8003168 <sdcRead+0x78>
 8003190:	016e3600 	.word	0x016e3600
 8003194:	200019b8 	.word	0x200019b8
	...

080031a0 <sdcWrite>:
              const uint8_t *buf, uint32_t n) {
 80031a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031a4:	460c      	mov	r4, r1
 80031a6:	461e      	mov	r6, r3
  if ((startblk + n - 1U) > sdcp->capacity) {
 80031a8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80031aa:	3b01      	subs	r3, #1
 80031ac:	4423      	add	r3, r4
 80031ae:	428b      	cmp	r3, r1
              const uint8_t *buf, uint32_t n) {
 80031b0:	4605      	mov	r5, r0
 80031b2:	b083      	sub	sp, #12
  if ((startblk + n - 1U) > sdcp->capacity) {
 80031b4:	d907      	bls.n	80031c6 <sdcWrite+0x26>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 80031b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    return HAL_FAILED;
 80031b8:	2001      	movs	r0, #1
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 80031ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031be:	636b      	str	r3, [r5, #52]	; 0x34
}
 80031c0:	b003      	add	sp, #12
 80031c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sdcp->state = BLK_WRITING;
 80031c6:	2307      	movs	r3, #7
 80031c8:	7103      	strb	r3, [r0, #4]
  if (((unsigned)buf & 3) != 0) {
 80031ca:	0793      	lsls	r3, r2, #30
 80031cc:	4617      	mov	r7, r2
 80031ce:	d02b      	beq.n	8003228 <sdcWrite+0x88>
    for (i = 0; i < blocks; i++) {
 80031d0:	b346      	cbz	r6, 8003224 <sdcWrite+0x84>
 80031d2:	ebc4 52c4 	rsb	r2, r4, r4, lsl #23
      memcpy(u.buf, buf, MMCSD_BLOCK_SIZE);
 80031d6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003248 <sdcWrite+0xa8>
  sdcp->sdio->DTIMER = STM32_SDC_WRITE_TIMEOUT;
 80031da:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800324c <sdcWrite+0xac>
 80031de:	4426      	add	r6, r4
 80031e0:	eb07 2742 	add.w	r7, r7, r2, lsl #9
 80031e4:	e009      	b.n	80031fa <sdcWrite+0x5a>
 80031e6:	2301      	movs	r3, #1
 80031e8:	4621      	mov	r1, r4
 80031ea:	4642      	mov	r2, r8
 80031ec:	4628      	mov	r0, r5
      startblk++;
 80031ee:	441c      	add	r4, r3
 80031f0:	f7fe f84e 	bl	8001290 <sdc_lld_write_aligned.part.0>
      if (sdc_lld_write_aligned(sdcp, startblk, u.buf, 1))
 80031f4:	b980      	cbnz	r0, 8003218 <sdcWrite+0x78>
    for (i = 0; i < blocks; i++) {
 80031f6:	42b4      	cmp	r4, r6
 80031f8:	d014      	beq.n	8003224 <sdcWrite+0x84>
      memcpy(u.buf, buf, MMCSD_BLOCK_SIZE);
 80031fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031fe:	4640      	mov	r0, r8
 8003200:	eb07 2144 	add.w	r1, r7, r4, lsl #9
 8003204:	f7fd f832 	bl	800026c <memcpy>
  sdcp->sdio->DTIMER = STM32_SDC_WRITE_TIMEOUT;
 8003208:	6cab      	ldr	r3, [r5, #72]	; 0x48
  if (_sdc_wait_for_transfer_state(sdcp))
 800320a:	4628      	mov	r0, r5
  sdcp->sdio->DTIMER = STM32_SDC_WRITE_TIMEOUT;
 800320c:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 8003210:	f7ff ff16 	bl	8003040 <_sdc_wait_for_transfer_state>
 8003214:	2800      	cmp	r0, #0
 8003216:	d0e6      	beq.n	80031e6 <sdcWrite+0x46>
        return HAL_FAILED;
 8003218:	2001      	movs	r0, #1
  sdcp->state = BLK_READY;
 800321a:	2305      	movs	r3, #5
 800321c:	712b      	strb	r3, [r5, #4]
}
 800321e:	b003      	add	sp, #12
 8003220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_SUCCESS;
 8003224:	2000      	movs	r0, #0
 8003226:	e7f8      	b.n	800321a <sdcWrite+0x7a>
  sdcp->sdio->DTIMER = STM32_SDC_WRITE_TIMEOUT;
 8003228:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <sdcWrite+0xac>)
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 800322e:	f7ff ff07 	bl	8003040 <_sdc_wait_for_transfer_state>
 8003232:	2800      	cmp	r0, #0
 8003234:	d1f0      	bne.n	8003218 <sdcWrite+0x78>
 8003236:	4633      	mov	r3, r6
 8003238:	463a      	mov	r2, r7
 800323a:	4621      	mov	r1, r4
 800323c:	4628      	mov	r0, r5
 800323e:	f7fe f827 	bl	8001290 <sdc_lld_write_aligned.part.0>
 8003242:	9001      	str	r0, [sp, #4]
 8003244:	e7e9      	b.n	800321a <sdcWrite+0x7a>
 8003246:	bf00      	nop
 8003248:	200019b8 	.word	0x200019b8
 800324c:	016e3600 	.word	0x016e3600

08003250 <sdc_lld_read_special>:
                          uint8_t cmd, uint32_t arg) {
 8003250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 8003254:	4f2f      	ldr	r7, [pc, #188]	; (8003314 <sdc_lld_read_special+0xc4>)
                          uint8_t cmd, uint32_t arg) {
 8003256:	461d      	mov	r5, r3
  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 8003258:	6c83      	ldr	r3, [r0, #72]	; 0x48
                          uint8_t cmd, uint32_t arg) {
 800325a:	b082      	sub	sp, #8
  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 800325c:	625f      	str	r7, [r3, #36]	; 0x24
                          uint8_t cmd, uint32_t arg) {
 800325e:	4604      	mov	r4, r0
 8003260:	4688      	mov	r8, r1
 8003262:	4616      	mov	r6, r2
  if (_sdc_wait_for_transfer_state(sdcp))
 8003264:	f7ff feec 	bl	8003040 <_sdc_wait_for_transfer_state>
  dmaStreamClearInterrupt(sdcp->dma);
 8003268:	6c67      	ldr	r7, [r4, #68]	; 0x44
  if (_sdc_wait_for_transfer_state(sdcp))
 800326a:	2800      	cmp	r0, #0
 800326c:	d148      	bne.n	8003300 <sdc_lld_read_special+0xb0>
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 800326e:	220f      	movs	r2, #15
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8003270:	f240 312a 	movw	r1, #810	; 0x32a
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 8003274:	6c23      	ldr	r3, [r4, #64]	; 0x40
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003276:	f445 6088 	orr.w	r0, r5, #1088	; 0x440
  dmaStreamSetMemory0(sdcp->dma, buf);
 800327a:	687d      	ldr	r5, [r7, #4]
  dmaStreamSetTransactionSize(sdcp->dma, bytes / sizeof (uint32_t));
 800327c:	ea4f 0c96 	mov.w	ip, r6, lsr #2
  dmaStreamSetMemory0(sdcp->dma, buf);
 8003280:	f8c5 800c 	str.w	r8, [r5, #12]
  dmaStreamSetTransactionSize(sdcp->dma, bytes / sizeof (uint32_t));
 8003284:	f8c5 c004 	str.w	ip, [r5, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 8003288:	602b      	str	r3, [r5, #0]
  dmaStreamEnable(sdcp->dma);
 800328a:	682b      	ldr	r3, [r5, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 800328c:	f8df c088 	ldr.w	ip, [pc, #136]	; 8003318 <sdc_lld_read_special+0xc8>
  dmaStreamEnable(sdcp->dma);
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	602b      	str	r3, [r5, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8003296:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003298:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 800329c:	63d9      	str	r1, [r3, #60]	; 0x3c
  sdcp->sdio->DLEN  = bytes;
 800329e:	629e      	str	r6, [r3, #40]	; 0x28
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 80032a0:	62da      	str	r2, [r3, #44]	; 0x2c
  sdcp->sdio->ARG = arg;
 80032a2:	9a08      	ldr	r2, [sp, #32]
 80032a4:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80032a6:	60d8      	str	r0, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80032a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032aa:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 80032ae:	d0fb      	beq.n	80032a8 <sdc_lld_read_special+0x58>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80032b0:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80032b6:	d126      	bne.n	8003306 <sdc_lld_read_special+0xb6>
  *resp = sdcp->sdio->RESP1;
 80032b8:	6959      	ldr	r1, [r3, #20]
                                 || MMCSD_R1_ERROR(resp[0]))
 80032ba:	4a18      	ldr	r2, [pc, #96]	; (800331c <sdc_lld_read_special+0xcc>)
  *resp = sdcp->sdio->RESP1;
 80032bc:	9101      	str	r1, [sp, #4]
                                 || MMCSD_R1_ERROR(resp[0]))
 80032be:	400a      	ands	r2, r1
 80032c0:	b1b2      	cbz	r2, 80032f0 <sdc_lld_read_special+0xa0>
  dmaStreamClearInterrupt(sdcp->dma);
 80032c2:	220e      	movs	r2, #14
  sdcp->sdio->MASK  = 0;
 80032c4:	2600      	movs	r6, #0
  sdc_lld_collect_errors(sdcp, sta);
 80032c6:	4620      	mov	r0, r4
  dmaStreamClearInterrupt(sdcp->dma);
 80032c8:	7b7c      	ldrb	r4, [r7, #13]
 80032ca:	683f      	ldr	r7, [r7, #0]
 80032cc:	40a2      	lsls	r2, r4
  uint32_t sta = sdcp->sdio->STA;
 80032ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
  dmaStreamClearInterrupt(sdcp->dma);
 80032d0:	607a      	str	r2, [r7, #4]
  dmaStreamDisable(sdcp->dma);
 80032d2:	682c      	ldr	r4, [r5, #0]
 80032d4:	f024 040f 	bic.w	r4, r4, #15
 80032d8:	602c      	str	r4, [r5, #0]
 80032da:	607a      	str	r2, [r7, #4]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 80032dc:	4a0e      	ldr	r2, [pc, #56]	; (8003318 <sdc_lld_read_special+0xc8>)
 80032de:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = 0;
 80032e0:	63de      	str	r6, [r3, #60]	; 0x3c
  sdcp->sdio->DCTRL = 0;
 80032e2:	62de      	str	r6, [r3, #44]	; 0x2c
  sdc_lld_collect_errors(sdcp, sta);
 80032e4:	f7fd fa74 	bl	80007d0 <sdc_lld_collect_errors>
  return HAL_FAILED;
 80032e8:	2001      	movs	r0, #1
}
 80032ea:	b002      	add	sp, #8
 80032ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sdc_lld_wait_transaction_end(sdcp, 1, resp))
 80032f0:	2101      	movs	r1, #1
 80032f2:	4620      	mov	r0, r4
 80032f4:	aa01      	add	r2, sp, #4
 80032f6:	f7fd ff13 	bl	8001120 <sdc_lld_wait_transaction_end>
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d0f5      	beq.n	80032ea <sdc_lld_read_special+0x9a>
  dmaStreamClearInterrupt(sdcp->dma);
 80032fe:	6c67      	ldr	r7, [r4, #68]	; 0x44
  uint32_t sta = sdcp->sdio->STA;
 8003300:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  dmaStreamDisable(sdcp->dma);
 8003302:	687d      	ldr	r5, [r7, #4]
 8003304:	e7dd      	b.n	80032c2 <sdc_lld_read_special+0x72>
    sdc_lld_collect_errors(sdcp, sta);
 8003306:	4620      	mov	r0, r4
 8003308:	f7fd fa62 	bl	80007d0 <sdc_lld_collect_errors>
  uint32_t sta = sdcp->sdio->STA;
 800330c:	e9d4 7311 	ldrd	r7, r3, [r4, #68]	; 0x44
  dmaStreamDisable(sdcp->dma);
 8003310:	687d      	ldr	r5, [r7, #4]
 8003312:	e7d6      	b.n	80032c2 <sdc_lld_read_special+0x72>
 8003314:	016e3600 	.word	0x016e3600
 8003318:	00c007ff 	.word	0x00c007ff
 800331c:	fdffe008 	.word	0xfdffe008

08003320 <rt_test_004_001_execute>:
 */

static void rt_test_004_001_execute(void) {

  /* [4.1.1] Time stamps are generated and checked for monotonicity.*/
  test_set_step(1);
 8003320:	2101      	movs	r1, #1
static void rt_test_004_001_execute(void) {
 8003322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8003326:	f8df a094 	ldr.w	sl, [pc, #148]	; 80033bc <rt_test_004_001_execute+0x9c>
 800332a:	f04f 0920 	mov.w	r9, #32
 800332e:	f8ca 1000 	str.w	r1, [sl]
 8003332:	f389 8811 	msr	BASEPRI, r9
 8003336:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000

  /* Current system time.*/
  now = chVTGetSystemTimeX();

  /* Last time stamp generated.*/
  last = oip->vtlist.laststamp;
 800333a:	4e21      	ldr	r6, [pc, #132]	; (80033c0 <rt_test_004_001_execute+0xa0>)
 800333c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800333e:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
  return (sysinterval_t)((systime_t)(end - start));
 8003342:	1a80      	subs	r0, r0, r2

  /* Interval between the last time stamp and current time used for a new
     time stamp. Note that this fails if the interval is larger than a
     systime_t type.*/
  stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 8003344:	b280      	uxth	r0, r0
 8003346:	1884      	adds	r4, r0, r2
 8003348:	f143 0500 	adc.w	r5, r3, #0
 800334c:	f04f 0800 	mov.w	r8, #0

  chDbgAssert(oip->vtlist.laststamp <= stamp, "wrapped");

  /* Storing the new stamp.*/
  oip->vtlist.laststamp = stamp;
 8003350:	e9c6 4508 	strd	r4, r5, [r6, #32]
 8003354:	f388 8811 	msr	BASEPRI, r8
 8003358:	f389 8811 	msr	BASEPRI, r9
 800335c:	2008      	movs	r0, #8
 800335e:	f7ff fc17 	bl	8002b90 <chSchGoSleepTimeoutS>
 8003362:	f388 8811 	msr	BASEPRI, r8
 8003366:	f389 8811 	msr	BASEPRI, r9
 800336a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336c:	b292      	uxth	r2, r2
 800336e:	f388 8811 	msr	BASEPRI, r8
  return systime + (systime_t)interval;
 8003372:	e005      	b.n	8003380 <rt_test_004_001_execute+0x60>
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003376:	1a9b      	subs	r3, r3, r2
      test_assert(last <= now, "not monotonic");
      last = now;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8003378:	b29b      	uxth	r3, r3
 800337a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800337e:	d21a      	bcs.n	80033b6 <rt_test_004_001_execute+0x96>
 8003380:	f389 8811 	msr	BASEPRI, r9
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  last = oip->vtlist.laststamp;
 8003386:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
  return (sysinterval_t)((systime_t)(end - start));
 800338a:	1a1b      	subs	r3, r3, r0
  stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 800338c:	b29b      	uxth	r3, r3
 800338e:	46a6      	mov	lr, r4
 8003390:	181c      	adds	r4, r3, r0
 8003392:	46ac      	mov	ip, r5
 8003394:	f141 0500 	adc.w	r5, r1, #0
  oip->vtlist.laststamp = stamp;
 8003398:	e9c6 4508 	strd	r4, r5, [r6, #32]
 800339c:	f388 8811 	msr	BASEPRI, r8
  if (!condition) {
 80033a0:	4574      	cmp	r4, lr
 80033a2:	eb75 030c 	sbcs.w	r3, r5, ip
 80033a6:	d2e5      	bcs.n	8003374 <rt_test_004_001_execute+0x54>
  chtest.global_fail     = true;
 80033a8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80033ac:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <rt_test_004_001_execute+0xa4>)
  chtest.global_fail     = true;
 80033ae:	f8aa 3004 	strh.w	r3, [sl, #4]
  chtest.failure_message = msg;
 80033b2:	f8ca 2008 	str.w	r2, [sl, #8]
  }
  test_end_step(1);
}
 80033b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ba:	bf00      	nop
 80033bc:	20001134 	.word	0x20001134
 80033c0:	20001050 	.word	0x20001050
 80033c4:	0800ff2c 	.word	0x0800ff2c
	...

080033d0 <rt_test_005_001_execute>:
  systime_t time;

  /* [5.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 80033d0:	2301      	movs	r3, #1
static void rt_test_005_001_execute(void) {
 80033d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  test_set_step(1);
 80033da:	4e37      	ldr	r6, [pc, #220]	; (80034b8 <rt_test_005_001_execute+0xe8>)
 80033dc:	2520      	movs	r5, #32
 80033de:	6033      	str	r3, [r6, #0]
 80033e0:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 80033e4:	f385 8811 	msr	BASEPRI, r5
 80033e8:	2164      	movs	r1, #100	; 0x64
 80033ea:	2008      	movs	r0, #8
 80033ec:	f7ff fbd0 	bl	8002b90 <chSchGoSleepTimeoutS>
 80033f0:	2700      	movs	r7, #0
 80033f2:	f387 8811 	msr	BASEPRI, r7
 80033f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80033f8:	3b64      	subs	r3, #100	; 0x64
 80033fa:	eba3 0308 	sub.w	r3, r3, r8
  if (!condition) {
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d852      	bhi.n	80034aa <rt_test_005_001_execute+0xda>
  test_end_step(1);

  /* [5.1.2] The current system time is read then a sleep is performed
     for 100000 microseconds and on exit the system time is verified
     again.*/
  test_set_step(2);
 8003404:	2302      	movs	r3, #2
 8003406:	6033      	str	r3, [r6, #0]
 8003408:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 800340c:	f385 8811 	msr	BASEPRI, r5
 8003410:	21c8      	movs	r1, #200	; 0xc8
 8003412:	2008      	movs	r0, #8
 8003414:	f7ff fbbc 	bl	8002b90 <chSchGoSleepTimeoutS>
 8003418:	f387 8811 	msr	BASEPRI, r7
 800341c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800341e:	3bc8      	subs	r3, #200	; 0xc8
 8003420:	eba3 0308 	sub.w	r3, r3, r8
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d83f      	bhi.n	80034aa <rt_test_005_001_execute+0xda>
  test_end_step(2);

  /* [5.1.3] The current system time is read then a sleep is performed
     for 100 milliseconds and on exit the system time is verified
     again.*/
  test_set_step(3);
 800342a:	2303      	movs	r3, #3
 800342c:	6033      	str	r3, [r6, #0]
 800342e:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8003432:	f385 8811 	msr	BASEPRI, r5
 8003436:	21c8      	movs	r1, #200	; 0xc8
 8003438:	2008      	movs	r0, #8
 800343a:	f7ff fba9 	bl	8002b90 <chSchGoSleepTimeoutS>
 800343e:	f387 8811 	msr	BASEPRI, r7
 8003442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003444:	3bc8      	subs	r3, #200	; 0xc8
 8003446:	eba3 0308 	sub.w	r3, r3, r8
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d82c      	bhi.n	80034aa <rt_test_005_001_execute+0xda>
  }
  test_end_step(3);

  /* [5.1.4] The current system time is read then a sleep is performed
     for 1 second and on exit the system time is verified again.*/
  test_set_step(4);
 8003450:	2304      	movs	r3, #4
 8003452:	6033      	str	r3, [r6, #0]
 8003454:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8003458:	f385 8811 	msr	BASEPRI, r5
 800345c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003460:	2008      	movs	r0, #8
 8003462:	f7ff fb95 	bl	8002b90 <chSchGoSleepTimeoutS>
 8003466:	f387 8811 	msr	BASEPRI, r7
 800346a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800346c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8003470:	eba3 0308 	sub.w	r3, r3, r8
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d817      	bhi.n	80034aa <rt_test_005_001_execute+0xda>
  }
  test_end_step(4);

  /* [5.1.5] Function chThdSleepUntil() is tested with a timeline of
     "now" + 100 ticks.*/
  test_set_step(5);
 800347a:	2305      	movs	r3, #5
 800347c:	6033      	str	r3, [r6, #0]
 800347e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  return systime + (systime_t)interval;
 8003480:	3764      	adds	r7, #100	; 0x64
 8003482:	b2bf      	uxth	r7, r7
 8003484:	f385 8811 	msr	BASEPRI, r5
 8003488:	6a61      	ldr	r1, [r4, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800348a:	1a79      	subs	r1, r7, r1
 800348c:	b289      	uxth	r1, r1
  if (likely(interval > (sysinterval_t)0)) {
 800348e:	b111      	cbz	r1, 8003496 <rt_test_005_001_execute+0xc6>
 8003490:	2008      	movs	r0, #8
 8003492:	f7ff fb7d 	bl	8002b90 <chSchGoSleepTimeoutS>
 8003496:	2300      	movs	r3, #0
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80034a2:	1bdf      	subs	r7, r3, r7
 80034a4:	b2bf      	uxth	r7, r7
 80034a6:	2f02      	cmp	r7, #2
 80034a8:	d904      	bls.n	80034b4 <rt_test_005_001_execute+0xe4>
  chtest.global_fail     = true;
 80034aa:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80034ae:	4a03      	ldr	r2, [pc, #12]	; (80034bc <rt_test_005_001_execute+0xec>)
  chtest.global_fail     = true;
 80034b0:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 80034b2:	60b2      	str	r2, [r6, #8]
    test_assert_time_window(chTimeAddX(time, 100),
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
  test_end_step(5);
}
 80034b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034b8:	20001134 	.word	0x20001134
 80034bc:	0800ff3c 	.word	0x0800ff3c

080034c0 <rt_test_010_006_execute>:
  test_set_step(1);
 80034c0:	2201      	movs	r2, #1
static void rt_test_010_006_execute(void) {
 80034c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80034c4:	4c37      	ldr	r4, [pc, #220]	; (80035a4 <rt_test_010_006_execute+0xe4>)
  return __sch_get_currthread();
 80034c6:	4d38      	ldr	r5, [pc, #224]	; (80035a8 <rt_test_010_006_execute+0xe8>)
 80034c8:	2320      	movs	r3, #32
 80034ca:	68e9      	ldr	r1, [r5, #12]
 80034cc:	6022      	str	r2, [r4, #0]
 80034ce:	f383 8811 	msr	BASEPRI, r3
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *currtp = chThdGetSelfX();
  eventmask_t m;

  chSysLock();
  m = currtp->epending & events;
 80034d2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  if (m == (eventmask_t)0) {
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d136      	bne.n	8003546 <rt_test_010_006_execute+0x86>
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	2620      	movs	r6, #32
 80034de:	68ea      	ldr	r2, [r5, #12]
 80034e0:	f386 8811 	msr	BASEPRI, r6
  thread_t *currtp = chThdGetSelfX();
  eventmask_t m;

  chSysLock();
  m = currtp->epending & events;
  if (m == (eventmask_t)0) {
 80034e4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d13d      	bne.n	8003566 <rt_test_010_006_execute+0xa6>
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	68ea      	ldr	r2, [r5, #12]
 80034f0:	f386 8811 	msr	BASEPRI, r6
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *currtp = chThdGetSelfX();

  chSysLock();
  if ((currtp->epending & events) != events) {
 80034f4:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80034f6:	3101      	adds	r1, #1
 80034f8:	d03f      	beq.n	800357a <rt_test_010_006_execute+0xba>
 80034fa:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 80034fe:	2302      	movs	r3, #2
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(50));
 8003500:	2064      	movs	r0, #100	; 0x64
  test_set_step(2);
 8003502:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(50));
 8003504:	f00a fcb4 	bl	800de70 <chEvtWaitOneTimeout.constprop.0>
  if (!condition) {
 8003508:	bb38      	cbnz	r0, 800355a <rt_test_010_006_execute+0x9a>
 800350a:	68ef      	ldr	r7, [r5, #12]
 800350c:	f386 8811 	msr	BASEPRI, r6
  m = currtp->epending & events;
 8003510:	6bbe      	ldr	r6, [r7, #56]	; 0x38
  if (m == (eventmask_t)0) {
 8003512:	2e00      	cmp	r6, #0
 8003514:	d033      	beq.n	800357e <rt_test_010_006_execute+0xbe>
  currtp->epending &= ~m;
 8003516:	2300      	movs	r3, #0
 8003518:	63bb      	str	r3, [r7, #56]	; 0x38
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	b9e6      	cbnz	r6, 800355a <rt_test_010_006_execute+0x9a>
 8003520:	2320      	movs	r3, #32
 8003522:	68ed      	ldr	r5, [r5, #12]
 8003524:	f383 8811 	msr	BASEPRI, r3
  if ((currtp->epending & events) != events) {
 8003528:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800352a:	3301      	adds	r3, #1
 800352c:	d008      	beq.n	8003540 <rt_test_010_006_execute+0x80>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    currtp->u.ewmask = events;
 800352e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8003532:	2164      	movs	r1, #100	; 0x64
 8003534:	200b      	movs	r0, #11
    currtp->u.ewmask = events;
 8003536:	62ab      	str	r3, [r5, #40]	; 0x28
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8003538:	f7ff fb2a 	bl	8002b90 <chSchGoSleepTimeoutS>
 800353c:	2800      	cmp	r0, #0
 800353e:	db2c      	blt.n	800359a <rt_test_010_006_execute+0xda>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  currtp->epending &= ~events;
 8003540:	2300      	movs	r3, #0
 8003542:	63ab      	str	r3, [r5, #56]	; 0x38
 8003544:	e011      	b.n	800356a <rt_test_010_006_execute+0xaa>
  m ^= m & (m - (eventmask_t)1);
 8003546:	425a      	negs	r2, r3
  currtp->epending &= ~m;
 8003548:	ea23 0002 	bic.w	r0, r3, r2
 800354c:	6388      	str	r0, [r1, #56]	; 0x38
  m ^= m & (m - (eventmask_t)1);
 800354e:	4013      	ands	r3, r2
 8003550:	2100      	movs	r1, #0
 8003552:	f381 8811 	msr	BASEPRI, r1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0c0      	beq.n	80034dc <rt_test_010_006_execute+0x1c>
  chtest.global_fail     = true;
 800355a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800355e:	4a13      	ldr	r2, [pc, #76]	; (80035ac <rt_test_010_006_execute+0xec>)
  chtest.global_fail     = true;
 8003560:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8003562:	60a2      	str	r2, [r4, #8]
}
 8003564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  currtp->epending &= ~m;
 8003566:	2300      	movs	r3, #0
 8003568:	6393      	str	r3, [r2, #56]	; 0x38
 800356a:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 800356e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8003572:	4a0e      	ldr	r2, [pc, #56]	; (80035ac <rt_test_010_006_execute+0xec>)
  chtest.global_fail     = true;
 8003574:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8003576:	60a2      	str	r2, [r4, #8]
 8003578:	e7f4      	b.n	8003564 <rt_test_010_006_execute+0xa4>
  currtp->epending &= ~events;
 800357a:	6393      	str	r3, [r2, #56]	; 0x38
 800357c:	e7f5      	b.n	800356a <rt_test_010_006_execute+0xaa>
    currtp->u.ewmask = events;
 800357e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003582:	2164      	movs	r1, #100	; 0x64
 8003584:	200a      	movs	r0, #10
    currtp->u.ewmask = events;
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003588:	f7ff fb02 	bl	8002b90 <chSchGoSleepTimeoutS>
 800358c:	2800      	cmp	r0, #0
 800358e:	db01      	blt.n	8003594 <rt_test_010_006_execute+0xd4>
    m = currtp->epending & events;
 8003590:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8003592:	e7c0      	b.n	8003516 <rt_test_010_006_execute+0x56>
 8003594:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 8003598:	e7c2      	b.n	8003520 <rt_test_010_006_execute+0x60>
 800359a:	2300      	movs	r3, #0
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20001134 	.word	0x20001134
 80035a8:	20001050 	.word	0x20001050
 80035ac:	0800ff50 	.word	0x0800ff50

080035b0 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 80035b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b4:	2720      	movs	r7, #32
 80035b6:	4605      	mov	r5, r0
 80035b8:	f387 8811 	msr	BASEPRI, r7
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80035bc:	2101      	movs	r1, #1
 80035be:	2008      	movs	r0, #8
 80035c0:	f7ff fae6 	bl	8002b90 <chSchGoSleepTimeoutS>
 80035c4:	f04f 0a00 	mov.w	sl, #0
 80035c8:	f38a 8811 	msr	BASEPRI, sl
 80035cc:	f387 8811 	msr	BASEPRI, r7
 80035d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035d4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80035d6:	b2b6      	uxth	r6, r6
 80035d8:	f38a 8811 	msr	BASEPRI, sl
  currtp->u.sentmsg = msg;
 80035dc:	f04f 0b01 	mov.w	fp, #1
  tp->state = CH_STATE_READY;
 80035e0:	46d0      	mov	r8, sl
 80035e2:	4c20      	ldr	r4, [pc, #128]	; (8003664 <msg_loop_test+0xb4>)
  __ch_msg_insert(&tp->msgqueue, currtp);
 80035e4:	f105 0930 	add.w	r9, r5, #48	; 0x30
 80035e8:	e018      	b.n	800361c <msg_loop_test+0x6c>
  otp->state = newstate;
 80035ea:	230c      	movs	r3, #12
  thread_t *otp = __instance_get_currthread(oip);
 80035ec:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 80035ee:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80035f0:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 80035f4:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 80035f6:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80035f8:	f880 b024 	strb.w	fp, [r0, #36]	; 0x24
  pqp->next       = p->next;
 80035fc:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 80035fe:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8003600:	f7fc fe1e 	bl	8000240 <__port_switch>
 8003604:	f388 8811 	msr	BASEPRI, r8
 8003608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    n++;
 800360e:	f10a 0a01 	add.w	sl, sl, #1
 8003612:	1b9b      	subs	r3, r3, r6
  } while (chVTIsSystemTimeWithinX(start, end));
 8003614:	b29b      	uxth	r3, r3
 8003616:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800361a:	d21b      	bcs.n	8003654 <msg_loop_test+0xa4>
  return __sch_get_currthread();
 800361c:	68e3      	ldr	r3, [r4, #12]
 800361e:	f387 8811 	msr	BASEPRI, r7
  p->prev       = qp->prev;
 8003622:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  currtp->u.sentmsg = msg;
 8003624:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
 8003628:	e9c3 9200 	strd	r9, r2, [r3]
  p->prev->next = p;
 800362c:	6013      	str	r3, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 800362e:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  qp->prev      = p;
 8003632:	636b      	str	r3, [r5, #52]	; 0x34
 8003634:	2a0e      	cmp	r2, #14
 8003636:	d1d8      	bne.n	80035ea <msg_loop_test+0x3a>
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003638:	69ab      	ldr	r3, [r5, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800363a:	68a9      	ldr	r1, [r5, #8]
  tp->state = CH_STATE_READY;
 800363c:	f885 8024 	strb.w	r8, [r5, #36]	; 0x24
    pqp = pqp->next;
 8003640:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	428a      	cmp	r2, r1
 8003646:	d2fb      	bcs.n	8003640 <msg_loop_test+0x90>
  p->prev       = pqp->prev;
 8003648:	685a      	ldr	r2, [r3, #4]
  p->next       = pqp;
 800364a:	602b      	str	r3, [r5, #0]
  p->prev       = pqp->prev;
 800364c:	606a      	str	r2, [r5, #4]
  p->prev->next = p;
 800364e:	6015      	str	r5, [r2, #0]
  pqp->prev     = p;
 8003650:	605d      	str	r5, [r3, #4]
  return __sch_ready_behind(tp);
 8003652:	e7ca      	b.n	80035ea <msg_loop_test+0x3a>
  (void)chMsgSend(tp, 0);
 8003654:	2100      	movs	r1, #0
 8003656:	4628      	mov	r0, r5
 8003658:	f7fd feaa 	bl	80013b0 <chMsgSend>
}
 800365c:	4650      	mov	r0, sl
 800365e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003662:	bf00      	nop
 8003664:	20001050 	.word	0x20001050
	...

08003670 <sdcConnect>:
bool sdcConnect(SDCDriver *sdcp) {
 8003670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003674:	b089      	sub	sp, #36	; 0x24
  sdcp->state = BLK_CONNECTING;
 8003676:	2403      	movs	r4, #3
  sdcp->sdio->CLKCR  = STM32_SDIO_DIV_LS;
 8003678:	22b2      	movs	r2, #178	; 0xb2
 800367a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800367c:	7104      	strb	r4, [r0, #4]
 800367e:	605a      	str	r2, [r3, #4]
  sdcp->sdio->POWER |= SDIO_POWER_PWRCTRL_0 | SDIO_POWER_PWRCTRL_1;
 8003680:	681a      	ldr	r2, [r3, #0]
bool sdcConnect(SDCDriver *sdcp) {
 8003682:	af02      	add	r7, sp, #8
 8003684:	4322      	orrs	r2, r4
 8003686:	601a      	str	r2, [r3, #0]
  sdcp->sdio->CLKCR |= SDIO_CLKCR_CLKEN;
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	2120      	movs	r1, #32
 800368c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003690:	4605      	mov	r5, r0
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	f381 8811 	msr	BASEPRI, r1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003698:	2114      	movs	r1, #20
 800369a:	2008      	movs	r0, #8
 800369c:	f7ff fa78 	bl	8002b90 <chSchGoSleepTimeoutS>
 80036a0:	2300      	movs	r3, #0
 80036a2:	f383 8811 	msr	BASEPRI, r3
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 80036a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036aa:	6cac      	ldr	r4, [r5, #72]	; 0x48
  sdcp->sdio->ARG = arg;
 80036ac:	60a3      	str	r3, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 80036ae:	60e2      	str	r2, [r4, #12]
  while ((sdcp->sdio->STA & SDIO_STA_CMDSENT) == 0)
 80036b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036b2:	061a      	lsls	r2, r3, #24
 80036b4:	d5fc      	bpl.n	80036b0 <sdcConnect+0x40>
  sdcp->sdio->ICR = SDIO_ICR_CMDSENTC;
 80036b6:	2180      	movs	r1, #128	; 0x80
  sdcp->sdio->ARG = arg;
 80036b8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80036bc:	f44f 6389 	mov.w	r3, #1096	; 0x448
  sdcp->sdio->ICR = SDIO_ICR_CMDSENTC;
 80036c0:	63a1      	str	r1, [r4, #56]	; 0x38
  sdcp->sdio->ARG = arg;
 80036c2:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80036c4:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80036c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036c8:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 80036cc:	d0fb      	beq.n	80036c6 <sdcConnect+0x56>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80036ce:	f011 0005 	ands.w	r0, r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 80036d2:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80036d4:	d110      	bne.n	80036f8 <sdcConnect+0x88>
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
 80036d6:	2201      	movs	r2, #1
  *resp = sdcp->sdio->RESP1;
 80036d8:	6963      	ldr	r3, [r4, #20]
 80036da:	632a      	str	r2, [r5, #48]	; 0x30
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
 80036dc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d046      	beq.n	8003772 <sdcConnect+0x102>
  sdcp->sdio->CLKCR = 0;
 80036e4:	2300      	movs	r3, #0
  sdcp->state = BLK_ACTIVE;
 80036e6:	2202      	movs	r2, #2
  return HAL_FAILED;
 80036e8:	2001      	movs	r0, #1
 80036ea:	6063      	str	r3, [r4, #4]
  sdcp->sdio->POWER = 0;
 80036ec:	6023      	str	r3, [r4, #0]
  sdcp->state = BLK_ACTIVE;
 80036ee:	712a      	strb	r2, [r5, #4]
}
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sdc_lld_collect_errors(sdcp, sta);
 80036f8:	4628      	mov	r0, r5
 80036fa:	f7fd f869 	bl	80007d0 <sdc_lld_collect_errors>
  sdcp->sdio->ARG = arg;
 80036fe:	2200      	movs	r2, #0
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003700:	f240 4377 	movw	r3, #1143	; 0x477
  sdcp->sdio->ARG = arg;
 8003704:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8003706:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003708:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800370a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800370c:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 8003710:	d0fb      	beq.n	800370a <sdcConnect+0x9a>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8003712:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003716:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8003718:	f040 8182 	bne.w	8003a20 <sdcConnect+0x3b0>
  *resp = sdcp->sdio->RESP1;
 800371c:	6962      	ldr	r2, [r4, #20]
        MMCSD_R1_ERROR(resp[0])) {
 800371e:	4b53      	ldr	r3, [pc, #332]	; (800386c <sdcConnect+0x1fc>)
 8003720:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8095 	beq.w	8003852 <sdcConnect+0x1e2>
      sdcp->cardmode = SDC_MODE_CARDTYPE_MMC;
 8003728:	2302      	movs	r3, #2
 800372a:	f04f 0a64 	mov.w	sl, #100	; 0x64
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 800372e:	f240 4841 	movw	r8, #1089	; 0x441
 8003732:	f04f 0920 	mov.w	r9, #32
  sdcp->sdio->ARG = arg;
 8003736:	4e4e      	ldr	r6, [pc, #312]	; (8003870 <sdcConnect+0x200>)
 8003738:	632b      	str	r3, [r5, #48]	; 0x30
 800373a:	60a6      	str	r6, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 800373c:	f8c4 800c 	str.w	r8, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003742:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 8003746:	d0fb      	beq.n	8003740 <sdcConnect+0xd0>
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0) {
 8003748:	f011 0b04 	ands.w	fp, r1, #4
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800374c:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0) {
 800374e:	d11c      	bne.n	800378a <sdcConnect+0x11a>
  *resp = sdcp->sdio->RESP1;
 8003750:	6963      	ldr	r3, [r4, #20]
    if ((resp[0] & 0x80000000U) != 0U) {
 8003752:	2b00      	cmp	r3, #0
 8003754:	f2c0 8096 	blt.w	8003884 <sdcConnect+0x214>
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 8003758:	f1ba 0a01 	subs.w	sl, sl, #1
 800375c:	d0c2      	beq.n	80036e4 <sdcConnect+0x74>
 800375e:	f389 8811 	msr	BASEPRI, r9
 8003762:	2114      	movs	r1, #20
 8003764:	2008      	movs	r0, #8
 8003766:	f7ff fa13 	bl	8002b90 <chSchGoSleepTimeoutS>
 800376a:	f38b 8811 	msr	BASEPRI, fp
  sdcp->sdio->ARG = arg;
 800376e:	6cac      	ldr	r4, [r5, #72]	; 0x48
}
 8003770:	e7e3      	b.n	800373a <sdcConnect+0xca>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003772:	f240 4377 	movw	r3, #1143	; 0x477
  sdcp->sdio->ARG = arg;
 8003776:	60a0      	str	r0, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003778:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800377a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800377c:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 8003780:	d0fb      	beq.n	800377a <sdcConnect+0x10a>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8003782:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003786:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8003788:	d004      	beq.n	8003794 <sdcConnect+0x124>
    sdc_lld_collect_errors(sdcp, sta);
 800378a:	4628      	mov	r0, r5
 800378c:	f7fd f820 	bl	80007d0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 8003790:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8003792:	e7a7      	b.n	80036e4 <sdcConnect+0x74>
  *resp = sdcp->sdio->RESP1;
 8003794:	6962      	ldr	r2, [r4, #20]
        MMCSD_R1_ERROR(resp[0])) {
 8003796:	4b35      	ldr	r3, [pc, #212]	; (800386c <sdcConnect+0x1fc>)
 8003798:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1a2      	bne.n	80036e4 <sdcConnect+0x74>
    ocr = SDC_INIT_OCR_V20;
 800379e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003874 <sdcConnect+0x204>
 80037a2:	2664      	movs	r6, #100	; 0x64
        MMCSD_R1_ERROR(resp[0])) {
 80037a4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800386c <sdcConnect+0x1fc>
  thread_t *tp = __instance_get_currthread(currcore);
 80037a8:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8003878 <sdcConnect+0x208>
  vtp->func    = vtfunc;
 80037ac:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800387c <sdcConnect+0x20c>
  sdcp->sdio->ARG = arg;
 80037b0:	2200      	movs	r2, #0
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80037b2:	f240 4377 	movw	r3, #1143	; 0x477
  sdcp->sdio->ARG = arg;
 80037b6:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80037b8:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80037ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037bc:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 80037c0:	d0fb      	beq.n	80037ba <sdcConnect+0x14a>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80037c2:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 80037c6:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80037c8:	d1df      	bne.n	800378a <sdcConnect+0x11a>
  *resp = sdcp->sdio->RESP1;
 80037ca:	6963      	ldr	r3, [r4, #20]
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80037cc:	ea13 0f08 	tst.w	r3, r8
 80037d0:	d188      	bne.n	80036e4 <sdcConnect+0x74>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80037d2:	f240 4369 	movw	r3, #1129	; 0x469
  sdcp->sdio->ARG = arg;
 80037d6:	f8c4 a008 	str.w	sl, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80037da:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80037dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037de:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 80037e2:	d0fb      	beq.n	80037dc <sdcConnect+0x16c>
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0) {
 80037e4:	f011 0204 	ands.w	r2, r1, #4
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80037e8:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0) {
 80037ea:	d1ce      	bne.n	800378a <sdcConnect+0x11a>
  *resp = sdcp->sdio->RESP1;
 80037ec:	6963      	ldr	r3, [r4, #20]
    if ((resp[0] & 0x80000000U) != 0U) {
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	db48      	blt.n	8003884 <sdcConnect+0x214>
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 80037f2:	3e01      	subs	r6, #1
 80037f4:	f43f af76 	beq.w	80036e4 <sdcConnect+0x74>
 80037f8:	2320      	movs	r3, #32
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  vtp->reload  = (sysinterval_t)0;
 8003802:	617a      	str	r2, [r7, #20]
 8003804:	6a49      	ldr	r1, [r1, #36]	; 0x24
  vtp->par     = par;
 8003806:	f8db 300c 	ldr.w	r3, [fp, #12]
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 800380a:	2214      	movs	r2, #20
 800380c:	4638      	mov	r0, r7
 800380e:	b289      	uxth	r1, r1
  vtp->func    = vtfunc;
 8003810:	e9c7 9303 	strd	r9, r3, [r7, #12]
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 8003814:	f00a fe94 	bl	800e540 <vt_enqueue.constprop.0>
  otp->state = newstate;
 8003818:	2308      	movs	r3, #8
  ntp->state = CH_STATE_CURRENT;
 800381a:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 800381c:	f8db 100c 	ldr.w	r1, [fp, #12]
  ch_priority_queue_t *p = pqp->next;
 8003820:	f8db 0000 	ldr.w	r0, [fp]
  otp->state = newstate;
 8003824:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8003828:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800382a:	f8c3 b004 	str.w	fp, [r3, #4]
  pqp->next       = p->next;
 800382e:	f8cb 3000 	str.w	r3, [fp]
  ntp->state = CH_STATE_CURRENT;
 8003832:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8003836:	f8cb 000c 	str.w	r0, [fp, #12]
  chSysSwitch(ntp, otp);
 800383a:	f7fc fd01 	bl	8000240 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	b113      	cbz	r3, 8003848 <sdcConnect+0x1d8>
      chVTDoResetI(&vt);
 8003842:	4638      	mov	r0, r7
 8003844:	f7ff f95c 	bl	8002b00 <chVTDoResetI>
 8003848:	2300      	movs	r3, #0
 800384a:	f383 8811 	msr	BASEPRI, r3
  sdcp->sdio->ARG = arg;
 800384e:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8003850:	e7ae      	b.n	80037b0 <sdcConnect+0x140>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 8003852:	f44f 6280 	mov.w	r2, #1024	; 0x400
      sdcp->cardmode = SDC_MODE_CARDTYPE_SDV11;
 8003856:	632b      	str	r3, [r5, #48]	; 0x30
  sdcp->sdio->ARG = arg;
 8003858:	60a3      	str	r3, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 800385a:	60e2      	str	r2, [r4, #12]
  while ((sdcp->sdio->STA & SDIO_STA_CMDSENT) == 0)
 800385c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800385e:	061b      	lsls	r3, r3, #24
 8003860:	d5fc      	bpl.n	800385c <sdcConnect+0x1ec>
  sdcp->sdio->ICR = SDIO_ICR_CMDSENTC;
 8003862:	2380      	movs	r3, #128	; 0x80
    ocr = SDC_INIT_OCR;
 8003864:	f8df a018 	ldr.w	sl, [pc, #24]	; 8003880 <sdcConnect+0x210>
 8003868:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_MMC) {
 800386a:	e79a      	b.n	80037a2 <sdcConnect+0x132>
 800386c:	fdffe008 	.word	0xfdffe008
 8003870:	c0ff8000 	.word	0xc0ff8000
 8003874:	50ff8000 	.word	0x50ff8000
 8003878:	20001050 	.word	0x20001050
 800387c:	08001041 	.word	0x08001041
 8003880:	80100000 	.word	0x80100000
      if ((resp[0] & 0x40000000U) != 0U) {
 8003884:	005e      	lsls	r6, r3, #1
 8003886:	d503      	bpl.n	8003890 <sdcConnect+0x220>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 8003888:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800388a:	f043 0310 	orr.w	r3, r3, #16
 800388e:	632b      	str	r3, [r5, #48]	; 0x30
  sdcp->sdio->ARG = arg;
 8003890:	2200      	movs	r2, #0
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 8003892:	f240 43c2 	movw	r3, #1218	; 0x4c2
  sdcp->sdio->ARG = arg;
 8003896:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 8003898:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800389a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800389c:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 80038a0:	d0fb      	beq.n	800389a <sdcConnect+0x22a>
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80038a2:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (STM32_SDIO_STA_ERROR_MASK)) != 0) {
 80038a4:	f011 033f 	ands.w	r3, r1, #63	; 0x3f
 80038a8:	f47f af6f 	bne.w	800378a <sdcConnect+0x11a>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80038ac:	f240 4243 	movw	r2, #1091	; 0x443
  *resp++ = sdcp->sdio->RESP4;
 80038b0:	6a21      	ldr	r1, [r4, #32]
 80038b2:	60a9      	str	r1, [r5, #8]
  *resp++ = sdcp->sdio->RESP3;
 80038b4:	69e1      	ldr	r1, [r4, #28]
 80038b6:	60e9      	str	r1, [r5, #12]
  *resp++ = sdcp->sdio->RESP2;
 80038b8:	69a1      	ldr	r1, [r4, #24]
 80038ba:	6129      	str	r1, [r5, #16]
  *resp   = sdcp->sdio->RESP1;
 80038bc:	6961      	ldr	r1, [r4, #20]
 80038be:	6169      	str	r1, [r5, #20]
  sdcp->sdio->ARG = arg;
 80038c0:	60a3      	str	r3, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80038c2:	60e2      	str	r2, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80038c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038c6:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 80038ca:	d0fb      	beq.n	80038c4 <sdcConnect+0x254>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80038cc:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 80038d0:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80038d2:	f47f af5a 	bne.w	800378a <sdcConnect+0x11a>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 80038d6:	f240 43c9 	movw	r3, #1225	; 0x4c9
  *resp = sdcp->sdio->RESP1;
 80038da:	6962      	ldr	r2, [r4, #20]
 80038dc:	63aa      	str	r2, [r5, #56]	; 0x38
  sdcp->sdio->ARG = arg;
 80038de:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 80038e0:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80038e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038e4:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 80038e8:	d0fb      	beq.n	80038e2 <sdcConnect+0x272>
  if ((sta & (STM32_SDIO_STA_ERROR_MASK)) != 0) {
 80038ea:	0688      	lsls	r0, r1, #26
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80038ec:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (STM32_SDIO_STA_ERROR_MASK)) != 0) {
 80038ee:	f47f af4c 	bne.w	800378a <sdcConnect+0x11a>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80038f2:	f240 4347 	movw	r3, #1095	; 0x447
  *resp++ = sdcp->sdio->RESP4;
 80038f6:	6a21      	ldr	r1, [r4, #32]
 80038f8:	61a9      	str	r1, [r5, #24]
  *resp++ = sdcp->sdio->RESP3;
 80038fa:	69e1      	ldr	r1, [r4, #28]
 80038fc:	61e9      	str	r1, [r5, #28]
  *resp++ = sdcp->sdio->RESP2;
 80038fe:	69a1      	ldr	r1, [r4, #24]
 8003900:	6229      	str	r1, [r5, #32]
  *resp   = sdcp->sdio->RESP1;
 8003902:	6961      	ldr	r1, [r4, #20]
 8003904:	6269      	str	r1, [r5, #36]	; 0x24
  sdcp->sdio->ARG = arg;
 8003906:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003908:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800390a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800390c:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 8003910:	d0fb      	beq.n	800390a <sdcConnect+0x29a>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8003912:	f011 0005 	ands.w	r0, r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003916:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8003918:	f47f af37 	bne.w	800378a <sdcConnect+0x11a>
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 800391c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  *resp = sdcp->sdio->RESP1;
 800391e:	6962      	ldr	r2, [r4, #20]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	2b02      	cmp	r3, #2
 8003926:	f000 8086 	beq.w	8003a36 <sdcConnect+0x3c6>
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 800392a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
static bool sdc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 800392c:	466c      	mov	r4, sp
  if (0U == _mmcsd_get_slice(sdcp->csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 800392e:	0f9b      	lsrs	r3, r3, #30
  uint8_t tmp[N];
 8003930:	b090      	sub	sp, #64	; 0x40
 8003932:	ae02      	add	r6, sp, #8
  if (0U == _mmcsd_get_slice(sdcp->csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8003934:	d079      	beq.n	8003a2a <sdcConnect+0x3ba>
  if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, 0)) {
 8003936:	9000      	str	r0, [sp, #0]
 8003938:	2306      	movs	r3, #6
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	4631      	mov	r1, r6
 800393e:	4628      	mov	r0, r5
 8003940:	f7ff fc86 	bl	8003250 <sdc_lld_read_special>
 8003944:	2800      	cmp	r0, #0
 8003946:	f040 80b7 	bne.w	8003ab8 <sdcConnect+0x448>
  if ((sdc_cmd6_extract_info(SD_SWITCH_FUNCTION_SPEED, tmp) & 2U) == 2U) {
 800394a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800394e:	ba5b      	rev16	r3, r3
 8003950:	079b      	lsls	r3, r3, #30
 8003952:	f100 80a6 	bmi.w	8003aa2 <sdcConnect+0x432>
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8003956:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003958:	46a5      	mov	sp, r4
 800395a:	6cac      	ldr	r4, [r5, #72]	; 0x48
 800395c:	f003 030f 	and.w	r3, r3, #15
  sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & 0xFFFFFF00U) | STM32_SDIO_DIV_HS;
 8003960:	6862      	ldr	r2, [r4, #4]
 8003962:	2b02      	cmp	r3, #2
 8003964:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003968:	f042 0201 	orr.w	r2, r2, #1
                                sdcp->rca, sdcp->csd)) {
 800396c:	f105 0018 	add.w	r0, r5, #24
 8003970:	6062      	str	r2, [r4, #4]
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8003972:	d076      	beq.n	8003a62 <sdcConnect+0x3f2>
    sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 8003974:	f7fc fdd4 	bl	8000520 <_mmcsd_get_capacity>
 8003978:	62a8      	str	r0, [r5, #40]	; 0x28
  sdcp->sdio->ARG = arg;
 800397a:	f44f 7200 	mov.w	r2, #512	; 0x200
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 800397e:	f44f 638a 	mov.w	r3, #1104	; 0x450
  sdcp->sdio->ARG = arg;
 8003982:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003984:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003986:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003988:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 800398c:	d0fb      	beq.n	8003986 <sdcConnect+0x316>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 800398e:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003992:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8003994:	f47f aef9 	bne.w	800378a <sdcConnect+0x11a>
  *resp = sdcp->sdio->RESP1;
 8003998:	6962      	ldr	r2, [r4, #20]
      MMCSD_R1_ERROR(resp[0])) {
 800399a:	4b62      	ldr	r3, [pc, #392]	; (8003b24 <sdcConnect+0x4b4>)
 800399c:	4013      	ands	r3, r2
                                 MMCSD_BLOCK_SIZE, resp) ||
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f47f aea0 	bne.w	80036e4 <sdcConnect+0x74>
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
 80039a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80039a6:	f013 0f0e 	tst.w	r3, #14
 80039aa:	f003 020f 	and.w	r2, r3, #15
 80039ae:	f040 8086 	bne.w	8003abe <sdcConnect+0x44e>
  if (SDC_MODE_1BIT == sdcp->config->bus_width) {
 80039b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d02e      	beq.n	8003a18 <sdcConnect+0x3a8>
  else if (SDC_MODE_4BIT == sdcp->config->bus_width) {
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	f47f ae92 	bne.w	80036e4 <sdcConnect+0x74>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80039c0:	f240 4277 	movw	r2, #1143	; 0x477
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 80039c4:	6863      	ldr	r3, [r4, #4]
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 80039c6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80039c8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_0;
 80039cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039d0:	6063      	str	r3, [r4, #4]
  sdcp->sdio->ARG = arg;
 80039d2:	60a1      	str	r1, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80039d4:	60e2      	str	r2, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80039d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039d8:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 80039dc:	d0fb      	beq.n	80039d6 <sdcConnect+0x366>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80039de:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 80039e2:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 80039e4:	f47f aed1 	bne.w	800378a <sdcConnect+0x11a>
  *resp = sdcp->sdio->RESP1;
 80039e8:	6962      	ldr	r2, [r4, #20]
        MMCSD_R1_ERROR(resp[0])) {
 80039ea:	4b4e      	ldr	r3, [pc, #312]	; (8003b24 <sdcConnect+0x4b4>)
 80039ec:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f47f ae78 	bne.w	80036e4 <sdcConnect+0x74>
  sdcp->sdio->ARG = arg;
 80039f4:	2202      	movs	r2, #2
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80039f6:	f240 4346 	movw	r3, #1094	; 0x446
  sdcp->sdio->ARG = arg;
 80039fa:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80039fc:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80039fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a00:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 8003a04:	d0fb      	beq.n	80039fe <sdcConnect+0x38e>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8003a06:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003a0a:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8003a0c:	d16d      	bne.n	8003aea <sdcConnect+0x47a>
  *resp = sdcp->sdio->RESP1;
 8003a0e:	6962      	ldr	r2, [r4, #20]
      MMCSD_R1_ERROR(resp[0])) {
 8003a10:	4b44      	ldr	r3, [pc, #272]	; (8003b24 <sdcConnect+0x4b4>)
 8003a12:	4013      	ands	r3, r2
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d16b      	bne.n	8003af0 <sdcConnect+0x480>
  sdcp->state = BLK_READY;
 8003a18:	2305      	movs	r3, #5
  return HAL_SUCCESS;
 8003a1a:	2000      	movs	r0, #0
  sdcp->state = BLK_READY;
 8003a1c:	712b      	strb	r3, [r5, #4]
  return HAL_SUCCESS;
 8003a1e:	e667      	b.n	80036f0 <sdcConnect+0x80>
    sdc_lld_collect_errors(sdcp, sta);
 8003a20:	4628      	mov	r0, r5
 8003a22:	f7fc fed5 	bl	80007d0 <sdc_lld_collect_errors>
  sdcp->sdio->ARG = arg;
 8003a26:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8003a28:	e67e      	b.n	8003728 <sdcConnect+0xb8>
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8003a2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003a2c:	46a5      	mov	sp, r4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8003a34:	e794      	b.n	8003960 <sdcConnect+0x2f0>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003a36:	f240 4346 	movw	r3, #1094	; 0x446
  sdcp->sdio->ARG = arg;
 8003a3a:	4a3b      	ldr	r2, [pc, #236]	; (8003b28 <sdcConnect+0x4b8>)
 8003a3c:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003a3e:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a42:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 8003a46:	d0fb      	beq.n	8003a40 <sdcConnect+0x3d0>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8003a48:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003a4c:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 8003a4e:	d151      	bne.n	8003af4 <sdcConnect+0x484>
  *resp = sdcp->sdio->RESP1;
 8003a50:	6963      	ldr	r3, [r4, #20]
  sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & 0xFFFFFF00U) | STM32_SDIO_DIV_HS;
 8003a52:	6863      	ldr	r3, [r4, #4]
                                sdcp->rca, sdcp->csd)) {
 8003a54:	f105 0018 	add.w	r0, r5, #24
 8003a58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6063      	str	r3, [r4, #4]
 8003a62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (_mmcsd_get_slice(sdcp->csd, MMCSD_CSD_MMC_CSD_STRUCTURE_SLICE) > 1U) {
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	da85      	bge.n	8003974 <sdcConnect+0x304>
      if (sdc_lld_read_special(sdcp, ext_csd, 512, MMCSD_CMD_SEND_EXT_CSD, 0)) {
 8003a68:	2400      	movs	r4, #0
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a70:	4628      	mov	r0, r5
 8003a72:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8003a76:	9400      	str	r4, [sp, #0]
 8003a78:	f7ff fbea 	bl	8003250 <sdc_lld_read_special>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d137      	bne.n	8003af0 <sdcConnect+0x480>
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
         ((uint32_t)ext_csd[214] << 16U) +
 8003a80:	f895 3122 	ldrb.w	r3, [r5, #290]	; 0x122
  return ((uint32_t)ext_csd[215] << 24U) +
 8003a84:	f895 0123 	ldrb.w	r0, [r5, #291]	; 0x123
         ((uint32_t)ext_csd[213] << 8U)  +
         (uint32_t)ext_csd[212];
 8003a88:	f895 1120 	ldrb.w	r1, [r5, #288]	; 0x120
         ((uint32_t)ext_csd[214] << 16U) +
 8003a8c:	041b      	lsls	r3, r3, #16
         ((uint32_t)ext_csd[213] << 8U)  +
 8003a8e:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
  return ((uint32_t)ext_csd[215] << 24U) +
 8003a92:	eb03 6300 	add.w	r3, r3, r0, lsl #24
         ((uint32_t)ext_csd[213] << 8U)  +
 8003a96:	440b      	add	r3, r1
 8003a98:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  sdcp->sdio->ARG = arg;
 8003a9c:	6cac      	ldr	r4, [r5, #72]	; 0x48
      sdcp->capacity = _mmcsd_get_capacity_ext(ext_csd);
 8003a9e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003aa0:	e76b      	b.n	800397a <sdcConnect+0x30a>
    if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, cmdarg)) {
 8003aa2:	4922      	ldr	r1, [pc, #136]	; (8003b2c <sdcConnect+0x4bc>)
 8003aa4:	2306      	movs	r3, #6
 8003aa6:	9100      	str	r1, [sp, #0]
 8003aa8:	2240      	movs	r2, #64	; 0x40
 8003aaa:	4631      	mov	r1, r6
 8003aac:	4628      	mov	r0, r5
 8003aae:	f7ff fbcf 	bl	8003250 <sdc_lld_read_special>
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	f43f af4f 	beq.w	8003956 <sdcConnect+0x2e6>
 8003ab8:	46a5      	mov	sp, r4
 8003aba:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8003abc:	e612      	b.n	80036e4 <sdcConnect+0x74>
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
 8003abe:	2a02      	cmp	r2, #2
 8003ac0:	f47f ae10 	bne.w	80036e4 <sdcConnect+0x74>
  switch (sdcp->config->bus_width) {
 8003ac4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d023      	beq.n	8003b14 <sdcConnect+0x4a4>
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d019      	beq.n	8003b04 <sdcConnect+0x494>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0a1      	beq.n	8003a18 <sdcConnect+0x3a8>
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 8003ad4:	6863      	ldr	r3, [r4, #4]
  uint32_t cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 0, 0);
 8003ad6:	4a16      	ldr	r2, [pc, #88]	; (8003b30 <sdcConnect+0x4c0>)
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003ad8:	f240 4346 	movw	r3, #1094	; 0x446
  sdcp->sdio->ARG = arg;
 8003adc:	60a2      	str	r2, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003ade:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ae2:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 8003ae6:	d0fb      	beq.n	8003ae0 <sdcConnect+0x470>
 8003ae8:	e78d      	b.n	8003a06 <sdcConnect+0x396>
    sdc_lld_collect_errors(sdcp, sta);
 8003aea:	4628      	mov	r0, r5
 8003aec:	f7fc fe70 	bl	80007d0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 8003af0:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8003af2:	e5f7      	b.n	80036e4 <sdcConnect+0x74>
 8003af4:	4628      	mov	r0, r5
 8003af6:	f7fc fe6b 	bl	80007d0 <sdc_lld_collect_errors>
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8003afa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003afc:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	e72d      	b.n	8003960 <sdcConnect+0x2f0>
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 8003b04:	6863      	ldr	r3, [r4, #4]
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 2, 0);
 8003b06:	4a0b      	ldr	r2, [pc, #44]	; (8003b34 <sdcConnect+0x4c4>)
 8003b08:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_1;
 8003b0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b10:	6063      	str	r3, [r4, #4]
    break;
 8003b12:	e7e1      	b.n	8003ad8 <sdcConnect+0x468>
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 8003b14:	6863      	ldr	r3, [r4, #4]
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 1, 0);
 8003b16:	4a08      	ldr	r2, [pc, #32]	; (8003b38 <sdcConnect+0x4c8>)
 8003b18:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_0;
 8003b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b20:	6063      	str	r3, [r4, #4]
    break;
 8003b22:	e7d9      	b.n	8003ad8 <sdcConnect+0x468>
 8003b24:	fdffe008 	.word	0xfdffe008
 8003b28:	03b90100 	.word	0x03b90100
 8003b2c:	80fffff1 	.word	0x80fffff1
 8003b30:	03b70000 	.word	0x03b70000
 8003b34:	03b70200 	.word	0x03b70200
 8003b38:	03b70100 	.word	0x03b70100
 8003b3c:	00000000 	.word	0x00000000

08003b40 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8003b40:	b510      	push	{r4, lr}
 8003b42:	2320      	movs	r3, #32
 8003b44:	b086      	sub	sp, #24
 8003b46:	f383 8811 	msr	BASEPRI, r3
  vtp->reload  = (sysinterval_t)0;
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  thread_t *tp = __instance_get_currthread(currcore);
 8003b50:	4c16      	ldr	r4, [pc, #88]	; (8003bac <test_wait_tick+0x6c>)
 8003b52:	9105      	str	r1, [sp, #20]
  vtp->par     = par;
 8003b54:	68e2      	ldr	r2, [r4, #12]
 8003b56:	6a59      	ldr	r1, [r3, #36]	; 0x24
  vtp->func    = vtfunc;
 8003b58:	4815      	ldr	r0, [pc, #84]	; (8003bb0 <test_wait_tick+0x70>)
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 8003b5a:	b289      	uxth	r1, r1
  vtp->par     = par;
 8003b5c:	e9cd 0203 	strd	r0, r2, [sp, #12]
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 8003b60:	2201      	movs	r2, #1
 8003b62:	4668      	mov	r0, sp
 8003b64:	f00a fcec 	bl	800e540 <vt_enqueue.constprop.0>
  otp->state = newstate;
 8003b68:	2308      	movs	r3, #8
  ntp->state = CH_STATE_CURRENT;
 8003b6a:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 8003b6c:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8003b6e:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8003b70:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8003b74:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8003b76:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8003b78:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8003b7c:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 8003b7e:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8003b80:	f7fc fb5e 	bl	8000240 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8003b84:	9b00      	ldr	r3, [sp, #0]
 8003b86:	b113      	cbz	r3, 8003b8e <test_wait_tick+0x4e>
      chVTDoResetI(&vt);
 8003b88:	4668      	mov	r0, sp
 8003b8a:	f7fe ffb9 	bl	8002b00 <chVTDoResetI>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	2220      	movs	r2, #32
 8003b96:	f382 8811 	msr	BASEPRI, r2
 8003b9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b9e:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8003ba0:	f383 8811 	msr	BASEPRI, r3

  chThdSleep(1);
  return chVTGetSystemTime();
}
 8003ba4:	b280      	uxth	r0, r0
 8003ba6:	b006      	add	sp, #24
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	bf00      	nop
 8003bac:	20001050 	.word	0x20001050
 8003bb0:	08001041 	.word	0x08001041
	...

08003bc0 <__sch_reschedule_ahead.lto_priv.0>:
static void __sch_reschedule_ahead(void) {
 8003bc0:	b410      	push	{r4}
  ntp->state = CH_STATE_CURRENT;
 8003bc2:	2401      	movs	r4, #1
  tp->state = CH_STATE_READY;
 8003bc4:	f04f 0c00 	mov.w	ip, #0
  thread_t *otp = __instance_get_currthread(oip);
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <__sch_reschedule_ahead.lto_priv.0+0x3c>)
  ch_priority_queue_t *p = pqp->next;
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	68d9      	ldr	r1, [r3, #12]
  pqp->next       = p->next;
 8003bce:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8003bd0:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8003bd2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8003bd6:	601a      	str	r2, [r3, #0]
  __instance_set_currthread(oip, ntp);
 8003bd8:	60d8      	str	r0, [r3, #12]
  } while (unlikely(pqp->prio > p->prio));
 8003bda:	688c      	ldr	r4, [r1, #8]
  return (thread_t *)ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8003bdc:	698b      	ldr	r3, [r1, #24]
  tp->state = CH_STATE_READY;
 8003bde:	f881 c024 	strb.w	ip, [r1, #36]	; 0x24
    pqp = pqp->next;
 8003be2:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	42a2      	cmp	r2, r4
 8003be8:	d8fb      	bhi.n	8003be2 <__sch_reschedule_ahead.lto_priv.0+0x22>
  p->prev       = pqp->prev;
 8003bea:	685a      	ldr	r2, [r3, #4]
}
 8003bec:	bc10      	pop	{r4}
 8003bee:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8003bf2:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8003bf4:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 8003bf6:	f7fc bb23 	b.w	8000240 <__port_switch>
 8003bfa:	bf00      	nop
 8003bfc:	20001050 	.word	0x20001050

08003c00 <vtcb>:
static void vtcb(virtual_timer_t *vtp, void *p) {
 8003c00:	b508      	push	{r3, lr}
 8003c02:	2320      	movs	r3, #32
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f382 8811 	msr	BASEPRI, r2
 8003c0e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c12:	f3ef 8211 	mrs	r2, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8003c16:	b95a      	cbnz	r2, 8003c30 <vtcb+0x30>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c18:	f3ef 8205 	mrs	r2, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003c1c:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c20:	f3ef 8305 	mrs	r3, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8003c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8003c28:	b133      	cbz	r3, 8003c38 <vtcb+0x38>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	2300      	movs	r3, #0
 8003c32:	f383 8811 	msr	BASEPRI, r3
}
 8003c36:	bd08      	pop	{r3, pc}
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <vtcb+0x4c>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	6892      	ldr	r2, [r2, #8]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d9f1      	bls.n	8003c2a <vtcb+0x2a>
    __sch_reschedule_ahead();
 8003c46:	f7ff ffbb 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8003c4a:	e7ee      	b.n	8003c2a <vtcb+0x2a>
 8003c4c:	20001050 	.word	0x20001050

08003c50 <rt_test_002_002_execute>:
  test_set_step(1);
 8003c50:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 8003c52:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8003c54:	4c49      	ldr	r4, [pc, #292]	; (8003d7c <rt_test_002_002_execute+0x12c>)
static void rt_test_002_002_execute(void) {
 8003c56:	b086      	sub	sp, #24
  test_set_step(1);
 8003c58:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c5a:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 8003c5e:	b96b      	cbnz	r3, 8003c7c <rt_test_002_002_execute+0x2c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c60:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003c64:	2320      	movs	r3, #32
 8003c66:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c6a:	f3ef 8305 	mrs	r3, IPSR
 8003c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d077      	beq.n	8003d66 <rt_test_002_002_execute+0x116>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003c76:	2300      	movs	r3, #0
 8003c78:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	2320      	movs	r3, #32
 8003c80:	6022      	str	r2, [r4, #0]
 8003c82:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c86:	f3ef 8211 	mrs	r2, BASEPRI
  if (port_irq_enabled(sts)) {
 8003c8a:	b962      	cbnz	r2, 8003ca6 <rt_test_002_002_execute+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c8c:	f3ef 8205 	mrs	r2, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003c90:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c94:	f3ef 8305 	mrs	r3, IPSR
 8003c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d058      	beq.n	8003d52 <rt_test_002_002_execute+0x102>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8003cac:	2303      	movs	r3, #3
 8003cae:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cb0:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8003cb4:	b913      	cbnz	r3, 8003cbc <rt_test_002_002_execute+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003cb6:	2320      	movs	r3, #32
 8003cb8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cbc:	f3ef 8311 	mrs	r3, BASEPRI
 8003cc0:	b913      	cbnz	r3, 8003cc8 <rt_test_002_002_execute+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003cc2:	2320      	movs	r3, #32
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8003cce:	2104      	movs	r1, #4
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	6021      	str	r1, [r4, #0]
 8003cd4:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cd8:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8003cdc:	b10a      	cbz	r2, 8003ce2 <rt_test_002_002_execute+0x92>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003cde:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ce6:	b113      	cbz	r3, 8003cee <rt_test_002_002_execute+0x9e>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 8003cee:	2105      	movs	r1, #5
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->dlist.next = NULL;
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2320      	movs	r3, #32
 8003cf4:	6021      	str	r1, [r4, #0]
 8003cf6:	9200      	str	r2, [sp, #0]
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8003cfc:	9b00      	ldr	r3, [sp, #0]
    chVTDoResetI(vtp);
 8003cfe:	466e      	mov	r6, sp
  if (chVTIsArmedI(vtp)) {
 8003d00:	b113      	cbz	r3, 8003d08 <rt_test_002_002_execute+0xb8>
    chVTDoResetI(vtp);
 8003d02:	4630      	mov	r0, r6
 8003d04:	f7fe fefc 	bl	8002b00 <chVTDoResetI>
  vtp->par     = par;
 8003d08:	2500      	movs	r5, #0
 8003d0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  vtp->reload  = (sysinterval_t)0;
 8003d0e:	9505      	str	r5, [sp, #20]
 8003d10:	6a59      	ldr	r1, [r3, #36]	; 0x24
  vtp->func    = vtfunc;
 8003d12:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <rt_test_002_002_execute+0x130>)
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 8003d14:	4630      	mov	r0, r6
  vtp->func    = vtfunc;
 8003d16:	9203      	str	r2, [sp, #12]
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 8003d18:	b289      	uxth	r1, r1
 8003d1a:	2201      	movs	r2, #1
  vtp->par     = par;
 8003d1c:	9504      	str	r5, [sp, #16]
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 8003d1e:	f00a fc0f 	bl	800e540 <vt_enqueue.constprop.0>
 8003d22:	f385 8811 	msr	BASEPRI, r5
 8003d26:	2620      	movs	r6, #32
 8003d28:	f386 8811 	msr	BASEPRI, r6
 8003d2c:	210a      	movs	r1, #10
 8003d2e:	2008      	movs	r0, #8
 8003d30:	f7fe ff2e 	bl	8002b90 <chSchGoSleepTimeoutS>
 8003d34:	f385 8811 	msr	BASEPRI, r5
 8003d38:	f386 8811 	msr	BASEPRI, r6
  return (bool)(vtp->dlist.next != NULL);
 8003d3c:	9b00      	ldr	r3, [sp, #0]
 8003d3e:	f385 8811 	msr	BASEPRI, r5
 8003d42:	b123      	cbz	r3, 8003d4e <rt_test_002_002_execute+0xfe>
  chtest.global_fail     = true;
 8003d44:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8003d48:	4a0e      	ldr	r2, [pc, #56]	; (8003d84 <rt_test_002_002_execute+0x134>)
  chtest.global_fail     = true;
 8003d4a:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8003d4c:	60a2      	str	r2, [r4, #8]
}
 8003d4e:	b006      	add	sp, #24
 8003d50:	bd70      	pop	{r4, r5, r6, pc}
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <rt_test_002_002_execute+0x138>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	6892      	ldr	r2, [r2, #8]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d99f      	bls.n	8003ca0 <rt_test_002_002_execute+0x50>
    __sch_reschedule_ahead();
 8003d60:	f7ff ff2e 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8003d64:	e79c      	b.n	8003ca0 <rt_test_002_002_execute+0x50>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <rt_test_002_002_execute+0x138>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	6892      	ldr	r2, [r2, #8]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d980      	bls.n	8003c76 <rt_test_002_002_execute+0x26>
    __sch_reschedule_ahead();
 8003d74:	f7ff ff24 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8003d78:	e77d      	b.n	8003c76 <rt_test_002_002_execute+0x26>
 8003d7a:	bf00      	nop
 8003d7c:	20001134 	.word	0x20001134
 8003d80:	08003c01 	.word	0x08003c01
 8003d84:	0800ff60 	.word	0x0800ff60
 8003d88:	20001050 	.word	0x20001050
 8003d8c:	00000000 	.word	0x00000000

08003d90 <rt_test_005_003_execute>:
static void rt_test_005_003_execute(void) {
  tprio_t prio, p1;

  /* [5.3.1] Thread priority is increased by one then a check is
     performed.*/
  test_set_step(1);
 8003d90:	2101      	movs	r1, #1
static void rt_test_005_003_execute(void) {
 8003d92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 8003d96:	4c29      	ldr	r4, [pc, #164]	; (8003e3c <rt_test_005_003_execute+0xac>)
  test_set_step(1);
 8003d98:	4e29      	ldr	r6, [pc, #164]	; (8003e40 <rt_test_005_003_execute+0xb0>)
 8003d9a:	68e3      	ldr	r3, [r4, #12]
 8003d9c:	2220      	movs	r2, #32
  return chThdGetSelfX()->hdr.pqueue.prio;
 8003d9e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8003da2:	6031      	str	r1, [r6, #0]
  {
    prio = chThdGetPriorityX();
    p1 = chThdSetPriority(prio + 1);
 8003da4:	eb08 0501 	add.w	r5, r8, r1
 8003da8:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 8003dac:	6c1f      	ldr	r7, [r3, #64]	; 0x40
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	4297      	cmp	r7, r2
 8003db2:	d038      	beq.n	8003e26 <rt_test_005_003_execute+0x96>
 8003db4:	4295      	cmp	r5, r2
 8003db6:	d836      	bhi.n	8003e26 <rt_test_005_003_execute+0x96>
  currtp->realprio = newprio;
 8003db8:	641d      	str	r5, [r3, #64]	; 0x40
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	68e3      	ldr	r3, [r4, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d901      	bls.n	8003dca <rt_test_005_003_execute+0x3a>
    __sch_reschedule_ahead();
 8003dc6:	f7ff fefb 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8003dd0:	45b8      	cmp	r8, r7
 8003dd2:	d12a      	bne.n	8003e2a <rt_test_005_003_execute+0x9a>
  return __sch_get_currthread();
 8003dd4:	68e3      	ldr	r3, [r4, #12]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	4295      	cmp	r5, r2
 8003dda:	d11d      	bne.n	8003e18 <rt_test_005_003_execute+0x88>
  }
  test_end_step(1);

  /* [5.3.2] Thread priority is returned to the previous value then a
     check is performed.*/
  test_set_step(2);
 8003ddc:	2202      	movs	r2, #2
 8003dde:	6032      	str	r2, [r6, #0]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 8003de6:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	4591      	cmp	r9, r2
 8003dee:	d023      	beq.n	8003e38 <rt_test_005_003_execute+0xa8>
 8003df0:	4590      	cmp	r8, r2
 8003df2:	d821      	bhi.n	8003e38 <rt_test_005_003_execute+0xa8>
  currtp->realprio = newprio;
 8003df4:	641f      	str	r7, [r3, #64]	; 0x40
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	68e3      	ldr	r3, [r4, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d901      	bls.n	8003e06 <rt_test_005_003_execute+0x76>
    __sch_reschedule_ahead();
 8003e02:	f7ff fedd 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8003e06:	2300      	movs	r3, #0
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	454d      	cmp	r5, r9
 8003e0e:	d10c      	bne.n	8003e2a <rt_test_005_003_execute+0x9a>
  return chThdGetSelfX()->hdr.pqueue.prio;
 8003e10:	68e3      	ldr	r3, [r4, #12]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4598      	cmp	r8, r3
 8003e16:	d004      	beq.n	8003e22 <rt_test_005_003_execute+0x92>
  chtest.global_fail     = true;
 8003e18:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8003e1c:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <rt_test_005_003_execute+0xb4>)
  chtest.global_fail     = true;
 8003e1e:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 8003e20:	60b2      	str	r2, [r6, #8]
    p1 = chThdSetPriority(p1);
    test_assert(p1 == prio + 1, "unexpected returned priority level");
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
  }
  test_end_step(2);
}
 8003e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    currtp->hdr.pqueue.prio = newprio;
 8003e26:	609d      	str	r5, [r3, #8]
 8003e28:	e7c6      	b.n	8003db8 <rt_test_005_003_execute+0x28>
  chtest.global_fail     = true;
 8003e2a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8003e2e:	4a06      	ldr	r2, [pc, #24]	; (8003e48 <rt_test_005_003_execute+0xb8>)
  chtest.global_fail     = true;
 8003e30:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 8003e32:	60b2      	str	r2, [r6, #8]
 8003e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e38:	609f      	str	r7, [r3, #8]
 8003e3a:	e7db      	b.n	8003df4 <rt_test_005_003_execute+0x64>
 8003e3c:	20001050 	.word	0x20001050
 8003e40:	20001134 	.word	0x20001134
 8003e44:	0800ff98 	.word	0x0800ff98
 8003e48:	0800ff74 	.word	0x0800ff74
 8003e4c:	00000000 	.word	0x00000000

08003e50 <rt_test_005_004_execute>:
  }
  test_end_step(1);

  /* [5.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8003e50:	2202      	movs	r2, #2
static void rt_test_005_004_execute(void) {
 8003e52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 8003e56:	4d3a      	ldr	r5, [pc, #232]	; (8003f40 <rt_test_005_004_execute+0xf0>)
  test_set_step(2);
 8003e58:	4e3a      	ldr	r6, [pc, #232]	; (8003f44 <rt_test_005_004_execute+0xf4>)
 8003e5a:	68eb      	ldr	r3, [r5, #12]
 8003e5c:	6032      	str	r2, [r6, #0]
  return chThdGetSelfX()->hdr.pqueue.prio;
 8003e5e:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->hdr.pqueue.prio += 2;
 8003e60:	eb04 0902 	add.w	r9, r4, r2
  {
    p1 = chThdSetPriority(prio + 1);
 8003e64:	f104 0801 	add.w	r8, r4, #1
 8003e68:	2220      	movs	r2, #32
    chThdGetSelfX()->hdr.pqueue.prio += 2;
 8003e6a:	f8c3 9008 	str.w	r9, [r3, #8]
 8003e6e:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 8003e72:	6c1f      	ldr	r7, [r3, #64]	; 0x40
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	4297      	cmp	r7, r2
 8003e78:	d044      	beq.n	8003f04 <rt_test_005_004_execute+0xb4>
 8003e7a:	4590      	cmp	r8, r2
 8003e7c:	d842      	bhi.n	8003f04 <rt_test_005_004_execute+0xb4>
  currtp->realprio = newprio;
 8003e7e:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003e82:	682b      	ldr	r3, [r5, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	68eb      	ldr	r3, [r5, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d901      	bls.n	8003e92 <rt_test_005_004_execute+0x42>
    __sch_reschedule_ahead();
 8003e8e:	f7ff fe97 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8003e92:	2300      	movs	r3, #0
 8003e94:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8003e98:	42bc      	cmp	r4, r7
 8003e9a:	d136      	bne.n	8003f0a <rt_test_005_004_execute+0xba>
  return __sch_get_currthread();
 8003e9c:	68eb      	ldr	r3, [r5, #12]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	4591      	cmp	r9, r2
 8003ea2:	d139      	bne.n	8003f18 <rt_test_005_004_execute+0xc8>
 8003ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea6:	4590      	cmp	r8, r2
 8003ea8:	d13c      	bne.n	8003f24 <rt_test_005_004_execute+0xd4>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
  }
  test_end_step(2);

  /* [5.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
 8003eaa:	2203      	movs	r2, #3
  {
    p1 = chThdSetPriority(prio + 3);
 8003eac:	1ce7      	adds	r7, r4, #3
  test_set_step(3);
 8003eae:	6032      	str	r2, [r6, #0]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 8003eb6:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	4591      	cmp	r9, r2
 8003ebe:	d037      	beq.n	8003f30 <rt_test_005_004_execute+0xe0>
 8003ec0:	4297      	cmp	r7, r2
 8003ec2:	d835      	bhi.n	8003f30 <rt_test_005_004_execute+0xe0>
  currtp->realprio = newprio;
 8003ec4:	641f      	str	r7, [r3, #64]	; 0x40
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003ec6:	682b      	ldr	r3, [r5, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	68eb      	ldr	r3, [r5, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d901      	bls.n	8003ed6 <rt_test_005_004_execute+0x86>
    __sch_reschedule_ahead();
 8003ed2:	f7ff fe75 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	45c8      	cmp	r8, r9
 8003ede:	d114      	bne.n	8003f0a <rt_test_005_004_execute+0xba>
 8003ee0:	68ea      	ldr	r2, [r5, #12]
 8003ee2:	6891      	ldr	r1, [r2, #8]
 8003ee4:	428f      	cmp	r7, r1
 8003ee6:	d117      	bne.n	8003f18 <rt_test_005_004_execute+0xc8>
 8003ee8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003eea:	4297      	cmp	r7, r2
 8003eec:	d122      	bne.n	8003f34 <rt_test_005_004_execute+0xe4>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
  }
  test_end_step(3);

  /* [5.4.4] Restoring original conditions.*/
  test_set_step(4);
 8003eee:	2104      	movs	r1, #4
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	6031      	str	r1, [r6, #0]
 8003ef4:	f382 8811 	msr	BASEPRI, r2
 8003ef8:	68ea      	ldr	r2, [r5, #12]
  {
    chSysLock();
    chThdGetSelfX()->hdr.pqueue.prio = prio;
 8003efa:	6094      	str	r4, [r2, #8]
    chThdGetSelfX()->realprio = prio;
 8003efc:	6414      	str	r4, [r2, #64]	; 0x40
 8003efe:	f383 8811 	msr	BASEPRI, r3
}
 8003f02:	e007      	b.n	8003f14 <rt_test_005_004_execute+0xc4>
    currtp->hdr.pqueue.prio = newprio;
 8003f04:	f8c3 8008 	str.w	r8, [r3, #8]
 8003f08:	e7b9      	b.n	8003e7e <rt_test_005_004_execute+0x2e>
  chtest.global_fail     = true;
 8003f0a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8003f0e:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <rt_test_005_004_execute+0xf8>)
  chtest.global_fail     = true;
 8003f10:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 8003f12:	60b2      	str	r2, [r6, #8]
    chSysUnlock();
  }
  test_end_step(4);
}
 8003f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chtest.global_fail     = true;
 8003f18:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8003f1c:	4a0b      	ldr	r2, [pc, #44]	; (8003f4c <rt_test_005_004_execute+0xfc>)
  chtest.global_fail     = true;
 8003f1e:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 8003f20:	60b2      	str	r2, [r6, #8]
 8003f22:	e7f7      	b.n	8003f14 <rt_test_005_004_execute+0xc4>
  chtest.global_fail     = true;
 8003f24:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8003f28:	4a09      	ldr	r2, [pc, #36]	; (8003f50 <rt_test_005_004_execute+0x100>)
  chtest.global_fail     = true;
 8003f2a:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 8003f2c:	60b2      	str	r2, [r6, #8]
 8003f2e:	e7f1      	b.n	8003f14 <rt_test_005_004_execute+0xc4>
 8003f30:	609f      	str	r7, [r3, #8]
 8003f32:	e7c7      	b.n	8003ec4 <rt_test_005_004_execute+0x74>
  chtest.global_fail     = true;
 8003f34:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8003f38:	4a06      	ldr	r2, [pc, #24]	; (8003f54 <rt_test_005_004_execute+0x104>)
  chtest.global_fail     = true;
 8003f3a:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 8003f3c:	60b2      	str	r2, [r6, #8]
 8003f3e:	e7e9      	b.n	8003f14 <rt_test_005_004_execute+0xc4>
 8003f40:	20001050 	.word	0x20001050
 8003f44:	20001134 	.word	0x20001134
 8003f48:	0800ff74 	.word	0x0800ff74
 8003f4c:	0800ff98 	.word	0x0800ff98
 8003f50:	0800ffb4 	.word	0x0800ffb4
 8003f54:	0800ffdc 	.word	0x0800ffdc
	...

08003f60 <thread1.lto_priv.0>:
static THD_FUNCTION(thread1, p) {
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	2320      	movs	r3, #32
 8003f64:	4604      	mov	r4, r0
 8003f66:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8003f6a:	4915      	ldr	r1, [pc, #84]	; (8003fc0 <thread1.lto_priv.0+0x60>)
 8003f6c:	680b      	ldr	r3, [r1, #0]
 8003f6e:	b17b      	cbz	r3, 8003f90 <thread1.lto_priv.0+0x30>
    *trp = NULL;
 8003f70:	2000      	movs	r0, #0
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003f72:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8003f74:	689d      	ldr	r5, [r3, #8]
 8003f76:	6008      	str	r0, [r1, #0]
    tp->u.rdymsg = msg;
 8003f78:	6298      	str	r0, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8003f7a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
    pqp = pqp->next;
 8003f7e:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003f80:	6891      	ldr	r1, [r2, #8]
 8003f82:	42a9      	cmp	r1, r5
 8003f84:	d2fb      	bcs.n	8003f7e <thread1.lto_priv.0+0x1e>
  p->prev       = pqp->prev;
 8003f86:	6851      	ldr	r1, [r2, #4]
 8003f88:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8003f8c:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8003f8e:	6053      	str	r3, [r2, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <thread1.lto_priv.0+0x64>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	6892      	ldr	r2, [r2, #8]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d901      	bls.n	8003fa2 <thread1.lto_priv.0+0x42>
    __sch_reschedule_ahead();
 8003f9e:	f7ff fe0f 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <thread1.lto_priv.0+0x68>)
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	f103 0120 	add.w	r1, r3, #32
 8003fb0:	428a      	cmp	r2, r1
 8003fb2:	d203      	bcs.n	8003fbc <thread1.lto_priv.0+0x5c>
  test_emit_token(*(char *)p);
 8003fb4:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 8003fb6:	1c50      	adds	r0, r2, #1
 8003fb8:	60d8      	str	r0, [r3, #12]
 8003fba:	7011      	strb	r1, [r2, #0]
}
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}
 8003fbe:	bf00      	nop
 8003fc0:	200019b4 	.word	0x200019b4
 8003fc4:	20001050 	.word	0x20001050
 8003fc8:	20001134 	.word	0x20001134
 8003fcc:	00000000 	.word	0x00000000

08003fd0 <thread2>:
static THD_FUNCTION(thread2, p) {
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	2420      	movs	r4, #32
 8003fd4:	f384 8811 	msr	BASEPRI, r4
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003fd8:	2164      	movs	r1, #100	; 0x64
 8003fda:	2008      	movs	r0, #8
 8003fdc:	f7fe fdd8 	bl	8002b90 <chSchGoSleepTimeoutS>
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	f381 8811 	msr	BASEPRI, r1
 8003fe6:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8003fea:	4a13      	ldr	r2, [pc, #76]	; (8004038 <thread2+0x68>)
 8003fec:	6893      	ldr	r3, [r2, #8]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	6093      	str	r3, [r2, #8]
 8003ff4:	dd0c      	ble.n	8004010 <thread2+0x40>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <thread2+0x6c>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	6892      	ldr	r2, [r2, #8]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	d901      	bls.n	8004008 <thread2+0x38>
    __sch_reschedule_ahead();
 8004004:	f7ff fddc 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8004008:	2300      	movs	r3, #0
 800400a:	f383 8811 	msr	BASEPRI, r3
}
 800400e:	bd10      	pop	{r4, pc}
  ch_queue_t *p = qp->next;
 8004010:	6813      	ldr	r3, [r2, #0]
  qp->next       = p->next;
 8004012:	681c      	ldr	r4, [r3, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004014:	6998      	ldr	r0, [r3, #24]
 8004016:	6014      	str	r4, [r2, #0]
  qp->next->prev = qp;
 8004018:	6062      	str	r2, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800401a:	689c      	ldr	r4, [r3, #8]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = (thread_t *)ch_queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
 800401c:	6299      	str	r1, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800401e:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 8004022:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004024:	6882      	ldr	r2, [r0, #8]
 8004026:	42a2      	cmp	r2, r4
 8004028:	d2fb      	bcs.n	8004022 <thread2+0x52>
  p->prev       = pqp->prev;
 800402a:	6842      	ldr	r2, [r0, #4]
 800402c:	e9c3 0200 	strd	r0, r2, [r3]
  p->prev->next = p;
 8004030:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8004032:	6043      	str	r3, [r0, #4]
  return __sch_ready_behind(tp);
 8004034:	e7df      	b.n	8003ff6 <thread2+0x26>
 8004036:	bf00      	nop
 8004038:	20001254 	.word	0x20001254
 800403c:	20001050 	.word	0x20001050

08004040 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	2520      	movs	r5, #32
 8004044:	4604      	mov	r4, r0
 8004046:	f385 8811 	msr	BASEPRI, r5
 800404a:	2164      	movs	r1, #100	; 0x64
 800404c:	2008      	movs	r0, #8
 800404e:	f7fe fd9f 	bl	8002b90 <chSchGoSleepTimeoutS>
 8004052:	2300      	movs	r3, #0
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f385 8811 	msr	BASEPRI, r5
  tp->epending |= events;
 800405c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 800405e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
  tp->epending |= events;
 8004062:	f043 0301 	orr.w	r3, r3, #1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004066:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8004068:	63a3      	str	r3, [r4, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 800406a:	d022      	beq.n	80040b2 <evt_thread3+0x72>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800406c:	2a0b      	cmp	r2, #11
 800406e:	d00c      	beq.n	800408a <evt_thread3+0x4a>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <evt_thread3+0x7c>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	6892      	ldr	r2, [r2, #8]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	429a      	cmp	r2, r3
 800407c:	d901      	bls.n	8004082 <evt_thread3+0x42>
    __sch_reschedule_ahead();
 800407e:	f7ff fd9f 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8004082:	2300      	movs	r3, #0
 8004084:	f383 8811 	msr	BASEPRI, r3
}
 8004088:	bd38      	pop	{r3, r4, r5, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800408a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      ((tp->state == CH_STATE_WTANDEVT) &&
 800408c:	ea32 0303 	bics.w	r3, r2, r3
 8004090:	d1ee      	bne.n	8004070 <evt_thread3+0x30>
    tp->u.rdymsg = MSG_OK;
 8004092:	2200      	movs	r2, #0
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004094:	69a3      	ldr	r3, [r4, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8004096:	68a1      	ldr	r1, [r4, #8]
 8004098:	62a2      	str	r2, [r4, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800409a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    pqp = pqp->next;
 800409e:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	428a      	cmp	r2, r1
 80040a4:	d2fb      	bcs.n	800409e <evt_thread3+0x5e>
  p->prev       = pqp->prev;
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	e9c4 3200 	strd	r3, r2, [r4]
  p->prev->next = p;
 80040ac:	6014      	str	r4, [r2, #0]
  pqp->prev     = p;
 80040ae:	605c      	str	r4, [r3, #4]
  return __sch_ready_behind(tp);
 80040b0:	e7de      	b.n	8004070 <evt_thread3+0x30>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80040b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  if (((tp->state == CH_STATE_WTOREVT) &&
 80040b4:	4213      	tst	r3, r2
 80040b6:	d1ec      	bne.n	8004092 <evt_thread3+0x52>
 80040b8:	e7da      	b.n	8004070 <evt_thread3+0x30>
 80040ba:	bf00      	nop
 80040bc:	20001050 	.word	0x20001050

080040c0 <chSchWakeupS>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80040c0:	b430      	push	{r4, r5}
  thread_t *otp = __instance_get_currthread(oip);
 80040c2:	4d15      	ldr	r5, [pc, #84]	; (8004118 <chSchWakeupS+0x58>)
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 80040c4:	6882      	ldr	r2, [r0, #8]
  thread_t *otp = __instance_get_currthread(oip);
 80040c6:	68eb      	ldr	r3, [r5, #12]
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 80040c8:	689c      	ldr	r4, [r3, #8]
  ntp->u.rdymsg = msg;
 80040ca:	6281      	str	r1, [r0, #40]	; 0x28
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 80040cc:	42a2      	cmp	r2, r4
  tp->state = CH_STATE_READY;
 80040ce:	f04f 0100 	mov.w	r1, #0
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 80040d2:	d913      	bls.n	80040fc <chSchWakeupS+0x3c>
  return (thread_t *)ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 80040d4:	699a      	ldr	r2, [r3, #24]
  tp->state = CH_STATE_READY;
 80040d6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 80040da:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio > p->prio));
 80040dc:	6891      	ldr	r1, [r2, #8]
 80040de:	428c      	cmp	r4, r1
 80040e0:	d3fb      	bcc.n	80040da <chSchWakeupS+0x1a>
    ntp->state = CH_STATE_CURRENT;
 80040e2:	2401      	movs	r4, #1
  p->prev       = pqp->prev;
 80040e4:	6851      	ldr	r1, [r2, #4]
 80040e6:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 80040ea:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80040ec:	6053      	str	r3, [r2, #4]
    chSysSwitch(ntp, otp);
 80040ee:	4619      	mov	r1, r3
    __instance_set_currthread(oip, ntp);
 80040f0:	60e8      	str	r0, [r5, #12]
    ntp->state = CH_STATE_CURRENT;
 80040f2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
}
 80040f6:	bc30      	pop	{r4, r5}
    chSysSwitch(ntp, otp);
 80040f8:	f7fc b8a2 	b.w	8000240 <__port_switch>
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80040fc:	6983      	ldr	r3, [r0, #24]
  tp->state = CH_STATE_READY;
 80040fe:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    pqp = pqp->next;
 8004102:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004104:	6899      	ldr	r1, [r3, #8]
 8004106:	428a      	cmp	r2, r1
 8004108:	d9fb      	bls.n	8004102 <chSchWakeupS+0x42>
}
 800410a:	bc30      	pop	{r4, r5}
  p->prev       = pqp->prev;
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8004112:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8004114:	6058      	str	r0, [r3, #4]
 8004116:	4770      	bx	lr
 8004118:	20001050 	.word	0x20001050
 800411c:	00000000 	.word	0x00000000

08004120 <rt_test_007_001_execute>:
  test_set_step(1);
 8004120:	2201      	movs	r2, #1
static void rt_test_007_001_execute(void) {
 8004122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8004124:	4d3d      	ldr	r5, [pc, #244]	; (800421c <rt_test_007_001_execute+0xfc>)
 8004126:	2620      	movs	r6, #32
 8004128:	602a      	str	r2, [r5, #0]
 800412a:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 800412e:	4c3c      	ldr	r4, [pc, #240]	; (8004220 <rt_test_007_001_execute+0x100>)
 8004130:	68a3      	ldr	r3, [r4, #8]
 8004132:	3b01      	subs	r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	60a3      	str	r3, [r4, #8]
 8004138:	db44      	blt.n	80041c4 <rt_test_007_001_execute+0xa4>
 800413a:	2300      	movs	r3, #0
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 8004144:	68a3      	ldr	r3, [r4, #8]
 8004146:	bb23      	cbnz	r3, 8004192 <rt_test_007_001_execute+0x72>
 8004148:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 800414c:	2202      	movs	r2, #2
 800414e:	2320      	movs	r3, #32
 8004150:	602a      	str	r2, [r5, #0]
 8004152:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 8004156:	68a3      	ldr	r3, [r4, #8]
 8004158:	3301      	adds	r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	60a3      	str	r3, [r4, #8]
 800415e:	dd21      	ble.n	80041a4 <rt_test_007_001_execute+0x84>
 8004160:	2600      	movs	r6, #0
 8004162:	f386 8811 	msr	BASEPRI, r6
 8004166:	2720      	movs	r7, #32
 8004168:	f387 8811 	msr	BASEPRI, r7
 800416c:	68a3      	ldr	r3, [r4, #8]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d120      	bne.n	80041b4 <rt_test_007_001_execute+0x94>
 8004172:	f386 8811 	msr	BASEPRI, r6
  test_set_step(3);
 8004176:	2303      	movs	r3, #3
 8004178:	2102      	movs	r1, #2
 800417a:	4829      	ldr	r0, [pc, #164]	; (8004220 <rt_test_007_001_execute+0x100>)
 800417c:	602b      	str	r3, [r5, #0]
 800417e:	f009 fec7 	bl	800df10 <chSemResetWithMessage.constprop.0>
 8004182:	f387 8811 	msr	BASEPRI, r7
 8004186:	68a3      	ldr	r3, [r4, #8]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d113      	bne.n	80041b4 <rt_test_007_001_execute+0x94>
 800418c:	f386 8811 	msr	BASEPRI, r6
}
 8004190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 8004192:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 8004196:	4923      	ldr	r1, [pc, #140]	; (8004224 <rt_test_007_001_execute+0x104>)
 8004198:	2300      	movs	r3, #0
 800419a:	60a9      	str	r1, [r5, #8]
  chtest.global_fail     = true;
 800419c:	80aa      	strh	r2, [r5, #4]
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ch_queue_t *p = qp->next;
 80041a4:	6820      	ldr	r0, [r4, #0]
    chSchWakeupS((thread_t *)ch_queue_fifo_remove(&sp->queue), MSG_OK);
 80041a6:	2100      	movs	r1, #0
  qp->next       = p->next;
 80041a8:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 80041aa:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	f7ff ff87 	bl	80040c0 <chSchWakeupS>
 80041b2:	e7d5      	b.n	8004160 <rt_test_007_001_execute+0x40>
 80041b4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80041b8:	4a1a      	ldr	r2, [pc, #104]	; (8004224 <rt_test_007_001_execute+0x104>)
  chtest.global_fail     = true;
 80041ba:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 80041bc:	60aa      	str	r2, [r5, #8]
 80041be:	f386 8811 	msr	BASEPRI, r6
 80041c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  otp->state = newstate;
 80041c4:	2005      	movs	r0, #5
  return __sch_get_currthread();
 80041c6:	4b18      	ldr	r3, [pc, #96]	; (8004228 <rt_test_007_001_execute+0x108>)
  p->prev       = qp->prev;
 80041c8:	6861      	ldr	r1, [r4, #4]
 80041ca:	68df      	ldr	r7, [r3, #12]
  p->next       = qp;
 80041cc:	603c      	str	r4, [r7, #0]
  p->prev       = qp->prev;
 80041ce:	6079      	str	r1, [r7, #4]
    currtp->u.wtsemp = sp;
 80041d0:	62bc      	str	r4, [r7, #40]	; 0x28
  p->prev->next = p;
 80041d2:	600f      	str	r7, [r1, #0]
 80041d4:	f887 0024 	strb.w	r0, [r7, #36]	; 0x24
  ch_priority_queue_t *p = pqp->next;
 80041d8:	6818      	ldr	r0, [r3, #0]
  qp->prev      = p;
 80041da:	6067      	str	r7, [r4, #4]
  pqp->next       = p->next;
 80041dc:	f8d0 c000 	ldr.w	ip, [r0]
  chSysSwitch(ntp, otp);
 80041e0:	4639      	mov	r1, r7
  pqp->next->prev = pqp;
 80041e2:	f8cc 3004 	str.w	r3, [ip, #4]
  pqp->next       = p->next;
 80041e6:	f8c3 c000 	str.w	ip, [r3]
  ntp->state = CH_STATE_CURRENT;
 80041ea:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 80041ee:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 80041f0:	f7fc f826 	bl	8000240 <__port_switch>
 80041f4:	2300      	movs	r3, #0
    return currtp->u.rdymsg;
 80041f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 8004200:	68a3      	ldr	r3, [r4, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1c5      	bne.n	8004192 <rt_test_007_001_execute+0x72>
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	2a00      	cmp	r2, #0
 800420c:	d09e      	beq.n	800414c <rt_test_007_001_execute+0x2c>
  chtest.global_fail     = true;
 800420e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8004212:	4a06      	ldr	r2, [pc, #24]	; (800422c <rt_test_007_001_execute+0x10c>)
  chtest.global_fail     = true;
 8004214:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8004216:	60aa      	str	r2, [r5, #8]
 8004218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800421a:	bf00      	nop
 800421c:	20001134 	.word	0x20001134
 8004220:	20001254 	.word	0x20001254
 8004224:	0800fffc 	.word	0x0800fffc
 8004228:	20001050 	.word	0x20001050
 800422c:	08010010 	.word	0x08010010

08004230 <thread3>:
 8004230:	2320      	movs	r3, #32
static THD_FUNCTION(thread3, p) {
 8004232:	b510      	push	{r4, lr}
 8004234:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8004238:	4c1a      	ldr	r4, [pc, #104]	; (80042a4 <thread3+0x74>)
 800423a:	68a3      	ldr	r3, [r4, #8]
 800423c:	3b01      	subs	r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	60a3      	str	r3, [r4, #8]
 8004242:	db18      	blt.n	8004276 <thread3+0x46>
 8004244:	2100      	movs	r1, #0
 8004246:	f381 8811 	msr	BASEPRI, r1
 800424a:	2320      	movs	r3, #32
 800424c:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 8004250:	68a3      	ldr	r3, [r4, #8]
 8004252:	3301      	adds	r3, #1
 8004254:	428b      	cmp	r3, r1
 8004256:	60a3      	str	r3, [r4, #8]
 8004258:	dd03      	ble.n	8004262 <thread3+0x32>
 800425a:	2300      	movs	r3, #0
 800425c:	f383 8811 	msr	BASEPRI, r3
}
 8004260:	bd10      	pop	{r4, pc}
  ch_queue_t *p = qp->next;
 8004262:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8004264:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8004266:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8004268:	6023      	str	r3, [r4, #0]
    chSchWakeupS((thread_t *)ch_queue_fifo_remove(&sp->queue), MSG_OK);
 800426a:	f7ff ff29 	bl	80040c0 <chSchWakeupS>
 800426e:	2300      	movs	r3, #0
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	bd10      	pop	{r4, pc}
  otp->state = newstate;
 8004276:	2005      	movs	r0, #5
  ntp->state = CH_STATE_CURRENT;
 8004278:	f04f 0c01 	mov.w	ip, #1
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <thread3+0x78>)
  p->prev       = qp->prev;
 800427e:	6862      	ldr	r2, [r4, #4]
 8004280:	68d9      	ldr	r1, [r3, #12]
  p->next       = qp;
 8004282:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8004284:	604a      	str	r2, [r1, #4]
    currtp->u.wtsemp = sp;
 8004286:	628c      	str	r4, [r1, #40]	; 0x28
  p->prev->next = p;
 8004288:	6011      	str	r1, [r2, #0]
  otp->state = newstate;
 800428a:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  ch_priority_queue_t *p = pqp->next;
 800428e:	6818      	ldr	r0, [r3, #0]
  qp->prev      = p;
 8004290:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8004292:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8004294:	6053      	str	r3, [r2, #4]
  pqp->next       = p->next;
 8004296:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 8004298:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 800429c:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 800429e:	f7fb ffcf 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 80042a2:	e7cf      	b.n	8004244 <thread3+0x14>
 80042a4:	20001254 	.word	0x20001254
 80042a8:	20001050 	.word	0x20001050
 80042ac:	00000000 	.word	0x00000000

080042b0 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 80042b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b4:	2620      	movs	r6, #32
  otp->state = newstate;
 80042b6:	f04f 090e 	mov.w	r9, #14
  ntp->state = CH_STATE_CURRENT;
 80042ba:	f04f 0801 	mov.w	r8, #1
 80042be:	4f16      	ldr	r7, [pc, #88]	; (8004318 <bmk_thread1+0x68>)
 80042c0:	e010      	b.n	80042e4 <bmk_thread1+0x34>

  if (!chMsgIsPendingI(currtp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = (thread_t *)ch_queue_fifo_remove(&currtp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 80042c2:	220d      	movs	r2, #13
  qp->next       = p->next;
 80042c4:	6803      	ldr	r3, [r0, #0]
 80042c6:	632b      	str	r3, [r5, #48]	; 0x30
  qp->next->prev = qp;
 80042c8:	605c      	str	r4, [r3, #4]
 80042ca:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80042ce:	f38a 8811 	msr	BASEPRI, sl
 */
static inline msg_t chMsgGet(thread_t *tp) {

  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");

  return tp->u.sentmsg;
 80042d2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80042d4:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80042d8:	4621      	mov	r1, r4
 80042da:	f7ff fef1 	bl	80040c0 <chSchWakeupS>
 80042de:	f38a 8811 	msr	BASEPRI, sl
  } while (msg);
 80042e2:	b1bc      	cbz	r4, 8004314 <bmk_thread1+0x64>
 80042e4:	f386 8811 	msr	BASEPRI, r6
 80042e8:	68fd      	ldr	r5, [r7, #12]
 80042ea:	f04f 0a00 	mov.w	sl, #0
  return (bool)(tp->msgqueue.next != &tp->msgqueue);
 80042ee:	462c      	mov	r4, r5
 80042f0:	f854 0f30 	ldr.w	r0, [r4, #48]!
  if (!chMsgIsPendingI(currtp)) {
 80042f4:	42a0      	cmp	r0, r4
 80042f6:	d1e4      	bne.n	80042c2 <bmk_thread1+0x12>
  ch_priority_queue_t *p = pqp->next;
 80042f8:	6838      	ldr	r0, [r7, #0]
  otp->state = newstate;
 80042fa:	f885 9024 	strb.w	r9, [r5, #36]	; 0x24
  pqp->next       = p->next;
 80042fe:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(ntp, otp);
 8004300:	4629      	mov	r1, r5
  pqp->next->prev = pqp;
 8004302:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8004304:	f880 8024 	strb.w	r8, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8004308:	60f8      	str	r0, [r7, #12]
  pqp->next       = p->next;
 800430a:	603b      	str	r3, [r7, #0]
  chSysSwitch(ntp, otp);
 800430c:	f7fb ff98 	bl	8000240 <__port_switch>
  ch_queue_t *p = qp->next;
 8004310:	6b28      	ldr	r0, [r5, #48]	; 0x30
}
 8004312:	e7d6      	b.n	80042c2 <bmk_thread1+0x12>
}
 8004314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004318:	20001050 	.word	0x20001050
 800431c:	00000000 	.word	0x00000000

08004320 <chThdCreateSuspendedI>:
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8004320:	b5f0      	push	{r4, r5, r6, r7, lr}
  return __thd_object_init(currcore, tp, tdp->name, tdp->prio);
 8004322:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
  tp->flags             = CH_FLAG_MODE_STATIC;
 8004326:	2100      	movs	r1, #0
  tp->state             = CH_STATE_WTSTART;
 8004328:	f04f 0c02 	mov.w	ip, #2
  tp->refs              = (trefs_t)1;
 800432c:	2601      	movs	r6, #1
  tp->wabase = tdp->wbase;
 800432e:	f8d0 e004 	ldr.w	lr, [r0, #4]
  tp->owner             = oip;
 8004332:	4a1c      	ldr	r2, [pc, #112]	; (80043a4 <chThdCreateSuspendedI+0x84>)
  tp->wabase = tdp->wbase;
 8004334:	f843 ec28 	str.w	lr, [r3, #-40]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8004338:	f8d0 e010 	ldr.w	lr, [r0, #16]
  p->next       = qp;
 800433c:	f102 0528 	add.w	r5, r2, #40	; 0x28
 8004340:	f843 ec6c 	str.w	lr, [r3, #-108]
 8004344:	f8d0 e014 	ldr.w	lr, [r0, #20]
  return __thd_object_init(currcore, tp, tdp->name, tdp->prio);
 8004348:	6800      	ldr	r0, [r0, #0]
  tp->refs              = (trefs_t)1;
 800434a:	f803 6c22 	strb.w	r6, [r3, #-34]
  tp->flags             = CH_FLAG_MODE_STATIC;
 800434e:	f803 1c23 	strb.w	r1, [r3, #-35]
  tp->state             = CH_STATE_WTSTART;
 8004352:	f803 cc24 	strb.w	ip, [r3, #-36]
  tp->hdr.pqueue.prio   = prio;
 8004356:	f843 4c40 	str.w	r4, [r3, #-64]
  tp->realprio          = prio;
 800435a:	f843 4c08 	str.w	r4, [r3, #-8]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800435e:	4f12      	ldr	r7, [pc, #72]	; (80043a8 <chThdCreateSuspendedI+0x88>)
  p->prev       = qp->prev;
 8004360:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  tp->epending          = (eventmask_t)0;
 8004362:	e943 1104 	strd	r1, r1, [r3, #-16]
  tp->name              = name;
 8004366:	f843 0c2c 	str.w	r0, [r3, #-44]
  p->next       = qp;
 800436a:	f843 5c38 	str.w	r5, [r3, #-56]
  REG_INSERT(oip, tp);
 800436e:	f1a3 0038 	sub.w	r0, r3, #56	; 0x38
  ch_queue_init(&tp->msgqueue);
 8004372:	f1a3 0118 	sub.w	r1, r3, #24
  ch_list_init(&tp->waiting);
 8004376:	f1a3 051c 	sub.w	r5, r3, #28
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800437a:	f1a3 066c 	sub.w	r6, r3, #108	; 0x6c
 800437e:	f843 ec68 	str.w	lr, [r3, #-104]
 8004382:	f843 7c4c 	str.w	r7, [r3, #-76]
  tp->owner             = oip;
 8004386:	f843 2c30 	str.w	r2, [r3, #-48]
  p->prev       = qp->prev;
 800438a:	f843 4c34 	str.w	r4, [r3, #-52]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800438e:	f843 6c3c 	str.w	r6, [r3, #-60]
  p->prev->next = p;
 8004392:	6020      	str	r0, [r4, #0]
  qp->prev      = p;
 8004394:	62d0      	str	r0, [r2, #44]	; 0x2c
  qp->next = qp;
 8004396:	e943 5107 	strd	r5, r1, [r3, #-28]
}
 800439a:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  qp->prev = qp;
 800439e:	f843 1c14 	str.w	r1, [r3, #-20]
 80043a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a4:	20001050 	.word	0x20001050
 80043a8:	08000251 	.word	0x08000251
 80043ac:	00000000 	.word	0x00000000

080043b0 <chThdExit>:
 80043b0:	2320      	movs	r3, #32
void chThdExit(msg_t msg) {
 80043b2:	b570      	push	{r4, r5, r6, lr}
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <chThdExit+0x84>)
 80043ba:	68d9      	ldr	r1, [r3, #12]
  return (bool)(lp->next != lp);
 80043bc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 80043be:	f101 0c2c 	add.w	ip, r1, #44	; 0x2c
 80043c2:	4594      	cmp	ip, r2
  tp->state = CH_STATE_READY;
 80043c4:	bf18      	it	ne
 80043c6:	f04f 0e00 	movne.w	lr, #0
  currtp->u.exitcode = msg;
 80043ca:	6288      	str	r0, [r1, #40]	; 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 80043cc:	d113      	bne.n	80043f6 <chThdExit+0x46>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 80043ce:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 80043d2:	b32a      	cbz	r2, 8004420 <chThdExit+0x70>
  otp->state = newstate;
 80043d4:	220f      	movs	r2, #15
  ntp->state = CH_STATE_CURRENT;
 80043d6:	f04f 0c01 	mov.w	ip, #1
  ch_priority_queue_t *p = pqp->next;
 80043da:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 80043dc:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pqp->next       = p->next;
 80043e0:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 80043e2:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 80043e4:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
  pqp->next       = p->next;
 80043e8:	601a      	str	r2, [r3, #0]
}
 80043ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __instance_set_currthread(oip, ntp);
 80043ee:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 80043f0:	f7fb bf26 	b.w	8000240 <__port_switch>
 80043f4:	4622      	mov	r2, r4
  lp->next = p->next;
 80043f6:	6814      	ldr	r4, [r2, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80043f8:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80043fa:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 80043fc:	62cc      	str	r4, [r1, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 80043fe:	f882 e024 	strb.w	lr, [r2, #36]	; 0x24
    pqp = pqp->next;
 8004402:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004404:	6885      	ldr	r5, [r0, #8]
 8004406:	42b5      	cmp	r5, r6
 8004408:	d2fb      	bcs.n	8004402 <chThdExit+0x52>
  p->prev       = pqp->prev;
 800440a:	6845      	ldr	r5, [r0, #4]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 800440c:	4564      	cmp	r4, ip
  p->next       = pqp;
 800440e:	6010      	str	r0, [r2, #0]
  p->prev       = pqp->prev;
 8004410:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 8004412:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 8004414:	6042      	str	r2, [r0, #4]
 8004416:	d1ed      	bne.n	80043f4 <chThdExit+0x44>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8004418:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 800441c:	2a00      	cmp	r2, #0
 800441e:	d1d9      	bne.n	80043d4 <chThdExit+0x24>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 8004420:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 8004424:	0792      	lsls	r2, r2, #30
 8004426:	d1d5      	bne.n	80043d4 <chThdExit+0x24>
  p->prev->next = p->next;
 8004428:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 800442c:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 800442e:	6050      	str	r0, [r2, #4]
  return p;
 8004430:	e7d0      	b.n	80043d4 <chThdExit+0x24>
 8004432:	bf00      	nop
 8004434:	20001050 	.word	0x20001050
	...

08004440 <chThdExitS>:
 8004440:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <chThdExitS+0x7c>)
void chThdExitS(msg_t msg) {
 8004442:	b570      	push	{r4, r5, r6, lr}
 8004444:	68d9      	ldr	r1, [r3, #12]
  return (bool)(lp->next != lp);
 8004446:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004448:	f101 0c2c 	add.w	ip, r1, #44	; 0x2c
 800444c:	4562      	cmp	r2, ip
 800444e:	bf18      	it	ne
 8004450:	f04f 0e00 	movne.w	lr, #0
  currtp->u.exitcode = msg;
 8004454:	6288      	str	r0, [r1, #40]	; 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004456:	d113      	bne.n	8004480 <chThdExitS+0x40>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8004458:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 800445c:	b32a      	cbz	r2, 80044aa <chThdExitS+0x6a>
  otp->state = newstate;
 800445e:	220f      	movs	r2, #15
  ntp->state = CH_STATE_CURRENT;
 8004460:	f04f 0c01 	mov.w	ip, #1
  ch_priority_queue_t *p = pqp->next;
 8004464:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 8004466:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800446a:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 800446c:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 800446e:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8004472:	601a      	str	r2, [r3, #0]
}
 8004474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __instance_set_currthread(oip, ntp);
 8004478:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 800447a:	f7fb bee1 	b.w	8000240 <__port_switch>
 800447e:	4622      	mov	r2, r4
  lp->next = p->next;
 8004480:	6814      	ldr	r4, [r2, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004482:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8004484:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 8004486:	62cc      	str	r4, [r1, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 8004488:	f882 e024 	strb.w	lr, [r2, #36]	; 0x24
    pqp = pqp->next;
 800448c:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800448e:	6885      	ldr	r5, [r0, #8]
 8004490:	42b5      	cmp	r5, r6
 8004492:	d2fb      	bcs.n	800448c <chThdExitS+0x4c>
  p->prev       = pqp->prev;
 8004494:	6845      	ldr	r5, [r0, #4]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004496:	4564      	cmp	r4, ip
  p->next       = pqp;
 8004498:	6010      	str	r0, [r2, #0]
  p->prev       = pqp->prev;
 800449a:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 800449c:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 800449e:	6042      	str	r2, [r0, #4]
 80044a0:	d1ed      	bne.n	800447e <chThdExitS+0x3e>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 80044a2:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 80044a6:	2a00      	cmp	r2, #0
 80044a8:	d1d9      	bne.n	800445e <chThdExitS+0x1e>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 80044aa:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 80044ae:	0792      	lsls	r2, r2, #30
 80044b0:	d1d5      	bne.n	800445e <chThdExitS+0x1e>
  p->prev->next = p->next;
 80044b2:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 80044b6:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 80044b8:	6050      	str	r0, [r2, #4]
  return p;
 80044ba:	e7d0      	b.n	800445e <chThdExitS+0x1e>
 80044bc:	20001050 	.word	0x20001050

080044c0 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80044c0:	4b01      	ldr	r3, [pc, #4]	; (80044c8 <chTMStartMeasurementX+0x8>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80044c4:	6083      	str	r3, [r0, #8]
}
 80044c6:	4770      	bx	lr
 80044c8:	e0001000 	.word	0xe0001000
 80044cc:	00000000 	.word	0x00000000

080044d0 <chTMStopMeasurementX>:
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 80044d2:	4a0f      	ldr	r2, [pc, #60]	; (8004510 <chTMStopMeasurementX+0x40>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	6892      	ldr	r2, [r2, #8]
  tmp->last = (now - tmp->last) - offset;
 80044d8:	6881      	ldr	r1, [r0, #8]
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	1a5b      	subs	r3, r3, r1
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80044de:	b410      	push	{r4}
  tmp->n++;
 80044e0:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 80044e4:	18d2      	adds	r2, r2, r3
 80044e6:	6941      	ldr	r1, [r0, #20]
 80044e8:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 80044ea:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 80044ec:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 80044f0:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80044f2:	6802      	ldr	r2, [r0, #0]
  tmp->n++;
 80044f4:	f104 0401 	add.w	r4, r4, #1
    tmp->worst = tmp->last;
 80044f8:	bf88      	it	hi
 80044fa:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 80044fc:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 80044fe:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8004502:	6141      	str	r1, [r0, #20]
}
 8004504:	bc10      	pop	{r4}
    tmp->best = tmp->last;
 8004506:	bf38      	it	cc
 8004508:	6003      	strcc	r3, [r0, #0]
}
 800450a:	4770      	bx	lr
 800450c:	e0001000 	.word	0xe0001000
 8004510:	20001128 	.word	0x20001128
	...

08004520 <chSemSignalI>:
  if (++sp->cnt <= (cnt_t)0) {
 8004520:	6883      	ldr	r3, [r0, #8]
 8004522:	3301      	adds	r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	6083      	str	r3, [r0, #8]
 8004528:	dd00      	ble.n	800452c <chSemSignalI+0xc>
 800452a:	4770      	bx	lr
    tp->u.rdymsg = MSG_OK;
 800452c:	2100      	movs	r1, #0
  ch_queue_t *p = qp->next;
 800452e:	6803      	ldr	r3, [r0, #0]
void chSemSignalI(semaphore_t *sp) {
 8004530:	b410      	push	{r4}
  qp->next       = p->next;
 8004532:	681c      	ldr	r4, [r3, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	6004      	str	r4, [r0, #0]
  qp->next->prev = qp;
 8004538:	6060      	str	r0, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800453a:	6898      	ldr	r0, [r3, #8]
    tp->u.rdymsg = MSG_OK;
 800453c:	6299      	str	r1, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800453e:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 8004542:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004544:	6891      	ldr	r1, [r2, #8]
 8004546:	4281      	cmp	r1, r0
 8004548:	d2fb      	bcs.n	8004542 <chSemSignalI+0x22>
  p->prev       = pqp->prev;
 800454a:	6851      	ldr	r1, [r2, #4]
    (void) chSchReadyI(tp);
  }
}
 800454c:	bc10      	pop	{r4}
 800454e:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8004552:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8004554:	6053      	str	r3, [r2, #4]
 8004556:	4770      	bx	lr
	...

08004560 <thread4>:
 8004560:	2220      	movs	r2, #32
static THD_FUNCTION(thread4, p) {
 8004562:	b508      	push	{r3, lr}
 8004564:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8004568:	6883      	ldr	r3, [r0, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	dd0c      	ble.n	8004588 <thread4+0x28>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <thread4+0x30>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	6892      	ldr	r2, [r2, #8]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	d901      	bls.n	8004580 <thread4+0x20>
    __sch_reschedule_ahead();
 800457c:	f7ff fb20 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8004580:	2300      	movs	r3, #0
 8004582:	f383 8811 	msr	BASEPRI, r3
}
 8004586:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 8004588:	f7ff ffca 	bl	8004520 <chSemSignalI>
 800458c:	e7ef      	b.n	800456e <thread4+0xe>
 800458e:	bf00      	nop
 8004590:	20001050 	.word	0x20001050
	...

080045a0 <rt_test_007_006_execute>:

static void rt_test_007_006_teardown(void) {
  test_wait_threads();
}

static void rt_test_007_006_execute(void) {
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [7.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 80045a4:	f04f 0801 	mov.w	r8, #1
  sp->cnt = n;
 80045a8:	2500      	movs	r5, #0
static void rt_test_007_006_execute(void) {
 80045aa:	b084      	sub	sp, #16
  test_set_step(1);
 80045ac:	4c76      	ldr	r4, [pc, #472]	; (8004788 <rt_test_007_006_execute+0x1e8>)
  qp->next = qp;
 80045ae:	ae01      	add	r6, sp, #4
 80045b0:	2720      	movs	r7, #32
  qp->prev = qp;
 80045b2:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80045b6:	f8c4 8000 	str.w	r8, [r4]
 80045ba:	9503      	str	r5, [sp, #12]
 80045bc:	f387 8811 	msr	BASEPRI, r7
  if (!condition) {
 80045c0:	9b03      	ldr	r3, [sp, #12]
 80045c2:	42ab      	cmp	r3, r5
 80045c4:	dc78      	bgt.n	80046b8 <rt_test_007_006_execute+0x118>
 80045c6:	f385 8811 	msr	BASEPRI, r5
  }
  test_end_step(1);

  /* [7.6.2] Resetting the binary semaphore in "taken" state, the state
     must not change.*/
  test_set_step(2);
 80045ca:	2302      	movs	r3, #2
 80045cc:	4629      	mov	r1, r5
 80045ce:	4630      	mov	r0, r6
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	f009 fc9d 	bl	800df10 <chSemResetWithMessage.constprop.0>
 80045d6:	f387 8811 	msr	BASEPRI, r7
 80045da:	9b03      	ldr	r3, [sp, #12]
 80045dc:	42ab      	cmp	r3, r5
 80045de:	dc6b      	bgt.n	80046b8 <rt_test_007_006_execute+0x118>
 80045e0:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
  }
  test_end_step(2);

  /* [7.6.3] Starting a signaler thread at a lower priority.*/
  test_set_step(3);
 80045e4:	2303      	movs	r3, #3
 80045e6:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 800478c <rt_test_007_006_execute+0x1ec>
 80045ea:	6023      	str	r3, [r4, #0]
  return chThdGetSelfX()->hdr.pqueue.prio;
 80045ec:	f8d9 200c 	ldr.w	r2, [r9, #12]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80045f0:	4633      	mov	r3, r6
 80045f2:	6891      	ldr	r1, [r2, #8]
 80045f4:	4866      	ldr	r0, [pc, #408]	; (8004790 <rt_test_007_006_execute+0x1f0>)
 80045f6:	4a67      	ldr	r2, [pc, #412]	; (8004794 <rt_test_007_006_execute+0x1f4>)
 80045f8:	3901      	subs	r1, #1
 80045fa:	f009 fcb9 	bl	800df70 <chThdCreateStatic.constprop.0>
  }
  test_end_step(3);

  /* [7.6.4] Waiting for the binary semaphore to be signaled, the
     semaphore is expected to be taken.*/
  test_set_step(4);
 80045fe:	2304      	movs	r3, #4
 8004600:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8004602:	4b65      	ldr	r3, [pc, #404]	; (8004798 <rt_test_007_006_execute+0x1f8>)
 8004604:	6018      	str	r0, [r3, #0]
 8004606:	f387 8811 	msr	BASEPRI, r7
  if (--sp->cnt < (cnt_t)0) {
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	3b01      	subs	r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	9303      	str	r3, [sp, #12]
 8004612:	db6e      	blt.n	80046f2 <rt_test_007_006_execute+0x152>
 8004614:	f385 8811 	msr	BASEPRI, r5
 8004618:	f387 8811 	msr	BASEPRI, r7
 800461c:	9b03      	ldr	r3, [sp, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	dc54      	bgt.n	80046cc <rt_test_007_006_execute+0x12c>
 8004622:	f385 8811 	msr	BASEPRI, r5
  test_end_step(4);

  /* [7.6.5] Signaling the binary semaphore, checking the binary
     semaphore state to be "not taken" and the underlying counter
     semaphore counter to be one.*/
  test_set_step(5);
 8004626:	2205      	movs	r2, #5
 8004628:	2320      	movs	r3, #32
 800462a:	6022      	str	r2, [r4, #0]
 800462c:	f383 8811 	msr	BASEPRI, r3
  if (bsp->sem.cnt < (cnt_t)1) {
 8004630:	9b03      	ldr	r3, [sp, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f340 8097 	ble.w	8004766 <rt_test_007_006_execute+0x1c6>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004638:	f8d9 2000 	ldr.w	r2, [r9]
 800463c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004640:	6892      	ldr	r2, [r2, #8]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	429a      	cmp	r2, r3
 8004646:	d901      	bls.n	800464c <rt_test_007_006_execute+0xac>
    __sch_reschedule_ahead();
 8004648:	f7ff faba 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800464c:	2300      	movs	r3, #0
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	2220      	movs	r2, #32
 8004654:	f382 8811 	msr	BASEPRI, r2
 8004658:	9903      	ldr	r1, [sp, #12]
 800465a:	4299      	cmp	r1, r3
 800465c:	dd41      	ble.n	80046e2 <rt_test_007_006_execute+0x142>
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f382 8811 	msr	BASEPRI, r2
 8004666:	9903      	ldr	r1, [sp, #12]
 8004668:	2901      	cmp	r1, #1
 800466a:	d174      	bne.n	8004756 <rt_test_007_006_execute+0x1b6>
 800466c:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(5);

  /* [7.6.6] Signaling the binary semaphore again, the internal state
     must not change from "not taken".*/
  test_set_step(6);
 8004670:	2306      	movs	r3, #6
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	f382 8811 	msr	BASEPRI, r2
 8004678:	9b03      	ldr	r3, [sp, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	dd7f      	ble.n	800477e <rt_test_007_006_execute+0x1de>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800467e:	f8d9 2000 	ldr.w	r2, [r9]
 8004682:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004686:	6892      	ldr	r2, [r2, #8]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	429a      	cmp	r2, r3
 800468c:	d901      	bls.n	8004692 <rt_test_007_006_execute+0xf2>
    __sch_reschedule_ahead();
 800468e:	f7ff fa97 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8004692:	2300      	movs	r3, #0
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	2220      	movs	r2, #32
 800469a:	f382 8811 	msr	BASEPRI, r2
 800469e:	9903      	ldr	r1, [sp, #12]
 80046a0:	4299      	cmp	r1, r3
 80046a2:	dd64      	ble.n	800476e <rt_test_007_006_execute+0x1ce>
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f382 8811 	msr	BASEPRI, r2
 80046ac:	9a03      	ldr	r2, [sp, #12]
 80046ae:	2a01      	cmp	r2, #1
 80046b0:	d151      	bne.n	8004756 <rt_test_007_006_execute+0x1b6>
 80046b2:	f383 8811 	msr	BASEPRI, r3
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
  test_end_step(6);
 80046b6:	e006      	b.n	80046c6 <rt_test_007_006_execute+0x126>
  chtest.global_fail     = true;
 80046b8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80046bc:	4a37      	ldr	r2, [pc, #220]	; (800479c <rt_test_007_006_execute+0x1fc>)
  chtest.global_fail     = true;
 80046be:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 80046c0:	60a2      	str	r2, [r4, #8]
 80046c2:	f385 8811 	msr	BASEPRI, r5
}
 80046c6:	b004      	add	sp, #16
 80046c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.global_fail     = true;
 80046cc:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 80046d0:	4932      	ldr	r1, [pc, #200]	; (800479c <rt_test_007_006_execute+0x1fc>)
 80046d2:	2300      	movs	r3, #0
 80046d4:	60a1      	str	r1, [r4, #8]
  chtest.global_fail     = true;
 80046d6:	80a2      	strh	r2, [r4, #4]
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	b004      	add	sp, #16
 80046de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e2:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 80046e6:	492e      	ldr	r1, [pc, #184]	; (80047a0 <rt_test_007_006_execute+0x200>)
  chtest.global_fail     = true;
 80046e8:	80a2      	strh	r2, [r4, #4]
  chtest.failure_message = msg;
 80046ea:	60a1      	str	r1, [r4, #8]
 80046ec:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 80046f0:	e7e9      	b.n	80046c6 <rt_test_007_006_execute+0x126>
  otp->state = newstate;
 80046f2:	2205      	movs	r2, #5
  return __sch_get_currthread();
 80046f4:	f8d9 a00c 	ldr.w	sl, [r9, #12]
  p->prev       = qp->prev;
 80046f8:	9b02      	ldr	r3, [sp, #8]
  ch_priority_queue_t *p = pqp->next;
 80046fa:	f8d9 0000 	ldr.w	r0, [r9]
  p->next       = qp;
 80046fe:	f8ca 6000 	str.w	r6, [sl]
  p->prev       = qp->prev;
 8004702:	f8ca 3004 	str.w	r3, [sl, #4]
    currtp->u.wtsemp = sp;
 8004706:	f8ca 6028 	str.w	r6, [sl, #40]	; 0x28
  p->prev->next = p;
 800470a:	f8c3 a000 	str.w	sl, [r3]
 800470e:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
  pqp->next       = p->next;
 8004712:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8004714:	f8cd a008 	str.w	sl, [sp, #8]
  chSysSwitch(ntp, otp);
 8004718:	4651      	mov	r1, sl
  pqp->next->prev = pqp;
 800471a:	f8c3 9004 	str.w	r9, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800471e:	f880 8024 	strb.w	r8, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8004722:	f8c9 3000 	str.w	r3, [r9]
  __instance_set_currthread(oip, ntp);
 8004726:	f8c9 000c 	str.w	r0, [r9, #12]
  chSysSwitch(ntp, otp);
 800472a:	f7fb fd89 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 800472e:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
 8004732:	f385 8811 	msr	BASEPRI, r5
 8004736:	f387 8811 	msr	BASEPRI, r7
  if (!condition) {
 800473a:	9b03      	ldr	r3, [sp, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	dcc5      	bgt.n	80046cc <rt_test_007_006_execute+0x12c>
 8004740:	f385 8811 	msr	BASEPRI, r5
 8004744:	2a00      	cmp	r2, #0
 8004746:	f43f af6e 	beq.w	8004626 <rt_test_007_006_execute+0x86>
  chtest.global_fail     = true;
 800474a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800474e:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <rt_test_007_006_execute+0x204>)
  chtest.global_fail     = true;
 8004750:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8004752:	60a2      	str	r2, [r4, #8]
 8004754:	e7b7      	b.n	80046c6 <rt_test_007_006_execute+0x126>
  chtest.global_fail     = true;
 8004756:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800475a:	4913      	ldr	r1, [pc, #76]	; (80047a8 <rt_test_007_006_execute+0x208>)
  chtest.global_fail     = true;
 800475c:	80a2      	strh	r2, [r4, #4]
  chtest.failure_message = msg;
 800475e:	60a1      	str	r1, [r4, #8]
 8004760:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8004764:	e7af      	b.n	80046c6 <rt_test_007_006_execute+0x126>
    chSemSignalI(&bsp->sem);
 8004766:	4630      	mov	r0, r6
 8004768:	f7ff feda 	bl	8004520 <chSemSignalI>
 800476c:	e764      	b.n	8004638 <rt_test_007_006_execute+0x98>
  chtest.global_fail     = true;
 800476e:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 8004772:	490e      	ldr	r1, [pc, #56]	; (80047ac <rt_test_007_006_execute+0x20c>)
  chtest.global_fail     = true;
 8004774:	80a2      	strh	r2, [r4, #4]
  chtest.failure_message = msg;
 8004776:	60a1      	str	r1, [r4, #8]
 8004778:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 800477c:	e7a3      	b.n	80046c6 <rt_test_007_006_execute+0x126>
 800477e:	4630      	mov	r0, r6
 8004780:	f7ff fece 	bl	8004520 <chSemSignalI>
 8004784:	e77b      	b.n	800467e <rt_test_007_006_execute+0xde>
 8004786:	bf00      	nop
 8004788:	20001134 	.word	0x20001134
 800478c:	20001050 	.word	0x20001050
 8004790:	20001270 	.word	0x20001270
 8004794:	08004561 	.word	0x08004561
 8004798:	200019a0 	.word	0x200019a0
 800479c:	08010028 	.word	0x08010028
 80047a0:	08010048 	.word	0x08010048
 80047a4:	08010034 	.word	0x08010034
 80047a8:	08010054 	.word	0x08010054
 80047ac:	0801002c 	.word	0x0801002c

080047b0 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 80047b0:	b4f0      	push	{r4, r5, r6, r7}
  if (mp->owner != NULL) {
 80047b2:	6883      	ldr	r3, [r0, #8]
 80047b4:	4c35      	ldr	r4, [pc, #212]	; (800488c <chMtxLockS+0xdc>)
 80047b6:	68e1      	ldr	r1, [r4, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d039      	beq.n	8004830 <chMtxLockS+0x80>
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 80047bc:	688d      	ldr	r5, [r1, #8]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	4295      	cmp	r5, r2
 80047c2:	d907      	bls.n	80047d4 <chMtxLockS+0x24>
        switch (tp->state) {
 80047c4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 80047c8:	609d      	str	r5, [r3, #8]
        switch (tp->state) {
 80047ca:	2a06      	cmp	r2, #6
 80047cc:	d045      	beq.n	800485a <chMtxLockS+0xaa>
 80047ce:	2a07      	cmp	r2, #7
 80047d0:	d034      	beq.n	800483c <chMtxLockS+0x8c>
 80047d2:	b1e2      	cbz	r2, 800480e <chMtxLockS+0x5e>
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {

  ch_queue_t *cp = qp;
 80047d4:	4603      	mov	r3, r0
 80047d6:	e003      	b.n	80047e0 <chMtxLockS+0x30>
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 80047d8:	688a      	ldr	r2, [r1, #8]
 80047da:	689d      	ldr	r5, [r3, #8]
 80047dc:	4295      	cmp	r5, r2
 80047de:	d302      	bcc.n	80047e6 <chMtxLockS+0x36>
    cp = cp->next;
 80047e0:	681b      	ldr	r3, [r3, #0]
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 80047e2:	4298      	cmp	r0, r3
 80047e4:	d1f8      	bne.n	80047d8 <chMtxLockS+0x28>
  otp->state = newstate;
 80047e6:	2506      	movs	r5, #6
  tp->next       = cp;
  tp->prev       = cp->prev;
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	e9c1 3200 	strd	r3, r2, [r1]
  tp->prev->next = tp;
 80047ee:	6011      	str	r1, [r2, #0]
  ntp->state = CH_STATE_CURRENT;
 80047f0:	2201      	movs	r2, #1
  cp->prev       = tp;
 80047f2:	6059      	str	r1, [r3, #4]
      currtp->u.wtmtxp = mp;
 80047f4:	6288      	str	r0, [r1, #40]	; 0x28
  ch_priority_queue_t *p = pqp->next;
 80047f6:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80047f8:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
  pqp->next       = p->next;
 80047fc:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 80047fe:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8004800:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8004804:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 8004806:	60e0      	str	r0, [r4, #12]
}
 8004808:	bcf0      	pop	{r4, r5, r6, r7}
  chSysSwitch(ntp, otp);
 800480a:	f7fb bd19 	b.w	8000240 <__port_switch>
  p->prev->next = p->next;
 800480e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004812:	603e      	str	r6, [r7, #0]
  p->next->prev = p->prev;
 8004814:	6077      	str	r7, [r6, #4]
  tp->state = CH_STATE_READY;
 8004816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800481a:	699a      	ldr	r2, [r3, #24]
    pqp = pqp->next;
 800481c:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800481e:	6896      	ldr	r6, [r2, #8]
 8004820:	42ae      	cmp	r6, r5
 8004822:	d2fb      	bcs.n	800481c <chMtxLockS+0x6c>
  p->next       = pqp;
 8004824:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8004826:	6855      	ldr	r5, [r2, #4]
 8004828:	605d      	str	r5, [r3, #4]
  p->prev->next = p;
 800482a:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 800482c:	6053      	str	r3, [r2, #4]
  return __sch_ready_behind(tp);
 800482e:	e7d1      	b.n	80047d4 <chMtxLockS+0x24>
    mp->next = currtp->mtxlist;
 8004830:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
}
 8004832:	bcf0      	pop	{r4, r5, r6, r7}
    mp->next = currtp->mtxlist;
 8004834:	e9c0 1302 	strd	r1, r3, [r0, #8]
    currtp->mtxlist = mp;
 8004838:	63c8      	str	r0, [r1, #60]	; 0x3c
}
 800483a:	4770      	bx	lr
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 800483c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  p->prev->next = p->next;
 800483e:	685f      	ldr	r7, [r3, #4]
 8004840:	681e      	ldr	r6, [r3, #0]
  ch_queue_t *cp = qp;
 8004842:	462a      	mov	r2, r5
 8004844:	603e      	str	r6, [r7, #0]
  p->next->prev = p->prev;
 8004846:	6077      	str	r7, [r6, #4]
 8004848:	e003      	b.n	8004852 <chMtxLockS+0xa2>
  } while ((cp != qp) &&
 800484a:	6896      	ldr	r6, [r2, #8]
 800484c:	689f      	ldr	r7, [r3, #8]
 800484e:	42be      	cmp	r6, r7
 8004850:	d3e8      	bcc.n	8004824 <chMtxLockS+0x74>
    cp = cp->next;
 8004852:	6812      	ldr	r2, [r2, #0]
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 8004854:	4295      	cmp	r5, r2
 8004856:	d1f8      	bne.n	800484a <chMtxLockS+0x9a>
 8004858:	e7e4      	b.n	8004824 <chMtxLockS+0x74>
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 800485a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  p->prev->next = p->next;
 800485c:	685f      	ldr	r7, [r3, #4]
 800485e:	681e      	ldr	r6, [r3, #0]
  ch_queue_t *cp = qp;
 8004860:	462a      	mov	r2, r5
 8004862:	603e      	str	r6, [r7, #0]
  p->next->prev = p->prev;
 8004864:	6077      	str	r7, [r6, #4]
 8004866:	e003      	b.n	8004870 <chMtxLockS+0xc0>
  } while ((cp != qp) &&
 8004868:	6896      	ldr	r6, [r2, #8]
 800486a:	689f      	ldr	r7, [r3, #8]
 800486c:	42be      	cmp	r6, r7
 800486e:	d302      	bcc.n	8004876 <chMtxLockS+0xc6>
    cp = cp->next;
 8004870:	6812      	ldr	r2, [r2, #0]
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 8004872:	4295      	cmp	r5, r2
 8004874:	d1f8      	bne.n	8004868 <chMtxLockS+0xb8>
  tp->prev       = cp->prev;
 8004876:	6856      	ldr	r6, [r2, #4]
  tp->next       = cp;
 8004878:	601a      	str	r2, [r3, #0]
  tp->prev       = cp->prev;
 800487a:	605e      	str	r6, [r3, #4]
  tp->prev->next = tp;
 800487c:	6033      	str	r3, [r6, #0]
  cp->prev       = tp;
 800487e:	6053      	str	r3, [r2, #4]
          tp = tp->u.wtmtxp->owner;
 8004880:	68ab      	ldr	r3, [r5, #8]
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8004882:	688d      	ldr	r5, [r1, #8]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	42aa      	cmp	r2, r5
 8004888:	d39c      	bcc.n	80047c4 <chMtxLockS+0x14>
 800488a:	e7a3      	b.n	80047d4 <chMtxLockS+0x24>
 800488c:	20001050 	.word	0x20001050

08004890 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 8004890:	b510      	push	{r4, lr}
 8004892:	2420      	movs	r4, #32
 8004894:	f384 8811 	msr	BASEPRI, r4
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004898:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800489c:	2008      	movs	r0, #8
 800489e:	f7fe f977 	bl	8002b90 <chSchGoSleepTimeoutS>
 80048a2:	2300      	movs	r3, #0
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f384 8811 	msr	BASEPRI, r4
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 80048ac:	4809      	ldr	r0, [pc, #36]	; (80048d4 <thread4B+0x44>)
 80048ae:	f7ff ff7f 	bl	80047b0 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 80048b2:	4808      	ldr	r0, [pc, #32]	; (80048d4 <thread4B+0x44>)
 80048b4:	f7fc fbfc 	bl	80010b0 <chMtxUnlockS>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80048b8:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <thread4B+0x48>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	6892      	ldr	r2, [r2, #8]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d901      	bls.n	80048ca <thread4B+0x3a>
    __sch_reschedule_ahead();
 80048c6:	f7ff f97b 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 80048ca:	2300      	movs	r3, #0
 80048cc:	f383 8811 	msr	BASEPRI, r3
}
 80048d0:	bd10      	pop	{r4, pc}
 80048d2:	bf00      	nop
 80048d4:	20000828 	.word	0x20000828
 80048d8:	20001050 	.word	0x20001050
 80048dc:	00000000 	.word	0x00000000

080048e0 <chMtxUnlock>:
void chMtxUnlock(mutex_t *mp) {
 80048e0:	b538      	push	{r3, r4, r5, lr}
  return __sch_get_currthread();
 80048e2:	4c1f      	ldr	r4, [pc, #124]	; (8004960 <chMtxUnlock+0x80>)
 80048e4:	2320      	movs	r3, #32
 80048e6:	68e5      	ldr	r5, [r4, #12]
 80048e8:	f383 8811 	msr	BASEPRI, r3
    if (chMtxQueueNotEmptyS(mp)) {
 80048ec:	6802      	ldr	r2, [r0, #0]
    currtp->mtxlist = mp->next;
 80048ee:	68c3      	ldr	r3, [r0, #12]
    if (chMtxQueueNotEmptyS(mp)) {
 80048f0:	4282      	cmp	r2, r0
    currtp->mtxlist = mp->next;
 80048f2:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (chMtxQueueNotEmptyS(mp)) {
 80048f4:	d02e      	beq.n	8004954 <chMtxUnlock+0x74>
      tprio_t newprio = currtp->realprio;
 80048f6:	6c29      	ldr	r1, [r5, #64]	; 0x40
      while (lmp != NULL) {
 80048f8:	b14b      	cbz	r3, 800490e <chMtxUnlock+0x2e>
  return (bool)(qp->next != qp);
 80048fa:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <chMtxUnlock+0x28>
 8004900:	6892      	ldr	r2, [r2, #8]
 8004902:	4291      	cmp	r1, r2
 8004904:	bf38      	it	cc
 8004906:	4611      	movcc	r1, r2
        lmp = lmp->next;
 8004908:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f5      	bne.n	80048fa <chMtxUnlock+0x1a>
      currtp->hdr.pqueue.prio = newprio;
 800490e:	60a9      	str	r1, [r5, #8]
  ch_queue_t *p = qp->next;
 8004910:	6803      	ldr	r3, [r0, #0]
      mp->next = tp->mtxlist;
 8004912:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  qp->next       = p->next;
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	6002      	str	r2, [r0, #0]
  qp->next->prev = qp;
 8004918:	6050      	str	r0, [r2, #4]
 800491a:	e9c0 3102 	strd	r3, r1, [r0, #8]
  tp->state = CH_STATE_READY;
 800491e:	2100      	movs	r1, #0
      tp->mtxlist = mp;
 8004920:	63d8      	str	r0, [r3, #60]	; 0x3c
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004922:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8004924:	6898      	ldr	r0, [r3, #8]
  tp->state = CH_STATE_READY;
 8004926:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 800492a:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800492c:	6891      	ldr	r1, [r2, #8]
 800492e:	4281      	cmp	r1, r0
 8004930:	d2fb      	bcs.n	800492a <chMtxUnlock+0x4a>
  p->prev       = pqp->prev;
 8004932:	6851      	ldr	r1, [r2, #4]
 8004934:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8004938:	600b      	str	r3, [r1, #0]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800493a:	6820      	ldr	r0, [r4, #0]
 800493c:	68e1      	ldr	r1, [r4, #12]
  pqp->prev     = p;
 800493e:	6053      	str	r3, [r2, #4]
 8004940:	688b      	ldr	r3, [r1, #8]
 8004942:	6882      	ldr	r2, [r0, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	d901      	bls.n	800494c <chMtxUnlock+0x6c>
    __sch_reschedule_ahead();
 8004948:	f7ff f93a 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800494c:	2300      	movs	r3, #0
 800494e:	f383 8811 	msr	BASEPRI, r3
}
 8004952:	bd38      	pop	{r3, r4, r5, pc}
      mp->owner = NULL;
 8004954:	2300      	movs	r3, #0
 8004956:	6093      	str	r3, [r2, #8]
 8004958:	2300      	movs	r3, #0
 800495a:	f383 8811 	msr	BASEPRI, r3
}
 800495e:	bd38      	pop	{r3, r4, r5, pc}
 8004960:	20001050 	.word	0x20001050
	...

08004970 <thread1.lto_priv.2>:
static THD_FUNCTION(thread1, p) {
 8004970:	b510      	push	{r4, lr}
 8004972:	2320      	movs	r3, #32
 8004974:	4604      	mov	r4, r0
 8004976:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800497a:	480a      	ldr	r0, [pc, #40]	; (80049a4 <thread1.lto_priv.2+0x34>)
 800497c:	f7ff ff18 	bl	80047b0 <chMtxLockS>
 8004980:	2300      	movs	r3, #0
 8004982:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8004986:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <thread1.lto_priv.2+0x38>)
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	f103 0120 	add.w	r1, r3, #32
 800498e:	428a      	cmp	r2, r1
 8004990:	d203      	bcs.n	800499a <thread1.lto_priv.2+0x2a>
  test_emit_token(*(char *)p);
 8004992:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 8004994:	1c50      	adds	r0, r2, #1
 8004996:	60d8      	str	r0, [r3, #12]
 8004998:	7011      	strb	r1, [r2, #0]
  chMtxUnlock(&m1);
 800499a:	4802      	ldr	r0, [pc, #8]	; (80049a4 <thread1.lto_priv.2+0x34>)
}
 800499c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 80049a0:	f7ff bf9e 	b.w	80048e0 <chMtxUnlock>
 80049a4:	20000818 	.word	0x20000818
 80049a8:	20001134 	.word	0x20001134
 80049ac:	00000000 	.word	0x00000000

080049b0 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 80049b0:	b510      	push	{r4, lr}
 80049b2:	2320      	movs	r3, #32
 80049b4:	b086      	sub	sp, #24
 80049b6:	f383 8811 	msr	BASEPRI, r3
  vtp->reload  = (sysinterval_t)0;
 80049ba:	2100      	movs	r1, #0
 80049bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  thread_t *tp = __instance_get_currthread(currcore);
 80049c0:	4c17      	ldr	r4, [pc, #92]	; (8004a20 <thread4A+0x70>)
 80049c2:	9105      	str	r1, [sp, #20]
  vtp->par     = par;
 80049c4:	68e2      	ldr	r2, [r4, #12]
 80049c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
  vtp->func    = vtfunc;
 80049c8:	4816      	ldr	r0, [pc, #88]	; (8004a24 <thread4A+0x74>)
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 80049ca:	b289      	uxth	r1, r1
  vtp->par     = par;
 80049cc:	e9cd 0203 	strd	r0, r2, [sp, #12]
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 80049d0:	2264      	movs	r2, #100	; 0x64
 80049d2:	4668      	mov	r0, sp
 80049d4:	f009 fdb4 	bl	800e540 <vt_enqueue.constprop.0>
  otp->state = newstate;
 80049d8:	2308      	movs	r3, #8
  ntp->state = CH_STATE_CURRENT;
 80049da:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 80049dc:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 80049de:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80049e0:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 80049e4:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 80049e6:	605c      	str	r4, [r3, #4]
  pqp->next       = p->next;
 80049e8:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 80049ea:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 80049ee:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 80049f0:	f7fb fc26 	bl	8000240 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 80049f4:	9b00      	ldr	r3, [sp, #0]
 80049f6:	b113      	cbz	r3, 80049fe <thread4A+0x4e>
      chVTDoResetI(&vt);
 80049f8:	4668      	mov	r0, sp
 80049fa:	f7fe f881 	bl	8002b00 <chVTDoResetI>
 80049fe:	2400      	movs	r4, #0
 8004a00:	f384 8811 	msr	BASEPRI, r4
 8004a04:	2320      	movs	r3, #32
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	4807      	ldr	r0, [pc, #28]	; (8004a28 <thread4A+0x78>)
 8004a0c:	f7ff fed0 	bl	80047b0 <chMtxLockS>
 8004a10:	f384 8811 	msr	BASEPRI, r4
  chMtxUnlock(&m1);
 8004a14:	4804      	ldr	r0, [pc, #16]	; (8004a28 <thread4A+0x78>)
}
 8004a16:	b006      	add	sp, #24
 8004a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8004a1c:	f7ff bf60 	b.w	80048e0 <chMtxUnlock>
 8004a20:	20001050 	.word	0x20001050
 8004a24:	08001041 	.word	0x08001041
 8004a28:	20000818 	.word	0x20000818
 8004a2c:	00000000 	.word	0x00000000

08004a30 <thread6>:
static THD_FUNCTION(thread6, p) {
 8004a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a34:	2420      	movs	r4, #32
 8004a36:	4607      	mov	r7, r0
 8004a38:	f384 8811 	msr	BASEPRI, r4
 8004a3c:	4820      	ldr	r0, [pc, #128]	; (8004ac0 <thread6+0x90>)
 8004a3e:	f7ff feb7 	bl	80047b0 <chMtxLockS>
 8004a42:	2300      	movs	r3, #0
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f384 8811 	msr	BASEPRI, r4
 8004a4c:	4e1d      	ldr	r6, [pc, #116]	; (8004ac4 <thread6+0x94>)
  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currtp->u.wtobjp = cp;
 8004a4e:	4d1e      	ldr	r5, [pc, #120]	; (8004ac8 <thread6+0x98>)
 8004a50:	68f4      	ldr	r4, [r6, #12]
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8004a52:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
  chMtxUnlockS(mp);
 8004a56:	4640      	mov	r0, r8
 8004a58:	f7fc fb2a 	bl	80010b0 <chMtxUnlockS>
  ch_queue_t *cp = qp;
 8004a5c:	462b      	mov	r3, r5
  currtp->u.wtobjp = cp;
 8004a5e:	62a5      	str	r5, [r4, #40]	; 0x28
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {
 8004a60:	e003      	b.n	8004a6a <thread6+0x3a>
  } while ((cp != qp) &&
 8004a62:	6899      	ldr	r1, [r3, #8]
 8004a64:	68a2      	ldr	r2, [r4, #8]
 8004a66:	4291      	cmp	r1, r2
 8004a68:	d302      	bcc.n	8004a70 <thread6+0x40>
    cp = cp->next;
 8004a6a:	681b      	ldr	r3, [r3, #0]
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 8004a6c:	42ab      	cmp	r3, r5
 8004a6e:	d1f8      	bne.n	8004a62 <thread6+0x32>
  otp->state = newstate;
 8004a70:	2007      	movs	r0, #7
  ntp->state = CH_STATE_CURRENT;
 8004a72:	2501      	movs	r5, #1
  tp->prev       = cp->prev;
 8004a74:	685a      	ldr	r2, [r3, #4]
  thread_t *otp = __instance_get_currthread(oip);
 8004a76:	68f1      	ldr	r1, [r6, #12]
  tp->next       = cp;
 8004a78:	6023      	str	r3, [r4, #0]
  tp->prev       = cp->prev;
 8004a7a:	6062      	str	r2, [r4, #4]
  tp->prev->next = tp;
 8004a7c:	6014      	str	r4, [r2, #0]
  cp->prev       = tp;
 8004a7e:	605c      	str	r4, [r3, #4]
  otp->state = newstate;
 8004a80:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  ch_priority_queue_t *p = pqp->next;
 8004a84:	6830      	ldr	r0, [r6, #0]
  pqp->next       = p->next;
 8004a86:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8004a88:	605e      	str	r6, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8004a8a:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8004a8e:	6033      	str	r3, [r6, #0]
  __instance_set_currthread(oip, ntp);
 8004a90:	60f0      	str	r0, [r6, #12]
  chSysSwitch(ntp, otp);
 8004a92:	f7fb fbd5 	bl	8000240 <__port_switch>
  ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
  chSchGoSleepS(CH_STATE_WTCOND);
  msg = currtp->u.rdymsg;
  chMtxLockS(mp);
 8004a96:	4640      	mov	r0, r8
 8004a98:	f7ff fe8a 	bl	80047b0 <chMtxLockS>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <thread6+0x9c>)
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	f103 0120 	add.w	r1, r3, #32
 8004aaa:	428a      	cmp	r2, r1
 8004aac:	d203      	bcs.n	8004ab6 <thread6+0x86>
  test_emit_token(*(char *)p);
 8004aae:	7839      	ldrb	r1, [r7, #0]
    *chtest.tokp++ = token;
 8004ab0:	1950      	adds	r0, r2, r5
 8004ab2:	60d8      	str	r0, [r3, #12]
 8004ab4:	7011      	strb	r1, [r2, #0]
  chMtxUnlock(&m1);
 8004ab6:	4802      	ldr	r0, [pc, #8]	; (8004ac0 <thread6+0x90>)
}
 8004ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chMtxUnlock(&m1);
 8004abc:	f7ff bf10 	b.w	80048e0 <chMtxUnlock>
 8004ac0:	20000818 	.word	0x20000818
 8004ac4:	20001050 	.word	0x20001050
 8004ac8:	20000800 	.word	0x20000800
 8004acc:	20001134 	.word	0x20001134

08004ad0 <thread8>:
static THD_FUNCTION(thread8, p) {
 8004ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad4:	2420      	movs	r4, #32
 8004ad6:	4607      	mov	r7, r0
 8004ad8:	f384 8811 	msr	BASEPRI, r4
 8004adc:	4827      	ldr	r0, [pc, #156]	; (8004b7c <thread8+0xac>)
 8004ade:	f7ff fe67 	bl	80047b0 <chMtxLockS>
 8004ae2:	2500      	movs	r5, #0
 8004ae4:	f385 8811 	msr	BASEPRI, r5
 8004ae8:	f384 8811 	msr	BASEPRI, r4
 8004aec:	4824      	ldr	r0, [pc, #144]	; (8004b80 <thread8+0xb0>)
 8004aee:	f7ff fe5f 	bl	80047b0 <chMtxLockS>
 8004af2:	f385 8811 	msr	BASEPRI, r5
 8004af6:	f384 8811 	msr	BASEPRI, r4
 8004afa:	4e22      	ldr	r6, [pc, #136]	; (8004b84 <thread8+0xb4>)
  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currtp->u.wtobjp = cp;
 8004afc:	4d22      	ldr	r5, [pc, #136]	; (8004b88 <thread8+0xb8>)
 8004afe:	68f4      	ldr	r4, [r6, #12]
 8004b00:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
  chMtxUnlockS(mp);
 8004b04:	4640      	mov	r0, r8
 8004b06:	f7fc fad3 	bl	80010b0 <chMtxUnlockS>
  ch_queue_t *cp = qp;
 8004b0a:	462b      	mov	r3, r5
  currtp->u.wtobjp = cp;
 8004b0c:	62a5      	str	r5, [r4, #40]	; 0x28
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {
 8004b0e:	e003      	b.n	8004b18 <thread8+0x48>
  } while ((cp != qp) &&
 8004b10:	6899      	ldr	r1, [r3, #8]
 8004b12:	68a2      	ldr	r2, [r4, #8]
 8004b14:	4291      	cmp	r1, r2
 8004b16:	d302      	bcc.n	8004b1e <thread8+0x4e>
    cp = cp->next;
 8004b18:	681b      	ldr	r3, [r3, #0]
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 8004b1a:	42ab      	cmp	r3, r5
 8004b1c:	d1f8      	bne.n	8004b10 <thread8+0x40>
  otp->state = newstate;
 8004b1e:	2107      	movs	r1, #7
  ntp->state = CH_STATE_CURRENT;
 8004b20:	2501      	movs	r5, #1
  tp->prev       = cp->prev;
 8004b22:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 8004b24:	6023      	str	r3, [r4, #0]
  tp->prev       = cp->prev;
 8004b26:	6062      	str	r2, [r4, #4]
  tp->prev->next = tp;
 8004b28:	6014      	str	r4, [r2, #0]
  cp->prev       = tp;
 8004b2a:	605c      	str	r4, [r3, #4]
  thread_t *tp = __instance_get_currthread(currcore);
 8004b2c:	68f4      	ldr	r4, [r6, #12]
  ch_priority_queue_t *p = pqp->next;
 8004b2e:	6830      	ldr	r0, [r6, #0]
  otp->state = newstate;
 8004b30:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  pqp->next       = p->next;
 8004b34:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(ntp, otp);
 8004b36:	4621      	mov	r1, r4
  pqp->next->prev = pqp;
 8004b38:	605e      	str	r6, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8004b3a:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8004b3e:	6033      	str	r3, [r6, #0]
  __instance_set_currthread(oip, ntp);
 8004b40:	60f0      	str	r0, [r6, #12]
  chSysSwitch(ntp, otp);
 8004b42:	f7fb fb7d 	bl	8000240 <__port_switch>
  ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 8004b46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b48:	3301      	adds	r3, #1
 8004b4a:	d002      	beq.n	8004b52 <thread8+0x82>
    chMtxLockS(mp);
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	f7ff fe2f 	bl	80047b0 <chMtxLockS>
 8004b52:	2300      	movs	r3, #0
 8004b54:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <thread8+0xbc>)
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	f103 0120 	add.w	r1, r3, #32
 8004b60:	428a      	cmp	r2, r1
 8004b62:	d203      	bcs.n	8004b6c <thread8+0x9c>
  test_emit_token(*(char *)p);
 8004b64:	7839      	ldrb	r1, [r7, #0]
    *chtest.tokp++ = token;
 8004b66:	1c50      	adds	r0, r2, #1
 8004b68:	60d8      	str	r0, [r3, #12]
 8004b6a:	7011      	strb	r1, [r2, #0]
  chMtxUnlock(&m1);
 8004b6c:	4804      	ldr	r0, [pc, #16]	; (8004b80 <thread8+0xb0>)
 8004b6e:	f7ff feb7 	bl	80048e0 <chMtxUnlock>
}
 8004b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chMtxUnlock(&m2);
 8004b76:	4801      	ldr	r0, [pc, #4]	; (8004b7c <thread8+0xac>)
 8004b78:	f7ff beb2 	b.w	80048e0 <chMtxUnlock>
 8004b7c:	20000828 	.word	0x20000828
 8004b80:	20000818 	.word	0x20000818
 8004b84:	20001050 	.word	0x20001050
 8004b88:	20000800 	.word	0x20000800
 8004b8c:	20001134 	.word	0x20001134

08004b90 <thread9>:
static THD_FUNCTION(thread9, p) {
 8004b90:	b510      	push	{r4, lr}
 8004b92:	2320      	movs	r3, #32
 8004b94:	4604      	mov	r4, r0
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	480a      	ldr	r0, [pc, #40]	; (8004bc4 <thread9+0x34>)
 8004b9c:	f7ff fe08 	bl	80047b0 <chMtxLockS>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <thread9+0x38>)
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	f103 0120 	add.w	r1, r3, #32
 8004bae:	428a      	cmp	r2, r1
 8004bb0:	d203      	bcs.n	8004bba <thread9+0x2a>
  test_emit_token(*(char *)p);
 8004bb2:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 8004bb4:	1c50      	adds	r0, r2, #1
 8004bb6:	60d8      	str	r0, [r3, #12]
 8004bb8:	7011      	strb	r1, [r2, #0]
  chMtxUnlock(&m2);
 8004bba:	4802      	ldr	r0, [pc, #8]	; (8004bc4 <thread9+0x34>)
}
 8004bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m2);
 8004bc0:	f7ff be8e 	b.w	80048e0 <chMtxUnlock>
 8004bc4:	20000828 	.word	0x20000828
 8004bc8:	20001134 	.word	0x20001134
 8004bcc:	00000000 	.word	0x00000000

08004bd0 <rt_test_008_004_execute>:
  test_set_step(2);
 8004bd0:	2302      	movs	r3, #2
static void rt_test_008_004_execute(void) {
 8004bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd6:	4d35      	ldr	r5, [pc, #212]	; (8004cac <rt_test_008_004_execute+0xdc>)
  test_set_step(2);
 8004bd8:	4c35      	ldr	r4, [pc, #212]	; (8004cb0 <rt_test_008_004_execute+0xe0>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004bda:	68ea      	ldr	r2, [r5, #12]
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	6896      	ldr	r6, [r2, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8004be0:	4b34      	ldr	r3, [pc, #208]	; (8004cb4 <rt_test_008_004_execute+0xe4>)
    pa = p + 1;
 8004be2:	f106 0901 	add.w	r9, r6, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8004be6:	4649      	mov	r1, r9
 8004be8:	4a33      	ldr	r2, [pc, #204]	; (8004cb8 <rt_test_008_004_execute+0xe8>)
 8004bea:	4834      	ldr	r0, [pc, #208]	; (8004cbc <rt_test_008_004_execute+0xec>)
 8004bec:	f009 f9c0 	bl	800df70 <chThdCreateStatic.constprop.0>
 8004bf0:	4f33      	ldr	r7, [pc, #204]	; (8004cc0 <rt_test_008_004_execute+0xf0>)
    pb = p + 2;
 8004bf2:	f106 0a02 	add.w	sl, r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8004bf6:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8004bf8:	4651      	mov	r1, sl
 8004bfa:	4b32      	ldr	r3, [pc, #200]	; (8004cc4 <rt_test_008_004_execute+0xf4>)
 8004bfc:	4a32      	ldr	r2, [pc, #200]	; (8004cc8 <rt_test_008_004_execute+0xf8>)
 8004bfe:	4833      	ldr	r0, [pc, #204]	; (8004ccc <rt_test_008_004_execute+0xfc>)
 8004c00:	f009 f9b6 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_set_step(3);
 8004c04:	2303      	movs	r3, #3
 8004c06:	f04f 0820 	mov.w	r8, #32
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8004c0a:	6078      	str	r0, [r7, #4]
  test_set_step(3);
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	f388 8811 	msr	BASEPRI, r8
 8004c12:	482f      	ldr	r0, [pc, #188]	; (8004cd0 <rt_test_008_004_execute+0x100>)
 8004c14:	f7ff fdcc 	bl	80047b0 <chMtxLockS>
 8004c18:	2700      	movs	r7, #0
 8004c1a:	f387 8811 	msr	BASEPRI, r7
 8004c1e:	68eb      	ldr	r3, [r5, #12]
  if (!condition) {
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	429e      	cmp	r6, r3
 8004c24:	d13a      	bne.n	8004c9c <rt_test_008_004_execute+0xcc>
  test_set_step(4);
 8004c26:	2304      	movs	r3, #4
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004c2e:	21c8      	movs	r1, #200	; 0xc8
 8004c30:	2008      	movs	r0, #8
 8004c32:	f7fd ffad 	bl	8002b90 <chSchGoSleepTimeoutS>
 8004c36:	f387 8811 	msr	BASEPRI, r7
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004c3a:	68eb      	ldr	r3, [r5, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	4599      	cmp	r9, r3
 8004c40:	d12c      	bne.n	8004c9c <rt_test_008_004_execute+0xcc>
  test_set_step(5);
 8004c42:	2305      	movs	r3, #5
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	f388 8811 	msr	BASEPRI, r8
 8004c4a:	4822      	ldr	r0, [pc, #136]	; (8004cd4 <rt_test_008_004_execute+0x104>)
 8004c4c:	f7ff fdb0 	bl	80047b0 <chMtxLockS>
 8004c50:	f387 8811 	msr	BASEPRI, r7
 8004c54:	68eb      	ldr	r3, [r5, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	4599      	cmp	r9, r3
 8004c5a:	d11f      	bne.n	8004c9c <rt_test_008_004_execute+0xcc>
  test_set_step(6);
 8004c5c:	2306      	movs	r3, #6
 8004c5e:	6023      	str	r3, [r4, #0]
 8004c60:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004c64:	21c8      	movs	r1, #200	; 0xc8
 8004c66:	2008      	movs	r0, #8
 8004c68:	f7fd ff92 	bl	8002b90 <chSchGoSleepTimeoutS>
 8004c6c:	f387 8811 	msr	BASEPRI, r7
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004c70:	68eb      	ldr	r3, [r5, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	459a      	cmp	sl, r3
 8004c76:	d111      	bne.n	8004c9c <rt_test_008_004_execute+0xcc>
  test_set_step(7);
 8004c78:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 8004c7a:	4816      	ldr	r0, [pc, #88]	; (8004cd4 <rt_test_008_004_execute+0x104>)
  test_set_step(7);
 8004c7c:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m2);
 8004c7e:	f7ff fe2f 	bl	80048e0 <chMtxUnlock>
 8004c82:	68eb      	ldr	r3, [r5, #12]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	4599      	cmp	r9, r3
 8004c88:	d108      	bne.n	8004c9c <rt_test_008_004_execute+0xcc>
  test_set_step(8);
 8004c8a:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 8004c8c:	4810      	ldr	r0, [pc, #64]	; (8004cd0 <rt_test_008_004_execute+0x100>)
  test_set_step(8);
 8004c8e:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 8004c90:	f7ff fe26 	bl	80048e0 <chMtxUnlock>
 8004c94:	68eb      	ldr	r3, [r5, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	429e      	cmp	r6, r3
 8004c9a:	d004      	beq.n	8004ca6 <rt_test_008_004_execute+0xd6>
  chtest.global_fail     = true;
 8004c9c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8004ca0:	4a0d      	ldr	r2, [pc, #52]	; (8004cd8 <rt_test_008_004_execute+0x108>)
  chtest.global_fail     = true;
 8004ca2:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8004ca4:	60a2      	str	r2, [r4, #8]
}
 8004ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004caa:	bf00      	nop
 8004cac:	20001050 	.word	0x20001050
 8004cb0:	20001134 	.word	0x20001134
 8004cb4:	08010068 	.word	0x08010068
 8004cb8:	080049b1 	.word	0x080049b1
 8004cbc:	20001270 	.word	0x20001270
 8004cc0:	200019a0 	.word	0x200019a0
 8004cc4:	0801006c 	.word	0x0801006c
 8004cc8:	08004891 	.word	0x08004891
 8004ccc:	200013e0 	.word	0x200013e0
 8004cd0:	20000818 	.word	0x20000818
 8004cd4:	20000828 	.word	0x20000828
 8004cd8:	08010070 	.word	0x08010070
 8004cdc:	00000000 	.word	0x00000000

08004ce0 <rt_test_008_005_execute>:
  test_set_step(2);
 8004ce0:	2302      	movs	r3, #2
static void rt_test_008_005_execute(void) {
 8004ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 8004ce6:	4e5a      	ldr	r6, [pc, #360]	; (8004e50 <rt_test_008_005_execute+0x170>)
  test_set_step(2);
 8004ce8:	4d5a      	ldr	r5, [pc, #360]	; (8004e54 <rt_test_008_005_execute+0x174>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004cea:	68f2      	ldr	r2, [r6, #12]
 8004cec:	2720      	movs	r7, #32
 8004cee:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8004cf2:	602b      	str	r3, [r5, #0]
 8004cf4:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 8004cf8:	4c57      	ldr	r4, [pc, #348]	; (8004e58 <rt_test_008_005_execute+0x178>)
 8004cfa:	68a3      	ldr	r3, [r4, #8]
 8004cfc:	b14b      	cbz	r3, 8004d12 <rt_test_008_005_execute+0x32>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 8004d04:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8004d08:	4a54      	ldr	r2, [pc, #336]	; (8004e5c <rt_test_008_005_execute+0x17c>)
  chtest.global_fail     = true;
 8004d0a:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8004d0c:	60aa      	str	r2, [r5, #8]
}
 8004d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return __sch_get_currthread();
 8004d12:	68f2      	ldr	r2, [r6, #12]
  mp->next = currtp->mtxlist;
 8004d14:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
  mp->owner = currtp;
 8004d16:	60a2      	str	r2, [r4, #8]
  currtp->mtxlist = mp;
 8004d18:	63d4      	str	r4, [r2, #60]	; 0x3c
  mp->next = currtp->mtxlist;
 8004d1a:	60e1      	str	r1, [r4, #12]
 8004d1c:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8004d20:	2203      	movs	r2, #3
 8004d22:	602a      	str	r2, [r5, #0]
 8004d24:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 8004d28:	68a2      	ldr	r2, [r4, #8]
 8004d2a:	2a00      	cmp	r2, #0
 8004d2c:	d065      	beq.n	8004dfa <rt_test_008_005_execute+0x11a>
 8004d2e:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8004d32:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 8004d34:	4620      	mov	r0, r4
  test_set_step(4);
 8004d36:	602b      	str	r3, [r5, #0]
    chMtxUnlock(&m1);
 8004d38:	f7ff fdd2 	bl	80048e0 <chMtxUnlock>
  if (!condition) {
 8004d3c:	68a3      	ldr	r3, [r4, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d169      	bne.n	8004e16 <rt_test_008_005_execute+0x136>
 8004d42:	6822      	ldr	r2, [r4, #0]
 8004d44:	42a2      	cmp	r2, r4
 8004d46:	d16c      	bne.n	8004e22 <rt_test_008_005_execute+0x142>
  test_set_step(5);
 8004d48:	2105      	movs	r1, #5
 8004d4a:	6029      	str	r1, [r5, #0]
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004d4c:	68f1      	ldr	r1, [r6, #12]
 8004d4e:	6889      	ldr	r1, [r1, #8]
 8004d50:	4588      	cmp	r8, r1
 8004d52:	d14c      	bne.n	8004dee <rt_test_008_005_execute+0x10e>
  test_set_step(6);
 8004d54:	2106      	movs	r1, #6
 8004d56:	6029      	str	r1, [r5, #0]
 8004d58:	f387 8811 	msr	BASEPRI, r7
 8004d5c:	6891      	ldr	r1, [r2, #8]
 8004d5e:	2900      	cmp	r1, #0
 8004d60:	d1ce      	bne.n	8004d00 <rt_test_008_005_execute+0x20>
  return __sch_get_currthread();
 8004d62:	68f3      	ldr	r3, [r6, #12]
  mp->next = currtp->mtxlist;
 8004d64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  mp->owner = currtp;
 8004d66:	6093      	str	r3, [r2, #8]
  currtp->mtxlist = mp;
 8004d68:	63da      	str	r2, [r3, #60]	; 0x3c
  mp->next = currtp->mtxlist;
 8004d6a:	60d0      	str	r0, [r2, #12]
 8004d6c:	f381 8811 	msr	BASEPRI, r1
 8004d70:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 8004d74:	6893      	ldr	r3, [r2, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d05c      	beq.n	8004e34 <rt_test_008_005_execute+0x154>
 8004d7a:	f381 8811 	msr	BASEPRI, r1
 8004d7e:	f387 8811 	msr	BASEPRI, r7
 8004d82:	68f7      	ldr	r7, [r6, #12]
 * @sclass
 */
void chMtxUnlockAllS(void) {
  thread_t *currtp = chThdGetSelfX();

  if (currtp->mtxlist != NULL) {
 8004d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d86:	b323      	cbz	r3, 8004dd2 <rt_test_008_005_execute+0xf2>
  return (bool)(qp->next != qp);
 8004d88:	681a      	ldr	r2, [r3, #0]
    do {
      mutex_t *mp = currtp->mtxlist;
      currtp->mtxlist = mp->next;
 8004d8a:	68d8      	ldr	r0, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 8004d8c:	4293      	cmp	r3, r2
      currtp->mtxlist = mp->next;
 8004d8e:	63f8      	str	r0, [r7, #60]	; 0x3c
      if (chMtxQueueNotEmptyS(mp)) {
 8004d90:	d04d      	beq.n	8004e2e <rt_test_008_005_execute+0x14e>
  qp->next       = p->next;
 8004d92:	6810      	ldr	r0, [r2, #0]
 8004d94:	6018      	str	r0, [r3, #0]
  qp->next->prev = qp;
 8004d96:	6043      	str	r3, [r0, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)1;
#endif
        tp = (thread_t *)ch_queue_fifo_remove(&mp->queue);
        mp->owner   = tp;
        mp->next    = tp->mtxlist;
 8004d98:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
        mp->owner   = tp;
 8004d9a:	609a      	str	r2, [r3, #8]
        mp->next    = tp->mtxlist;
 8004d9c:	60d8      	str	r0, [r3, #12]
        tp->mtxlist = mp;
 8004d9e:	63d3      	str	r3, [r2, #60]	; 0x3c
  } while (unlikely(pqp->prio >= p->prio));
 8004da0:	6890      	ldr	r0, [r2, #8]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004da2:	6993      	ldr	r3, [r2, #24]
  tp->state = CH_STATE_READY;
 8004da4:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    pqp = pqp->next;
 8004da8:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004daa:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8004dae:	4584      	cmp	ip, r0
 8004db0:	d2fa      	bcs.n	8004da8 <rt_test_008_005_execute+0xc8>
  p->prev       = pqp->prev;
 8004db2:	6858      	ldr	r0, [r3, #4]
  p->next       = pqp;
 8004db4:	6013      	str	r3, [r2, #0]
  p->prev       = pqp->prev;
 8004db6:	6050      	str	r0, [r2, #4]
  p->prev->next = p;
 8004db8:	6002      	str	r2, [r0, #0]
  pqp->prev     = p;
 8004dba:	605a      	str	r2, [r3, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
      }
    } while (currtp->mtxlist != NULL);
 8004dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1e2      	bne.n	8004d88 <rt_test_008_005_execute+0xa8>
    currtp->hdr.pqueue.prio = currtp->realprio;
 8004dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004dc4:	6832      	ldr	r2, [r6, #0]
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	6892      	ldr	r2, [r2, #8]
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d201      	bcs.n	8004dd2 <rt_test_008_005_execute+0xf2>
    __sch_reschedule_ahead();
 8004dce:	f7fe fef7 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	68a3      	ldr	r3, [r4, #8]
 8004dda:	b9e3      	cbnz	r3, 8004e16 <rt_test_008_005_execute+0x136>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	42a3      	cmp	r3, r4
 8004de0:	d11f      	bne.n	8004e22 <rt_test_008_005_execute+0x142>
  test_set_step(7);
 8004de2:	2207      	movs	r2, #7
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004de4:	68f3      	ldr	r3, [r6, #12]
 8004de6:	602a      	str	r2, [r5, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	4598      	cmp	r8, r3
 8004dec:	d08f      	beq.n	8004d0e <rt_test_008_005_execute+0x2e>
  chtest.global_fail     = true;
 8004dee:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8004df2:	4a1b      	ldr	r2, [pc, #108]	; (8004e60 <rt_test_008_005_execute+0x180>)
  chtest.global_fail     = true;
 8004df4:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8004df6:	60aa      	str	r2, [r5, #8]
 8004df8:	e789      	b.n	8004d0e <rt_test_008_005_execute+0x2e>
  return __sch_get_currthread();
 8004dfa:	68f3      	ldr	r3, [r6, #12]
  mp->next = currtp->mtxlist;
 8004dfc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  currtp->mtxlist = mp;
 8004dfe:	63dc      	str	r4, [r3, #60]	; 0x3c
  mp->next = currtp->mtxlist;
 8004e00:	e9c4 3102 	strd	r3, r1, [r4, #8]
 8004e04:	f382 8811 	msr	BASEPRI, r2
  chtest.global_fail     = true;
 8004e08:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8004e0c:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <rt_test_008_005_execute+0x184>)
  chtest.global_fail     = true;
 8004e0e:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8004e10:	60aa      	str	r2, [r5, #8]
}
 8004e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.global_fail     = true;
 8004e16:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8004e1a:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <rt_test_008_005_execute+0x188>)
  chtest.global_fail     = true;
 8004e1c:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8004e1e:	60aa      	str	r2, [r5, #8]
 8004e20:	e775      	b.n	8004d0e <rt_test_008_005_execute+0x2e>
  chtest.global_fail     = true;
 8004e22:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8004e26:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <rt_test_008_005_execute+0x18c>)
  chtest.global_fail     = true;
 8004e28:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8004e2a:	60aa      	str	r2, [r5, #8]
 8004e2c:	e76f      	b.n	8004d0e <rt_test_008_005_execute+0x2e>
        mp->owner = NULL;
 8004e2e:	6099      	str	r1, [r3, #8]
 8004e30:	4603      	mov	r3, r0
 8004e32:	e7c4      	b.n	8004dbe <rt_test_008_005_execute+0xde>
 8004e34:	68f1      	ldr	r1, [r6, #12]
  mp->next = currtp->mtxlist;
 8004e36:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
  currtp->mtxlist = mp;
 8004e38:	63ca      	str	r2, [r1, #60]	; 0x3c
  mp->next = currtp->mtxlist;
 8004e3a:	e9c2 1002 	strd	r1, r0, [r2, #8]
 8004e3e:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 8004e42:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8004e46:	4a07      	ldr	r2, [pc, #28]	; (8004e64 <rt_test_008_005_execute+0x184>)
  chtest.global_fail     = true;
 8004e48:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8004e4a:	60aa      	str	r2, [r5, #8]
 8004e4c:	e75f      	b.n	8004d0e <rt_test_008_005_execute+0x2e>
 8004e4e:	bf00      	nop
 8004e50:	20001050 	.word	0x20001050
 8004e54:	20001134 	.word	0x20001134
 8004e58:	20000818 	.word	0x20000818
 8004e5c:	08010088 	.word	0x08010088
 8004e60:	08010070 	.word	0x08010070
 8004e64:	08010098 	.word	0x08010098
 8004e68:	080100a4 	.word	0x080100a4
 8004e6c:	0800ff08 	.word	0x0800ff08

08004e70 <chEvtBroadcastFlagsI>:
  elp = esp->next;
 8004e70:	6803      	ldr	r3, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 8004e72:	4298      	cmp	r0, r3
 8004e74:	d034      	beq.n	8004ee0 <chEvtBroadcastFlagsI+0x70>
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8004e76:	b4f0      	push	{r4, r5, r6, r7}
    tp->u.rdymsg = MSG_OK;
 8004e78:	2600      	movs	r6, #0
 8004e7a:	e005      	b.n	8004e88 <chEvtBroadcastFlagsI+0x18>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8004e7c:	f1bc 0f0b 	cmp.w	ip, #11
 8004e80:	d029      	beq.n	8004ed6 <chEvtBroadcastFlagsI+0x66>
    elp = elp->next;
 8004e82:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8004e84:	4298      	cmp	r0, r3
 8004e86:	d024      	beq.n	8004ed2 <chEvtBroadcastFlagsI+0x62>
    elp->flags |= flags;
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	60da      	str	r2, [r3, #12]
    if ((flags == (eventflags_t)0) ||
 8004e8e:	b111      	cbz	r1, 8004e96 <chEvtBroadcastFlagsI+0x26>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8004e90:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8004e92:	4211      	tst	r1, r2
 8004e94:	d0f5      	beq.n	8004e82 <chEvtBroadcastFlagsI+0x12>
  tp->epending |= events;
 8004e96:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8004e9a:	6b95      	ldr	r5, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004e9c:	f892 c024 	ldrb.w	ip, [r2, #36]	; 0x24
  tp->epending |= events;
 8004ea0:	432c      	orrs	r4, r5
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004ea2:	f1bc 0f0a 	cmp.w	ip, #10
  tp->epending |= events;
 8004ea6:	6394      	str	r4, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004ea8:	d1e8      	bne.n	8004e7c <chEvtBroadcastFlagsI+0xc>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8004eaa:	6a95      	ldr	r5, [r2, #40]	; 0x28
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004eac:	422c      	tst	r4, r5
 8004eae:	d0e8      	beq.n	8004e82 <chEvtBroadcastFlagsI+0x12>
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004eb0:	6994      	ldr	r4, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8004eb2:	6897      	ldr	r7, [r2, #8]
    tp->u.rdymsg = MSG_OK;
 8004eb4:	6296      	str	r6, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8004eb6:	f882 6024 	strb.w	r6, [r2, #36]	; 0x24
    pqp = pqp->next;
 8004eba:	6824      	ldr	r4, [r4, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004ebc:	68a5      	ldr	r5, [r4, #8]
 8004ebe:	42bd      	cmp	r5, r7
 8004ec0:	d2fb      	bcs.n	8004eba <chEvtBroadcastFlagsI+0x4a>
    elp = elp->next;
 8004ec2:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 8004ec4:	6865      	ldr	r5, [r4, #4]
  while (elp != (event_listener_t *)esp) {
 8004ec6:	4298      	cmp	r0, r3
 8004ec8:	e9c2 4500 	strd	r4, r5, [r2]
  p->prev->next = p;
 8004ecc:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 8004ece:	6062      	str	r2, [r4, #4]
 8004ed0:	d1da      	bne.n	8004e88 <chEvtBroadcastFlagsI+0x18>
}
 8004ed2:	bcf0      	pop	{r4, r5, r6, r7}
 8004ed4:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8004ed6:	6a95      	ldr	r5, [r2, #40]	; 0x28
      ((tp->state == CH_STATE_WTANDEVT) &&
 8004ed8:	ea35 0404 	bics.w	r4, r5, r4
 8004edc:	d1d1      	bne.n	8004e82 <chEvtBroadcastFlagsI+0x12>
 8004ede:	e7e7      	b.n	8004eb0 <chEvtBroadcastFlagsI+0x40>
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
	...

08004ef0 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8004ef2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8004ef6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  if (sdup == NULL) {
 8004ef8:	b1dc      	cbz	r4, 8004f32 <sduDataTransmitted+0x42>
 8004efa:	4605      	mov	r5, r0
 8004efc:	460e      	mov	r6, r1
 8004efe:	2320      	movs	r3, #32
 8004f00:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8004f04:	2108      	movs	r1, #8
 8004f06:	1d20      	adds	r0, r4, #4
 8004f08:	f7ff ffb2 	bl	8004e70 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8004f0c:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8004f10:	68d8      	ldr	r0, [r3, #12]
 8004f12:	6943      	ldr	r3, [r0, #20]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	b96b      	cbnz	r3, 8004f34 <sduDataTransmitted+0x44>
  if (obqIsEmptyI(obqp)) {
 8004f18:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004f1a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004f1c:	4291      	cmp	r1, r2
 8004f1e:	d03a      	beq.n	8004f96 <sduDataTransmitted+0xa6>
    usbStartTransmitI(usbp, ep, buf, n);
 8004f20:	4631      	mov	r1, r6
 8004f22:	4628      	mov	r0, r5
 8004f24:	f852 3b04 	ldr.w	r3, [r2], #4
 8004f28:	f7fb fb8a 	bl	8000640 <usbStartTransmitI>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f383 8811 	msr	BASEPRI, r3
}
 8004f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  obqp->bcounter++;
 8004f34:	6d22      	ldr	r2, [r4, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 8004f36:	6da1      	ldr	r1, [r4, #88]	; 0x58
  obqp->bcounter++;
 8004f38:	3201      	adds	r2, #1
 8004f3a:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 8004f3c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8004f3e:	f104 0744 	add.w	r7, r4, #68	; 0x44
 8004f42:	440a      	add	r2, r1
  if (obqp->brdptr >= obqp->btop) {
 8004f44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8004f46:	65a2      	str	r2, [r4, #88]	; 0x58
  if (obqp->brdptr >= obqp->btop) {
 8004f48:	428a      	cmp	r2, r1
    obqp->brdptr = obqp->buffers;
 8004f4a:	bf28      	it	cs
 8004f4c:	6ea2      	ldrcs	r2, [r4, #104]	; 0x68
  return (bool)(qp->next != qp);
 8004f4e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004f50:	bf28      	it	cs
 8004f52:	65a2      	strcs	r2, [r4, #88]	; 0x58
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (ch_queue_notempty(&tqp->queue)) {
 8004f54:	428f      	cmp	r7, r1
 8004f56:	d0e0      	beq.n	8004f1a <sduDataTransmitted+0x2a>

  tp = (thread_t *)ch_queue_fifo_remove(&tqp->queue);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8004f58:	f04f 0c00 	mov.w	ip, #0
  qp->next       = p->next;
 8004f5c:	f8d1 e000 	ldr.w	lr, [r1]
 8004f60:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
  qp->next->prev = qp;
 8004f64:	f8ce 7004 	str.w	r7, [lr, #4]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004f68:	698f      	ldr	r7, [r1, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8004f6a:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8004f6e:	f8c1 c028 	str.w	ip, [r1, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8004f72:	f881 c024 	strb.w	ip, [r1, #36]	; 0x24
    pqp = pqp->next;
 8004f76:	683f      	ldr	r7, [r7, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004f78:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8004f7c:	45f4      	cmp	ip, lr
 8004f7e:	d2fa      	bcs.n	8004f76 <sduDataTransmitted+0x86>
  p->prev       = pqp->prev;
 8004f80:	f8d7 c004 	ldr.w	ip, [r7, #4]
  p->next       = pqp;
 8004f84:	600f      	str	r7, [r1, #0]
  p->prev       = pqp->prev;
 8004f86:	f8c1 c004 	str.w	ip, [r1, #4]
  p->prev->next = p;
 8004f8a:	f8cc 1000 	str.w	r1, [ip]
  pqp->prev     = p;
 8004f8e:	6079      	str	r1, [r7, #4]
  if (obqIsEmptyI(obqp)) {
 8004f90:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004f92:	4291      	cmp	r1, r2
 8004f94:	d1c4      	bne.n	8004f20 <sduDataTransmitted+0x30>
 8004f96:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004f98:	2900      	cmp	r1, #0
 8004f9a:	d0c1      	beq.n	8004f20 <sduDataTransmitted+0x30>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0c5      	beq.n	8004f2c <sduDataTransmitted+0x3c>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8004fa0:	8a02      	ldrh	r2, [r0, #16]
 8004fa2:	3a01      	subs	r2, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d1c1      	bne.n	8004f2c <sduDataTransmitted+0x3c>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8004fa8:	4631      	mov	r1, r6
 8004faa:	4628      	mov	r0, r5
 8004fac:	f105 0274 	add.w	r2, r5, #116	; 0x74
 8004fb0:	f7fb fb46 	bl	8000640 <usbStartTransmitI>
 8004fb4:	e7ba      	b.n	8004f2c <sduDataTransmitted+0x3c>
 8004fb6:	bf00      	nop
	...

08004fc0 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8004fc0:	3111      	adds	r1, #17
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8004fc2:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8004fc4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 8004fc8:	b194      	cbz	r4, 8004ff0 <sduDataReceived+0x30>
 8004fca:	2320      	movs	r3, #32
 8004fcc:	f383 8811 	msr	BASEPRI, r3
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8004fd0:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8004fd4:	6813      	ldr	r3, [r2, #0]
 8004fd6:	7952      	ldrb	r2, [r2, #5]
 8004fd8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	685d      	ldr	r5, [r3, #4]
  if (size > (size_t)0) {
 8004fe2:	b935      	cbnz	r5, 8004ff2 <sduDataReceived+0x32>
  (void) sdu_start_receive(sdup);
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f00a fd43 	bl	800fa70 <sdu_start_receive.isra.0>
 8004fea:	2300      	movs	r3, #0
 8004fec:	f383 8811 	msr	BASEPRI, r3
}
 8004ff0:	bd38      	pop	{r3, r4, r5, pc}
 8004ff2:	2104      	movs	r1, #4
 8004ff4:	1860      	adds	r0, r4, r1
 8004ff6:	f7ff ff3b 	bl	8004e70 <chEvtBroadcastFlagsI>
  *((size_t *)ibqp->bwrptr) = size;
 8004ffa:	69e3      	ldr	r3, [r4, #28]
  if (ibqp->bwrptr >= ibqp->btop) {
 8004ffc:	6a61      	ldr	r1, [r4, #36]	; 0x24
  *((size_t *)ibqp->bwrptr) = size;
 8004ffe:	601d      	str	r5, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 8005000:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  ibqp->bcounter++;
 8005002:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 8005004:	4403      	add	r3, r0
  if (ibqp->bwrptr >= ibqp->btop) {
 8005006:	428b      	cmp	r3, r1
  ibqp->bwrptr += ibqp->bsize;
 8005008:	61e3      	str	r3, [r4, #28]
    ibqp->bwrptr = ibqp->buffers;
 800500a:	bf28      	it	cs
 800500c:	6b23      	ldrcs	r3, [r4, #48]	; 0x30
  ibqp->bcounter++;
 800500e:	f102 0201 	add.w	r2, r2, #1
    ibqp->bwrptr = ibqp->buffers;
 8005012:	bf28      	it	cs
 8005014:	61e3      	strcs	r3, [r4, #28]
  return (bool)(qp->next != qp);
 8005016:	68e3      	ldr	r3, [r4, #12]
  ibqp->bcounter++;
 8005018:	61a2      	str	r2, [r4, #24]
    ibqPostFullBufferI(&sdup->ibqueue, size);
 800501a:	f104 020c 	add.w	r2, r4, #12
 800501e:	429a      	cmp	r2, r3
 8005020:	d0e0      	beq.n	8004fe4 <sduDataReceived+0x24>
 8005022:	2100      	movs	r1, #0
  qp->next       = p->next;
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	60e0      	str	r0, [r4, #12]
  qp->next->prev = qp;
 8005028:	6042      	str	r2, [r0, #4]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800502a:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800502c:	6898      	ldr	r0, [r3, #8]
 800502e:	6299      	str	r1, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8005030:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 8005034:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005036:	6891      	ldr	r1, [r2, #8]
 8005038:	4281      	cmp	r1, r0
 800503a:	d2fb      	bcs.n	8005034 <sduDataReceived+0x74>
  p->prev       = pqp->prev;
 800503c:	6851      	ldr	r1, [r2, #4]
 800503e:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8005042:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8005044:	6053      	str	r3, [r2, #4]
  return __sch_ready_behind(tp);
 8005046:	e7cd      	b.n	8004fe4 <sduDataReceived+0x24>
	...

08005050 <usb_event.lto_priv.0>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	2905      	cmp	r1, #5
 8005054:	d852      	bhi.n	80050fc <usb_event.lto_priv.0+0xac>
 8005056:	e8df f001 	tbb	[pc, r1]
 800505a:	5103      	.short	0x5103
 800505c:	52030361 	.word	0x52030361
 8005060:	2320      	movs	r3, #32
 8005062:	f383 8811 	msr	BASEPRI, r3
  if (bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 8005066:	4c67      	ldr	r4, [pc, #412]	; (8005204 <usb_event.lto_priv.0+0x1b4>)
 8005068:	7d23      	ldrb	r3, [r4, #20]
 800506a:	b11b      	cbz	r3, 8005074 <usb_event.lto_priv.0+0x24>
 800506c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d140      	bne.n	80050f6 <usb_event.lto_priv.0+0xa6>
 8005074:	2102      	movs	r1, #2
 8005076:	4864      	ldr	r0, [pc, #400]	; (8005208 <usb_event.lto_priv.0+0x1b8>)
 8005078:	f7ff fefa 	bl	8004e70 <chEvtBroadcastFlagsI>
  bqSuspendI(&sdup->ibqueue);
 800507c:	2301      	movs	r3, #1
  return (bool)(qp->next != qp);
 800507e:	68e1      	ldr	r1, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (ch_queue_notempty(&tqp->queue)) {
 8005080:	3008      	adds	r0, #8
 8005082:	4281      	cmp	r1, r0
 8005084:	7523      	strb	r3, [r4, #20]
 8005086:	d017      	beq.n	80050b8 <usb_event.lto_priv.0+0x68>
 8005088:	f06f 0c01 	mvn.w	ip, #1
  tp->state = CH_STATE_READY;
 800508c:	2700      	movs	r7, #0
 800508e:	460b      	mov	r3, r1
  qp->next       = p->next;
 8005090:	6809      	ldr	r1, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005092:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8005094:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 8005096:	60e1      	str	r1, [r4, #12]
  qp->next->prev = qp;
 8005098:	6048      	str	r0, [r1, #4]
 800509a:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800509e:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
    pqp = pqp->next;
 80050a2:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80050a4:	6895      	ldr	r5, [r2, #8]
 80050a6:	42b5      	cmp	r5, r6
 80050a8:	d2fb      	bcs.n	80050a2 <usb_event.lto_priv.0+0x52>
  p->prev       = pqp->prev;
 80050aa:	6855      	ldr	r5, [r2, #4]
 80050ac:	4281      	cmp	r1, r0
 80050ae:	e9c3 2500 	strd	r2, r5, [r3]
  p->prev->next = p;
 80050b2:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 80050b4:	6053      	str	r3, [r2, #4]
 80050b6:	d1ea      	bne.n	800508e <usb_event.lto_priv.0+0x3e>
  bqSuspendI(&sdup->obqueue);
 80050b8:	2301      	movs	r3, #1
  return (bool)(qp->next != qp);
 80050ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80050bc:	4853      	ldr	r0, [pc, #332]	; (800520c <usb_event.lto_priv.0+0x1bc>)
 80050be:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80050c2:	4281      	cmp	r1, r0
 80050c4:	d017      	beq.n	80050f6 <usb_event.lto_priv.0+0xa6>
 80050c6:	f06f 0c01 	mvn.w	ip, #1
 80050ca:	2700      	movs	r7, #0
 80050cc:	460b      	mov	r3, r1
  qp->next       = p->next;
 80050ce:	6809      	ldr	r1, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80050d0:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80050d2:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 80050d4:	6461      	str	r1, [r4, #68]	; 0x44
  qp->next->prev = qp;
 80050d6:	6048      	str	r0, [r1, #4]
 80050d8:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80050dc:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
    pqp = pqp->next;
 80050e0:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80050e2:	6895      	ldr	r5, [r2, #8]
 80050e4:	42b5      	cmp	r5, r6
 80050e6:	d2fb      	bcs.n	80050e0 <usb_event.lto_priv.0+0x90>
  p->prev       = pqp->prev;
 80050e8:	6855      	ldr	r5, [r2, #4]
 80050ea:	4281      	cmp	r1, r0
 80050ec:	e9c3 2500 	strd	r2, r5, [r3]
  p->prev->next = p;
 80050f0:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 80050f2:	6053      	str	r3, [r2, #4]
 80050f4:	d1ea      	bne.n	80050cc <usb_event.lto_priv.0+0x7c>
 80050f6:	2300      	movs	r3, #0
 80050f8:	f383 8811 	msr	BASEPRI, r3
}
 80050fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050fe:	2320      	movs	r3, #32
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	4c3f      	ldr	r4, [pc, #252]	; (8005204 <usb_event.lto_priv.0+0x1b4>)
 8005106:	2101      	movs	r1, #1
 8005108:	1d20      	adds	r0, r4, #4
 800510a:	f7ff feb1 	bl	8004e70 <chEvtBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 800510e:	2300      	movs	r3, #0
 8005110:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 8005112:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800511c:	4605      	mov	r5, r0
 800511e:	2320      	movs	r3, #32
 8005120:	f383 8811 	msr	BASEPRI, r3
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8005124:	2600      	movs	r6, #0
 8005126:	4a3a      	ldr	r2, [pc, #232]	; (8005210 <usb_event.lto_priv.0+0x1c0>)
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8005128:	4b3a      	ldr	r3, [pc, #232]	; (8005214 <usb_event.lto_priv.0+0x1c4>)
  usbp->epc[ep] = epcp;
 800512a:	493b      	ldr	r1, [pc, #236]	; (8005218 <usb_event.lto_priv.0+0x1c8>)
  ibqp->bcounter  = 0;
 800512c:	4c35      	ldr	r4, [pc, #212]	; (8005204 <usb_event.lto_priv.0+0x1b4>)
 800512e:	6101      	str	r1, [r0, #16]
  usb_lld_init_endpoint(usbp, ep);
 8005130:	2101      	movs	r1, #1
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8005132:	e9c2 6600 	strd	r6, r6, [r2]
 8005136:	e9c2 6602 	strd	r6, r6, [r2, #8]
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800513a:	e9c3 6600 	strd	r6, r6, [r3]
 800513e:	e9c3 6602 	strd	r6, r6, [r3, #8]
  usb_lld_init_endpoint(usbp, ep);
 8005142:	f7fd fa55 	bl	80025f0 <usb_lld_init_endpoint>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8005146:	4b35      	ldr	r3, [pc, #212]	; (800521c <usb_event.lto_priv.0+0x1cc>)
  usbp->epc[ep] = epcp;
 8005148:	4a35      	ldr	r2, [pc, #212]	; (8005220 <usb_event.lto_priv.0+0x1d0>)
  usb_lld_init_endpoint(usbp, ep);
 800514a:	4628      	mov	r0, r5
 800514c:	2102      	movs	r1, #2
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800514e:	e9c3 6600 	strd	r6, r6, [r3]
  usbp->epc[ep] = epcp;
 8005152:	616a      	str	r2, [r5, #20]
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8005154:	e9c3 6602 	strd	r6, r6, [r3, #8]
  usb_lld_init_endpoint(usbp, ep);
 8005158:	f7fd fa4a 	bl	80025f0 <usb_lld_init_endpoint>
  return (bool)(qp->next != qp);
 800515c:	4620      	mov	r0, r4
 800515e:	f850 1f0c 	ldr.w	r1, [r0, #12]!
  ibqp->brdptr    = ibqp->buffers;
 8005162:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005164:	4281      	cmp	r1, r0
  ibqp->bwrptr    = ibqp->buffers;
 8005166:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ibqp->top       = NULL;
 800516a:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
  ibqp->bcounter  = 0;
 800516e:	61a6      	str	r6, [r4, #24]
 8005170:	d016      	beq.n	80051a0 <usb_event.lto_priv.0+0x150>
 8005172:	f06f 0c01 	mvn.w	ip, #1
 8005176:	460b      	mov	r3, r1
  qp->next       = p->next;
 8005178:	6809      	ldr	r1, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800517a:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800517c:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 800517e:	60e1      	str	r1, [r4, #12]
  qp->next->prev = qp;
 8005180:	6048      	str	r0, [r1, #4]
 8005182:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8005186:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
    pqp = pqp->next;
 800518a:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800518c:	6895      	ldr	r5, [r2, #8]
 800518e:	42bd      	cmp	r5, r7
 8005190:	d2fb      	bcs.n	800518a <usb_event.lto_priv.0+0x13a>
  p->prev       = pqp->prev;
 8005192:	6855      	ldr	r5, [r2, #4]
 8005194:	4281      	cmp	r1, r0
 8005196:	e9c3 2500 	strd	r2, r5, [r3]
  p->prev->next = p;
 800519a:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 800519c:	6053      	str	r3, [r2, #4]
 800519e:	d1ea      	bne.n	8005176 <usb_event.lto_priv.0+0x126>
  obqp->bcounter  = bqSizeX(obqp);
 80051a0:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
  bqResumeX(&sdup->ibqueue);
 80051a4:	2700      	movs	r7, #0
  return (bool)(qp->next != qp);
 80051a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80051a8:	4818      	ldr	r0, [pc, #96]	; (800520c <usb_event.lto_priv.0+0x1bc>)
  obqp->bwrptr    = obqp->buffers;
 80051aa:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 80051ae:	4281      	cmp	r1, r0
  obqp->top       = NULL;
 80051b0:	e9c4 771b 	strd	r7, r7, [r4, #108]	; 0x6c
  obqp->bcounter  = bqSizeX(obqp);
 80051b4:	6522      	str	r2, [r4, #80]	; 0x50
 80051b6:	7527      	strb	r7, [r4, #20]
 80051b8:	d016      	beq.n	80051e8 <usb_event.lto_priv.0+0x198>
 80051ba:	f06f 0c01 	mvn.w	ip, #1
 80051be:	460b      	mov	r3, r1
  qp->next       = p->next;
 80051c0:	6809      	ldr	r1, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80051c2:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80051c4:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 80051c6:	6461      	str	r1, [r4, #68]	; 0x44
  qp->next->prev = qp;
 80051c8:	6048      	str	r0, [r1, #4]
 80051ca:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80051ce:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
    pqp = pqp->next;
 80051d2:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80051d4:	6895      	ldr	r5, [r2, #8]
 80051d6:	42b5      	cmp	r5, r6
 80051d8:	d2fb      	bcs.n	80051d2 <usb_event.lto_priv.0+0x182>
  p->prev       = pqp->prev;
 80051da:	6855      	ldr	r5, [r2, #4]
 80051dc:	4281      	cmp	r1, r0
 80051de:	e9c3 2500 	strd	r2, r5, [r3]
  p->prev->next = p;
 80051e2:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 80051e4:	6053      	str	r3, [r2, #4]
 80051e6:	d1ea      	bne.n	80051be <usb_event.lto_priv.0+0x16e>
  bqResumeX(&sdup->obqueue);
 80051e8:	2500      	movs	r5, #0
 80051ea:	4807      	ldr	r0, [pc, #28]	; (8005208 <usb_event.lto_priv.0+0x1b8>)
 80051ec:	2101      	movs	r1, #1
 80051ee:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 80051f2:	f7ff fe3d 	bl	8004e70 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 80051f6:	3804      	subs	r0, #4
 80051f8:	f00a fc3a 	bl	800fa70 <sdu_start_receive.isra.0>
 80051fc:	f385 8811 	msr	BASEPRI, r5
 8005200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005202:	bf00      	nop
 8005204:	20000b34 	.word	0x20000b34
 8005208:	20000b38 	.word	0x20000b38
 800520c:	20000b78 	.word	0x20000b78
 8005210:	200011f8 	.word	0x200011f8
 8005214:	20001208 	.word	0x20001208
 8005218:	08011b7c 	.word	0x08011b7c
 800521c:	20001218 	.word	0x20001218
 8005220:	08011ba0 	.word	0x08011ba0
	...

08005230 <evt_thread7>:
 8005230:	2320      	movs	r3, #32
static THD_FUNCTION(evt_thread7, p) {
 8005232:	b570      	push	{r4, r5, r6, lr}
 8005234:	f383 8811 	msr	BASEPRI, r3
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8005238:	4c15      	ldr	r4, [pc, #84]	; (8005290 <evt_thread7+0x60>)
  chEvtBroadcastFlagsI(esp, flags);
 800523a:	2100      	movs	r1, #0
 800523c:	4815      	ldr	r0, [pc, #84]	; (8005294 <evt_thread7+0x64>)
 800523e:	f7ff fe17 	bl	8004e70 <chEvtBroadcastFlagsI>
 8005242:	6822      	ldr	r2, [r4, #0]
 8005244:	68e3      	ldr	r3, [r4, #12]
 8005246:	6892      	ldr	r2, [r2, #8]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	429a      	cmp	r2, r3
 800524c:	d901      	bls.n	8005252 <evt_thread7+0x22>
    __sch_reschedule_ahead();
 800524e:	f7fe fcb7 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8005252:	2500      	movs	r5, #0
 8005254:	f385 8811 	msr	BASEPRI, r5
 8005258:	2620      	movs	r6, #32
 800525a:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800525e:	2164      	movs	r1, #100	; 0x64
 8005260:	2008      	movs	r0, #8
 8005262:	f7fd fc95 	bl	8002b90 <chSchGoSleepTimeoutS>
 8005266:	f385 8811 	msr	BASEPRI, r5
 800526a:	f386 8811 	msr	BASEPRI, r6
 800526e:	480a      	ldr	r0, [pc, #40]	; (8005298 <evt_thread7+0x68>)
 8005270:	4629      	mov	r1, r5
 8005272:	f7ff fdfd 	bl	8004e70 <chEvtBroadcastFlagsI>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8005276:	6822      	ldr	r2, [r4, #0]
 8005278:	68e3      	ldr	r3, [r4, #12]
 800527a:	6892      	ldr	r2, [r2, #8]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	d901      	bls.n	8005286 <evt_thread7+0x56>
    __sch_reschedule_ahead();
 8005282:	f7fe fc9d 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8005286:	2300      	movs	r3, #0
 8005288:	f383 8811 	msr	BASEPRI, r3
}
 800528c:	bd70      	pop	{r4, r5, r6, pc}
 800528e:	bf00      	nop
 8005290:	20001050 	.word	0x20001050
 8005294:	20000808 	.word	0x20000808
 8005298:	2000080c 	.word	0x2000080c
 800529c:	00000000 	.word	0x00000000

080052a0 <chMBPostTimeout>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 80052a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a4:	2320      	movs	r3, #32
 80052a6:	4604      	mov	r4, r0
 80052a8:	4688      	mov	r8, r1
 80052aa:	4617      	mov	r7, r2
 80052ac:	f383 8811 	msr	BASEPRI, r3
  return __sch_get_currthread();
 80052b0:	4d2c      	ldr	r5, [pc, #176]	; (8005364 <chMBPostTimeout+0xc4>)

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 80052b2:	f100 0618 	add.w	r6, r0, #24
 80052b6:	e009      	b.n	80052cc <chMBPostTimeout+0x2c>
  p->prev       = qp->prev;
 80052b8:	69e0      	ldr	r0, [r4, #28]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80052ba:	4639      	mov	r1, r7
 80052bc:	e9c3 6000 	strd	r6, r0, [r3]
  p->prev->next = p;
 80052c0:	6003      	str	r3, [r0, #0]
 80052c2:	2004      	movs	r0, #4
  qp->prev      = p;
 80052c4:	61e3      	str	r3, [r4, #28]
 80052c6:	f7fd fc63 	bl	8002b90 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 80052ca:	b968      	cbnz	r0, 80052e8 <chMBPostTimeout+0x48>
    if (mbp->reset) {
 80052cc:	7d23      	ldrb	r3, [r4, #20]
 80052ce:	b983      	cbnz	r3, 80052f2 <chMBPostTimeout+0x52>
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 80052d0:	e9d4 1200 	ldrd	r1, r2, [r4]
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return mbp->cnt;
 80052d4:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80052d6:	1a50      	subs	r0, r2, r1
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80052d8:	ebb3 0fa0 	cmp.w	r3, r0, asr #2
 80052dc:	d110      	bne.n	8005300 <chMBPostTimeout+0x60>
 80052de:	68eb      	ldr	r3, [r5, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80052e0:	2f00      	cmp	r7, #0
 80052e2:	d1e9      	bne.n	80052b8 <chMBPostTimeout+0x18>
    return MSG_TIMEOUT;
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052e8:	2300      	movs	r3, #0
 80052ea:	f383 8811 	msr	BASEPRI, r3
}
 80052ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MSG_RESET;
 80052f2:	f06f 0001 	mvn.w	r0, #1
 80052f6:	2300      	movs	r3, #0
 80052f8:	f383 8811 	msr	BASEPRI, r3
}
 80052fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *mbp->wrptr++ = msg;
 8005300:	68a5      	ldr	r5, [r4, #8]
      mbp->cnt++;
 8005302:	3301      	adds	r3, #1
      *mbp->wrptr++ = msg;
 8005304:	1d28      	adds	r0, r5, #4
      if (mbp->wrptr >= mbp->top) {
 8005306:	4282      	cmp	r2, r0
  return (bool)(qp->next != qp);
 8005308:	6a22      	ldr	r2, [r4, #32]
      *mbp->wrptr++ = msg;
 800530a:	60a0      	str	r0, [r4, #8]
 800530c:	f8c5 8000 	str.w	r8, [r5]
        mbp->wrptr = mbp->buffer;
 8005310:	bf98      	it	ls
 8005312:	60a1      	strls	r1, [r4, #8]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8005314:	f104 0120 	add.w	r1, r4, #32
  if (ch_queue_notempty(&tqp->queue)) {
 8005318:	4291      	cmp	r1, r2
      mbp->cnt++;
 800531a:	6123      	str	r3, [r4, #16]
 800531c:	d011      	beq.n	8005342 <chMBPostTimeout+0xa2>
  tp->u.rdymsg = msg;
 800531e:	2000      	movs	r0, #0
  qp->next       = p->next;
 8005320:	6815      	ldr	r5, [r2, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005322:	6993      	ldr	r3, [r2, #24]
 8005324:	6225      	str	r5, [r4, #32]
  } while (unlikely(pqp->prio >= p->prio));
 8005326:	6894      	ldr	r4, [r2, #8]
  qp->next->prev = qp;
 8005328:	6069      	str	r1, [r5, #4]
 800532a:	6290      	str	r0, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800532c:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
    pqp = pqp->next;
 8005330:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005332:	6899      	ldr	r1, [r3, #8]
 8005334:	42a1      	cmp	r1, r4
 8005336:	d2fb      	bcs.n	8005330 <chMBPostTimeout+0x90>
  p->prev       = pqp->prev;
 8005338:	6859      	ldr	r1, [r3, #4]
 800533a:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 800533e:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 8005340:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8005342:	4b08      	ldr	r3, [pc, #32]	; (8005364 <chMBPostTimeout+0xc4>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	6892      	ldr	r2, [r2, #8]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	429a      	cmp	r2, r3
 800534e:	d907      	bls.n	8005360 <chMBPostTimeout+0xc0>
    __sch_reschedule_ahead();
 8005350:	f7fe fc36 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
      return MSG_OK;
 8005354:	2000      	movs	r0, #0
 8005356:	2300      	movs	r3, #0
 8005358:	f383 8811 	msr	BASEPRI, r3
}
 800535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MSG_OK;
 8005360:	2000      	movs	r0, #0
 8005362:	e7c1      	b.n	80052e8 <chMBPostTimeout+0x48>
 8005364:	20001050 	.word	0x20001050
	...

08005370 <chMBFetchTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8005370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005374:	4604      	mov	r4, r0
 8005376:	460f      	mov	r7, r1
 8005378:	4690      	mov	r8, r2
  return __sch_get_currthread();
 800537a:	4e25      	ldr	r6, [pc, #148]	; (8005410 <chMBFetchTimeoutS+0xa0>)

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800537c:	f100 0520 	add.w	r5, r0, #32
 8005380:	e00c      	b.n	800539c <chMBFetchTimeoutS+0x2c>
  return mbp->cnt;
 8005382:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8005384:	b98b      	cbnz	r3, 80053aa <chMBFetchTimeoutS+0x3a>
  p->prev       = qp->prev;
 8005386:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005388:	68f3      	ldr	r3, [r6, #12]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800538a:	4641      	mov	r1, r8
 800538c:	e9c3 5000 	strd	r5, r0, [r3]
  p->prev->next = p;
 8005390:	6003      	str	r3, [r0, #0]
 8005392:	2004      	movs	r0, #4
  qp->prev      = p;
 8005394:	6263      	str	r3, [r4, #36]	; 0x24
 8005396:	f7fd fbfb 	bl	8002b90 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 800539a:	b920      	cbnz	r0, 80053a6 <chMBFetchTimeoutS+0x36>
    if (mbp->reset) {
 800539c:	7d23      	ldrb	r3, [r4, #20]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0ef      	beq.n	8005382 <chMBFetchTimeoutS+0x12>
      return MSG_RESET;
 80053a2:	f06f 0001 	mvn.w	r0, #1

  return rdymsg;
}
 80053a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *msgp = *mbp->rdptr++;
 80053aa:	68e1      	ldr	r1, [r4, #12]
      mbp->cnt--;
 80053ac:	3b01      	subs	r3, #1
      *msgp = *mbp->rdptr++;
 80053ae:	1d0a      	adds	r2, r1, #4
 80053b0:	6809      	ldr	r1, [r1, #0]
 80053b2:	60e2      	str	r2, [r4, #12]
 80053b4:	6039      	str	r1, [r7, #0]
      if (mbp->rdptr >= mbp->top) {
 80053b6:	6861      	ldr	r1, [r4, #4]
      mbp->cnt--;
 80053b8:	6123      	str	r3, [r4, #16]
      if (mbp->rdptr >= mbp->top) {
 80053ba:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->buffer;
 80053bc:	bf28      	it	cs
 80053be:	6822      	ldrcs	r2, [r4, #0]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 80053c0:	f104 0118 	add.w	r1, r4, #24
        mbp->rdptr = mbp->buffer;
 80053c4:	bf28      	it	cs
 80053c6:	60e2      	strcs	r2, [r4, #12]
  return (bool)(qp->next != qp);
 80053c8:	69a2      	ldr	r2, [r4, #24]
  if (ch_queue_notempty(&tqp->queue)) {
 80053ca:	4291      	cmp	r1, r2
 80053cc:	d011      	beq.n	80053f2 <chMBFetchTimeoutS+0x82>
  tp->u.rdymsg = msg;
 80053ce:	2000      	movs	r0, #0
  qp->next       = p->next;
 80053d0:	6815      	ldr	r5, [r2, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80053d2:	6993      	ldr	r3, [r2, #24]
 80053d4:	61a5      	str	r5, [r4, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80053d6:	6894      	ldr	r4, [r2, #8]
  qp->next->prev = qp;
 80053d8:	6069      	str	r1, [r5, #4]
 80053da:	6290      	str	r0, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80053dc:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
    pqp = pqp->next;
 80053e0:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80053e2:	6899      	ldr	r1, [r3, #8]
 80053e4:	42a1      	cmp	r1, r4
 80053e6:	d2fb      	bcs.n	80053e0 <chMBFetchTimeoutS+0x70>
  p->prev       = pqp->prev;
 80053e8:	6859      	ldr	r1, [r3, #4]
 80053ea:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 80053ee:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 80053f0:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80053f2:	4b07      	ldr	r3, [pc, #28]	; (8005410 <chMBFetchTimeoutS+0xa0>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	6892      	ldr	r2, [r2, #8]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d904      	bls.n	800540a <chMBFetchTimeoutS+0x9a>
    __sch_reschedule_ahead();
 8005400:	f7fe fbde 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
      return MSG_OK;
 8005404:	2000      	movs	r0, #0
}
 8005406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MSG_OK;
 800540a:	2000      	movs	r0, #0
 800540c:	e7cb      	b.n	80053a6 <chMBFetchTimeoutS+0x36>
 800540e:	bf00      	nop
 8005410:	20001050 	.word	0x20001050
	...

08005420 <chHeapAllocAligned>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8005420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 8005424:	4e39      	ldr	r6, [pc, #228]	; (800550c <chHeapAllocAligned+0xec>)
  if (align < CH_HEAP_ALIGNMENT) {
    align = CH_HEAP_ALIGNMENT;
  }

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005426:	1dcf      	adds	r7, r1, #7
    heapp = &default_heap;
 8005428:	2800      	cmp	r0, #0
 800542a:	bf18      	it	ne
 800542c:	4606      	movne	r6, r0
 800542e:	2320      	movs	r3, #32
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8005430:	460d      	mov	r5, r1
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005432:	08ff      	lsrs	r7, r7, #3

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8005434:	f106 080c 	add.w	r8, r6, #12
 8005438:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800543c:	4640      	mov	r0, r8
 800543e:	f7ff f9b7 	bl	80047b0 <chMtxLockS>
 8005442:	2300      	movs	r3, #0
 8005444:	f383 8811 	msr	BASEPRI, r3

  /* Start of the free blocks list.*/
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8005448:	6873      	ldr	r3, [r6, #4]
 800544a:	1d31      	adds	r1, r6, #4
 800544c:	b90b      	cbnz	r3, 8005452 <chHeapAllocAligned+0x32>
 800544e:	e018      	b.n	8005482 <chHeapAllocAligned+0x62>
 8005450:	4613      	mov	r3, r2
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8005452:	6858      	ldr	r0, [r3, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005454:	f103 0c0f 	add.w	ip, r3, #15
 8005458:	f02c 0c07 	bic.w	ip, ip, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800545c:	1c42      	adds	r2, r0, #1
 800545e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005462:	f1ac 0e08 	sub.w	lr, ip, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8005466:	4572      	cmp	r2, lr
 8005468:	d907      	bls.n	800547a <chHeapAllocAligned+0x5a>
 800546a:	4664      	mov	r4, ip
 800546c:	eba2 0c0c 	sub.w	ip, r2, ip
 8005470:	ebb7 0fec 	cmp.w	r7, ip, asr #3
 8005474:	ea4f 09ec 	mov.w	r9, ip, asr #3
 8005478:	d913      	bls.n	80054a2 <chHeapAllocAligned+0x82>
  while (H_NEXT(qp) != NULL) {
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	4619      	mov	r1, r3
 800547e:	2a00      	cmp	r2, #0
 8005480:	d1e6      	bne.n	8005450 <chHeapAllocAligned+0x30>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8005482:	4640      	mov	r0, r8
 8005484:	f7ff fa2c 	bl	80048e0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8005488:	6834      	ldr	r4, [r6, #0]
 800548a:	b13c      	cbz	r4, 800549c <chHeapAllocAligned+0x7c>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 800548c:	2208      	movs	r2, #8
 800548e:	00f8      	lsls	r0, r7, #3
 8005490:	4611      	mov	r1, r2
 8005492:	47a0      	blx	r4
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8005494:	4604      	mov	r4, r0
 8005496:	b108      	cbz	r0, 800549c <chHeapAllocAligned+0x7c>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 8005498:	e940 6502 	strd	r6, r5, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 800549c:	4620      	mov	r0, r4
 800549e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
 80054a2:	4573      	cmp	r3, lr
 80054a4:	d318      	bcc.n	80054d8 <chHeapAllocAligned+0xb8>
        if (H_PAGES(hp) == pages) {
 80054a6:	42b8      	cmp	r0, r7
 80054a8:	d029      	beq.n	80054fe <chHeapAllocAligned+0xde>
      return (void *)H_BLOCK(hp);
 80054aa:	469e      	mov	lr, r3
          fp = H_BLOCK(hp) + pages;
 80054ac:	3701      	adds	r7, #1
 80054ae:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 80054b2:	f104 0008 	add.w	r0, r4, #8
 80054b6:	1a12      	subs	r2, r2, r0
          H_NEXT(fp) = H_NEXT(hp);
 80054b8:	6818      	ldr	r0, [r3, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 80054ba:	10d2      	asrs	r2, r2, #3
          H_NEXT(fp) = H_NEXT(hp);
 80054bc:	f843 0037 	str.w	r0, [r3, r7, lsl #3]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 80054c0:	6062      	str	r2, [r4, #4]
          H_NEXT(qp) = fp;
 80054c2:	600c      	str	r4, [r1, #0]
      return (void *)H_BLOCK(hp);
 80054c4:	f103 0408 	add.w	r4, r3, #8
      H_UNLOCK(heapp);
 80054c8:	4640      	mov	r0, r8
      H_HEAP(hp) = heapp;
 80054ca:	e9ce 6500 	strd	r6, r5, [lr]
      H_UNLOCK(heapp);
 80054ce:	f7ff fa07 	bl	80048e0 <chMtxUnlock>
}
 80054d2:	4620      	mov	r0, r4
 80054d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 80054d8:	f103 0208 	add.w	r2, r3, #8
 80054dc:	ebae 0202 	sub.w	r2, lr, r2
 80054e0:	10d2      	asrs	r2, r2, #3
        if (bpages > pages) {
 80054e2:	45b9      	cmp	r9, r7
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 80054e4:	605a      	str	r2, [r3, #4]
        if (bpages > pages) {
 80054e6:	d9ef      	bls.n	80054c8 <chHeapAllocAligned+0xa8>
          H_PAGES(fp) = (bpages - pages) - 1U;
 80054e8:	43fa      	mvns	r2, r7
          H_NEXT(fp) = H_NEXT(hp);
 80054ea:	6818      	ldr	r0, [r3, #0]
          fp = H_BLOCK(ahp) + pages;
 80054ec:	3701      	adds	r7, #1
 80054ee:	eb0e 01c7 	add.w	r1, lr, r7, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 80054f2:	444a      	add	r2, r9
 80054f4:	604a      	str	r2, [r1, #4]
          H_NEXT(fp) = H_NEXT(hp);
 80054f6:	f84e 0037 	str.w	r0, [lr, r7, lsl #3]
          H_NEXT(hp) = fp;
 80054fa:	6019      	str	r1, [r3, #0]
 80054fc:	e7e4      	b.n	80054c8 <chHeapAllocAligned+0xa8>
          H_NEXT(qp) = H_NEXT(hp);
 80054fe:	461c      	mov	r4, r3
 8005500:	469e      	mov	lr, r3
 8005502:	f854 3b08 	ldr.w	r3, [r4], #8
 8005506:	600b      	str	r3, [r1, #0]
 8005508:	e7de      	b.n	80054c8 <chHeapAllocAligned+0xa8>
 800550a:	bf00      	nop
 800550c:	2000115c 	.word	0x2000115c

08005510 <chThdCreateFromHeap>:
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
 8005510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005512:	4617      	mov	r7, r2
 8005514:	b087      	sub	sp, #28
  thread_t *tp;
  void *wsp;

  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8005516:	2208      	movs	r2, #8
                              tfunc_t pf, void *arg) {
 8005518:	460d      	mov	r5, r1
 800551a:	461e      	mov	r6, r3
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800551c:	f7ff ff80 	bl	8005420 <chHeapAllocAligned>
  if (wsp == NULL) {
 8005520:	4604      	mov	r4, r0
 8005522:	b1c0      	cbz	r0, 8005556 <chThdCreateFromHeap+0x46>
    return NULL;
  }

  thread_descriptor_t td = THD_DESCRIPTOR(name, wsp,
 8005524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005526:	4405      	add	r5, r0
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800552c:	9502      	str	r5, [sp, #8]
 800552e:	9305      	str	r3, [sp, #20]
 8005530:	e9cd 7000 	strd	r7, r0, [sp]
 8005534:	9603      	str	r6, [sp, #12]
 8005536:	2320      	movs	r3, #32
 8005538:	f383 8811 	msr	BASEPRI, r3
                (uint8_t *)wsp + size,
                CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800553c:	4668      	mov	r0, sp
 800553e:	f7fe feef 	bl	8004320 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8005542:	2301      	movs	r3, #1
  chSchWakeupS(tp, MSG_OK);
 8005544:	2100      	movs	r1, #0
  tp->flags = CH_FLAG_MODE_HEAP;
 8005546:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tp = chThdCreateSuspendedI(&td);
 800554a:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800554c:	f7fe fdb8 	bl	80040c0 <chSchWakeupS>
 8005550:	2300      	movs	r3, #0
 8005552:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8005556:	4620      	mov	r0, r4
 8005558:	b007      	add	sp, #28
 800555a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800555c:	0000      	movs	r0, r0
	...

08005560 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8005562:	e950 7302 	ldrd	r7, r3, [r0, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005566:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005568:	08db      	lsrs	r3, r3, #3
  qp = &heapp->header;
 800556a:	1d3d      	adds	r5, r7, #4
 800556c:	2220      	movs	r2, #32
void chHeapFree(void *p) {
 800556e:	4606      	mov	r6, r0
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005570:	f840 3c04 	str.w	r3, [r0, #-4]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8005574:	370c      	adds	r7, #12
  hp = (heap_header_t *)p - 1U;
 8005576:	f1a0 0408 	sub.w	r4, r0, #8
 800557a:	f382 8811 	msr	BASEPRI, r2
 800557e:	4638      	mov	r0, r7
 8005580:	f7ff f916 	bl	80047b0 <chMtxLockS>
 8005584:	2300      	movs	r3, #0
 8005586:	f383 8811 	msr	BASEPRI, r3
  qp = &heapp->header;
 800558a:	462b      	mov	r3, r5

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 800558c:	429d      	cmp	r5, r3
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800558e:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8005590:	d001      	beq.n	8005596 <chHeapFree+0x36>
 8005592:	42a3      	cmp	r3, r4
 8005594:	d202      	bcs.n	800559c <chHeapFree+0x3c>
 8005596:	b11a      	cbz	r2, 80055a0 <chHeapFree+0x40>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8005598:	4294      	cmp	r4, r2
 800559a:	d301      	bcc.n	80055a0 <chHeapFree+0x40>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 800559c:	4613      	mov	r3, r2
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 800559e:	e7f5      	b.n	800558c <chHeapFree+0x2c>
      H_NEXT(hp) = H_NEXT(qp);
 80055a0:	f846 2c08 	str.w	r2, [r6, #-8]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80055a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
      H_NEXT(qp) = hp;
 80055a8:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80055aa:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80055ae:	3201      	adds	r2, #1
 80055b0:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 80055b4:	4281      	cmp	r1, r0
 80055b6:	d00a      	beq.n	80055ce <chHeapFree+0x6e>
      if ((H_LIMIT(qp) == hp)) {
 80055b8:	6859      	ldr	r1, [r3, #4]
 80055ba:	1c4a      	adds	r2, r1, #1
 80055bc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80055c0:	4294      	cmp	r4, r2
 80055c2:	d011      	beq.n	80055e8 <chHeapFree+0x88>
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 80055c4:	4638      	mov	r0, r7

  return;
}
 80055c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 80055ca:	f7ff b989 	b.w	80048e0 <chMtxUnlock>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80055ce:	6848      	ldr	r0, [r1, #4]
 80055d0:	4402      	add	r2, r0
 80055d2:	f846 2c04 	str.w	r2, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80055d6:	680a      	ldr	r2, [r1, #0]
      if ((H_LIMIT(qp) == hp)) {
 80055d8:	6859      	ldr	r1, [r3, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80055da:	f846 2c08 	str.w	r2, [r6, #-8]
      if ((H_LIMIT(qp) == hp)) {
 80055de:	1c4a      	adds	r2, r1, #1
 80055e0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80055e4:	4294      	cmp	r4, r2
 80055e6:	d1ed      	bne.n	80055c4 <chHeapFree+0x64>
        H_NEXT(qp) = H_NEXT(hp);
 80055e8:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80055ec:	3201      	adds	r2, #1
 80055ee:	4411      	add	r1, r2
        H_NEXT(qp) = H_NEXT(hp);
 80055f0:	e9c3 0100 	strd	r0, r1, [r3]
  H_UNLOCK(heapp);
 80055f4:	4638      	mov	r0, r7
}
 80055f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 80055fa:	f7ff b971 	b.w	80048e0 <chMtxUnlock>
 80055fe:	bf00      	nop

08005600 <chThdRelease.part.0>:
  p->prev->next = p->next;
 8005600:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8005604:	2100      	movs	r1, #0
 8005606:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8005608:	605a      	str	r2, [r3, #4]
 800560a:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 800560e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b01      	cmp	r3, #1
 8005618:	d00d      	beq.n	8005636 <chThdRelease.part.0+0x36>
 800561a:	2b02      	cmp	r3, #2
 800561c:	d10a      	bne.n	8005634 <chThdRelease.part.0+0x34>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 800561e:	6c43      	ldr	r3, [r0, #68]	; 0x44
  return tp->wabase;
 8005620:	6a02      	ldr	r2, [r0, #32]
 8005622:	2020      	movs	r0, #32
 8005624:	f380 8811 	msr	BASEPRI, r0
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	6010      	str	r0, [r2, #0]
  mp->next = php;
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f381 8811 	msr	BASEPRI, r1
}
 8005632:	4770      	bx	lr
 8005634:	4770      	bx	lr
      chHeapFree(chThdGetWorkingAreaX(tp));
 8005636:	6a00      	ldr	r0, [r0, #32]
 8005638:	f7ff bf92 	b.w	8005560 <chHeapFree>
 800563c:	0000      	movs	r0, r0
	...

08005640 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8005640:	b538      	push	{r3, r4, r5, lr}
  return __sch_get_currthread();
 8005642:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <chThdWait+0x70>)
 8005644:	2120      	movs	r1, #32
 8005646:	4604      	mov	r4, r0
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	f381 8811 	msr	BASEPRI, r1
  if (likely(tp->state != CH_STATE_FINAL)) {
 800564e:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 8005652:	290f      	cmp	r1, #15
 8005654:	d011      	beq.n	800567a <chThdWait+0x3a>
  otp->state = newstate;
 8005656:	f04f 0c09 	mov.w	ip, #9
  ntp->state = CH_STATE_CURRENT;
 800565a:	2501      	movs	r5, #1
  p->next = lp->next;
 800565c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800565e:	6011      	str	r1, [r2, #0]
  thread_t *otp = __instance_get_currthread(oip);
 8005660:	68d9      	ldr	r1, [r3, #12]
  lp->next = p;
 8005662:	62c2      	str	r2, [r0, #44]	; 0x2c
  ch_priority_queue_t *p = pqp->next;
 8005664:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 8005666:	f881 c024 	strb.w	ip, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800566a:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 800566c:	6053      	str	r3, [r2, #4]
  pqp->next       = p->next;
 800566e:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 8005670:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8005674:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8005676:	f7fa fde3 	bl	8000240 <__port_switch>
 800567a:	2200      	movs	r2, #0
  msg = tp->u.exitcode;
 800567c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800567e:	f382 8811 	msr	BASEPRI, r2
 8005682:	2320      	movs	r3, #32
 8005684:	f383 8811 	msr	BASEPRI, r3
  tp->refs--;
 8005688:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800568c:	3b01      	subs	r3, #1
 800568e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8005692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005694:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005698:	2b0f      	cmp	r3, #15
 800569a:	d003      	beq.n	80056a4 <chThdWait+0x64>
 800569c:	f382 8811 	msr	BASEPRI, r2
}
 80056a0:	4628      	mov	r0, r5
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	4620      	mov	r0, r4
 80056a6:	f7ff ffab 	bl	8005600 <chThdRelease.part.0>
 80056aa:	4628      	mov	r0, r5
 80056ac:	bd38      	pop	{r3, r4, r5, pc}
 80056ae:	bf00      	nop
 80056b0:	20001050 	.word	0x20001050
	...

080056c0 <rt_test_010_003_execute>:
  test_set_step(1);
 80056c0:	2301      	movs	r3, #1
static void rt_test_010_003_execute(void) {
 80056c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 80056c6:	4c39      	ldr	r4, [pc, #228]	; (80057ac <rt_test_010_003_execute+0xec>)
 80056c8:	2720      	movs	r7, #32
 80056ca:	6023      	str	r3, [r4, #0]
 80056cc:	f387 8811 	msr	BASEPRI, r7
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return __sch_get_currthread()->epending |= events;
 80056d0:	4e37      	ldr	r6, [pc, #220]	; (80057b0 <rt_test_010_003_execute+0xf0>)
 80056d2:	2500      	movs	r5, #0
 80056d4:	68f2      	ldr	r2, [r6, #12]
 80056d6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80056d8:	f043 0307 	orr.w	r3, r3, #7
 80056dc:	6393      	str	r3, [r2, #56]	; 0x38
 80056de:	f385 8811 	msr	BASEPRI, r5
  test_set_step(2);
 80056e2:	2302      	movs	r3, #2
 80056e4:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 80056e6:	f008 fbeb 	bl	800dec0 <chEvtWaitOne.constprop.0>
  if (!condition) {
 80056ea:	2801      	cmp	r0, #1
 80056ec:	d145      	bne.n	800577a <rt_test_010_003_execute+0xba>
    m = chEvtWaitOne(ALL_EVENTS);
 80056ee:	f008 fbe7 	bl	800dec0 <chEvtWaitOne.constprop.0>
 80056f2:	2802      	cmp	r0, #2
 80056f4:	d141      	bne.n	800577a <rt_test_010_003_execute+0xba>
    m = chEvtWaitOne(ALL_EVENTS);
 80056f6:	f008 fbe3 	bl	800dec0 <chEvtWaitOne.constprop.0>
 80056fa:	2804      	cmp	r0, #4
 80056fc:	4680      	mov	r8, r0
 80056fe:	d13c      	bne.n	800577a <rt_test_010_003_execute+0xba>
 8005700:	f387 8811 	msr	BASEPRI, r7
 8005704:	68f3      	ldr	r3, [r6, #12]
  m = currtp->epending & events;
 8005706:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
  currtp->epending &= ~events;
 800570a:	639d      	str	r5, [r3, #56]	; 0x38
 800570c:	f385 8811 	msr	BASEPRI, r5
 8005710:	f1b9 0f00 	cmp.w	r9, #0
 8005714:	d138      	bne.n	8005788 <rt_test_010_003_execute+0xc8>
  test_set_step(3);
 8005716:	2303      	movs	r3, #3
 8005718:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800571a:	f7fe fa11 	bl	8003b40 <test_wait_tick>
 800571e:	68f3      	ldr	r3, [r6, #12]
 8005720:	4682      	mov	sl, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005722:	6899      	ldr	r1, [r3, #8]
 8005724:	4a23      	ldr	r2, [pc, #140]	; (80057b4 <rt_test_010_003_execute+0xf4>)
 8005726:	3901      	subs	r1, #1
 8005728:	4823      	ldr	r0, [pc, #140]	; (80057b8 <rt_test_010_003_execute+0xf8>)
 800572a:	f008 fc21 	bl	800df70 <chThdCreateStatic.constprop.0>
 800572e:	4d23      	ldr	r5, [pc, #140]	; (80057bc <rt_test_010_003_execute+0xfc>)
  test_set_step(4);
 8005730:	f8c4 8000 	str.w	r8, [r4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005734:	6028      	str	r0, [r5, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8005736:	f008 fbc3 	bl	800dec0 <chEvtWaitOne.constprop.0>
 800573a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	3b64      	subs	r3, #100	; 0x64
 8005742:	eba3 030a 	sub.w	r3, r3, sl
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b03      	cmp	r3, #3
 800574a:	d829      	bhi.n	80057a0 <rt_test_010_003_execute+0xe0>
 800574c:	2801      	cmp	r0, #1
 800574e:	d121      	bne.n	8005794 <rt_test_010_003_execute+0xd4>
 8005750:	f387 8811 	msr	BASEPRI, r7
 8005754:	68f3      	ldr	r3, [r6, #12]
  m = currtp->epending & events;
 8005756:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  currtp->epending &= ~events;
 8005758:	f8c3 9038 	str.w	r9, [r3, #56]	; 0x38
 800575c:	f389 8811 	msr	BASEPRI, r9
 8005760:	b996      	cbnz	r6, 8005788 <rt_test_010_003_execute+0xc8>
 8005762:	f105 0414 	add.w	r4, r5, #20
    if (threads[i] != NULL) {
 8005766:	f855 0b04 	ldr.w	r0, [r5], #4
 800576a:	b118      	cbz	r0, 8005774 <rt_test_010_003_execute+0xb4>
      chThdWait(threads[i]);
 800576c:	f7ff ff68 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8005770:	f845 6c04 	str.w	r6, [r5, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005774:	42ac      	cmp	r4, r5
 8005776:	d1f6      	bne.n	8005766 <rt_test_010_003_execute+0xa6>
 8005778:	e004      	b.n	8005784 <rt_test_010_003_execute+0xc4>
  chtest.global_fail     = true;
 800577a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800577e:	4a10      	ldr	r2, [pc, #64]	; (80057c0 <rt_test_010_003_execute+0x100>)
  chtest.global_fail     = true;
 8005780:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8005782:	60a2      	str	r2, [r4, #8]
}
 8005784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.global_fail     = true;
 8005788:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800578c:	4a0d      	ldr	r2, [pc, #52]	; (80057c4 <rt_test_010_003_execute+0x104>)
  chtest.global_fail     = true;
 800578e:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8005790:	60a2      	str	r2, [r4, #8]
 8005792:	e7f7      	b.n	8005784 <rt_test_010_003_execute+0xc4>
  chtest.global_fail     = true;
 8005794:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005798:	4a0b      	ldr	r2, [pc, #44]	; (80057c8 <rt_test_010_003_execute+0x108>)
  chtest.global_fail     = true;
 800579a:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 800579c:	60a2      	str	r2, [r4, #8]
 800579e:	e7f1      	b.n	8005784 <rt_test_010_003_execute+0xc4>
  chtest.global_fail     = true;
 80057a0:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80057a4:	4a09      	ldr	r2, [pc, #36]	; (80057cc <rt_test_010_003_execute+0x10c>)
  chtest.global_fail     = true;
 80057a6:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 80057a8:	60a2      	str	r2, [r4, #8]
 80057aa:	e7eb      	b.n	8005784 <rt_test_010_003_execute+0xc4>
 80057ac:	20001134 	.word	0x20001134
 80057b0:	20001050 	.word	0x20001050
 80057b4:	08004041 	.word	0x08004041
 80057b8:	20001270 	.word	0x20001270
 80057bc:	200019a0 	.word	0x200019a0
 80057c0:	080100b0 	.word	0x080100b0
 80057c4:	080100c4 	.word	0x080100c4
 80057c8:	080100d0 	.word	0x080100d0
 80057cc:	0800ff3c 	.word	0x0800ff3c

080057d0 <rt_test_006_001_execute>:

static void rt_test_006_001_execute(void) {
 80057d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  msg_t msg;

  /* [6.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 80057d4:	f04f 0901 	mov.w	r9, #1
 80057d8:	4d36      	ldr	r5, [pc, #216]	; (80058b4 <rt_test_006_001_execute+0xe4>)
 80057da:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80058b8 <rt_test_006_001_execute+0xe8>
  return chThdGetSelfX()->hdr.pqueue.prio;
 80057de:	68ea      	ldr	r2, [r5, #12]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 80057e0:	4b36      	ldr	r3, [pc, #216]	; (80058bc <rt_test_006_001_execute+0xec>)
 80057e2:	6891      	ldr	r1, [r2, #8]
 80057e4:	4836      	ldr	r0, [pc, #216]	; (80058c0 <rt_test_006_001_execute+0xf0>)
 80057e6:	4a37      	ldr	r2, [pc, #220]	; (80058c4 <rt_test_006_001_execute+0xf4>)
 80057e8:	3901      	subs	r1, #1
  test_set_step(1);
 80057ea:	f8c8 9000 	str.w	r9, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 80057ee:	f008 fbbf 	bl	800df70 <chThdCreateStatic.constprop.0>
 80057f2:	4c35      	ldr	r4, [pc, #212]	; (80058c8 <rt_test_006_001_execute+0xf8>)
 80057f4:	2320      	movs	r3, #32
 80057f6:	6020      	str	r0, [r4, #0]
 80057f8:	f383 8811 	msr	BASEPRI, r3
  otp->state = newstate;
 80057fc:	2303      	movs	r3, #3
  return __sch_get_currthread();
 80057fe:	68ee      	ldr	r6, [r5, #12]
  ch_priority_queue_t *p = pqp->next;
 8005800:	6828      	ldr	r0, [r5, #0]
 8005802:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
  pqp->next       = p->next;
 8005806:	6803      	ldr	r3, [r0, #0]
  *trp = tp;
 8005808:	4f30      	ldr	r7, [pc, #192]	; (80058cc <rt_test_006_001_execute+0xfc>)
  chSysSwitch(ntp, otp);
 800580a:	4631      	mov	r1, r6
  tp->u.wttrp = trp;
 800580c:	62b7      	str	r7, [r6, #40]	; 0x28
 800580e:	602b      	str	r3, [r5, #0]
  pqp->next->prev = pqp;
 8005810:	605d      	str	r5, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005812:	f880 9024 	strb.w	r9, [r0, #36]	; 0x24
  *trp = tp;
 8005816:	603e      	str	r6, [r7, #0]
  __instance_set_currthread(oip, ntp);
 8005818:	60e8      	str	r0, [r5, #12]
  chSysSwitch(ntp, otp);
 800581a:	f7fa fd11 	bl	8000240 <__port_switch>
 800581e:	2300      	movs	r3, #0
  return tp->u.rdymsg;
 8005820:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8005822:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	bb9b      	cbnz	r3, 8005892 <rt_test_006_001_execute+0xc2>
 800582a:	bb4e      	cbnz	r6, 8005880 <rt_test_006_001_execute+0xb0>
 800582c:	f104 0914 	add.w	r9, r4, #20
    if (threads[i] != NULL) {
 8005830:	f854 0b04 	ldr.w	r0, [r4], #4
 8005834:	b118      	cbz	r0, 800583e <rt_test_006_001_execute+0x6e>
      chThdWait(threads[i]);
 8005836:	f7ff ff03 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 800583a:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800583e:	45a1      	cmp	r9, r4
 8005840:	d1f6      	bne.n	8005830 <rt_test_006_001_execute+0x60>
  test_end_step(1);

  /* [6.1.2] The function chThdSuspendTimeoutS() is invoked, the thread
     is not resumed so a timeout must occur. On return the message and
     the state of the reference are tested.*/
  test_set_step(2);
 8005842:	2202      	movs	r2, #2
 8005844:	2320      	movs	r3, #32
 8005846:	f8c8 2000 	str.w	r2, [r8]
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8005852:	68ea      	ldr	r2, [r5, #12]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8005854:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005858:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800585a:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 800585c:	6297      	str	r7, [r2, #40]	; 0x28
  *trp = tp;
 800585e:	603a      	str	r2, [r7, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8005860:	f7fd f996 	bl	8002b90 <chSchGoSleepTimeoutS>
 8005864:	2300      	movs	r3, #0
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800586c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8005870:	1b5b      	subs	r3, r3, r5
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d815      	bhi.n	80058a4 <rt_test_006_001_execute+0xd4>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	b953      	cbnz	r3, 8005892 <rt_test_006_001_execute+0xc2>
 800587c:	3001      	adds	r0, #1
 800587e:	d00f      	beq.n	80058a0 <rt_test_006_001_execute+0xd0>
  chtest.global_fail     = true;
 8005880:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005884:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <rt_test_006_001_execute+0x100>)
  chtest.global_fail     = true;
 8005886:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 800588a:	f8c8 2008 	str.w	r2, [r8, #8]
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
  test_end_step(2);
}
 800588e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chtest.global_fail     = true;
 8005892:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005896:	4a0f      	ldr	r2, [pc, #60]	; (80058d4 <rt_test_006_001_execute+0x104>)
  chtest.global_fail     = true;
 8005898:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 800589c:	f8c8 2008 	str.w	r2, [r8, #8]
 80058a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chtest.global_fail     = true;
 80058a4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80058a8:	4a0b      	ldr	r2, [pc, #44]	; (80058d8 <rt_test_006_001_execute+0x108>)
  chtest.global_fail     = true;
 80058aa:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 80058ae:	f8c8 2008 	str.w	r2, [r8, #8]
 80058b2:	e7f5      	b.n	80058a0 <rt_test_006_001_execute+0xd0>
 80058b4:	20001050 	.word	0x20001050
 80058b8:	20001134 	.word	0x20001134
 80058bc:	08010068 	.word	0x08010068
 80058c0:	20001270 	.word	0x20001270
 80058c4:	08003f61 	.word	0x08003f61
 80058c8:	200019a0 	.word	0x200019a0
 80058cc:	200019b4 	.word	0x200019b4
 80058d0:	08010010 	.word	0x08010010
 80058d4:	080100e4 	.word	0x080100e4
 80058d8:	0800ff3c 	.word	0x0800ff3c
 80058dc:	00000000 	.word	0x00000000

080058e0 <rt_test_007_005_teardown>:
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	2600      	movs	r6, #0
 80058e4:	4c06      	ldr	r4, [pc, #24]	; (8005900 <rt_test_007_005_teardown+0x20>)
 80058e6:	f104 0514 	add.w	r5, r4, #20
 80058ea:	f854 0b04 	ldr.w	r0, [r4], #4
 80058ee:	b118      	cbz	r0, 80058f8 <rt_test_007_005_teardown+0x18>
 80058f0:	f7ff fea6 	bl	8005640 <chThdWait>
 80058f4:	f844 6c04 	str.w	r6, [r4, #-4]
 80058f8:	42ac      	cmp	r4, r5
 80058fa:	d1f6      	bne.n	80058ea <rt_test_007_005_teardown+0xa>
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	bf00      	nop
 8005900:	200019a0 	.word	0x200019a0
	...

08005910 <rt_test_007_006_teardown>:
static void rt_test_007_006_teardown(void) {
 8005910:	b570      	push	{r4, r5, r6, lr}
      threads[i] = NULL;
 8005912:	2600      	movs	r6, #0
 8005914:	4c06      	ldr	r4, [pc, #24]	; (8005930 <rt_test_007_006_teardown+0x20>)
 8005916:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800591a:	f854 0b04 	ldr.w	r0, [r4], #4
 800591e:	b118      	cbz	r0, 8005928 <rt_test_007_006_teardown+0x18>
      chThdWait(threads[i]);
 8005920:	f7ff fe8e 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8005924:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005928:	42ac      	cmp	r4, r5
 800592a:	d1f6      	bne.n	800591a <rt_test_007_006_teardown+0xa>
}
 800592c:	bd70      	pop	{r4, r5, r6, pc}
 800592e:	bf00      	nop
 8005930:	200019a0 	.word	0x200019a0
	...

08005940 <rt_test_008_004_teardown>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	2600      	movs	r6, #0
 8005944:	4c06      	ldr	r4, [pc, #24]	; (8005960 <rt_test_008_004_teardown+0x20>)
 8005946:	f104 0514 	add.w	r5, r4, #20
 800594a:	f854 0b04 	ldr.w	r0, [r4], #4
 800594e:	b118      	cbz	r0, 8005958 <rt_test_008_004_teardown+0x18>
 8005950:	f7ff fe76 	bl	8005640 <chThdWait>
 8005954:	f844 6c04 	str.w	r6, [r4, #-4]
 8005958:	42ac      	cmp	r4, r5
 800595a:	d1f6      	bne.n	800594a <rt_test_008_004_teardown+0xa>
 800595c:	bd70      	pop	{r4, r5, r6, pc}
 800595e:	bf00      	nop
 8005960:	200019a0 	.word	0x200019a0
	...

08005970 <rt_test_010_004_execute>:
static void rt_test_010_004_execute(void) {
 8005970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005974:	2701      	movs	r7, #1
 8005976:	4d52      	ldr	r5, [pc, #328]	; (8005ac0 <rt_test_010_004_execute+0x150>)
 8005978:	2220      	movs	r2, #32
 800597a:	602f      	str	r7, [r5, #0]
 800597c:	f382 8811 	msr	BASEPRI, r2
 8005980:	4c50      	ldr	r4, [pc, #320]	; (8005ac4 <rt_test_010_004_execute+0x154>)
 8005982:	2000      	movs	r0, #0
 8005984:	68e1      	ldr	r1, [r4, #12]
 8005986:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8005988:	f043 0305 	orr.w	r3, r3, #5
 800598c:	638b      	str	r3, [r1, #56]	; 0x38
 800598e:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8005992:	2302      	movs	r3, #2
 8005994:	68e6      	ldr	r6, [r4, #12]
 8005996:	602b      	str	r3, [r5, #0]
 8005998:	f382 8811 	msr	BASEPRI, r2
  m = currtp->epending & events;
 800599c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
  if (m == (eventmask_t)0) {
 800599e:	2a00      	cmp	r2, #0
 80059a0:	d053      	beq.n	8005a4a <rt_test_010_004_execute+0xda>
  currtp->epending &= ~m;
 80059a2:	2300      	movs	r3, #0
 80059a4:	63b3      	str	r3, [r6, #56]	; 0x38
 80059a6:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 80059aa:	2a05      	cmp	r2, #5
 80059ac:	d146      	bne.n	8005a3c <rt_test_010_004_execute+0xcc>
 80059ae:	2620      	movs	r6, #32
 80059b0:	f386 8811 	msr	BASEPRI, r6
 80059b4:	68e2      	ldr	r2, [r4, #12]
  m = currtp->epending & events;
 80059b6:	6b91      	ldr	r1, [r2, #56]	; 0x38
  currtp->epending &= ~events;
 80059b8:	6393      	str	r3, [r2, #56]	; 0x38
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	2900      	cmp	r1, #0
 80059c0:	d155      	bne.n	8005a6e <rt_test_010_004_execute+0xfe>
  test_set_step(3);
 80059c2:	2303      	movs	r3, #3
 80059c4:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80059c6:	f7fe f8bb 	bl	8003b40 <test_wait_tick>
 80059ca:	68e3      	ldr	r3, [r4, #12]
 80059cc:	4607      	mov	r7, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80059ce:	6899      	ldr	r1, [r3, #8]
 80059d0:	4a3d      	ldr	r2, [pc, #244]	; (8005ac8 <rt_test_010_004_execute+0x158>)
 80059d2:	3901      	subs	r1, #1
 80059d4:	483d      	ldr	r0, [pc, #244]	; (8005acc <rt_test_010_004_execute+0x15c>)
 80059d6:	f008 facb 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_set_step(4);
 80059da:	2304      	movs	r3, #4
 80059dc:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80059de:	4b3c      	ldr	r3, [pc, #240]	; (8005ad0 <rt_test_010_004_execute+0x160>)
 80059e0:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80059e4:	6018      	str	r0, [r3, #0]
 80059e6:	f386 8811 	msr	BASEPRI, r6
  m = currtp->epending & events;
 80059ea:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
  if (m == (eventmask_t)0) {
 80059ee:	2a00      	cmp	r2, #0
 80059f0:	d04a      	beq.n	8005a88 <rt_test_010_004_execute+0x118>
  currtp->epending &= ~m;
 80059f2:	2100      	movs	r1, #0
 80059f4:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
 80059f8:	f381 8811 	msr	BASEPRI, r1
 80059fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	3b64      	subs	r3, #100	; 0x64
 8005a04:	1bd8      	subs	r0, r3, r7
 8005a06:	b280      	uxth	r0, r0
 8005a08:	2803      	cmp	r0, #3
 8005a0a:	d837      	bhi.n	8005a7c <rt_test_010_004_execute+0x10c>
 8005a0c:	2a01      	cmp	r2, #1
 8005a0e:	d150      	bne.n	8005ab2 <rt_test_010_004_execute+0x142>
 8005a10:	2320      	movs	r3, #32
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	68e3      	ldr	r3, [r4, #12]
  m = currtp->epending & events;
 8005a18:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  currtp->epending &= ~events;
 8005a1a:	6399      	str	r1, [r3, #56]	; 0x38
 8005a1c:	f381 8811 	msr	BASEPRI, r1
 8005a20:	bb2e      	cbnz	r6, 8005a6e <rt_test_010_004_execute+0xfe>
 8005a22:	4c2b      	ldr	r4, [pc, #172]	; (8005ad0 <rt_test_010_004_execute+0x160>)
 8005a24:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8005a28:	f854 0b04 	ldr.w	r0, [r4], #4
 8005a2c:	b118      	cbz	r0, 8005a36 <rt_test_010_004_execute+0xc6>
      chThdWait(threads[i]);
 8005a2e:	f7ff fe07 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8005a32:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005a36:	42a5      	cmp	r5, r4
 8005a38:	d1f6      	bne.n	8005a28 <rt_test_010_004_execute+0xb8>
 8005a3a:	e004      	b.n	8005a46 <rt_test_010_004_execute+0xd6>
  chtest.global_fail     = true;
 8005a3c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005a40:	4a24      	ldr	r2, [pc, #144]	; (8005ad4 <rt_test_010_004_execute+0x164>)
  chtest.global_fail     = true;
 8005a42:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8005a44:	60aa      	str	r2, [r5, #8]
}
 8005a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    currtp->u.ewmask = events;
 8005a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  otp->state = newstate;
 8005a4e:	230a      	movs	r3, #10
  thread_t *otp = __instance_get_currthread(oip);
 8005a50:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005a52:	6820      	ldr	r0, [r4, #0]
 8005a54:	62b2      	str	r2, [r6, #40]	; 0x28
  otp->state = newstate;
 8005a56:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8005a5a:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8005a5c:	605c      	str	r4, [r3, #4]
  pqp->next       = p->next;
 8005a5e:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8005a60:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8005a64:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005a66:	f7fa fbeb 	bl	8000240 <__port_switch>
    m = currtp->epending & events;
 8005a6a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8005a6c:	e799      	b.n	80059a2 <rt_test_010_004_execute+0x32>
  chtest.global_fail     = true;
 8005a6e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005a72:	4a19      	ldr	r2, [pc, #100]	; (8005ad8 <rt_test_010_004_execute+0x168>)
  chtest.global_fail     = true;
 8005a74:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8005a76:	60aa      	str	r2, [r5, #8]
 8005a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.global_fail     = true;
 8005a7c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005a80:	4a16      	ldr	r2, [pc, #88]	; (8005adc <rt_test_010_004_execute+0x16c>)
  chtest.global_fail     = true;
 8005a82:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8005a84:	60aa      	str	r2, [r5, #8]
 8005a86:	e7de      	b.n	8005a46 <rt_test_010_004_execute+0xd6>
  otp->state = newstate;
 8005a88:	230a      	movs	r3, #10
    currtp->u.ewmask = events;
 8005a8a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  ntp->state = CH_STATE_CURRENT;
 8005a8e:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 8005a90:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005a92:	6820      	ldr	r0, [r4, #0]
 8005a94:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
  otp->state = newstate;
 8005a98:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8005a9c:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8005a9e:	605c      	str	r4, [r3, #4]
  pqp->next       = p->next;
 8005aa0:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8005aa2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8005aa6:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005aa8:	f7fa fbca 	bl	8000240 <__port_switch>
    m = currtp->epending & events;
 8005aac:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8005ab0:	e79f      	b.n	80059f2 <rt_test_010_004_execute+0x82>
  chtest.global_fail     = true;
 8005ab2:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005ab6:	4a0a      	ldr	r2, [pc, #40]	; (8005ae0 <rt_test_010_004_execute+0x170>)
  chtest.global_fail     = true;
 8005ab8:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8005aba:	60aa      	str	r2, [r5, #8]
 8005abc:	e7c3      	b.n	8005a46 <rt_test_010_004_execute+0xd6>
 8005abe:	bf00      	nop
 8005ac0:	20001134 	.word	0x20001134
 8005ac4:	20001050 	.word	0x20001050
 8005ac8:	08004041 	.word	0x08004041
 8005acc:	20001270 	.word	0x20001270
 8005ad0:	200019a0 	.word	0x200019a0
 8005ad4:	080100f0 	.word	0x080100f0
 8005ad8:	080100c4 	.word	0x080100c4
 8005adc:	0800ff3c 	.word	0x0800ff3c
 8005ae0:	080100d0 	.word	0x080100d0
	...

08005af0 <rt_test_010_005_execute>:
static void rt_test_010_005_execute(void) {
 8005af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005af4:	2701      	movs	r7, #1
 8005af6:	4d51      	ldr	r5, [pc, #324]	; (8005c3c <rt_test_010_005_execute+0x14c>)
 8005af8:	2220      	movs	r2, #32
 8005afa:	602f      	str	r7, [r5, #0]
 8005afc:	f382 8811 	msr	BASEPRI, r2
 8005b00:	4c4f      	ldr	r4, [pc, #316]	; (8005c40 <rt_test_010_005_execute+0x150>)
 8005b02:	2000      	movs	r0, #0
 8005b04:	68e1      	ldr	r1, [r4, #12]
 8005b06:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8005b08:	f043 0305 	orr.w	r3, r3, #5
 8005b0c:	638b      	str	r3, [r1, #56]	; 0x38
 8005b0e:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8005b12:	2302      	movs	r3, #2
 8005b14:	68e6      	ldr	r6, [r4, #12]
 8005b16:	602b      	str	r3, [r5, #0]
 8005b18:	f382 8811 	msr	BASEPRI, r2
  if ((currtp->epending & events) != events) {
 8005b1c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8005b1e:	f003 0205 	and.w	r2, r3, #5
 8005b22:	2a05      	cmp	r2, #5
 8005b24:	d00f      	beq.n	8005b46 <rt_test_010_005_execute+0x56>
    currtp->u.ewmask = events;
 8005b26:	2205      	movs	r2, #5
  otp->state = newstate;
 8005b28:	230b      	movs	r3, #11
  thread_t *otp = __instance_get_currthread(oip);
 8005b2a:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005b2c:	6820      	ldr	r0, [r4, #0]
 8005b2e:	62b2      	str	r2, [r6, #40]	; 0x28
  otp->state = newstate;
 8005b30:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8005b34:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8005b36:	605c      	str	r4, [r3, #4]
  pqp->next       = p->next;
 8005b38:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8005b3a:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8005b3e:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005b40:	f7fa fb7e 	bl	8000240 <__port_switch>
  currtp->epending &= ~events;
 8005b44:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8005b46:	f023 0305 	bic.w	r3, r3, #5
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	63b3      	str	r3, [r6, #56]	; 0x38
 8005b4e:	f382 8811 	msr	BASEPRI, r2
 8005b52:	2620      	movs	r6, #32
 8005b54:	f386 8811 	msr	BASEPRI, r6
 8005b58:	68e3      	ldr	r3, [r4, #12]
  m = currtp->epending & events;
 8005b5a:	6b99      	ldr	r1, [r3, #56]	; 0x38
  currtp->epending &= ~events;
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
 8005b5e:	f382 8811 	msr	BASEPRI, r2
  if (!condition) {
 8005b62:	2900      	cmp	r1, #0
 8005b64:	d163      	bne.n	8005c2e <rt_test_010_005_execute+0x13e>
  test_set_step(3);
 8005b66:	2303      	movs	r3, #3
 8005b68:	602b      	str	r3, [r5, #0]
 8005b6a:	f386 8811 	msr	BASEPRI, r6
 8005b6e:	68e2      	ldr	r2, [r4, #12]
 8005b70:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005b72:	f043 0304 	orr.w	r3, r3, #4
 8005b76:	6393      	str	r3, [r2, #56]	; 0x38
 8005b78:	f381 8811 	msr	BASEPRI, r1
  test_set_step(4);
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005b80:	f7fd ffde 	bl	8003b40 <test_wait_tick>
 8005b84:	68e3      	ldr	r3, [r4, #12]
 8005b86:	4607      	mov	r7, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005b88:	6899      	ldr	r1, [r3, #8]
 8005b8a:	4a2e      	ldr	r2, [pc, #184]	; (8005c44 <rt_test_010_005_execute+0x154>)
 8005b8c:	3901      	subs	r1, #1
 8005b8e:	482e      	ldr	r0, [pc, #184]	; (8005c48 <rt_test_010_005_execute+0x158>)
 8005b90:	f008 f9ee 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_set_step(5);
 8005b94:	2205      	movs	r2, #5
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005b96:	4b2d      	ldr	r3, [pc, #180]	; (8005c4c <rt_test_010_005_execute+0x15c>)
 8005b98:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8005b9c:	6018      	str	r0, [r3, #0]
  test_set_step(5);
 8005b9e:	602a      	str	r2, [r5, #0]
 8005ba0:	f386 8811 	msr	BASEPRI, r6
  if ((currtp->epending & events) != events) {
 8005ba4:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8005ba8:	ea03 0102 	and.w	r1, r3, r2
 8005bac:	4291      	cmp	r1, r2
 8005bae:	d124      	bne.n	8005bfa <rt_test_010_005_execute+0x10a>
  currtp->epending &= ~events;
 8005bb0:	f023 0305 	bic.w	r3, r3, #5
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
 8005bba:	f382 8811 	msr	BASEPRI, r2
 8005bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	3b64      	subs	r3, #100	; 0x64
 8005bc6:	1bd8      	subs	r0, r3, r7
 8005bc8:	b280      	uxth	r0, r0
 8005bca:	2803      	cmp	r0, #3
 8005bcc:	d828      	bhi.n	8005c20 <rt_test_010_005_execute+0x130>
 8005bce:	2320      	movs	r3, #32
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	68e3      	ldr	r3, [r4, #12]
  m = currtp->epending & events;
 8005bd6:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  currtp->epending &= ~events;
 8005bd8:	639a      	str	r2, [r3, #56]	; 0x38
 8005bda:	f382 8811 	msr	BASEPRI, r2
 8005bde:	bb36      	cbnz	r6, 8005c2e <rt_test_010_005_execute+0x13e>
 8005be0:	4c1a      	ldr	r4, [pc, #104]	; (8005c4c <rt_test_010_005_execute+0x15c>)
 8005be2:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8005be6:	f854 0b04 	ldr.w	r0, [r4], #4
 8005bea:	b118      	cbz	r0, 8005bf4 <rt_test_010_005_execute+0x104>
      chThdWait(threads[i]);
 8005bec:	f7ff fd28 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8005bf0:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005bf4:	42a5      	cmp	r5, r4
 8005bf6:	d1f6      	bne.n	8005be6 <rt_test_010_005_execute+0xf6>
 8005bf8:	e017      	b.n	8005c2a <rt_test_010_005_execute+0x13a>
  otp->state = newstate;
 8005bfa:	230b      	movs	r3, #11
    currtp->u.ewmask = events;
 8005bfc:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
  ntp->state = CH_STATE_CURRENT;
 8005c00:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 8005c02:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005c04:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8005c06:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8005c0a:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8005c0c:	605c      	str	r4, [r3, #4]
  pqp->next       = p->next;
 8005c0e:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8005c10:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8005c14:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005c16:	f7fa fb13 	bl	8000240 <__port_switch>
  currtp->epending &= ~events;
 8005c1a:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
}
 8005c1e:	e7c7      	b.n	8005bb0 <rt_test_010_005_execute+0xc0>
  chtest.global_fail     = true;
 8005c20:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005c24:	4a0a      	ldr	r2, [pc, #40]	; (8005c50 <rt_test_010_005_execute+0x160>)
  chtest.global_fail     = true;
 8005c26:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8005c28:	60aa      	str	r2, [r5, #8]
}
 8005c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.global_fail     = true;
 8005c2e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005c32:	4a08      	ldr	r2, [pc, #32]	; (8005c54 <rt_test_010_005_execute+0x164>)
  chtest.global_fail     = true;
 8005c34:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8005c36:	60aa      	str	r2, [r5, #8]
 8005c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c3c:	20001134 	.word	0x20001134
 8005c40:	20001050 	.word	0x20001050
 8005c44:	08004041 	.word	0x08004041
 8005c48:	20001270 	.word	0x20001270
 8005c4c:	200019a0 	.word	0x200019a0
 8005c50:	0800ff3c 	.word	0x0800ff3c
 8005c54:	080100c4 	.word	0x080100c4
	...

08005c60 <rt_test_010_007_execute>:

static void rt_test_010_007_execute(void) {
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [10.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8005c64:	f04f 0901 	mov.w	r9, #1
 8005c68:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8005e20 <rt_test_010_007_execute+0x1c0>
 8005c6c:	2520      	movs	r5, #32
static void rt_test_010_007_execute(void) {
 8005c6e:	b08d      	sub	sp, #52	; 0x34
  test_set_step(1);
 8005c70:	f8c8 9000 	str.w	r9, [r8]
 8005c74:	f385 8811 	msr	BASEPRI, r5
 8005c78:	4c6a      	ldr	r4, [pc, #424]	; (8005e24 <rt_test_010_007_execute+0x1c4>)
  elp->wflags   = wflags;
 8005c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c7e:	68e3      	ldr	r3, [r4, #12]
  elp->next     = esp->next;
 8005c80:	4e69      	ldr	r6, [pc, #420]	; (8005e28 <rt_test_010_007_execute+0x1c8>)
  elp->listener = currtp;
 8005c82:	9308      	str	r3, [sp, #32]
  elp->flags    = (eventflags_t)0;
 8005c84:	2300      	movs	r3, #0
  elp->next     = esp->next;
 8005c86:	6831      	ldr	r1, [r6, #0]
  esp->next     = elp;
 8005c88:	f10d 0b1c 	add.w	fp, sp, #28
  elp->wflags   = wflags;
 8005c8c:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  elp->events   = events;
 8005c90:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  elp->next     = esp->next;
 8005c94:	9107      	str	r1, [sp, #28]
  esp->next     = elp;
 8005c96:	f8c6 b000 	str.w	fp, [r6]
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f385 8811 	msr	BASEPRI, r5
  elp->flags    = (eventflags_t)0;
 8005ca2:	e9cd 3205 	strd	r3, r2, [sp, #20]
  elp->events   = events;
 8005ca6:	2204      	movs	r2, #4
  elp->next     = esp->next;
 8005ca8:	4f60      	ldr	r7, [pc, #384]	; (8005e2c <rt_test_010_007_execute+0x1cc>)
  elp->events   = events;
 8005caa:	9204      	str	r2, [sp, #16]
 8005cac:	68e2      	ldr	r2, [r4, #12]
  esp->next     = elp;
 8005cae:	f10d 0a08 	add.w	sl, sp, #8
  elp->listener = currtp;
 8005cb2:	9203      	str	r2, [sp, #12]
  elp->next     = esp->next;
 8005cb4:	683a      	ldr	r2, [r7, #0]
  esp->next     = elp;
 8005cb6:	f8c7 a000 	str.w	sl, [r7]
  elp->next     = esp->next;
 8005cba:	9202      	str	r2, [sp, #8]
 8005cbc:	f383 8811 	msr	BASEPRI, r3
  test_end_step(1);

  /* [10.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f8c8 2000 	str.w	r2, [r8]
 8005cc6:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8005cca:	2008      	movs	r0, #8
 8005ccc:	4649      	mov	r1, r9
 8005cce:	f7fc ff5f 	bl	8002b90 <chSchGoSleepTimeoutS>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f385 8811 	msr	BASEPRI, r5
 8005cdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	9200      	str	r2, [sp, #0]
 8005ce6:	f383 8811 	msr	BASEPRI, r3
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005cea:	68e3      	ldr	r3, [r4, #12]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005cec:	4a50      	ldr	r2, [pc, #320]	; (8005e30 <rt_test_010_007_execute+0x1d0>)
 8005cee:	6899      	ldr	r1, [r3, #8]
 8005cf0:	4850      	ldr	r0, [pc, #320]	; (8005e34 <rt_test_010_007_execute+0x1d4>)
 8005cf2:	4b51      	ldr	r3, [pc, #324]	; (8005e38 <rt_test_010_007_execute+0x1d8>)
 8005cf4:	3901      	subs	r1, #1
 8005cf6:	f008 f93b 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_end_step(2);

  /* [10.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005d00:	4b4e      	ldr	r3, [pc, #312]	; (8005e3c <rt_test_010_007_execute+0x1dc>)
  return __sch_get_currthread();
 8005d02:	68e2      	ldr	r2, [r4, #12]
 8005d04:	6018      	str	r0, [r3, #0]
 8005d06:	f385 8811 	msr	BASEPRI, r5
  if ((currtp->epending & events) != events) {
 8005d0a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005d0c:	f003 0105 	and.w	r1, r3, #5
 8005d10:	2905      	cmp	r1, #5
 8005d12:	d011      	beq.n	8005d38 <rt_test_010_007_execute+0xd8>
    currtp->u.ewmask = events;
 8005d14:	2305      	movs	r3, #5
 8005d16:	6293      	str	r3, [r2, #40]	; 0x28
  otp->state = newstate;
 8005d18:	230b      	movs	r3, #11
  thread_t *otp = __instance_get_currthread(oip);
 8005d1a:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005d1c:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8005d1e:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8005d22:	6803      	ldr	r3, [r0, #0]
 8005d24:	9201      	str	r2, [sp, #4]
  pqp->next->prev = pqp;
 8005d26:	605c      	str	r4, [r3, #4]
  pqp->next       = p->next;
 8005d28:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8005d2a:	f880 9024 	strb.w	r9, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8005d2e:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005d30:	f7fa fa86 	bl	8000240 <__port_switch>
  currtp->epending &= ~events;
 8005d34:	9a01      	ldr	r2, [sp, #4]
 8005d36:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005d38:	f023 0305 	bic.w	r3, r3, #5
 8005d3c:	6393      	str	r3, [r2, #56]	; 0x38
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f382 8811 	msr	BASEPRI, r2
 8005d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	9900      	ldr	r1, [sp, #0]
 8005d4c:	3b64      	subs	r3, #100	; 0x64
 8005d4e:	1a5b      	subs	r3, r3, r1
  if (!condition) {
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d844      	bhi.n	8005de0 <rt_test_010_007_execute+0x180>
 8005d56:	2320      	movs	r3, #32
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	68e3      	ldr	r3, [r4, #12]
  m = currtp->epending & events;
 8005d5e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  currtp->epending &= ~events;
 8005d60:	639a      	str	r2, [r3, #56]	; 0x38
 8005d62:	f382 8811 	msr	BASEPRI, r2
 8005d66:	2d00      	cmp	r5, #0
 8005d68:	d144      	bne.n	8005df4 <rt_test_010_007_execute+0x194>
 8005d6a:	4c34      	ldr	r4, [pc, #208]	; (8005e3c <rt_test_010_007_execute+0x1dc>)
 8005d6c:	f104 0914 	add.w	r9, r4, #20
    if (threads[i] != NULL) {
 8005d70:	f854 0b04 	ldr.w	r0, [r4], #4
 8005d74:	b118      	cbz	r0, 8005d7e <rt_test_010_007_execute+0x11e>
      chThdWait(threads[i]);
 8005d76:	f7ff fc63 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8005d7a:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005d7e:	454c      	cmp	r4, r9
 8005d80:	d1f6      	bne.n	8005d70 <rt_test_010_007_execute+0x110>
    test_wait_threads();
  }
  test_end_step(3);

  /* [10.7.4] Unregistering from the Event Sources.*/
  test_set_step(4);
 8005d82:	2304      	movs	r3, #4
 8005d84:	f8c8 3000 	str.w	r3, [r8]
 8005d88:	2320      	movs	r3, #32
 8005d8a:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8005d8e:	4b26      	ldr	r3, [pc, #152]	; (8005e28 <rt_test_010_007_execute+0x1c8>)
}
 8005d90:	e001      	b.n	8005d96 <rt_test_010_007_execute+0x136>
    if (p->next == elp) {
 8005d92:	455b      	cmp	r3, fp
 8005d94:	d038      	beq.n	8005e08 <rt_test_010_007_execute+0x1a8>
  while (p->next != (event_listener_t *)esp) {
 8005d96:	461a      	mov	r2, r3
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	42b3      	cmp	r3, r6
 8005d9c:	d1f9      	bne.n	8005d92 <rt_test_010_007_execute+0x132>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	2320      	movs	r3, #32
 8005da6:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8005daa:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <rt_test_010_007_execute+0x1cc>)
 8005dac:	e001      	b.n	8005db2 <rt_test_010_007_execute+0x152>
    if (p->next == elp) {
 8005dae:	4553      	cmp	r3, sl
 8005db0:	d02d      	beq.n	8005e0e <rt_test_010_007_execute+0x1ae>
  while (p->next != (event_listener_t *)esp) {
 8005db2:	461a      	mov	r2, r3
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	42bb      	cmp	r3, r7
 8005db8:	d1f9      	bne.n	8005dae <rt_test_010_007_execute+0x14e>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	6833      	ldr	r3, [r6, #0]
 8005dc2:	42b3      	cmp	r3, r6
 8005dc4:	d102      	bne.n	8005dcc <rt_test_010_007_execute+0x16c>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	42bb      	cmp	r3, r7
 8005dca:	d010      	beq.n	8005dee <rt_test_010_007_execute+0x18e>
  chtest.global_fail     = true;
 8005dcc:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005dd0:	4a1b      	ldr	r2, [pc, #108]	; (8005e40 <rt_test_010_007_execute+0x1e0>)
  chtest.global_fail     = true;
 8005dd2:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8005dd6:	f8c8 2008 	str.w	r2, [r8, #8]
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
  test_end_step(4);
}
 8005dda:	b00d      	add	sp, #52	; 0x34
 8005ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.global_fail     = true;
 8005de0:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005de4:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <rt_test_010_007_execute+0x1e4>)
  chtest.global_fail     = true;
 8005de6:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8005dea:	f8c8 2008 	str.w	r2, [r8, #8]
 8005dee:	b00d      	add	sp, #52	; 0x34
 8005df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.global_fail     = true;
 8005df4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005df8:	4a13      	ldr	r2, [pc, #76]	; (8005e48 <rt_test_010_007_execute+0x1e8>)
  chtest.global_fail     = true;
 8005dfa:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8005dfe:	f8c8 2008 	str.w	r2, [r8, #8]
 8005e02:	b00d      	add	sp, #52	; 0x34
 8005e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p->next = elp->next;
 8005e08:	9b07      	ldr	r3, [sp, #28]
 8005e0a:	6013      	str	r3, [r2, #0]
      break;
 8005e0c:	e7c7      	b.n	8005d9e <rt_test_010_007_execute+0x13e>
      p->next = elp->next;
 8005e0e:	9b02      	ldr	r3, [sp, #8]
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	2300      	movs	r3, #0
 8005e14:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8005e18:	6833      	ldr	r3, [r6, #0]
 8005e1a:	42b3      	cmp	r3, r6
 8005e1c:	d0d3      	beq.n	8005dc6 <rt_test_010_007_execute+0x166>
 8005e1e:	e7d5      	b.n	8005dcc <rt_test_010_007_execute+0x16c>
 8005e20:	20001134 	.word	0x20001134
 8005e24:	20001050 	.word	0x20001050
 8005e28:	20000808 	.word	0x20000808
 8005e2c:	2000080c 	.word	0x2000080c
 8005e30:	08005231 	.word	0x08005231
 8005e34:	20001270 	.word	0x20001270
 8005e38:	08010068 	.word	0x08010068
 8005e3c:	200019a0 	.word	0x200019a0
 8005e40:	0800fef4 	.word	0x0800fef4
 8005e44:	0800ff3c 	.word	0x0800ff3c
 8005e48:	080100c4 	.word	0x080100c4
 8005e4c:	00000000 	.word	0x00000000

08005e50 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8005e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8005e54:	4c17      	ldr	r4, [pc, #92]	; (8005eb4 <chHeapStatus+0x64>)
 8005e56:	2320      	movs	r3, #32
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	bf18      	it	ne
 8005e5c:	4604      	movne	r4, r0
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8005e5e:	460f      	mov	r7, r1
 8005e60:	4616      	mov	r6, r2
  }

  H_LOCK(heapp);
 8005e62:	f104 080c 	add.w	r8, r4, #12
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	f7fe fca0 	bl	80047b0 <chMtxLockS>
 8005e70:	f04f 0c00 	mov.w	ip, #0
 8005e74:	f38c 8811 	msr	BASEPRI, ip
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8005e78:	6863      	ldr	r3, [r4, #4]
 8005e7a:	b1bb      	cbz	r3, 8005eac <chHeapStatus+0x5c>
  tpages = 0U;
 8005e7c:	46e6      	mov	lr, ip
  n = 0U;
 8005e7e:	4665      	mov	r5, ip
  while (H_NEXT(qp) != NULL) {
 8005e80:	cb18      	ldmia	r3, {r3, r4}
 8005e82:	45a4      	cmp	ip, r4
 8005e84:	bf38      	it	cc
 8005e86:	46a4      	movcc	ip, r4
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 8005e88:	3501      	adds	r5, #1
    tpages += pages;
 8005e8a:	44a6      	add	lr, r4
  while (H_NEXT(qp) != NULL) {
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1f7      	bne.n	8005e80 <chHeapStatus+0x30>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8005e90:	b117      	cbz	r7, 8005e98 <chHeapStatus+0x48>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8005e92:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8005e96:	603b      	str	r3, [r7, #0]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8005e98:	b116      	cbz	r6, 8005ea0 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8005e9a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8005e9e:	6033      	str	r3, [r6, #0]
  }
  H_UNLOCK(heapp);
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	f7fe fd1d 	bl	80048e0 <chMtxUnlock>

  return n;
}
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  lpages = 0U;
 8005eac:	469c      	mov	ip, r3
  tpages = 0U;
 8005eae:	469e      	mov	lr, r3
  n = 0U;
 8005eb0:	461d      	mov	r5, r3
 8005eb2:	e7ed      	b.n	8005e90 <chHeapStatus+0x40>
 8005eb4:	2000115c 	.word	0x2000115c
	...

08005ec0 <chGuardedPoolAllocTimeout>:
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
                                sysinterval_t timeout) {
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	2320      	movs	r3, #32
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8005eca:	6882      	ldr	r2, [r0, #8]
 8005ecc:	1e53      	subs	r3, r2, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	6083      	str	r3, [r0, #8]
 8005ed2:	db07      	blt.n	8005ee4 <chGuardedPoolAllocTimeout+0x24>
  objp = mp->next;
 8005ed4:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 8005ed6:	b1c8      	cbz	r0, 8005f0c <chGuardedPoolAllocTimeout+0x4c>
    mp->next = mp->next->next;
 8005ed8:	6803      	ldr	r3, [r0, #0]
 8005eda:	60e3      	str	r3, [r4, #12]
 8005edc:	2300      	movs	r3, #0
 8005ede:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8005ee2:	bd10      	pop	{r4, pc}
    if (unlikely(TIME_IMMEDIATE == timeout)) {
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	b1d9      	cbz	r1, 8005f20 <chGuardedPoolAllocTimeout+0x60>
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <chGuardedPoolAllocTimeout+0x64>)
  p->prev       = qp->prev;
 8005eea:	6862      	ldr	r2, [r4, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8005eee:	2005      	movs	r0, #5
 8005ef0:	e9c3 4200 	strd	r4, r2, [r3]
    currtp->u.wtsemp = sp;
 8005ef4:	629c      	str	r4, [r3, #40]	; 0x28
  p->prev->next = p;
 8005ef6:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8005ef8:	6063      	str	r3, [r4, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8005efa:	f7fc fe49 	bl	8002b90 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d0e8      	beq.n	8005ed4 <chGuardedPoolAllocTimeout+0x14>
    return NULL;
 8005f02:	2000      	movs	r0, #0
 8005f04:	2300      	movs	r3, #0
 8005f06:	f383 8811 	msr	BASEPRI, r3
}
 8005f0a:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
 8005f0c:	69a3      	ldr	r3, [r4, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0f7      	beq.n	8005f02 <chGuardedPoolAllocTimeout+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 8005f12:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8005f16:	4798      	blx	r3
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f383 8811 	msr	BASEPRI, r3
}
 8005f1e:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8005f20:	60a2      	str	r2, [r4, #8]
  if (msg != MSG_OK) {
 8005f22:	e7db      	b.n	8005edc <chGuardedPoolAllocTimeout+0x1c>
 8005f24:	20001050 	.word	0x20001050
	...

08005f30 <chDelegateCallVeneer>:
 * @param[in] veneer    pointer to the veneer function to be called
 * @param[in] ...       variable number of parameters
 * @return              The function return value casted to msg_t. It is
 *                      garbage for functions returning @p void.
 */
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 8005f30:	b40e      	push	{r1, r2, r3}
 8005f32:	b500      	push	{lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	ab05      	add	r3, sp, #20

  va_start(args, veneer);

  /* Preparing the call message.*/
  cm.veneer = veneer;
  cm.argsp  = &args;
 8005f38:	aa01      	add	r2, sp, #4
 8005f3a:	9203      	str	r2, [sp, #12]
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 8005f3c:	f853 2b04 	ldr.w	r2, [r3], #4
  (void)cm; /* Suppresses a lint warning.*/

  /* Sending the message to the dispatcher thread, the return value is
     contained in the returned message.*/
  msg = chMsgSend(tp, (msg_t)&cm);
 8005f40:	a902      	add	r1, sp, #8
  cm.veneer = veneer;
 8005f42:	e9cd 3201 	strd	r3, r2, [sp, #4]
  msg = chMsgSend(tp, (msg_t)&cm);
 8005f46:	f7fb fa33 	bl	80013b0 <chMsgSend>

  va_end(args);

  return msg;
}
 8005f4a:	b004      	add	sp, #16
 8005f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f50:	b003      	add	sp, #12
 8005f52:	4770      	bx	lr
	...

08005f60 <dyn_create_object_heap.lto_priv.0>:

#if CH_FACTORY_REQUIRES_HEAP || defined(__DOXYGEN__)
static dyn_element_t *dyn_create_object_heap(const char *name,
                                             dyn_list_t *dlp,
                                             size_t size,
                                             unsigned align) {
 8005f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  dyn_element_t *p = dlp->next;
 8005f64:	680c      	ldr	r4, [r1, #0]
                                             unsigned align) {
 8005f66:	460e      	mov	r6, r1
  while (p != (dyn_element_t *)dlp) {
 8005f68:	42a1      	cmp	r1, r4
                                             unsigned align) {
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	4617      	mov	r7, r2
 8005f6e:	4698      	mov	r8, r3
  while (p != (dyn_element_t *)dlp) {
 8005f70:	d103      	bne.n	8005f7a <dyn_create_object_heap.lto_priv.0+0x1a>
 8005f72:	e00e      	b.n	8005f92 <dyn_create_object_heap.lto_priv.0+0x32>
    p = p->next;
 8005f74:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8005f76:	42a6      	cmp	r6, r4
 8005f78:	d00b      	beq.n	8005f92 <dyn_create_object_heap.lto_priv.0+0x32>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8005f7a:	2208      	movs	r2, #8
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	f104 0008 	add.w	r0, r4, #8
 8005f82:	f009 ff11 	bl	800fda8 <strncmp>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d1f4      	bne.n	8005f74 <dyn_create_object_heap.lto_priv.0+0x14>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 8005f8a:	b114      	cbz	r4, 8005f92 <dyn_create_object_heap.lto_priv.0+0x32>
    return NULL;
 8005f8c:	2000      	movs	r0, #0

  /* Updating factory list.*/
  dlp->next = dep;

  return dep;
}
 8005f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dep = (dyn_element_t *)chHeapAllocAligned(NULL, size, align);
 8005f92:	4642      	mov	r2, r8
 8005f94:	4639      	mov	r1, r7
 8005f96:	2000      	movs	r0, #0
 8005f98:	f7ff fa42 	bl	8005420 <chHeapAllocAligned>
  if (dep == NULL) {
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d0f5      	beq.n	8005f8c <dyn_create_object_heap.lto_priv.0+0x2c>
  copy_name(name, dep->name);
 8005fa0:	f100 0208 	add.w	r2, r0, #8
  i = CH_CFG_FACTORY_MAX_NAMES_LENGTH;
 8005fa4:	f105 0108 	add.w	r1, r5, #8
    c = *sp++;
 8005fa8:	f815 3b01 	ldrb.w	r3, [r5], #1
    *dp++ = c;
 8005fac:	f802 3b01 	strb.w	r3, [r2], #1
  } while ((c != (char)0) && (i > 0U));
 8005fb0:	b10b      	cbz	r3, 8005fb6 <dyn_create_object_heap.lto_priv.0+0x56>
 8005fb2:	42a9      	cmp	r1, r5
 8005fb4:	d1f8      	bne.n	8005fa8 <dyn_create_object_heap.lto_priv.0+0x48>
  dep->refs = (ucnt_t)1;
 8005fb6:	2301      	movs	r3, #1
  dep->next = dlp->next;
 8005fb8:	6832      	ldr	r2, [r6, #0]
  dep->refs = (ucnt_t)1;
 8005fba:	e9c0 2300 	strd	r2, r3, [r0]
  dlp->next = dep;
 8005fbe:	6030      	str	r0, [r6, #0]
}
 8005fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005fd0 <chFactoryReleaseObject>:
 *
 * @param[in] rop       registered object reference
 *
 * @api
 */
void chFactoryReleaseObject(registered_object_t *rop) {
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	2320      	movs	r3, #32
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	4d15      	ldr	r5, [pc, #84]	; (8006030 <chFactoryReleaseObject+0x60>)
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f7fe fbe7 	bl	80047b0 <chMtxLockS>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 8005fe8:	6863      	ldr	r3, [r4, #4]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005fee:	b99b      	cbnz	r3, 8006018 <chFactoryReleaseObject+0x48>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005ff0:	f105 0210 	add.w	r2, r5, #16
 8005ff4:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d011      	beq.n	8006022 <chFactoryReleaseObject+0x52>
    if (prev->next == element) {
 8005ffe:	429c      	cmp	r4, r3
 8006000:	d1f9      	bne.n	8005ff6 <chFactoryReleaseObject+0x26>
      prev->next = element->next;
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	2320      	movs	r3, #32
 8006006:	600a      	str	r2, [r1, #0]
 8006008:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 800600c:	696a      	ldr	r2, [r5, #20]
 800600e:	2300      	movs	r3, #0
 8006010:	6022      	str	r2, [r4, #0]
  mp->next = php;
 8006012:	616c      	str	r4, [r5, #20]
 8006014:	f383 8811 	msr	BASEPRI, r3

  dyn_release_object_pool(&rop->element,
                          &ch_factory.obj_list,
                          &ch_factory.obj_pool);

  F_UNLOCK();
 8006018:	4805      	ldr	r0, [pc, #20]	; (8006030 <chFactoryReleaseObject+0x60>)
}
 800601a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800601e:	f7fe bc5f 	b.w	80048e0 <chMtxUnlock>
 8006022:	2320      	movs	r3, #32
 8006024:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8006028:	2300      	movs	r3, #0
 800602a:	696a      	ldr	r2, [r5, #20]
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	deff      	udf	#255	; 0xff
 8006030:	200010d8 	.word	0x200010d8
	...

08006040 <chFactoryReleaseBuffer>:
 *
 * @param[in] dbp       dynamic buffer object reference
 *
 * @api
 */
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8006040:	b510      	push	{r4, lr}
 8006042:	2320      	movs	r3, #32
 8006044:	4604      	mov	r4, r0
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	480f      	ldr	r0, [pc, #60]	; (8006088 <chFactoryReleaseBuffer+0x48>)
 800604c:	f7fe fbb0 	bl	80047b0 <chMtxLockS>
 8006050:	2300      	movs	r3, #0
 8006052:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 8006056:	6863      	ldr	r3, [r4, #4]
 8006058:	3b01      	subs	r3, #1
 800605a:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800605c:	b95b      	cbnz	r3, 8006076 <chFactoryReleaseBuffer+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800605e:	4b0b      	ldr	r3, [pc, #44]	; (800608c <chFactoryReleaseBuffer+0x4c>)
 8006060:	4618      	mov	r0, r3
 8006062:	e001      	b.n	8006068 <chFactoryReleaseBuffer+0x28>
    if (prev->next == element) {
 8006064:	4284      	cmp	r4, r0
 8006066:	d00b      	beq.n	8006080 <chFactoryReleaseBuffer+0x40>
  while (prev->next != (dyn_element_t *)dlp) {
 8006068:	4602      	mov	r2, r0
 800606a:	6800      	ldr	r0, [r0, #0]
 800606c:	4298      	cmp	r0, r3
 800606e:	d1f9      	bne.n	8006064 <chFactoryReleaseBuffer+0x24>
  return NULL;
 8006070:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8006072:	f7ff fa75 	bl	8005560 <chHeapFree>
  F_LOCK();

  dyn_release_object_heap(&dbp->element, &ch_factory.buf_list);

  F_UNLOCK();
}
 8006076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800607a:	4803      	ldr	r0, [pc, #12]	; (8006088 <chFactoryReleaseBuffer+0x48>)
 800607c:	f7fe bc30 	b.w	80048e0 <chMtxUnlock>
      prev->next = element->next;
 8006080:	6803      	ldr	r3, [r0, #0]
 8006082:	6013      	str	r3, [r2, #0]
      return element;
 8006084:	e7f5      	b.n	8006072 <chFactoryReleaseBuffer+0x32>
 8006086:	bf00      	nop
 8006088:	200010d8 	.word	0x200010d8
 800608c:	200010fc 	.word	0x200010fc

08006090 <chFactoryReleaseSemaphore>:
 *
 * @param[in] dsp       dynamic semaphore object reference
 *
 * @api
 */
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	2320      	movs	r3, #32
 8006094:	4604      	mov	r4, r0
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	4d15      	ldr	r5, [pc, #84]	; (80060f0 <chFactoryReleaseSemaphore+0x60>)
 800609c:	4628      	mov	r0, r5
 800609e:	f7fe fb87 	bl	80047b0 <chMtxLockS>
 80060a2:	2300      	movs	r3, #0
 80060a4:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 80060a8:	6863      	ldr	r3, [r4, #4]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80060ae:	b99b      	cbnz	r3, 80060d8 <chFactoryReleaseSemaphore+0x48>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 80060b0:	f105 0228 	add.w	r2, r5, #40	; 0x28
 80060b4:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 80060b6:	4619      	mov	r1, r3
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d011      	beq.n	80060e2 <chFactoryReleaseSemaphore+0x52>
    if (prev->next == element) {
 80060be:	429c      	cmp	r4, r3
 80060c0:	d1f9      	bne.n	80060b6 <chFactoryReleaseSemaphore+0x26>
      prev->next = element->next;
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	2320      	movs	r3, #32
 80060c6:	600a      	str	r2, [r1, #0]
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80060ce:	2300      	movs	r3, #0
 80060d0:	6022      	str	r2, [r4, #0]
  mp->next = php;
 80060d2:	62ec      	str	r4, [r5, #44]	; 0x2c
 80060d4:	f383 8811 	msr	BASEPRI, r3

  dyn_release_object_pool(&dsp->element,
                          &ch_factory.sem_list,
                          &ch_factory.sem_pool);

  F_UNLOCK();
 80060d8:	4805      	ldr	r0, [pc, #20]	; (80060f0 <chFactoryReleaseSemaphore+0x60>)
}
 80060da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 80060de:	f7fe bbff 	b.w	80048e0 <chMtxUnlock>
 80060e2:	2320      	movs	r3, #32
 80060e4:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 80060e8:	2300      	movs	r3, #0
 80060ea:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	deff      	udf	#255	; 0xff
 80060f0:	200010d8 	.word	0x200010d8
	...

08006100 <chFactoryReleaseMailbox>:
 *
 * @param[in] dmp       dynamic mailbox object reference
 *
 * @api
 */
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8006100:	b510      	push	{r4, lr}
 8006102:	2320      	movs	r3, #32
 8006104:	4604      	mov	r4, r0
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	480f      	ldr	r0, [pc, #60]	; (8006148 <chFactoryReleaseMailbox+0x48>)
 800610c:	f7fe fb50 	bl	80047b0 <chMtxLockS>
 8006110:	2300      	movs	r3, #0
 8006112:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 8006116:	6863      	ldr	r3, [r4, #4]
 8006118:	3b01      	subs	r3, #1
 800611a:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800611c:	b95b      	cbnz	r3, 8006136 <chFactoryReleaseMailbox+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800611e:	4b0b      	ldr	r3, [pc, #44]	; (800614c <chFactoryReleaseMailbox+0x4c>)
 8006120:	4618      	mov	r0, r3
 8006122:	e001      	b.n	8006128 <chFactoryReleaseMailbox+0x28>
    if (prev->next == element) {
 8006124:	4284      	cmp	r4, r0
 8006126:	d00b      	beq.n	8006140 <chFactoryReleaseMailbox+0x40>
  while (prev->next != (dyn_element_t *)dlp) {
 8006128:	4602      	mov	r2, r0
 800612a:	6800      	ldr	r0, [r0, #0]
 800612c:	4298      	cmp	r0, r3
 800612e:	d1f9      	bne.n	8006124 <chFactoryReleaseMailbox+0x24>
  return NULL;
 8006130:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8006132:	f7ff fa15 	bl	8005560 <chHeapFree>
  F_LOCK();

  dyn_release_object_heap(&dmp->element, &ch_factory.mbx_list);

  F_UNLOCK();
}
 8006136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800613a:	4803      	ldr	r0, [pc, #12]	; (8006148 <chFactoryReleaseMailbox+0x48>)
 800613c:	f7fe bbd0 	b.w	80048e0 <chMtxUnlock>
      prev->next = element->next;
 8006140:	6803      	ldr	r3, [r0, #0]
 8006142:	6013      	str	r3, [r2, #0]
      return element;
 8006144:	e7f5      	b.n	8006132 <chFactoryReleaseMailbox+0x32>
 8006146:	bf00      	nop
 8006148:	200010d8 	.word	0x200010d8
 800614c:	20001114 	.word	0x20001114

08006150 <chFactoryReleaseObjectsFIFO>:
 *
 * @param[in] dofp      dynamic "objects FIFO" object reference
 *
 * @api
 */
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 8006150:	b510      	push	{r4, lr}
 8006152:	2320      	movs	r3, #32
 8006154:	4604      	mov	r4, r0
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	480f      	ldr	r0, [pc, #60]	; (8006198 <chFactoryReleaseObjectsFIFO+0x48>)
 800615c:	f7fe fb28 	bl	80047b0 <chMtxLockS>
 8006160:	2300      	movs	r3, #0
 8006162:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 8006166:	6863      	ldr	r3, [r4, #4]
 8006168:	3b01      	subs	r3, #1
 800616a:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800616c:	b95b      	cbnz	r3, 8006186 <chFactoryReleaseObjectsFIFO+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800616e:	4b0b      	ldr	r3, [pc, #44]	; (800619c <chFactoryReleaseObjectsFIFO+0x4c>)
 8006170:	4618      	mov	r0, r3
 8006172:	e001      	b.n	8006178 <chFactoryReleaseObjectsFIFO+0x28>
    if (prev->next == element) {
 8006174:	4284      	cmp	r4, r0
 8006176:	d00b      	beq.n	8006190 <chFactoryReleaseObjectsFIFO+0x40>
  while (prev->next != (dyn_element_t *)dlp) {
 8006178:	4602      	mov	r2, r0
 800617a:	6800      	ldr	r0, [r0, #0]
 800617c:	4298      	cmp	r0, r3
 800617e:	d1f9      	bne.n	8006174 <chFactoryReleaseObjectsFIFO+0x24>
  return NULL;
 8006180:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8006182:	f7ff f9ed 	bl	8005560 <chHeapFree>
  F_LOCK();

  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);

  F_UNLOCK();
}
 8006186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800618a:	4803      	ldr	r0, [pc, #12]	; (8006198 <chFactoryReleaseObjectsFIFO+0x48>)
 800618c:	f7fe bba8 	b.w	80048e0 <chMtxUnlock>
      prev->next = element->next;
 8006190:	6803      	ldr	r3, [r0, #0]
 8006192:	6013      	str	r3, [r2, #0]
      return element;
 8006194:	e7f5      	b.n	8006182 <chFactoryReleaseObjectsFIFO+0x32>
 8006196:	bf00      	nop
 8006198:	200010d8 	.word	0x200010d8
 800619c:	20001118 	.word	0x20001118

080061a0 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 80061a0:	b510      	push	{r4, lr}
 80061a2:	2320      	movs	r3, #32
 80061a4:	4604      	mov	r4, r0
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	480f      	ldr	r0, [pc, #60]	; (80061e8 <chFactoryReleasePipe+0x48>)
 80061ac:	f7fe fb00 	bl	80047b0 <chMtxLockS>
 80061b0:	2300      	movs	r3, #0
 80061b2:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 80061b6:	6863      	ldr	r3, [r4, #4]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80061bc:	b95b      	cbnz	r3, 80061d6 <chFactoryReleasePipe+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 80061be:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <chFactoryReleasePipe+0x4c>)
 80061c0:	4618      	mov	r0, r3
 80061c2:	e001      	b.n	80061c8 <chFactoryReleasePipe+0x28>
    if (prev->next == element) {
 80061c4:	4284      	cmp	r4, r0
 80061c6:	d00b      	beq.n	80061e0 <chFactoryReleasePipe+0x40>
  while (prev->next != (dyn_element_t *)dlp) {
 80061c8:	4602      	mov	r2, r0
 80061ca:	6800      	ldr	r0, [r0, #0]
 80061cc:	4298      	cmp	r0, r3
 80061ce:	d1f9      	bne.n	80061c4 <chFactoryReleasePipe+0x24>
  return NULL;
 80061d0:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 80061d2:	f7ff f9c5 	bl	8005560 <chHeapFree>
  F_LOCK();

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);

  F_UNLOCK();
}
 80061d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 80061da:	4803      	ldr	r0, [pc, #12]	; (80061e8 <chFactoryReleasePipe+0x48>)
 80061dc:	f7fe bb80 	b.w	80048e0 <chMtxUnlock>
      prev->next = element->next;
 80061e0:	6803      	ldr	r3, [r0, #0]
 80061e2:	6013      	str	r3, [r2, #0]
      return element;
 80061e4:	e7f5      	b.n	80061d2 <chFactoryReleasePipe+0x32>
 80061e6:	bf00      	nop
 80061e8:	200010d8 	.word	0x200010d8
 80061ec:	2000111c 	.word	0x2000111c

080061f0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80061f0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 80061f4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80061f6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80061fa:	2300      	movs	r3, #0
 80061fc:	f383 8811 	msr	BASEPRI, r3
}
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
	...

08006210 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8006210:	b40e      	push	{r1, r2, r3}
 8006212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	ab0f      	add	r3, sp, #60	; 0x3c
 800621a:	f853 6b04 	ldr.w	r6, [r3], #4
    c = *fmt++;
 800621e:	4635      	mov	r5, r6
 8006220:	f815 1b01 	ldrb.w	r1, [r5], #1
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8006224:	e9cd 3301 	strd	r3, r3, [sp, #4]
    if (c == 0) {
 8006228:	2900      	cmp	r1, #0
 800622a:	f000 8206 	beq.w	800663a <chprintf+0x42a>
 800622e:	4604      	mov	r4, r0
  int n = 0;
 8006230:	f04f 0900 	mov.w	r9, #0
 8006234:	e00c      	b.n	8006250 <chprintf+0x40>
      streamPut(chp, (uint8_t)c);
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	4620      	mov	r0, r4
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	4798      	blx	r3
      continue;
 800623e:	462e      	mov	r6, r5
      n++;
 8006240:	f109 0901 	add.w	r9, r9, #1
    c = *fmt++;
 8006244:	4635      	mov	r5, r6
 8006246:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 800624a:	2900      	cmp	r1, #0
 800624c:	f000 80d9 	beq.w	8006402 <chprintf+0x1f2>
    if (c != '%') {
 8006250:	2925      	cmp	r1, #37	; 0x25
 8006252:	d1f0      	bne.n	8006236 <chprintf+0x26>
    if (*fmt == '-') {
 8006254:	7873      	ldrb	r3, [r6, #1]
 8006256:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8006258:	bf08      	it	eq
 800625a:	1cb5      	addeq	r5, r6, #2
    if (*fmt == '+') {
 800625c:	782b      	ldrb	r3, [r5, #0]
      left_align = true;
 800625e:	bf0c      	ite	eq
 8006260:	f04f 0e01 	moveq.w	lr, #1
    left_align = false;
 8006264:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '+') {
 8006268:	2b2b      	cmp	r3, #43	; 0x2b
    if (*fmt == '0') {
 800626a:	bf03      	ittte	eq
 800626c:	786b      	ldrbeq	r3, [r5, #1]
      do_sign = true;
 800626e:	f04f 0c01 	moveq.w	ip, #1
      fmt++;
 8006272:	3501      	addeq	r5, #1
    do_sign = false;
 8006274:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '0') {
 8006278:	2b30      	cmp	r3, #48	; 0x30
      fmt++;
 800627a:	bf03      	ittte	eq
 800627c:	3501      	addeq	r5, #1
      filler = '0';
 800627e:	461f      	moveq	r7, r3
    if ( *fmt == '*') {
 8006280:	782b      	ldrbeq	r3, [r5, #0]
    filler = ' ';
 8006282:	2720      	movne	r7, #32
    if ( *fmt == '*') {
 8006284:	2b2a      	cmp	r3, #42	; 0x2a
 8006286:	d149      	bne.n	800631c <chprintf+0x10c>
      c = *fmt++;
 8006288:	786b      	ldrb	r3, [r5, #1]
      width = va_arg(ap, int);
 800628a:	f8dd b004 	ldr.w	fp, [sp, #4]
    if (c == '.') {
 800628e:	2b2e      	cmp	r3, #46	; 0x2e
      width = va_arg(ap, int);
 8006290:	f85b 2b04 	ldr.w	r2, [fp], #4
      c = *fmt++;
 8006294:	f105 0602 	add.w	r6, r5, #2
    if (c == '.') {
 8006298:	d056      	beq.n	8006348 <chprintf+0x138>
    precision = 0;
 800629a:	2000      	movs	r0, #0
    if (c == 'l' || c == 'L') {
 800629c:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 80062a0:	294c      	cmp	r1, #76	; 0x4c
 80062a2:	d05f      	beq.n	8006364 <chprintf+0x154>
    switch (c) {
 80062a4:	f1a3 0544 	sub.w	r5, r3, #68	; 0x44
 80062a8:	2d34      	cmp	r5, #52	; 0x34
 80062aa:	f200 80b0 	bhi.w	800640e <chprintf+0x1fe>
 80062ae:	e8df f015 	tbh	[pc, r5, lsl #1]
 80062b2:	00dc      	.short	0x00dc
 80062b4:	00ae00ae 	.word	0x00ae00ae
 80062b8:	00ae00ae 	.word	0x00ae00ae
 80062bc:	00ae00dc 	.word	0x00ae00dc
 80062c0:	00ae00ae 	.word	0x00ae00ae
 80062c4:	00ae00ae 	.word	0x00ae00ae
 80062c8:	0112014d 	.word	0x0112014d
 80062cc:	00ae00ae 	.word	0x00ae00ae
 80062d0:	00ae00ae 	.word	0x00ae00ae
 80062d4:	00ae01b5 	.word	0x00ae01b5
 80062d8:	011200ae 	.word	0x011200ae
 80062dc:	00ae00ae 	.word	0x00ae00ae
 80062e0:	00ae00ae 	.word	0x00ae00ae
 80062e4:	00ae00ae 	.word	0x00ae00ae
 80062e8:	00ae00ae 	.word	0x00ae00ae
 80062ec:	00ae00ae 	.word	0x00ae00ae
 80062f0:	00dc016f 	.word	0x00dc016f
 80062f4:	00ae00ae 	.word	0x00ae00ae
 80062f8:	00ae00ae 	.word	0x00ae00ae
 80062fc:	00ae00dc 	.word	0x00ae00dc
 8006300:	00ae00ae 	.word	0x00ae00ae
 8006304:	00ae00ae 	.word	0x00ae00ae
 8006308:	0112014d 	.word	0x0112014d
 800630c:	00ae00ae 	.word	0x00ae00ae
 8006310:	00ae0150 	.word	0x00ae0150
 8006314:	00ae01b5 	.word	0x00ae01b5
 8006318:	011200ae 	.word	0x011200ae
        c = *fmt++;
 800631c:	1c6e      	adds	r6, r5, #1
        if (c == 0) {
 800631e:	2b00      	cmp	r3, #0
 8006320:	d06f      	beq.n	8006402 <chprintf+0x1f2>
      width = 0;
 8006322:	2200      	movs	r2, #0
 8006324:	e005      	b.n	8006332 <chprintf+0x122>
        c = *fmt++;
 8006326:	f816 3b01 	ldrb.w	r3, [r6], #1
          width = width * 10 + c;
 800632a:	eb01 0240 	add.w	r2, r1, r0, lsl #1
        if (c == 0) {
 800632e:	2b00      	cmp	r3, #0
 8006330:	d067      	beq.n	8006402 <chprintf+0x1f2>
        if (c >= '0' && c <= '9') {
 8006332:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006336:	b2c9      	uxtb	r1, r1
 8006338:	2909      	cmp	r1, #9
          width = width * 10 + c;
 800633a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9') {
 800633e:	d9f2      	bls.n	8006326 <chprintf+0x116>
    if (c == '.') {
 8006340:	2b2e      	cmp	r3, #46	; 0x2e
 8006342:	f8dd b004 	ldr.w	fp, [sp, #4]
 8006346:	d1a8      	bne.n	800629a <chprintf+0x8a>
      c = *fmt++;
 8006348:	7833      	ldrb	r3, [r6, #0]
      if (c == 0) {
 800634a:	2b00      	cmp	r3, #0
 800634c:	d059      	beq.n	8006402 <chprintf+0x1f2>
      if (c == '*') {
 800634e:	2b2a      	cmp	r3, #42	; 0x2a
 8006350:	d147      	bne.n	80063e2 <chprintf+0x1d2>
        c = *fmt++;
 8006352:	7873      	ldrb	r3, [r6, #1]
        precision = va_arg(ap, int);
 8006354:	f85b 0b04 	ldr.w	r0, [fp], #4
    if (c == 'l' || c == 'L') {
 8006358:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 800635c:	294c      	cmp	r1, #76	; 0x4c
        c = *fmt++;
 800635e:	f106 0602 	add.w	r6, r6, #2
    if (c == 'l' || c == 'L') {
 8006362:	d19f      	bne.n	80062a4 <chprintf+0x94>
      c = *fmt++;
 8006364:	f816 3b01 	ldrb.w	r3, [r6], #1
      if (c == 0) {
 8006368:	2b00      	cmp	r3, #0
 800636a:	d04a      	beq.n	8006402 <chprintf+0x1f2>
    switch (c) {
 800636c:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8006370:	2934      	cmp	r1, #52	; 0x34
 8006372:	d84c      	bhi.n	800640e <chprintf+0x1fe>
 8006374:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006378:	004b0079 	.word	0x004b0079
 800637c:	004b004b 	.word	0x004b004b
 8006380:	0079004b 	.word	0x0079004b
 8006384:	004b004b 	.word	0x004b004b
 8006388:	004b004b 	.word	0x004b004b
 800638c:	00ea004b 	.word	0x00ea004b
 8006390:	004b00af 	.word	0x004b00af
 8006394:	004b004b 	.word	0x004b004b
 8006398:	0152004b 	.word	0x0152004b
 800639c:	004b004b 	.word	0x004b004b
 80063a0:	004b00af 	.word	0x004b00af
 80063a4:	004b004b 	.word	0x004b004b
 80063a8:	004b004b 	.word	0x004b004b
 80063ac:	004b004b 	.word	0x004b004b
 80063b0:	004b004b 	.word	0x004b004b
 80063b4:	010c004b 	.word	0x010c004b
 80063b8:	004b0079 	.word	0x004b0079
 80063bc:	004b004b 	.word	0x004b004b
 80063c0:	0079004b 	.word	0x0079004b
 80063c4:	004b004b 	.word	0x004b004b
 80063c8:	004b004b 	.word	0x004b004b
 80063cc:	00ea004b 	.word	0x00ea004b
 80063d0:	004b00af 	.word	0x004b00af
 80063d4:	00ed004b 	.word	0x00ed004b
 80063d8:	0152004b 	.word	0x0152004b
 80063dc:	004b004b 	.word	0x004b004b
 80063e0:	00af      	.short	0x00af
    precision = 0;
 80063e2:	2000      	movs	r0, #0
      c = *fmt++;
 80063e4:	3601      	adds	r6, #1
        while (c >= '0' && c <= '9') {
 80063e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80063ea:	b2c9      	uxtb	r1, r1
 80063ec:	2909      	cmp	r1, #9
          precision = precision * 10 + c;
 80063ee:	eb00 0580 	add.w	r5, r0, r0, lsl #2
        while (c >= '0' && c <= '9') {
 80063f2:	f63f af53 	bhi.w	800629c <chprintf+0x8c>
          c = *fmt++;
 80063f6:	f816 3b01 	ldrb.w	r3, [r6], #1
          precision = precision * 10 + c;
 80063fa:	eb01 0045 	add.w	r0, r1, r5, lsl #1
          if (c == 0) {
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f1      	bne.n	80063e6 <chprintf+0x1d6>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8006402:	4648      	mov	r0, r9
 8006404:	b006      	add	sp, #24
 8006406:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640a:	b003      	add	sp, #12
 800640c:	4770      	bx	lr
      *p++ = c;
 800640e:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8006412:	f8cd b004 	str.w	fp, [sp, #4]
 8006416:	3a01      	subs	r2, #1
    if ((width -= i) < 0) {
 8006418:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
    if (left_align == false) {
 800641c:	f1be 0f00 	cmp.w	lr, #0
 8006420:	d104      	bne.n	800642c <chprintf+0x21c>
    if (width < 0) {
 8006422:	2a00      	cmp	r2, #0
      width = -width;
 8006424:	f1ca 0a00 	rsb	sl, sl, #0
    if (width < 0) {
 8006428:	f300 80e4 	bgt.w	80065f4 <chprintf+0x3e4>
    if (left_align == false) {
 800642c:	2500      	movs	r5, #0
 800642e:	f10d 0b0c 	add.w	fp, sp, #12
 8006432:	f105 0801 	add.w	r8, r5, #1
 8006436:	44d8      	add	r8, fp
      streamPut(chp, (uint8_t)*s++);
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800643e:	4620      	mov	r0, r4
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	4798      	blx	r3
    while (--i >= 0) {
 8006444:	45c3      	cmp	fp, r8
 8006446:	d1f7      	bne.n	8006438 <chprintf+0x228>
 8006448:	f109 0901 	add.w	r9, r9, #1
      n++;
 800644c:	44a9      	add	r9, r5
    while (width) {
 800644e:	f1ba 0f00 	cmp.w	sl, #0
 8006452:	f43f aef7 	beq.w	8006244 <chprintf+0x34>
 8006456:	4655      	mov	r5, sl
      streamPut(chp, (uint8_t)filler);
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	4639      	mov	r1, r7
 800645c:	4620      	mov	r0, r4
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	4798      	blx	r3
    while (width) {
 8006462:	3d01      	subs	r5, #1
 8006464:	d1f8      	bne.n	8006458 <chprintf+0x248>
      n++;
 8006466:	44d1      	add	r9, sl
 8006468:	e6ec      	b.n	8006244 <chprintf+0x34>
        l = va_arg(ap, int);
 800646a:	465b      	mov	r3, fp
 800646c:	f853 0b04 	ldr.w	r0, [r3], #4
      if (l < 0) {
 8006470:	2800      	cmp	r0, #0
        l = va_arg(ap, int);
 8006472:	9301      	str	r3, [sp, #4]
      if (l < 0) {
 8006474:	f2c0 80b6 	blt.w	80065e4 <chprintf+0x3d4>
        if (do_sign) {
 8006478:	f1bc 0f00 	cmp.w	ip, #0
 800647c:	f000 80d7 	beq.w	800662e <chprintf+0x41e>
          *p++ = '+';
 8006480:	232b      	movs	r3, #43	; 0x2b
 8006482:	f10d 080d 	add.w	r8, sp, #13
 8006486:	f88d 300c 	strb.w	r3, [sp, #12]
 800648a:	ab03      	add	r3, sp, #12
  q = p + MAX_FILLER;
 800648c:	f108 0b0b 	add.w	fp, r8, #11
 8006490:	465d      	mov	r5, fp
    i = (int)(l % radix);
 8006492:	496d      	ldr	r1, [pc, #436]	; (8006648 <chprintf+0x438>)
 8006494:	4682      	mov	sl, r0
 8006496:	fba1 c100 	umull	ip, r1, r1, r0
 800649a:	08c9      	lsrs	r1, r1, #3
 800649c:	468c      	mov	ip, r1
 800649e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80064a2:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
    i += '0';
 80064a6:	3130      	adds	r1, #48	; 0x30
    *--q = i;
 80064a8:	b2c9      	uxtb	r1, r1
  } while ((ll /= radix) != 0);
 80064aa:	f1ba 0f09 	cmp.w	sl, #9
    l /= radix;
 80064ae:	4660      	mov	r0, ip
    *--q = i;
 80064b0:	f805 1d01 	strb.w	r1, [r5, #-1]!
  } while ((ll /= radix) != 0);
 80064b4:	dced      	bgt.n	8006492 <chprintf+0x282>
  i = (int)(p + MAX_FILLER - q);
 80064b6:	ebab 0005 	sub.w	r0, fp, r5
 80064ba:	4440      	add	r0, r8
 80064bc:	e001      	b.n	80064c2 <chprintf+0x2b2>
    *p++ = *q++;
 80064be:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80064c2:	f808 1b01 	strb.w	r1, [r8], #1
  while (--i);
 80064c6:	4580      	cmp	r8, r0
 80064c8:	d1f9      	bne.n	80064be <chprintf+0x2ae>
    i = (int)(p - s);
 80064ca:	eba8 0503 	sub.w	r5, r8, r3
    if ((width -= i) < 0) {
 80064ce:	1b52      	subs	r2, r2, r5
    s = tmpbuf;
 80064d0:	469b      	mov	fp, r3
        i--;
 80064d2:	3d01      	subs	r5, #1
 80064d4:	e02d      	b.n	8006532 <chprintf+0x322>
      if (c == 0) {
 80064d6:	f04f 0810 	mov.w	r8, #16
        l = va_arg(ap, unsigned int);
 80064da:	465b      	mov	r3, fp
 80064dc:	f853 0b04 	ldr.w	r0, [r3], #4
 80064e0:	9301      	str	r3, [sp, #4]
  q = p + MAX_FILLER;
 80064e2:	f10d 0317 	add.w	r3, sp, #23
 80064e6:	e000      	b.n	80064ea <chprintf+0x2da>
 80064e8:	462b      	mov	r3, r5
    i = (int)(l % radix);
 80064ea:	4684      	mov	ip, r0
 80064ec:	fbb0 f0f8 	udiv	r0, r0, r8
 80064f0:	fb08 ca10 	mls	sl, r8, r0, ip
    i += '0';
 80064f4:	f10a 0130 	add.w	r1, sl, #48	; 0x30
    if (i > '9') {
 80064f8:	2939      	cmp	r1, #57	; 0x39
      i += 'A' - '0' - 10;
 80064fa:	bfc8      	it	gt
 80064fc:	f10a 0137 	addgt.w	r1, sl, #55	; 0x37
    *--q = i;
 8006500:	b2c9      	uxtb	r1, r1
  } while ((ll /= radix) != 0);
 8006502:	45c4      	cmp	ip, r8
    *--q = i;
 8006504:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8006508:	f803 1c01 	strb.w	r1, [r3, #-1]
  } while ((ll /= radix) != 0);
 800650c:	d2ec      	bcs.n	80064e8 <chprintf+0x2d8>
 800650e:	4618      	mov	r0, r3
  i = (int)(p + MAX_FILLER - q);
 8006510:	f10d 0317 	add.w	r3, sp, #23
 8006514:	1b5d      	subs	r5, r3, r5
 8006516:	ab03      	add	r3, sp, #12
 8006518:	469c      	mov	ip, r3
 800651a:	f10d 0817 	add.w	r8, sp, #23
 800651e:	e001      	b.n	8006524 <chprintf+0x314>
    *p++ = *q++;
 8006520:	f810 1b01 	ldrb.w	r1, [r0], #1
  while (--i);
 8006524:	4540      	cmp	r0, r8
    *p++ = *q++;
 8006526:	f80c 1b01 	strb.w	r1, [ip], #1
  while (--i);
 800652a:	d1f9      	bne.n	8006520 <chprintf+0x310>
    s = tmpbuf;
 800652c:	469b      	mov	fp, r3
    if ((width -= i) < 0) {
 800652e:	1b52      	subs	r2, r2, r5
        i--;
 8006530:	3d01      	subs	r5, #1
    if ((width -= i) < 0) {
 8006532:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
    if (left_align == false) {
 8006536:	f1be 0f00 	cmp.w	lr, #0
 800653a:	d103      	bne.n	8006544 <chprintf+0x334>
    if (width < 0) {
 800653c:	2a00      	cmp	r2, #0
      width = -width;
 800653e:	f1ca 0a00 	rsb	sl, sl, #0
    if (width < 0) {
 8006542:	dc2e      	bgt.n	80065a2 <chprintf+0x392>
    while (--i >= 0) {
 8006544:	2d00      	cmp	r5, #0
 8006546:	f6bf af74 	bge.w	8006432 <chprintf+0x222>
 800654a:	e780      	b.n	800644e <chprintf+0x23e>
      if (c == 0) {
 800654c:	f04f 0808 	mov.w	r8, #8
 8006550:	e7c3      	b.n	80064da <chprintf+0x2ca>
      if ((s = va_arg(ap, char *)) == 0) {
 8006552:	465b      	mov	r3, fp
 8006554:	f853 bb04 	ldr.w	fp, [r3], #4
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	f1bb 0f00 	cmp.w	fp, #0
 800655e:	d060      	beq.n	8006622 <chprintf+0x412>
      for (p = s; *p && (--precision >= 0); p++)
 8006560:	f89b 1000 	ldrb.w	r1, [fp]
      if (precision == 0) {
 8006564:	2800      	cmp	r0, #0
 8006566:	d04a      	beq.n	80065fe <chprintf+0x3ee>
      for (p = s; *p && (--precision >= 0); p++)
 8006568:	2900      	cmp	r1, #0
 800656a:	d04c      	beq.n	8006606 <chprintf+0x3f6>
 800656c:	3801      	subs	r0, #1
 800656e:	d44a      	bmi.n	8006606 <chprintf+0x3f6>
 8006570:	4659      	mov	r1, fp
 8006572:	e001      	b.n	8006578 <chprintf+0x368>
 8006574:	42c5      	cmn	r5, r0
 8006576:	d405      	bmi.n	8006584 <chprintf+0x374>
 8006578:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800657c:	ebab 0501 	sub.w	r5, fp, r1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1f7      	bne.n	8006574 <chprintf+0x364>
    i = (int)(p - s);
 8006584:	eba1 010b 	sub.w	r1, r1, fp
      filler = ' ';
 8006588:	2720      	movs	r7, #32
    if ((width -= i) < 0) {
 800658a:	1a52      	subs	r2, r2, r1
        i--;
 800658c:	1e4d      	subs	r5, r1, #1
 800658e:	e7d0      	b.n	8006532 <chprintf+0x322>
      *p++ = va_arg(ap, int);
 8006590:	f85b 3b04 	ldr.w	r3, [fp], #4
      filler = ' ';
 8006594:	2720      	movs	r7, #32
 8006596:	3a01      	subs	r2, #1
      *p++ = va_arg(ap, int);
 8006598:	f8cd b004 	str.w	fp, [sp, #4]
 800659c:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 80065a0:	e73a      	b.n	8006418 <chprintf+0x208>
      width = -width;
 80065a2:	46d0      	mov	r8, sl
      if ((*s == '-' || *s == '+') && filler == '0') {
 80065a4:	f89b 1000 	ldrb.w	r1, [fp]
 80065a8:	292d      	cmp	r1, #45	; 0x2d
 80065aa:	d00f      	beq.n	80065cc <chprintf+0x3bc>
 80065ac:	292b      	cmp	r1, #43	; 0x2b
 80065ae:	d00d      	beq.n	80065cc <chprintf+0x3bc>
        streamPut(chp, (uint8_t)filler);
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	4639      	mov	r1, r7
 80065b4:	4620      	mov	r0, r4
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	4798      	blx	r3
      } while (++width != 0);
 80065ba:	f11a 0a01 	adds.w	sl, sl, #1
 80065be:	d1f7      	bne.n	80065b0 <chprintf+0x3a0>
    while (--i >= 0) {
 80065c0:	2d00      	cmp	r5, #0
 80065c2:	eba9 0908 	sub.w	r9, r9, r8
 80065c6:	f6bf af34 	bge.w	8006432 <chprintf+0x222>
 80065ca:	e63b      	b.n	8006244 <chprintf+0x34>
      if ((*s == '-' || *s == '+') && filler == '0') {
 80065cc:	2f30      	cmp	r7, #48	; 0x30
 80065ce:	d1ef      	bne.n	80065b0 <chprintf+0x3a0>
        streamPut(chp, (uint8_t)*s++);
 80065d0:	6822      	ldr	r2, [r4, #0]
 80065d2:	4620      	mov	r0, r4
 80065d4:	68d2      	ldr	r2, [r2, #12]
 80065d6:	f10b 0b01 	add.w	fp, fp, #1
        n++;
 80065da:	f109 0901 	add.w	r9, r9, #1
    while (--i >= 0) {
 80065de:	3d01      	subs	r5, #1
        streamPut(chp, (uint8_t)*s++);
 80065e0:	4790      	blx	r2
        i--;
 80065e2:	e7e5      	b.n	80065b0 <chprintf+0x3a0>
        *p++ = '-';
 80065e4:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80065e6:	4240      	negs	r0, r0
        *p++ = '-';
 80065e8:	f88d 300c 	strb.w	r3, [sp, #12]
 80065ec:	f10d 080d 	add.w	r8, sp, #13
 80065f0:	ab03      	add	r3, sp, #12
 80065f2:	e74b      	b.n	800648c <chprintf+0x27c>
    if (width < 0) {
 80065f4:	4675      	mov	r5, lr
      width = -width;
 80065f6:	46d0      	mov	r8, sl
    if (width < 0) {
 80065f8:	f10d 0b0c 	add.w	fp, sp, #12
 80065fc:	e7d2      	b.n	80065a4 <chprintf+0x394>
      for (p = s; *p && (--precision >= 0); p++)
 80065fe:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8006602:	2900      	cmp	r1, #0
 8006604:	d1b4      	bne.n	8006570 <chprintf+0x360>
    if ((width -= i) < 0) {
 8006606:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
    if (left_align == false) {
 800660a:	f1be 0f00 	cmp.w	lr, #0
 800660e:	d103      	bne.n	8006618 <chprintf+0x408>
    if (width < 0) {
 8006610:	2a00      	cmp	r2, #0
      width = -width;
 8006612:	f1ca 0a00 	rsb	sl, sl, #0
    if (width < 0) {
 8006616:	dc12      	bgt.n	800663e <chprintf+0x42e>
    if (left_align == false) {
 8006618:	2720      	movs	r7, #32
 800661a:	e718      	b.n	800644e <chprintf+0x23e>
      if (c == 0) {
 800661c:	f04f 080a 	mov.w	r8, #10
 8006620:	e75b      	b.n	80064da <chprintf+0x2ca>
      if (precision == 0) {
 8006622:	b938      	cbnz	r0, 8006634 <chprintf+0x424>
      for (p = s; *p && (--precision >= 0); p++)
 8006624:	f647 70fe 	movw	r0, #32766	; 0x7ffe
        s = "(null)";
 8006628:	f8df b020 	ldr.w	fp, [pc, #32]	; 800664c <chprintf+0x43c>
 800662c:	e7a0      	b.n	8006570 <chprintf+0x360>
    p = tmpbuf;
 800662e:	ab03      	add	r3, sp, #12
 8006630:	4698      	mov	r8, r3
 8006632:	e72b      	b.n	800648c <chprintf+0x27c>
        s = "(null)";
 8006634:	f8df b014 	ldr.w	fp, [pc, #20]	; 800664c <chprintf+0x43c>
 8006638:	e798      	b.n	800656c <chprintf+0x35c>
  int n = 0;
 800663a:	4689      	mov	r9, r1
  return formatted_bytes;
 800663c:	e6e1      	b.n	8006402 <chprintf+0x1f2>
      width = -width;
 800663e:	46d0      	mov	r8, sl
    if (width < 0) {
 8006640:	2720      	movs	r7, #32
 8006642:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006646:	e7ad      	b.n	80065a4 <chprintf+0x394>
 8006648:	cccccccd 	.word	0xcccccccd
 800664c:	08010108 	.word	0x08010108

08006650 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 8006654:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8006860 <shellThread+0x210>
 8006658:	4a82      	ldr	r2, [pc, #520]	; (8006864 <shellThread+0x214>)
 800665a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800665e:	b09b      	sub	sp, #108	; 0x6c
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 8006660:	4981      	ldr	r1, [pc, #516]	; (8006868 <shellThread+0x218>)
THD_FUNCTION(shellThread, p) {
 8006662:	9000      	str	r0, [sp, #0]
  const ShellCommand *scp = scfg->sc_commands;
 8006664:	e9d0 7000 	ldrd	r7, r0, [r0]
 8006668:	61da      	str	r2, [r3, #28]
 800666a:	9001      	str	r0, [sp, #4]
  chprintf(chp, SHELL_NEWLINE_STR);
 800666c:	4638      	mov	r0, r7
 800666e:	f7ff fdcf 	bl	8006210 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 8006672:	4638      	mov	r0, r7
 8006674:	497d      	ldr	r1, [pc, #500]	; (800686c <shellThread+0x21c>)
 8006676:	f7ff fdcb 	bl	8006210 <chprintf>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 800667a:	f8d8 300c 	ldr.w	r3, [r8, #12]
#if !defined(__CHIBIOS_NIL__)
  while (!chThdShouldTerminateX()) {
 800667e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006682:	075a      	lsls	r2, r3, #29
 8006684:	f100 809a 	bmi.w	80067bc <shellThread+0x16c>
#else
  while (true) {
#endif
    chprintf(chp, SHELL_PROMPT_STR);
 8006688:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8006870 <shellThread+0x220>
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, SHELL_NEWLINE_STR);
 800668c:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8006868 <shellThread+0x218>
 8006690:	ae0a      	add	r6, sp, #40	; 0x28
  char *p = line;
 8006692:	4635      	mov	r5, r6
    chprintf(chp, SHELL_PROMPT_STR);
 8006694:	4651      	mov	r1, sl
 8006696:	4638      	mov	r0, r7
 8006698:	f7ff fdba 	bl	8006210 <chprintf>
    if (shellGetLine(scfg, line, sizeof(line), shp)) {
 800669c:	9b00      	ldr	r3, [sp, #0]
 800669e:	681c      	ldr	r4, [r3, #0]
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	2201      	movs	r2, #1
 80066a4:	4620      	mov	r0, r4
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f10d 010f 	add.w	r1, sp, #15
 80066ac:	4798      	blx	r3
 80066ae:	2800      	cmp	r0, #0
 80066b0:	f000 809c 	beq.w	80067ec <shellThread+0x19c>
    if (c == 4) {
 80066b4:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80066b8:	2904      	cmp	r1, #4
 80066ba:	f000 8093 	beq.w	80067e4 <shellThread+0x194>
    if ((c == 8) || (c == 127)) {
 80066be:	2908      	cmp	r1, #8
      continue;
    }
#endif
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80066c0:	f10d 0367 	add.w	r3, sp, #103	; 0x67
    if ((c == 8) || (c == 127)) {
 80066c4:	d010      	beq.n	80066e8 <shellThread+0x98>
 80066c6:	297f      	cmp	r1, #127	; 0x7f
 80066c8:	d00e      	beq.n	80066e8 <shellThread+0x98>
    if (c == '\r') {
 80066ca:	290d      	cmp	r1, #13
 80066cc:	d01f      	beq.n	800670e <shellThread+0xbe>
    if (c < 0x20)
 80066ce:	291f      	cmp	r1, #31
 80066d0:	d9e6      	bls.n	80066a0 <shellThread+0x50>
    if (p < line + size - 1) {
 80066d2:	429d      	cmp	r5, r3
 80066d4:	d2e4      	bcs.n	80066a0 <shellThread+0x50>
      streamPut(chp, c);
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	4620      	mov	r0, r4
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	4798      	blx	r3
      *p++ = (char)c;
 80066de:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80066e2:	f805 3b01 	strb.w	r3, [r5], #1
 80066e6:	e7db      	b.n	80066a0 <shellThread+0x50>
      if (p != line) {
 80066e8:	42b5      	cmp	r5, r6
 80066ea:	d0d9      	beq.n	80066a0 <shellThread+0x50>
        streamPut(chp, 0x08);
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	2108      	movs	r1, #8
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	4620      	mov	r0, r4
 80066f4:	4798      	blx	r3
        streamPut(chp, 0x20);
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	2120      	movs	r1, #32
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	4620      	mov	r0, r4
 80066fe:	4798      	blx	r3
        streamPut(chp, 0x08);
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	2108      	movs	r1, #8
 8006704:	4620      	mov	r0, r4
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4798      	blx	r3
        p--;
 800670a:	3d01      	subs	r5, #1
 800670c:	e7c8      	b.n	80066a0 <shellThread+0x50>
      *p = 0;
 800670e:	f04f 0b00 	mov.w	fp, #0
      chprintf(chp, SHELL_NEWLINE_STR);
 8006712:	4649      	mov	r1, r9
 8006714:	4620      	mov	r0, r4
 8006716:	f7ff fd7b 	bl	8006210 <chprintf>
    lp = parse_arguments(line, &tokp);
 800671a:	a904      	add	r1, sp, #16
      *p = 0;
 800671c:	f885 b000 	strb.w	fp, [r5]
    lp = parse_arguments(line, &tokp);
 8006720:	4630      	mov	r0, r6
 8006722:	f7fa ffad 	bl	8001680 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8006726:	a904      	add	r1, sp, #16
    lp = parse_arguments(line, &tokp);
 8006728:	4605      	mov	r5, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800672a:	2000      	movs	r0, #0
 800672c:	ac05      	add	r4, sp, #20
 800672e:	f7fa ffa7 	bl	8001680 <parse_arguments>
 8006732:	b160      	cbz	r0, 800674e <shellThread+0xfe>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8006734:	f1bb 0f04 	cmp.w	fp, #4
 8006738:	d04d      	beq.n	80067d6 <shellThread+0x186>
      args[n++] = lp;
 800673a:	f844 0b04 	str.w	r0, [r4], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800673e:	a904      	add	r1, sp, #16
 8006740:	2000      	movs	r0, #0
      args[n++] = lp;
 8006742:	f10b 0b01 	add.w	fp, fp, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8006746:	f7fa ff9b 	bl	8001680 <parse_arguments>
 800674a:	2800      	cmp	r0, #0
 800674c:	d1f2      	bne.n	8006734 <shellThread+0xe4>
    args[n] = NULL;
 800674e:	ab1a      	add	r3, sp, #104	; 0x68
 8006750:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8006754:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8006758:	b34d      	cbz	r5, 80067ae <shellThread+0x15e>
      if (strcmp(cmd, "help") == 0) {
 800675a:	4628      	mov	r0, r5
 800675c:	4945      	ldr	r1, [pc, #276]	; (8006874 <shellThread+0x224>)
 800675e:	f7f9 fdfb 	bl	8000358 <strcmp>
 8006762:	2800      	cmp	r0, #0
 8006764:	d14b      	bne.n	80067fe <shellThread+0x1ae>
        if (n > 0) {
 8006766:	f1bb 0f00 	cmp.w	fp, #0
 800676a:	d159      	bne.n	8006820 <shellThread+0x1d0>
        chprintf(chp, "Commands: help ");
 800676c:	4638      	mov	r0, r7
 800676e:	4942      	ldr	r1, [pc, #264]	; (8006878 <shellThread+0x228>)
 8006770:	f7ff fd4e 	bl	8006210 <chprintf>
  while (scp->sc_name != NULL) {
 8006774:	4c41      	ldr	r4, [pc, #260]	; (800687c <shellThread+0x22c>)
 8006776:	4a42      	ldr	r2, [pc, #264]	; (8006880 <shellThread+0x230>)
    chprintf(chp, "%s ", scp->sc_name);
 8006778:	4d42      	ldr	r5, [pc, #264]	; (8006884 <shellThread+0x234>)
 800677a:	4629      	mov	r1, r5
 800677c:	4638      	mov	r0, r7
 800677e:	f7ff fd47 	bl	8006210 <chprintf>
  while (scp->sc_name != NULL) {
 8006782:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8006786:	2a00      	cmp	r2, #0
 8006788:	d1f7      	bne.n	800677a <shellThread+0x12a>
        if (scp != NULL)
 800678a:	9b01      	ldr	r3, [sp, #4]
 800678c:	b15b      	cbz	r3, 80067a6 <shellThread+0x156>
  while (scp->sc_name != NULL) {
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	b14a      	cbz	r2, 80067a6 <shellThread+0x156>
 8006792:	461c      	mov	r4, r3
    chprintf(chp, "%s ", scp->sc_name);
 8006794:	4d3b      	ldr	r5, [pc, #236]	; (8006884 <shellThread+0x234>)
 8006796:	4629      	mov	r1, r5
 8006798:	4638      	mov	r0, r7
 800679a:	f7ff fd39 	bl	8006210 <chprintf>
  while (scp->sc_name != NULL) {
 800679e:	f854 2f08 	ldr.w	r2, [r4, #8]!
 80067a2:	2a00      	cmp	r2, #0
 80067a4:	d1f7      	bne.n	8006796 <shellThread+0x146>
        chprintf(chp, SHELL_NEWLINE_STR);
 80067a6:	4649      	mov	r1, r9
 80067a8:	4638      	mov	r0, r7
 80067aa:	f7ff fd31 	bl	8006210 <chprintf>
 80067ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
  while (!chThdShouldTerminateX()) {
 80067b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80067b6:	075b      	lsls	r3, r3, #29
 80067b8:	f57f af6b 	bpl.w	8006692 <shellThread+0x42>
 80067bc:	2320      	movs	r3, #32
 80067be:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 80067c2:	2100      	movs	r1, #0
 80067c4:	4830      	ldr	r0, [pc, #192]	; (8006888 <shellThread+0x238>)
 80067c6:	f7fe fb53 	bl	8004e70 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 80067ca:	4608      	mov	r0, r1
 80067cc:	f7fd fe38 	bl	8004440 <chThdExitS>
}
 80067d0:	b01b      	add	sp, #108	; 0x6c
 80067d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 80067d6:	4638      	mov	r0, r7
 80067d8:	492c      	ldr	r1, [pc, #176]	; (800688c <shellThread+0x23c>)
 80067da:	f7ff fd19 	bl	8006210 <chprintf>
    args[n] = NULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	9309      	str	r3, [sp, #36]	; 0x24
    if (cmd != NULL) {
 80067e2:	e7e4      	b.n	80067ae <shellThread+0x15e>
      chprintf(chp, "^D");
 80067e4:	4620      	mov	r0, r4
 80067e6:	492a      	ldr	r1, [pc, #168]	; (8006890 <shellThread+0x240>)
 80067e8:	f7ff fd12 	bl	8006210 <chprintf>
      chprintf(chp, SHELL_NEWLINE_STR);
 80067ec:	4638      	mov	r0, r7
 80067ee:	491e      	ldr	r1, [pc, #120]	; (8006868 <shellThread+0x218>)
 80067f0:	f7ff fd0e 	bl	8006210 <chprintf>
      chprintf(chp, "logout");
 80067f4:	4638      	mov	r0, r7
 80067f6:	4927      	ldr	r1, [pc, #156]	; (8006894 <shellThread+0x244>)
 80067f8:	f7ff fd0a 	bl	8006210 <chprintf>
      break;
 80067fc:	e7de      	b.n	80067bc <shellThread+0x16c>
 80067fe:	4c1f      	ldr	r4, [pc, #124]	; (800687c <shellThread+0x22c>)
  while (scp->sc_name != NULL) {
 8006800:	481f      	ldr	r0, [pc, #124]	; (8006880 <shellThread+0x230>)
 8006802:	e002      	b.n	800680a <shellThread+0x1ba>
 8006804:	f854 0f08 	ldr.w	r0, [r4, #8]!
 8006808:	b180      	cbz	r0, 800682c <shellThread+0x1dc>
    if (strcmp(scp->sc_name, name) == 0) {
 800680a:	4629      	mov	r1, r5
 800680c:	f7f9 fda4 	bl	8000358 <strcmp>
 8006810:	2800      	cmp	r0, #0
 8006812:	d1f7      	bne.n	8006804 <shellThread+0x1b4>
      scp->sc_function(chp, argc, argv);
 8006814:	4659      	mov	r1, fp
 8006816:	4638      	mov	r0, r7
 8006818:	6863      	ldr	r3, [r4, #4]
 800681a:	aa05      	add	r2, sp, #20
 800681c:	4798      	blx	r3
      return false;
 800681e:	e7c6      	b.n	80067ae <shellThread+0x15e>
          shellUsage(chp, "help");
 8006820:	4638      	mov	r0, r7
 8006822:	4a14      	ldr	r2, [pc, #80]	; (8006874 <shellThread+0x224>)
 8006824:	491c      	ldr	r1, [pc, #112]	; (8006898 <shellThread+0x248>)
 8006826:	f7ff fcf3 	bl	8006210 <chprintf>
          continue;
 800682a:	e7c0      	b.n	80067ae <shellThread+0x15e>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 800682c:	9b01      	ldr	r3, [sp, #4]
 800682e:	b163      	cbz	r3, 800684a <shellThread+0x1fa>
  while (scp->sc_name != NULL) {
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	b150      	cbz	r0, 800684a <shellThread+0x1fa>
 8006834:	461c      	mov	r4, r3
 8006836:	e002      	b.n	800683e <shellThread+0x1ee>
 8006838:	f854 0f08 	ldr.w	r0, [r4, #8]!
 800683c:	b128      	cbz	r0, 800684a <shellThread+0x1fa>
    if (strcmp(scp->sc_name, name) == 0) {
 800683e:	4629      	mov	r1, r5
 8006840:	f7f9 fd8a 	bl	8000358 <strcmp>
 8006844:	2800      	cmp	r0, #0
 8006846:	d1f7      	bne.n	8006838 <shellThread+0x1e8>
 8006848:	e7e4      	b.n	8006814 <shellThread+0x1c4>
        chprintf(chp, "%s", cmd);
 800684a:	462a      	mov	r2, r5
 800684c:	4638      	mov	r0, r7
 800684e:	4913      	ldr	r1, [pc, #76]	; (800689c <shellThread+0x24c>)
 8006850:	f7ff fcde 	bl	8006210 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8006854:	4638      	mov	r0, r7
 8006856:	4912      	ldr	r1, [pc, #72]	; (80068a0 <shellThread+0x250>)
 8006858:	f7ff fcda 	bl	8006210 <chprintf>
 800685c:	e7a7      	b.n	80067ae <shellThread+0x15e>
 800685e:	bf00      	nop
 8006860:	20001050 	.word	0x20001050
 8006864:	08010118 	.word	0x08010118
 8006868:	08012df8 	.word	0x08012df8
 800686c:	08010120 	.word	0x08010120
 8006870:	08010134 	.word	0x08010134
 8006874:	08010160 	.word	0x08010160
 8006878:	08010174 	.word	0x08010174
 800687c:	08012334 	.word	0x08012334
 8006880:	08010110 	.word	0x08010110
 8006884:	08010184 	.word	0x08010184
 8006888:	2000126c 	.word	0x2000126c
 800688c:	08010148 	.word	0x08010148
 8006890:	0801013c 	.word	0x0801013c
 8006894:	08010140 	.word	0x08010140
 8006898:	08010168 	.word	0x08010168
 800689c:	08010188 	.word	0x08010188
 80068a0:	0801018c 	.word	0x0801018c
	...

080068b0 <cmd_exit>:
  if (argc > 0) {
 80068b0:	2900      	cmp	r1, #0
 80068b2:	dc0c      	bgt.n	80068ce <cmd_exit+0x1e>
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 80068b4:	b508      	push	{r3, lr}
 80068b6:	2320      	movs	r3, #32
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	2100      	movs	r1, #0
 80068be:	4806      	ldr	r0, [pc, #24]	; (80068d8 <cmd_exit+0x28>)
 80068c0:	f7fe fad6 	bl	8004e70 <chEvtBroadcastFlagsI>
}
 80068c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chThdExitS(msg);
 80068c8:	4608      	mov	r0, r1
 80068ca:	f7fd bdb9 	b.w	8004440 <chThdExitS>
    shellUsage(chp, "exit");
 80068ce:	4a03      	ldr	r2, [pc, #12]	; (80068dc <cmd_exit+0x2c>)
 80068d0:	4903      	ldr	r1, [pc, #12]	; (80068e0 <cmd_exit+0x30>)
 80068d2:	f7ff bc9d 	b.w	8006210 <chprintf>
 80068d6:	bf00      	nop
 80068d8:	2000126c 	.word	0x2000126c
 80068dc:	08010110 	.word	0x08010110
 80068e0:	08010168 	.word	0x08010168
	...

080068f0 <cmd_info>:
  if (argc > 0) {
 80068f0:	2900      	cmp	r1, #0
 80068f2:	dc2e      	bgt.n	8006952 <cmd_info+0x62>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80068f4:	b530      	push	{r4, r5, lr}
 80068f6:	4604      	mov	r4, r0
 80068f8:	b083      	sub	sp, #12
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 80068fa:	4a18      	ldr	r2, [pc, #96]	; (800695c <cmd_info+0x6c>)
 80068fc:	4918      	ldr	r1, [pc, #96]	; (8006960 <cmd_info+0x70>)
 80068fe:	f7ff fc87 	bl	8006210 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 8006902:	4620      	mov	r0, r4
 8006904:	4a17      	ldr	r2, [pc, #92]	; (8006964 <cmd_info+0x74>)
 8006906:	4918      	ldr	r1, [pc, #96]	; (8006968 <cmd_info+0x78>)
 8006908:	f7ff fc82 	bl	8006210 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 800690c:	4620      	mov	r0, r4
 800690e:	4a17      	ldr	r2, [pc, #92]	; (800696c <cmd_info+0x7c>)
 8006910:	4917      	ldr	r1, [pc, #92]	; (8006970 <cmd_info+0x80>)
 8006912:	f7ff fc7d 	bl	8006210 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 8006916:	4620      	mov	r0, r4
 8006918:	4a16      	ldr	r2, [pc, #88]	; (8006974 <cmd_info+0x84>)
 800691a:	4917      	ldr	r1, [pc, #92]	; (8006978 <cmd_info+0x88>)
 800691c:	f7ff fc78 	bl	8006210 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 8006920:	4620      	mov	r0, r4
 8006922:	4a16      	ldr	r2, [pc, #88]	; (800697c <cmd_info+0x8c>)
 8006924:	4916      	ldr	r1, [pc, #88]	; (8006980 <cmd_info+0x90>)
 8006926:	f7ff fc73 	bl	8006210 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 800692a:	4d16      	ldr	r5, [pc, #88]	; (8006984 <cmd_info+0x94>)
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 800692c:	4620      	mov	r0, r4
 800692e:	4a16      	ldr	r2, [pc, #88]	; (8006988 <cmd_info+0x98>)
 8006930:	4916      	ldr	r1, [pc, #88]	; (800698c <cmd_info+0x9c>)
 8006932:	f7ff fc6d 	bl	8006210 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 8006936:	4620      	mov	r0, r4
 8006938:	4a15      	ldr	r2, [pc, #84]	; (8006990 <cmd_info+0xa0>)
 800693a:	4916      	ldr	r1, [pc, #88]	; (8006994 <cmd_info+0xa4>)
 800693c:	f7ff fc68 	bl	8006210 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 8006940:	4620      	mov	r0, r4
 8006942:	4b15      	ldr	r3, [pc, #84]	; (8006998 <cmd_info+0xa8>)
 8006944:	4a15      	ldr	r2, [pc, #84]	; (800699c <cmd_info+0xac>)
 8006946:	4916      	ldr	r1, [pc, #88]	; (80069a0 <cmd_info+0xb0>)
 8006948:	9500      	str	r5, [sp, #0]
 800694a:	f7ff fc61 	bl	8006210 <chprintf>
}
 800694e:	b003      	add	sp, #12
 8006950:	bd30      	pop	{r4, r5, pc}
    shellUsage(chp, "info");
 8006952:	4a14      	ldr	r2, [pc, #80]	; (80069a4 <cmd_info+0xb4>)
 8006954:	4914      	ldr	r1, [pc, #80]	; (80069a8 <cmd_info+0xb8>)
 8006956:	f7ff bc5b 	b.w	8006210 <chprintf>
 800695a:	bf00      	nop
 800695c:	0801019c 	.word	0x0801019c
 8006960:	080101a4 	.word	0x080101a4
 8006964:	080101b8 	.word	0x080101b8
 8006968:	080101d8 	.word	0x080101d8
 800696c:	080101ec 	.word	0x080101ec
 8006970:	080101f4 	.word	0x080101f4
 8006974:	08010208 	.word	0x08010208
 8006978:	08010214 	.word	0x08010214
 800697c:	08010228 	.word	0x08010228
 8006980:	08010240 	.word	0x08010240
 8006984:	080102d0 	.word	0x080102d0
 8006988:	08010254 	.word	0x08010254
 800698c:	08012d18 	.word	0x08012d18
 8006990:	08010280 	.word	0x08010280
 8006994:	08010294 	.word	0x08010294
 8006998:	080102a8 	.word	0x080102a8
 800699c:	080102ac 	.word	0x080102ac
 80069a0:	080102b8 	.word	0x080102b8
 80069a4:	08010194 	.word	0x08010194
 80069a8:	08010168 	.word	0x08010168
 80069ac:	00000000 	.word	0x00000000

080069b0 <cmd_echo>:
  if (argc != 1) {
 80069b0:	2901      	cmp	r1, #1
 80069b2:	d003      	beq.n	80069bc <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 80069b4:	4a03      	ldr	r2, [pc, #12]	; (80069c4 <cmd_echo+0x14>)
 80069b6:	4904      	ldr	r1, [pc, #16]	; (80069c8 <cmd_echo+0x18>)
 80069b8:	f7ff bc2a 	b.w	8006210 <chprintf>
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	4903      	ldr	r1, [pc, #12]	; (80069cc <cmd_echo+0x1c>)
 80069c0:	f7ff bc26 	b.w	8006210 <chprintf>
 80069c4:	080102dc 	.word	0x080102dc
 80069c8:	08010168 	.word	0x08010168
 80069cc:	08012cc0 	.word	0x08012cc0

080069d0 <cmd_systime>:
  if (argc > 0) {
 80069d0:	2900      	cmp	r1, #0
 80069d2:	dc06      	bgt.n	80069e2 <cmd_systime+0x12>
 80069d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTimeX());
 80069da:	4904      	ldr	r1, [pc, #16]	; (80069ec <cmd_systime+0x1c>)
 80069dc:	b292      	uxth	r2, r2
 80069de:	f7ff bc17 	b.w	8006210 <chprintf>
    shellUsage(chp, "systime");
 80069e2:	4a03      	ldr	r2, [pc, #12]	; (80069f0 <cmd_systime+0x20>)
 80069e4:	4903      	ldr	r1, [pc, #12]	; (80069f4 <cmd_systime+0x24>)
 80069e6:	f7ff bc13 	b.w	8006210 <chprintf>
 80069ea:	bf00      	nop
 80069ec:	080102f4 	.word	0x080102f4
 80069f0:	080102ec 	.word	0x080102ec
 80069f4:	08010168 	.word	0x08010168
	...

08006a00 <cmd_mem>:
  if (argc > 0) {
 8006a00:	2900      	cmp	r1, #0
 8006a02:	dc37      	bgt.n	8006a74 <cmd_mem+0x74>
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a06:	4606      	mov	r6, r0
 8006a08:	2320      	movs	r3, #32
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	4d1d      	ldr	r5, [pc, #116]	; (8006a84 <cmd_mem+0x84>)
 8006a10:	2400      	movs	r4, #0
 8006a12:	f105 000c 	add.w	r0, r5, #12
 8006a16:	f7fd fecb 	bl	80047b0 <chMtxLockS>
 8006a1a:	f384 8811 	msr	BASEPRI, r4
  while (H_NEXT(qp) != NULL) {
 8006a1e:	686b      	ldr	r3, [r5, #4]
 8006a20:	b363      	cbz	r3, 8006a7c <cmd_mem+0x7c>
  tpages = 0U;
 8006a22:	4622      	mov	r2, r4
  n = 0U;
 8006a24:	4627      	mov	r7, r4
    size_t pages = H_PAGES(H_NEXT(qp));
 8006a26:	6859      	ldr	r1, [r3, #4]
  while (H_NEXT(qp) != NULL) {
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	428c      	cmp	r4, r1
 8006a2c:	bf38      	it	cc
 8006a2e:	460c      	movcc	r4, r1
    n++;
 8006a30:	3701      	adds	r7, #1
    tpages += pages;
 8006a32:	440a      	add	r2, r1
  while (H_NEXT(qp) != NULL) {
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f6      	bne.n	8006a26 <cmd_mem+0x26>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8006a38:	00d5      	lsls	r5, r2, #3
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8006a3a:	00e4      	lsls	r4, r4, #3
  H_UNLOCK(heapp);
 8006a3c:	4812      	ldr	r0, [pc, #72]	; (8006a88 <cmd_mem+0x88>)
 8006a3e:	f7fd ff4f 	bl	80048e0 <chMtxUnlock>
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 8006a42:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <cmd_mem+0x8c>)
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 8006a44:	4630      	mov	r0, r6
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4911      	ldr	r1, [pc, #68]	; (8006a90 <cmd_mem+0x90>)
 8006a4c:	1ad2      	subs	r2, r2, r3
 8006a4e:	f7ff fbdf 	bl	8006210 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 8006a52:	463a      	mov	r2, r7
 8006a54:	4630      	mov	r0, r6
 8006a56:	490f      	ldr	r1, [pc, #60]	; (8006a94 <cmd_mem+0x94>)
 8006a58:	f7ff fbda 	bl	8006210 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 8006a5c:	462a      	mov	r2, r5
 8006a5e:	4630      	mov	r0, r6
 8006a60:	490d      	ldr	r1, [pc, #52]	; (8006a98 <cmd_mem+0x98>)
 8006a62:	f7ff fbd5 	bl	8006210 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 8006a66:	4622      	mov	r2, r4
 8006a68:	4630      	mov	r0, r6
}
 8006a6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 8006a6e:	490b      	ldr	r1, [pc, #44]	; (8006a9c <cmd_mem+0x9c>)
 8006a70:	f7ff bbce 	b.w	8006210 <chprintf>
    shellUsage(chp, "mem");
 8006a74:	4a0a      	ldr	r2, [pc, #40]	; (8006aa0 <cmd_mem+0xa0>)
 8006a76:	490b      	ldr	r1, [pc, #44]	; (8006aa4 <cmd_mem+0xa4>)
 8006a78:	f7ff bbca 	b.w	8006210 <chprintf>
  while (H_NEXT(qp) != NULL) {
 8006a7c:	461c      	mov	r4, r3
 8006a7e:	461d      	mov	r5, r3
  n = 0U;
 8006a80:	461f      	mov	r7, r3
 8006a82:	e7db      	b.n	8006a3c <cmd_mem+0x3c>
 8006a84:	2000115c 	.word	0x2000115c
 8006a88:	20001168 	.word	0x20001168
 8006a8c:	20001120 	.word	0x20001120
 8006a90:	08010300 	.word	0x08010300
 8006a94:	08010320 	.word	0x08010320
 8006a98:	08010338 	.word	0x08010338
 8006a9c:	08010358 	.word	0x08010358
 8006aa0:	080102fc 	.word	0x080102fc
 8006aa4:	08010168 	.word	0x08010168
	...

08006ab0 <cmd_threads>:
  if (argc > 0) {
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	dc5f      	bgt.n	8006b74 <cmd_threads+0xc4>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chprintf(chp, "core stklimit    stack     addr refs prio     state         name" SHELL_NEWLINE_STR);
 8006ab8:	4930      	ldr	r1, [pc, #192]	; (8006b7c <cmd_threads+0xcc>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006aba:	b087      	sub	sp, #28
 8006abc:	4607      	mov	r7, r0
 8006abe:	2620      	movs	r6, #32
  chprintf(chp, "core stklimit    stack     addr refs prio     state         name" SHELL_NEWLINE_STR);
 8006ac0:	f7ff fba6 	bl	8006210 <chprintf>
 8006ac4:	f386 8811 	msr	BASEPRI, r6
thread_t *chRegFirstThread(void) {
  thread_t *tp;
  uint8_t *p;

  chSysLock();
  p = (uint8_t *)REG_HEADER(currcore)->next;
 8006ac8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8006b80 <cmd_threads+0xd0>
 8006acc:	f858 3f28 	ldr.w	r3, [r8, #40]!
  /*lint -save -e413 [1.3] Safe to subtract a calculated offset.*/
  tp = (thread_t *)(p - __CH_OFFSETOF(thread_t, rqueue));
  /*lint -restore*/
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 8006ad0:	7d9a      	ldrb	r2, [r3, #22]
  tp = (thread_t *)(p - __CH_OFFSETOF(thread_t, rqueue));
 8006ad2:	f1a3 0410 	sub.w	r4, r3, #16
  tp->refs++;
 8006ad6:	3201      	adds	r2, #1
 8006ad8:	759a      	strb	r2, [r3, #22]
 8006ada:	2300      	movs	r3, #0
 8006adc:	f383 8811 	msr	BASEPRI, r3
#endif
  chSysUnlock();

  return tp;
 8006ae0:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8006b84 <cmd_threads+0xd4>
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8006ae4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8006b88 <cmd_threads+0xd8>
 8006ae8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8006b8c <cmd_threads+0xdc>
             tp->name == NULL ? "" : tp->name);
 8006aec:	69e5      	ldr	r5, [r4, #28]
             states[tp->state],
 8006aee:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8006af2:	2d00      	cmp	r5, #0
 8006af4:	bf08      	it	eq
 8006af6:	4655      	moveq	r5, sl
             (uint32_t)tp->refs - 1,
 8006af8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    core_id = tp->owner->core_id;
 8006afc:	69a3      	ldr	r3, [r4, #24]
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8006afe:	f8d4 c00c 	ldr.w	ip, [r4, #12]
             (uint32_t)tp->hdr.pqueue.prio,
 8006b02:	f8d4 e008 	ldr.w	lr, [r4, #8]
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8006b06:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 8006b0a:	3801      	subs	r0, #1
    core_id = tp->owner->core_id;
 8006b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    uint32_t stklimit = (uint32_t)tp->wabase;
 8006b0e:	6a23      	ldr	r3, [r4, #32]
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8006b10:	e9cd e103 	strd	lr, r1, [sp, #12]
 8006b14:	9002      	str	r0, [sp, #8]
 8006b16:	4649      	mov	r1, r9
 8006b18:	4638      	mov	r0, r7
 8006b1a:	e9cd c400 	strd	ip, r4, [sp]
 8006b1e:	9505      	str	r5, [sp, #20]
 8006b20:	f7ff fb76 	bl	8006210 <chprintf>
 8006b24:	f386 8811 	msr	BASEPRI, r6
  ch_queue_t *nqp;

  chSysLock();

  /* Next element in the registry queue.*/
  nqp = tp->rqueue.next;
 8006b28:	6923      	ldr	r3, [r4, #16]
  if (nqp == REG_HEADER(currcore)) {
 8006b2a:	4543      	cmp	r3, r8
 8006b2c:	d020      	beq.n	8006b70 <cmd_threads+0xc0>
    ntp = (thread_t *)(p - __CH_OFFSETOF(thread_t, rqueue));
    /*lint -restore*/

    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");

    ntp->refs++;
 8006b2e:	7d9a      	ldrb	r2, [r3, #22]
    ntp = (thread_t *)(p - __CH_OFFSETOF(thread_t, rqueue));
 8006b30:	f1a3 0510 	sub.w	r5, r3, #16
    ntp->refs++;
 8006b34:	3201      	adds	r2, #1
 8006b36:	759a      	strb	r2, [r3, #22]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f382 8811 	msr	BASEPRI, r2
 8006b3e:	f386 8811 	msr	BASEPRI, r6
  tp->refs--;
 8006b42:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8006b46:	3b01      	subs	r3, #1
 8006b48:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8006b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b4e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006b52:	2b0f      	cmp	r3, #15
 8006b54:	d004      	beq.n	8006b60 <cmd_threads+0xb0>
 8006b56:	f382 8811 	msr	BASEPRI, r2
  } while (tp != NULL);
 8006b5a:	b135      	cbz	r5, 8006b6a <cmd_threads+0xba>
 8006b5c:	462c      	mov	r4, r5
 8006b5e:	e7c5      	b.n	8006aec <cmd_threads+0x3c>
 8006b60:	4620      	mov	r0, r4
 8006b62:	f7fe fd4d 	bl	8005600 <chThdRelease.part.0>
 8006b66:	2d00      	cmp	r5, #0
 8006b68:	d1f8      	bne.n	8006b5c <cmd_threads+0xac>
}
 8006b6a:	b007      	add	sp, #28
 8006b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ntp = NULL;
 8006b70:	2500      	movs	r5, #0
 8006b72:	e7e1      	b.n	8006b38 <cmd_threads+0x88>
    shellUsage(chp, "threads");
 8006b74:	4a06      	ldr	r2, [pc, #24]	; (8006b90 <cmd_threads+0xe0>)
 8006b76:	4907      	ldr	r1, [pc, #28]	; (8006b94 <cmd_threads+0xe4>)
 8006b78:	f7ff bb4a 	b.w	8006210 <chprintf>
 8006b7c:	08010378 	.word	0x08010378
 8006b80:	20001050 	.word	0x20001050
 8006b84:	08012374 	.word	0x08012374
 8006b88:	08010190 	.word	0x08010190
 8006b8c:	080103bc 	.word	0x080103bc
 8006b90:	08011604 	.word	0x08011604
 8006b94:	08010168 	.word	0x08010168
	...

08006ba0 <cmd_test>:
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &oslib_test_suite);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006ba0:	b530      	push	{r4, r5, lr}
  thread_t *tp;
  tfunc_t tfp;

  (void)argv;
  if (argc != 1) {
 8006ba2:	2901      	cmp	r1, #1
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	b083      	sub	sp, #12
  if (argc != 1) {
 8006ba8:	d121      	bne.n	8006bee <cmd_test+0x4e>
 8006baa:	6810      	ldr	r0, [r2, #0]
    shellUsage(chp, "test rt|oslib");
    return;
  }
  if (!strcmp(argv[0], "rt")) {
 8006bac:	7803      	ldrb	r3, [r0, #0]
 8006bae:	2b72      	cmp	r3, #114	; 0x72
 8006bb0:	d015      	beq.n	8006bde <cmd_test+0x3e>
    tfp = test_rt;
  }
  else if (!strcmp(argv[0], "oslib")) {
 8006bb2:	4916      	ldr	r1, [pc, #88]	; (8006c0c <cmd_test+0x6c>)
 8006bb4:	f7f9 fbd0 	bl	8000358 <strcmp>
 8006bb8:	b9c8      	cbnz	r0, 8006bee <cmd_test+0x4e>
    tfp = test_oslib;
 8006bba:	4d15      	ldr	r5, [pc, #84]	; (8006c10 <cmd_test+0x70>)
  return __sch_get_currthread();
 8006bbc:	4b15      	ldr	r3, [pc, #84]	; (8006c14 <cmd_test+0x74>)
  }
  else {
    shellUsage(chp, "test rt|oslib");
    return;
  }
  tp = chThdCreateFromHeap(NULL, SHELL_CMD_TEST_WA_SIZE,
 8006bbe:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
  return chThdGetSelfX()->hdr.pqueue.prio;
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	4a13      	ldr	r2, [pc, #76]	; (8006c18 <cmd_test+0x78>)
 8006bca:	e9cd 5400 	strd	r5, r4, [sp]
 8006bce:	f7fe fc9f 	bl	8005510 <chThdCreateFromHeap>
                           "test", chThdGetPriorityX(),
                           tfp, chp);
  if (tp == NULL) {
 8006bd2:	b1a0      	cbz	r0, 8006bfe <cmd_test+0x5e>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
    return;
  }
  chThdWait(tp);
}
 8006bd4:	b003      	add	sp, #12
 8006bd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  chThdWait(tp);
 8006bda:	f7fe bd31 	b.w	8005640 <chThdWait>
  if (!strcmp(argv[0], "rt")) {
 8006bde:	7843      	ldrb	r3, [r0, #1]
 8006be0:	2b74      	cmp	r3, #116	; 0x74
 8006be2:	d1e6      	bne.n	8006bb2 <cmd_test+0x12>
 8006be4:	7883      	ldrb	r3, [r0, #2]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e3      	bne.n	8006bb2 <cmd_test+0x12>
    tfp = test_rt;
 8006bea:	4d0c      	ldr	r5, [pc, #48]	; (8006c1c <cmd_test+0x7c>)
 8006bec:	e7e6      	b.n	8006bbc <cmd_test+0x1c>
    shellUsage(chp, "test rt|oslib");
 8006bee:	4620      	mov	r0, r4
 8006bf0:	4a0b      	ldr	r2, [pc, #44]	; (8006c20 <cmd_test+0x80>)
 8006bf2:	490c      	ldr	r1, [pc, #48]	; (8006c24 <cmd_test+0x84>)
}
 8006bf4:	b003      	add	sp, #12
 8006bf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    shellUsage(chp, "test rt|oslib");
 8006bfa:	f7ff bb09 	b.w	8006210 <chprintf>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 8006bfe:	4620      	mov	r0, r4
 8006c00:	4909      	ldr	r1, [pc, #36]	; (8006c28 <cmd_test+0x88>)
}
 8006c02:	b003      	add	sp, #12
 8006c04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 8006c08:	f7ff bb02 	b.w	8006210 <chprintf>
 8006c0c:	080103f0 	.word	0x080103f0
 8006c10:	08001701 	.word	0x08001701
 8006c14:	20001050 	.word	0x20001050
 8006c18:	080114bc 	.word	0x080114bc
 8006c1c:	080016e1 	.word	0x080016e1
 8006c20:	080103e8 	.word	0x080103e8
 8006c24:	08010168 	.word	0x08010168
 8006c28:	080103f8 	.word	0x080103f8
 8006c2c:	00000000 	.word	0x00000000

08006c30 <get_ldnumber.lto_priv.0>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8006c30:	4601      	mov	r1, r0
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8006c32:	6800      	ldr	r0, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
 8006c34:	b160      	cbz	r0, 8006c50 <get_ldnumber.lto_priv.0+0x20>
 8006c36:	4602      	mov	r2, r0
 8006c38:	e001      	b.n	8006c3e <get_ldnumber.lto_priv.0+0xe>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8006c3a:	2b3a      	cmp	r3, #58	; 0x3a
 8006c3c:	d005      	beq.n	8006c4a <get_ldnumber.lto_priv.0+0x1a>
 8006c3e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006c42:	2b1f      	cmp	r3, #31
 8006c44:	d8f9      	bhi.n	8006c3a <get_ldnumber.lto_priv.0+0xa>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 8006c46:	2000      	movs	r0, #0
 8006c48:	4770      	bx	lr
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8006c4a:	1c83      	adds	r3, r0, #2
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d002      	beq.n	8006c56 <get_ldnumber.lto_priv.0+0x26>
	if (!tp) return vol;	/* Invalid path name? */
 8006c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006c54:	4770      	bx	lr
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8006c56:	7803      	ldrb	r3, [r0, #0]
 8006c58:	2b30      	cmp	r3, #48	; 0x30
 8006c5a:	d1f9      	bne.n	8006c50 <get_ldnumber.lto_priv.0+0x20>
			i = (int)*tp - '0';	/* Get the LD number */
 8006c5c:	2000      	movs	r0, #0
			*path = tt;		/* Snip the drive prefix off */
 8006c5e:	600a      	str	r2, [r1, #0]
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
	...

08006c70 <move_window.part.0.lto_priv.0>:
static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8006c72:	78c3      	ldrb	r3, [r0, #3]
static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
 8006c74:	4604      	mov	r4, r0
 8006c76:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8006c78:	b9ab      	cbnz	r3, 8006ca6 <move_window.part.0.lto_priv.0+0x36>
 8006c7a:	f100 073c 	add.w	r7, r0, #60	; 0x3c
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8006c7e:	7866      	ldrb	r6, [r4, #1]
    BYTE *buff,       /* Data buffer to store read data */
    DWORD sector,     /* Sector address (LBA) */
    UINT count        /* Number of sectors to read (1..255) */
)
{
  switch (pdrv) {
 8006c80:	b91e      	cbnz	r6, 8006c8a <move_window.part.0.lto_priv.0+0x1a>
    if (mmcStopSequentialRead(&FATFS_HAL_DEVICE))
        return RES_ERROR;
    return RES_OK;
#else
  case SDC:
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 8006c82:	481e      	ldr	r0, [pc, #120]	; (8006cfc <move_window.part.0.lto_priv.0+0x8c>)
 8006c84:	7903      	ldrb	r3, [r0, #4]
 8006c86:	2b05      	cmp	r3, #5
 8006c88:	d005      	beq.n	8006c96 <move_window.part.0.lto_priv.0+0x26>
				res = FR_DISK_ERR;
 8006c8a:	2601      	movs	r6, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8006c8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
 8006c90:	4630      	mov	r0, r6
			fs->winsect = sect;
 8006c92:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8006c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return RES_NOTRDY;
    if (sdcRead(&FATFS_HAL_DEVICE, sector, buff, count))
 8006c96:	463a      	mov	r2, r7
 8006c98:	2301      	movs	r3, #1
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	f7fc fa28 	bl	80030f0 <sdcRead>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d0f5      	beq.n	8006c90 <move_window.part.0.lto_priv.0+0x20>
 8006ca4:	e7f1      	b.n	8006c8a <move_window.part.0.lto_priv.0+0x1a>
    const BYTE *buff, /* Data to be written */
    DWORD sector,     /* Sector address (LBA) */
    UINT count        /* Number of sectors to write (1..255) */
)
{
  switch (pdrv) {
 8006ca6:	7843      	ldrb	r3, [r0, #1]
 8006ca8:	b91b      	cbnz	r3, 8006cb2 <move_window.part.0.lto_priv.0+0x42>
    if (mmcStopSequentialWrite(&FATFS_HAL_DEVICE))
        return RES_ERROR;
    return RES_OK;
#else
  case SDC:
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 8006caa:	4e14      	ldr	r6, [pc, #80]	; (8006cfc <move_window.part.0.lto_priv.0+0x8c>)
 8006cac:	7933      	ldrb	r3, [r6, #4]
 8006cae:	2b05      	cmp	r3, #5
 8006cb0:	d002      	beq.n	8006cb8 <move_window.part.0.lto_priv.0+0x48>
			res = FR_DISK_ERR;
 8006cb2:	2601      	movs	r6, #1
}
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8006cb8:	f100 073c 	add.w	r7, r0, #60	; 0x3c
      return RES_NOTRDY;
    if (sdcWrite(&FATFS_HAL_DEVICE, sector, buff, count))
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	463a      	mov	r2, r7
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006cc4:	f7fc fa6c 	bl	80031a0 <sdcWrite>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d1f2      	bne.n	8006cb2 <move_window.part.0.lto_priv.0+0x42>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8006ccc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006cce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cd0:	6a22      	ldr	r2, [r4, #32]
 8006cd2:	1acb      	subs	r3, r1, r3
 8006cd4:	4293      	cmp	r3, r2
			fs->wflag = 0;	/* Clear window dirty flag */
 8006cd6:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8006cd8:	d2d1      	bcs.n	8006c7e <move_window.part.0.lto_priv.0+0xe>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8006cda:	78a3      	ldrb	r3, [r4, #2]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d1ce      	bne.n	8006c7e <move_window.part.0.lto_priv.0+0xe>
  switch (pdrv) {
 8006ce0:	7863      	ldrb	r3, [r4, #1]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1d1      	bne.n	8006c8a <move_window.part.0.lto_priv.0+0x1a>
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 8006ce6:	7933      	ldrb	r3, [r6, #4]
 8006ce8:	2b05      	cmp	r3, #5
 8006cea:	d1ce      	bne.n	8006c8a <move_window.part.0.lto_priv.0+0x1a>
    if (sdcWrite(&FATFS_HAL_DEVICE, sector, buff, count))
 8006cec:	4411      	add	r1, r2
 8006cee:	4630      	mov	r0, r6
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	463a      	mov	r2, r7
 8006cf4:	f7fc fa54 	bl	80031a0 <sdcWrite>
 8006cf8:	e7c1      	b.n	8006c7e <move_window.part.0.lto_priv.0+0xe>
 8006cfa:	bf00      	nop
 8006cfc:	200008e8 	.word	0x200008e8

08006d00 <get_fat.lto_priv.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006d00:	2901      	cmp	r1, #1
 8006d02:	d90f      	bls.n	8006d24 <get_fat.lto_priv.0+0x24>
{
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8006d06:	6805      	ldr	r5, [r0, #0]
 8006d08:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006d0a:	69eb      	ldr	r3, [r5, #28]
 8006d0c:	428b      	cmp	r3, r1
 8006d0e:	d801      	bhi.n	8006d14 <get_fat.lto_priv.0+0x14>
		val = 1;	/* Internal error */
 8006d10:	2001      	movs	r0, #1
}
 8006d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
 8006d14:	782b      	ldrb	r3, [r5, #0]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d8f9      	bhi.n	8006d10 <get_fat.lto_priv.0+0x10>
 8006d1c:	e8df f003 	tbb	[pc, r3]
 8006d20:	04172a3b 	.word	0x04172a3b
		val = 1;	/* Internal error */
 8006d24:	2001      	movs	r0, #1
}
 8006d26:	4770      	bx	lr
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8006d28:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8006d2c:	ea53 0102 	orrs.w	r1, r3, r2
 8006d30:	d058      	beq.n	8006de4 <get_fat.lto_priv.0+0xe4>
 8006d32:	6881      	ldr	r1, [r0, #8]
 8006d34:	2900      	cmp	r1, #0
 8006d36:	d055      	beq.n	8006de4 <get_fat.lto_priv.0+0xe4>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8006d38:	79c6      	ldrb	r6, [r0, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8006d3a:	1a61      	subs	r1, r4, r1
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8006d3c:	2e02      	cmp	r6, #2
 8006d3e:	d06e      	beq.n	8006e1e <get_fat.lto_priv.0+0x11e>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8006d40:	2e03      	cmp	r6, #3
 8006d42:	d152      	bne.n	8006dea <get_fat.lto_priv.0+0xea>
 8006d44:	6983      	ldr	r3, [r0, #24]
 8006d46:	428b      	cmp	r3, r1
 8006d48:	d94f      	bls.n	8006dea <get_fat.lto_priv.0+0xea>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8006d4a:	1c60      	adds	r0, r4, #1
}
 8006d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d4e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006d50:	6bab      	ldr	r3, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d52:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006d56:	4299      	cmp	r1, r3
 8006d58:	d004      	beq.n	8006d64 <get_fat.lto_priv.0+0x64>
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f7ff ff88 	bl	8006c70 <move_window.part.0.lto_priv.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d156      	bne.n	8006e12 <get_fat.lto_priv.0+0x112>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8006d64:	00a4      	lsls	r4, r4, #2
 8006d66:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8006d6a:	4425      	add	r5, r4
 8006d6c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8006d6e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8006d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d74:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006d76:	6bab      	ldr	r3, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d78:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006d7c:	4299      	cmp	r1, r3
 8006d7e:	d004      	beq.n	8006d8a <get_fat.lto_priv.0+0x8a>
 8006d80:	4628      	mov	r0, r5
 8006d82:	f7ff ff75 	bl	8006c70 <move_window.part.0.lto_priv.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d143      	bne.n	8006e12 <get_fat.lto_priv.0+0x112>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8006d8a:	0064      	lsls	r4, r4, #1
 8006d8c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8006d90:	4425      	add	r5, r4
 8006d92:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
}
 8006d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d96:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006d98:	6baa      	ldr	r2, [r5, #56]	; 0x38
			bc = (UINT)clst; bc += bc / 2;
 8006d9a:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d9e:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006da2:	4291      	cmp	r1, r2
 8006da4:	d005      	beq.n	8006db2 <get_fat.lto_priv.0+0xb2>
 8006da6:	4628      	mov	r0, r5
 8006da8:	f7ff ff62 	bl	8006c70 <move_window.part.0.lto_priv.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dac:	bb88      	cbnz	r0, 8006e12 <get_fat.lto_priv.0+0x112>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dae:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006db0:	6baa      	ldr	r2, [r5, #56]	; 0x38
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8006db2:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006db4:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8006db8:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8006dbc:	442e      	add	r6, r5
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006dbe:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8006dc0:	f896 603c 	ldrb.w	r6, [r6, #60]	; 0x3c
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006dc4:	d003      	beq.n	8006dce <get_fat.lto_priv.0+0xce>
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f7ff ff52 	bl	8006c70 <move_window.part.0.lto_priv.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dcc:	bb08      	cbnz	r0, 8006e12 <get_fat.lto_priv.0+0x112>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8006dce:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8006dd2:	443d      	add	r5, r7
 8006dd4:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8006dd8:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8006dda:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8006dde:	d51b      	bpl.n	8006e18 <get_fat.lto_priv.0+0x118>
 8006de0:	0900      	lsrs	r0, r0, #4
}
 8006de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8006de4:	79c3      	ldrb	r3, [r0, #7]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d192      	bne.n	8006d10 <get_fat.lto_priv.0+0x10>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8006dea:	69c3      	ldr	r3, [r0, #28]
 8006dec:	bb23      	cbnz	r3, 8006e38 <get_fat.lto_priv.0+0x138>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006dee:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006df0:	6bab      	ldr	r3, [r5, #56]	; 0x38
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006df2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006df6:	4299      	cmp	r1, r3
 8006df8:	d003      	beq.n	8006e02 <get_fat.lto_priv.0+0x102>
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f7ff ff38 	bl	8006c70 <move_window.part.0.lto_priv.0>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006e00:	b938      	cbnz	r0, 8006e12 <get_fat.lto_priv.0+0x112>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8006e02:	00a3      	lsls	r3, r4, #2
 8006e04:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8006e08:	441d      	add	r5, r3
 8006e0a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8006e0c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
}
 8006e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8006e18:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 8006e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
 8006e24:	8968      	ldrh	r0, [r5, #10]
 8006e26:	0a5b      	lsrs	r3, r3, #9
 8006e28:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006e2c:	fbb3 f3f0 	udiv	r3, r3, r0
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8006e30:	4299      	cmp	r1, r3
 8006e32:	f63f af6d 	bhi.w	8006d10 <get_fat.lto_priv.0+0x10>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8006e36:	d188      	bne.n	8006d4a <get_fat.lto_priv.0+0x4a>
 8006e38:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
 8006e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e3e:	bf00      	nop

08006e40 <check_fs.lto_priv.0>:
static UINT check_fs (	/* 0:FAT VBR, 1:exFAT VBR, 2:Valid BS but not FAT, 3:Invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8006e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e44:	2200      	movs	r2, #0
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006e46:	4299      	cmp	r1, r3
{
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8006e4c:	70c2      	strb	r2, [r0, #3]
 8006e4e:	6383      	str	r3, [r0, #56]	; 0x38
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006e50:	d003      	beq.n	8006e5a <check_fs.lto_priv.0+0x1a>
 8006e52:	f7ff ff0d 	bl	8006c70 <move_window.part.0.lto_priv.0>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d14c      	bne.n	8006ef4 <check_fs.lto_priv.0+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
 8006e5a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006e5e:	f8b4 223a 	ldrh.w	r2, [r4, #570]	; 0x23a
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d142      	bne.n	8006eec <check_fs.lto_priv.0+0xac>
		r = *d++ - *s++;
 8006e66:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
 8006e6a:	4923      	ldr	r1, [pc, #140]	; (8006ef8 <check_fs.lto_priv.0+0xb8>)
 8006e6c:	f104 023d 	add.w	r2, r4, #61	; 0x3d
 8006e70:	f1ae 03eb 	sub.w	r3, lr, #235	; 0xeb
	} while (--cnt && r == 0);
 8006e74:	f104 0c47 	add.w	ip, r4, #71	; 0x47
 8006e78:	b953      	cbnz	r3, 8006e90 <check_fs.lto_priv.0+0x50>
		r = *d++ - *s++;
 8006e7a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006e7e:	f811 0b01 	ldrb.w	r0, [r1], #1
	} while (--cnt && r == 0);
 8006e82:	4562      	cmp	r2, ip
		r = *d++ - *s++;
 8006e84:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 8006e88:	d1f6      	bne.n	8006e78 <check_fs.lto_priv.0+0x38>

	if (FF_FS_EXFAT && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 8006e8a:	b90b      	cbnz	r3, 8006e90 <check_fs.lto_priv.0+0x50>
 8006e8c:	2001      	movs	r0, #1
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
	}
	return 2;	/* Valid BS but not FAT */
}
 8006e8e:	bd10      	pop	{r4, pc}
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8006e90:	f1be 0feb 	cmp.w	lr, #235	; 0xeb
 8006e94:	d008      	beq.n	8006ea8 <check_fs.lto_priv.0+0x68>
 8006e96:	f10e 0e18 	add.w	lr, lr, #24
 8006e9a:	fa5f fe8e 	uxtb.w	lr, lr
 8006e9e:	f1be 0f01 	cmp.w	lr, #1
 8006ea2:	d901      	bls.n	8006ea8 <check_fs.lto_priv.0+0x68>
	return 2;	/* Valid BS but not FAT */
 8006ea4:	2002      	movs	r0, #2
}
 8006ea6:	bd10      	pop	{r4, pc}
	} while (--cnt && r == 0);
 8006ea8:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8006eac:	2b46      	cmp	r3, #70	; 0x46
 8006eae:	d107      	bne.n	8006ec0 <check_fs.lto_priv.0+0x80>
 8006eb0:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
 8006eb4:	2b41      	cmp	r3, #65	; 0x41
 8006eb6:	d103      	bne.n	8006ec0 <check_fs.lto_priv.0+0x80>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8006eb8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006ebc:	2b54      	cmp	r3, #84	; 0x54
 8006ebe:	d017      	beq.n	8006ef0 <check_fs.lto_priv.0+0xb0>
		r = *d++ - *s++;
 8006ec0:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8006ec4:	490d      	ldr	r1, [pc, #52]	; (8006efc <check_fs.lto_priv.0+0xbc>)
 8006ec6:	f104 028f 	add.w	r2, r4, #143	; 0x8f
 8006eca:	3b46      	subs	r3, #70	; 0x46
	} while (--cnt && r == 0);
 8006ecc:	3493      	adds	r4, #147	; 0x93
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e8      	bne.n	8006ea4 <check_fs.lto_priv.0+0x64>
		r = *d++ - *s++;
 8006ed2:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006ed6:	f811 0b01 	ldrb.w	r0, [r1], #1
	} while (--cnt && r == 0);
 8006eda:	42a2      	cmp	r2, r4
		r = *d++ - *s++;
 8006edc:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 8006ee0:	d1f5      	bne.n	8006ece <check_fs.lto_priv.0+0x8e>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	bf14      	ite	ne
 8006ee6:	2002      	movne	r0, #2
 8006ee8:	2000      	moveq	r0, #0
}
 8006eea:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
 8006eec:	2003      	movs	r0, #3
}
 8006eee:	bd10      	pop	{r4, pc}
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8006ef0:	2000      	movs	r0, #0
}
 8006ef2:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8006ef4:	2004      	movs	r0, #4
}
 8006ef6:	bd10      	pop	{r4, pc}
 8006ef8:	08010409 	.word	0x08010409
 8006efc:	08010415 	.word	0x08010415

08006f00 <ff_wtoupper.part.0>:
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
 8006f00:	4a2a      	ldr	r2, [pc, #168]	; (8006fac <ff_wtoupper.part.0+0xac>)
 8006f02:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006f06:	f641 517d 	movw	r1, #7549	; 0x1d7d
 8006f0a:	4b29      	ldr	r3, [pc, #164]	; (8006fb0 <ff_wtoupper.part.0+0xb0>)
 8006f0c:	bf34      	ite	cc
 8006f0e:	2161      	movcc	r1, #97	; 0x61
 8006f10:	4613      	movcs	r3, r2
DWORD ff_wtoupper (	/* Returns up-converted code point */
 8006f12:	b530      	push	{r4, r5, lr}
		uc = (WORD)uni;
 8006f14:	b284      	uxth	r4, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 8006f16:	3304      	adds	r3, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8006f18:	b191      	cbz	r1, 8006f40 <ff_wtoupper.part.0+0x40>
 8006f1a:	428c      	cmp	r4, r1
 8006f1c:	d310      	bcc.n	8006f40 <ff_wtoupper.part.0+0x40>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006f1e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8006f22:	461d      	mov	r5, r3
 8006f24:	fa5f fc82 	uxtb.w	ip, r2
			if (uc < bc + nc) {	/* In the block? */
 8006f28:	eb0c 0e01 	add.w	lr, ip, r1
 8006f2c:	4570      	cmp	r0, lr
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006f2e:	ea4f 2212 	mov.w	r2, r2, lsr #8
			if (uc < bc + nc) {	/* In the block? */
 8006f32:	db06      	blt.n	8006f42 <ff_wtoupper.part.0+0x42>
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8006f34:	3304      	adds	r3, #4
 8006f36:	b16a      	cbz	r2, 8006f54 <ff_wtoupper.part.0+0x54>
			bc = *p++;								/* Get the block base */
 8006f38:	f833 1c04 	ldrh.w	r1, [r3, #-4]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8006f3c:	2900      	cmp	r1, #0
 8006f3e:	d1ec      	bne.n	8006f1a <ff_wtoupper.part.0+0x1a>
		}
		uni = uc;
	}

	return uni;
}
 8006f40:	bd30      	pop	{r4, r5, pc}
				switch (cmd) {
 8006f42:	2a08      	cmp	r2, #8
 8006f44:	d8fc      	bhi.n	8006f40 <ff_wtoupper.part.0+0x40>
 8006f46:	e8df f002 	tbb	[pc, r2]
 8006f4a:	120e      	.short	0x120e
 8006f4c:	24201c18 	.word	0x24201c18
 8006f50:	2c28      	.short	0x2c28
 8006f52:	0a          	.byte	0x0a
 8006f53:	00          	.byte	0x00
			bc = *p++;								/* Get the block base */
 8006f54:	f835 101c 	ldrh.w	r1, [r5, ip, lsl #1]
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8006f58:	eb05 034c 	add.w	r3, r5, ip, lsl #1
 8006f5c:	e7db      	b.n	8006f16 <ff_wtoupper.part.0+0x16>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8006f5e:	f5a4 50e3 	sub.w	r0, r4, #7264	; 0x1c60
		uni = uc;
 8006f62:	b280      	uxth	r0, r0
}
 8006f64:	bd30      	pop	{r4, r5, pc}
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8006f66:	1a41      	subs	r1, r0, r1
		uni = uc;
 8006f68:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 8006f6c:	bd30      	pop	{r4, r5, pc}
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8006f6e:	1a63      	subs	r3, r4, r1
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	1ae3      	subs	r3, r4, r3
		uni = uc;
 8006f76:	b298      	uxth	r0, r3
}
 8006f78:	bd30      	pop	{r4, r5, pc}
				case 2: uc -= 16; break;			/* Shift -16 */
 8006f7a:	f1a4 0010 	sub.w	r0, r4, #16
		uni = uc;
 8006f7e:	b280      	uxth	r0, r0
}
 8006f80:	bd30      	pop	{r4, r5, pc}
				case 3:	uc -= 32; break;			/* Shift -32 */
 8006f82:	f1a4 0020 	sub.w	r0, r4, #32
		uni = uc;
 8006f86:	b280      	uxth	r0, r0
}
 8006f88:	bd30      	pop	{r4, r5, pc}
				case 4:	uc -= 48; break;			/* Shift -48 */
 8006f8a:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
		uni = uc;
 8006f8e:	b280      	uxth	r0, r0
}
 8006f90:	bd30      	pop	{r4, r5, pc}
				case 5:	uc -= 26; break;			/* Shift -26 */
 8006f92:	f1a4 001a 	sub.w	r0, r4, #26
		uni = uc;
 8006f96:	b280      	uxth	r0, r0
}
 8006f98:	bd30      	pop	{r4, r5, pc}
				case 6:	uc += 8; break;				/* Shift +8 */
 8006f9a:	f104 0008 	add.w	r0, r4, #8
		uni = uc;
 8006f9e:	b280      	uxth	r0, r0
}
 8006fa0:	bd30      	pop	{r4, r5, pc}
				case 7: uc -= 80; break;			/* Shift -80 */
 8006fa2:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
		uni = uc;
 8006fa6:	b280      	uxth	r0, r0
}
 8006fa8:	bd30      	pop	{r4, r5, pc}
 8006faa:	bf00      	nop
 8006fac:	08011a9c 	.word	0x08011a9c
 8006fb0:	080118a8 	.word	0x080118a8
	...

08006fc0 <__test_assert>:
 8006fc0:	b108      	cbz	r0, 8006fc6 <__test_assert+0x6>
  return false;
 8006fc2:	2000      	movs	r0, #0
}
 8006fc4:	4770      	bx	lr
  chtest.global_fail     = true;
 8006fc6:	f240 1201 	movw	r2, #257	; 0x101
 8006fca:	4b02      	ldr	r3, [pc, #8]	; (8006fd4 <__test_assert+0x14>)
    return __test_fail(msg);
 8006fcc:	2001      	movs	r0, #1
  chtest.failure_message = msg;
 8006fce:	6099      	str	r1, [r3, #8]
  chtest.global_fail     = true;
 8006fd0:	809a      	strh	r2, [r3, #4]
    return __test_fail(msg);
 8006fd2:	4770      	bx	lr
 8006fd4:	20001134 	.word	0x20001134
	...

08006fe0 <__test_assert_sequence>:
bool __test_assert_sequence(char *expected, const char *msg) {
 8006fe0:	b470      	push	{r4, r5, r6}
  while (cp < chtest.tokp) {
 8006fe2:	4d0d      	ldr	r5, [pc, #52]	; (8007018 <__test_assert_sequence+0x38>)
  char *cp = chtest.tokens_buffer;
 8006fe4:	f105 0610 	add.w	r6, r5, #16
 8006fe8:	4633      	mov	r3, r6
  while (cp < chtest.tokp) {
 8006fea:	68ec      	ldr	r4, [r5, #12]
 8006fec:	e005      	b.n	8006ffa <__test_assert_sequence+0x1a>
    if (*cp++ != *expected++)
 8006fee:	f813 cb01 	ldrb.w	ip, [r3], #1
 8006ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ff6:	4594      	cmp	ip, r2
 8006ff8:	d106      	bne.n	8007008 <__test_assert_sequence+0x28>
  while (cp < chtest.tokp) {
 8006ffa:	429c      	cmp	r4, r3
 8006ffc:	d8f7      	bhi.n	8006fee <__test_assert_sequence+0xe>
  if (*expected) {
 8006ffe:	7800      	ldrb	r0, [r0, #0]
 8007000:	b910      	cbnz	r0, 8007008 <__test_assert_sequence+0x28>
  chtest.tokp = chtest.tokens_buffer;
 8007002:	60ee      	str	r6, [r5, #12]
}
 8007004:	bc70      	pop	{r4, r5, r6}
 8007006:	4770      	bx	lr
  chtest.global_fail     = true;
 8007008:	f240 1301 	movw	r3, #257	; 0x101
     return __test_fail(msg);
 800700c:	2001      	movs	r0, #1
  chtest.failure_message = msg;
 800700e:	60a9      	str	r1, [r5, #8]
  chtest.global_fail     = true;
 8007010:	80ab      	strh	r3, [r5, #4]
}
 8007012:	bc70      	pop	{r4, r5, r6}
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	20001134 	.word	0x20001134
 800701c:	00000000 	.word	0x00000000

08007020 <rt_test_005_002_execute>:
static void rt_test_005_002_execute(void) {
 8007020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8007024:	2701      	movs	r7, #1
  return __sch_get_currthread();
 8007026:	4d6c      	ldr	r5, [pc, #432]	; (80071d8 <rt_test_005_002_execute+0x1b8>)
 8007028:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80071dc <rt_test_005_002_execute+0x1bc>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800702c:	68ea      	ldr	r2, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800702e:	4b6c      	ldr	r3, [pc, #432]	; (80071e0 <rt_test_005_002_execute+0x1c0>)
 8007030:	6891      	ldr	r1, [r2, #8]
 8007032:	486c      	ldr	r0, [pc, #432]	; (80071e4 <rt_test_005_002_execute+0x1c4>)
 8007034:	4a6c      	ldr	r2, [pc, #432]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 8007036:	3905      	subs	r1, #5
  test_set_step(1);
 8007038:	f8c9 7000 	str.w	r7, [r9]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800703c:	f006 ff98 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007040:	68eb      	ldr	r3, [r5, #12]
 8007042:	4c6a      	ldr	r4, [pc, #424]	; (80071ec <rt_test_005_002_execute+0x1cc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8007044:	6899      	ldr	r1, [r3, #8]
 8007046:	4a68      	ldr	r2, [pc, #416]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 8007048:	4b69      	ldr	r3, [pc, #420]	; (80071f0 <rt_test_005_002_execute+0x1d0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800704a:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800704c:	3904      	subs	r1, #4
 800704e:	4869      	ldr	r0, [pc, #420]	; (80071f4 <rt_test_005_002_execute+0x1d4>)
 8007050:	f006 ff8e 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007054:	68eb      	ldr	r3, [r5, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8007056:	4a64      	ldr	r2, [pc, #400]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 8007058:	6899      	ldr	r1, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800705a:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800705c:	4b66      	ldr	r3, [pc, #408]	; (80071f8 <rt_test_005_002_execute+0x1d8>)
 800705e:	3903      	subs	r1, #3
 8007060:	4866      	ldr	r0, [pc, #408]	; (80071fc <rt_test_005_002_execute+0x1dc>)
 8007062:	f006 ff85 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007066:	68eb      	ldr	r3, [r5, #12]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8007068:	4a5f      	ldr	r2, [pc, #380]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 800706a:	6899      	ldr	r1, [r3, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800706c:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800706e:	4b64      	ldr	r3, [pc, #400]	; (8007200 <rt_test_005_002_execute+0x1e0>)
 8007070:	3902      	subs	r1, #2
 8007072:	4864      	ldr	r0, [pc, #400]	; (8007204 <rt_test_005_002_execute+0x1e4>)
 8007074:	f006 ff7c 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007078:	68eb      	ldr	r3, [r5, #12]
 800707a:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800707c:	6899      	ldr	r1, [r3, #8]
 800707e:	4a5a      	ldr	r2, [pc, #360]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 8007080:	4b61      	ldr	r3, [pc, #388]	; (8007208 <rt_test_005_002_execute+0x1e8>)
 8007082:	4862      	ldr	r0, [pc, #392]	; (800720c <rt_test_005_002_execute+0x1ec>)
 8007084:	3901      	subs	r1, #1
 8007086:	f006 ff73 	bl	800df70 <chThdCreateStatic.constprop.0>
      threads[i] = NULL;
 800708a:	f04f 0a00 	mov.w	sl, #0
 800708e:	4626      	mov	r6, r4
 8007090:	46a0      	mov	r8, r4
 8007092:	6120      	str	r0, [r4, #16]
  for (i = 0; i < MAX_THREADS; i++)
 8007094:	f104 0714 	add.w	r7, r4, #20
    if (threads[i] != NULL) {
 8007098:	f854 0b04 	ldr.w	r0, [r4], #4
 800709c:	b118      	cbz	r0, 80070a6 <rt_test_005_002_execute+0x86>
      chThdWait(threads[i]);
 800709e:	f7fe facf 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 80070a2:	f844 ac04 	str.w	sl, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80070a6:	42bc      	cmp	r4, r7
 80070a8:	d1f6      	bne.n	8007098 <rt_test_005_002_execute+0x78>
    test_assert_sequence("ABCDE", "invalid sequence");
 80070aa:	4959      	ldr	r1, [pc, #356]	; (8007210 <rt_test_005_002_execute+0x1f0>)
 80070ac:	4859      	ldr	r0, [pc, #356]	; (8007214 <rt_test_005_002_execute+0x1f4>)
 80070ae:	f7ff ff97 	bl	8006fe0 <__test_assert_sequence>
 80070b2:	4682      	mov	sl, r0
 80070b4:	b108      	cbz	r0, 80070ba <rt_test_005_002_execute+0x9a>
}
 80070b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  test_set_step(2);
 80070ba:	2302      	movs	r3, #2
 80070bc:	f8c9 3000 	str.w	r3, [r9]
 80070c0:	68eb      	ldr	r3, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80070c2:	4a49      	ldr	r2, [pc, #292]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 80070c4:	6899      	ldr	r1, [r3, #8]
 80070c6:	4851      	ldr	r0, [pc, #324]	; (800720c <rt_test_005_002_execute+0x1ec>)
 80070c8:	4b4f      	ldr	r3, [pc, #316]	; (8007208 <rt_test_005_002_execute+0x1e8>)
 80070ca:	3901      	subs	r1, #1
 80070cc:	f006 ff50 	bl	800df70 <chThdCreateStatic.constprop.0>
 80070d0:	68eb      	ldr	r3, [r5, #12]
 80070d2:	f8c8 0010 	str.w	r0, [r8, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80070d6:	6899      	ldr	r1, [r3, #8]
 80070d8:	4a43      	ldr	r2, [pc, #268]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 80070da:	4b49      	ldr	r3, [pc, #292]	; (8007200 <rt_test_005_002_execute+0x1e0>)
 80070dc:	3902      	subs	r1, #2
 80070de:	4849      	ldr	r0, [pc, #292]	; (8007204 <rt_test_005_002_execute+0x1e4>)
 80070e0:	f006 ff46 	bl	800df70 <chThdCreateStatic.constprop.0>
 80070e4:	68eb      	ldr	r3, [r5, #12]
 80070e6:	f8c8 000c 	str.w	r0, [r8, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80070ea:	6899      	ldr	r1, [r3, #8]
 80070ec:	4a3e      	ldr	r2, [pc, #248]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 80070ee:	4b42      	ldr	r3, [pc, #264]	; (80071f8 <rt_test_005_002_execute+0x1d8>)
 80070f0:	3903      	subs	r1, #3
 80070f2:	4842      	ldr	r0, [pc, #264]	; (80071fc <rt_test_005_002_execute+0x1dc>)
 80070f4:	f006 ff3c 	bl	800df70 <chThdCreateStatic.constprop.0>
 80070f8:	68eb      	ldr	r3, [r5, #12]
 80070fa:	f8c8 0008 	str.w	r0, [r8, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80070fe:	6899      	ldr	r1, [r3, #8]
 8007100:	4a39      	ldr	r2, [pc, #228]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 8007102:	4b3b      	ldr	r3, [pc, #236]	; (80071f0 <rt_test_005_002_execute+0x1d0>)
 8007104:	3904      	subs	r1, #4
 8007106:	483b      	ldr	r0, [pc, #236]	; (80071f4 <rt_test_005_002_execute+0x1d4>)
 8007108:	f006 ff32 	bl	800df70 <chThdCreateStatic.constprop.0>
 800710c:	68eb      	ldr	r3, [r5, #12]
 800710e:	f8c8 0004 	str.w	r0, [r8, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8007112:	6899      	ldr	r1, [r3, #8]
 8007114:	4a34      	ldr	r2, [pc, #208]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 8007116:	4b32      	ldr	r3, [pc, #200]	; (80071e0 <rt_test_005_002_execute+0x1c0>)
 8007118:	4832      	ldr	r0, [pc, #200]	; (80071e4 <rt_test_005_002_execute+0x1c4>)
 800711a:	3905      	subs	r1, #5
 800711c:	f006 ff28 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007120:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8007218 <rt_test_005_002_execute+0x1f8>
 8007124:	f8c8 0000 	str.w	r0, [r8]
 8007128:	f1ab 0810 	sub.w	r8, fp, #16
 800712c:	4644      	mov	r4, r8
    if (threads[i] != NULL) {
 800712e:	b118      	cbz	r0, 8007138 <rt_test_005_002_execute+0x118>
      chThdWait(threads[i]);
 8007130:	f7fe fa86 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8007134:	f8c4 a000 	str.w	sl, [r4]
  for (i = 0; i < MAX_THREADS; i++)
 8007138:	455c      	cmp	r4, fp
 800713a:	d002      	beq.n	8007142 <rt_test_005_002_execute+0x122>
    if (threads[i] != NULL) {
 800713c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8007140:	e7f5      	b.n	800712e <rt_test_005_002_execute+0x10e>
    test_assert_sequence("ABCDE", "invalid sequence");
 8007142:	4933      	ldr	r1, [pc, #204]	; (8007210 <rt_test_005_002_execute+0x1f0>)
 8007144:	4833      	ldr	r0, [pc, #204]	; (8007214 <rt_test_005_002_execute+0x1f4>)
 8007146:	f7ff ff4b 	bl	8006fe0 <__test_assert_sequence>
 800714a:	4604      	mov	r4, r0
 800714c:	2800      	cmp	r0, #0
 800714e:	d1b2      	bne.n	80070b6 <rt_test_005_002_execute+0x96>
  test_set_step(3);
 8007150:	2303      	movs	r3, #3
 8007152:	f8c9 3000 	str.w	r3, [r9]
 8007156:	68eb      	ldr	r3, [r5, #12]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8007158:	4a23      	ldr	r2, [pc, #140]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 800715a:	6899      	ldr	r1, [r3, #8]
 800715c:	4825      	ldr	r0, [pc, #148]	; (80071f4 <rt_test_005_002_execute+0x1d4>)
 800715e:	4b24      	ldr	r3, [pc, #144]	; (80071f0 <rt_test_005_002_execute+0x1d0>)
 8007160:	3904      	subs	r1, #4
 8007162:	f006 ff05 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007166:	68eb      	ldr	r3, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8007168:	4a1f      	ldr	r2, [pc, #124]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 800716a:	6899      	ldr	r1, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800716c:	f8c8 0004 	str.w	r0, [r8, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8007170:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <rt_test_005_002_execute+0x1c0>)
 8007172:	3905      	subs	r1, #5
 8007174:	481b      	ldr	r0, [pc, #108]	; (80071e4 <rt_test_005_002_execute+0x1c4>)
 8007176:	f006 fefb 	bl	800df70 <chThdCreateStatic.constprop.0>
 800717a:	68eb      	ldr	r3, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800717c:	4a1a      	ldr	r2, [pc, #104]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 800717e:	6899      	ldr	r1, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8007180:	f8c8 0000 	str.w	r0, [r8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8007184:	4b20      	ldr	r3, [pc, #128]	; (8007208 <rt_test_005_002_execute+0x1e8>)
 8007186:	3901      	subs	r1, #1
 8007188:	4820      	ldr	r0, [pc, #128]	; (800720c <rt_test_005_002_execute+0x1ec>)
 800718a:	f006 fef1 	bl	800df70 <chThdCreateStatic.constprop.0>
 800718e:	68eb      	ldr	r3, [r5, #12]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8007190:	4a15      	ldr	r2, [pc, #84]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 8007192:	6899      	ldr	r1, [r3, #8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8007194:	f8c8 0010 	str.w	r0, [r8, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8007198:	4b19      	ldr	r3, [pc, #100]	; (8007200 <rt_test_005_002_execute+0x1e0>)
 800719a:	3902      	subs	r1, #2
 800719c:	4819      	ldr	r0, [pc, #100]	; (8007204 <rt_test_005_002_execute+0x1e4>)
 800719e:	f006 fee7 	bl	800df70 <chThdCreateStatic.constprop.0>
 80071a2:	68eb      	ldr	r3, [r5, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80071a4:	4a10      	ldr	r2, [pc, #64]	; (80071e8 <rt_test_005_002_execute+0x1c8>)
 80071a6:	6899      	ldr	r1, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80071a8:	f8c8 000c 	str.w	r0, [r8, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80071ac:	4b12      	ldr	r3, [pc, #72]	; (80071f8 <rt_test_005_002_execute+0x1d8>)
 80071ae:	4813      	ldr	r0, [pc, #76]	; (80071fc <rt_test_005_002_execute+0x1dc>)
 80071b0:	3903      	subs	r1, #3
 80071b2:	f006 fedd 	bl	800df70 <chThdCreateStatic.constprop.0>
 80071b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80071ba:	f856 0b04 	ldr.w	r0, [r6], #4
 80071be:	b118      	cbz	r0, 80071c8 <rt_test_005_002_execute+0x1a8>
      chThdWait(threads[i]);
 80071c0:	f7fe fa3e 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 80071c4:	f846 4c04 	str.w	r4, [r6, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80071c8:	42be      	cmp	r6, r7
 80071ca:	d1f6      	bne.n	80071ba <rt_test_005_002_execute+0x19a>
}
 80071cc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80071d0:	490f      	ldr	r1, [pc, #60]	; (8007210 <rt_test_005_002_execute+0x1f0>)
 80071d2:	4810      	ldr	r0, [pc, #64]	; (8007214 <rt_test_005_002_execute+0x1f4>)
 80071d4:	f7ff bf04 	b.w	8006fe0 <__test_assert_sequence>
 80071d8:	20001050 	.word	0x20001050
 80071dc:	20001134 	.word	0x20001134
 80071e0:	08010438 	.word	0x08010438
 80071e4:	20001270 	.word	0x20001270
 80071e8:	08000c51 	.word	0x08000c51
 80071ec:	200019a0 	.word	0x200019a0
 80071f0:	08011770 	.word	0x08011770
 80071f4:	200013e0 	.word	0x200013e0
 80071f8:	0801041c 	.word	0x0801041c
 80071fc:	20001550 	.word	0x20001550
 8007200:	0801006c 	.word	0x0801006c
 8007204:	200016c0 	.word	0x200016c0
 8007208:	08010068 	.word	0x08010068
 800720c:	20001830 	.word	0x20001830
 8007210:	08010420 	.word	0x08010420
 8007214:	08010434 	.word	0x08010434
 8007218:	200019b0 	.word	0x200019b0
 800721c:	00000000 	.word	0x00000000

08007220 <rt_test_007_002_execute>:
static void rt_test_007_002_execute(void) {
 8007220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8007222:	2701      	movs	r7, #1
  return __sch_get_currthread();
 8007224:	4d52      	ldr	r5, [pc, #328]	; (8007370 <rt_test_007_002_execute+0x150>)
 8007226:	4e53      	ldr	r6, [pc, #332]	; (8007374 <rt_test_007_002_execute+0x154>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8007228:	68ea      	ldr	r2, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800722a:	4b53      	ldr	r3, [pc, #332]	; (8007378 <rt_test_007_002_execute+0x158>)
 800722c:	6891      	ldr	r1, [r2, #8]
 800722e:	4853      	ldr	r0, [pc, #332]	; (800737c <rt_test_007_002_execute+0x15c>)
 8007230:	4a53      	ldr	r2, [pc, #332]	; (8007380 <rt_test_007_002_execute+0x160>)
 8007232:	3105      	adds	r1, #5
  test_set_step(1);
 8007234:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8007236:	f006 fe9b 	bl	800df70 <chThdCreateStatic.constprop.0>
 800723a:	4607      	mov	r7, r0
 800723c:	68eb      	ldr	r3, [r5, #12]
 800723e:	4c51      	ldr	r4, [pc, #324]	; (8007384 <rt_test_007_002_execute+0x164>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8007240:	6899      	ldr	r1, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8007242:	6027      	str	r7, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8007244:	4b50      	ldr	r3, [pc, #320]	; (8007388 <rt_test_007_002_execute+0x168>)
 8007246:	4a4e      	ldr	r2, [pc, #312]	; (8007380 <rt_test_007_002_execute+0x160>)
 8007248:	3101      	adds	r1, #1
 800724a:	4850      	ldr	r0, [pc, #320]	; (800738c <rt_test_007_002_execute+0x16c>)
 800724c:	f006 fe90 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007250:	4607      	mov	r7, r0
 8007252:	68eb      	ldr	r3, [r5, #12]
 8007254:	6067      	str	r7, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8007256:	6899      	ldr	r1, [r3, #8]
 8007258:	4a49      	ldr	r2, [pc, #292]	; (8007380 <rt_test_007_002_execute+0x160>)
 800725a:	4b4d      	ldr	r3, [pc, #308]	; (8007390 <rt_test_007_002_execute+0x170>)
 800725c:	3103      	adds	r1, #3
 800725e:	484d      	ldr	r0, [pc, #308]	; (8007394 <rt_test_007_002_execute+0x174>)
 8007260:	f006 fe86 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007264:	4607      	mov	r7, r0
 8007266:	68eb      	ldr	r3, [r5, #12]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8007268:	4a45      	ldr	r2, [pc, #276]	; (8007380 <rt_test_007_002_execute+0x160>)
 800726a:	6899      	ldr	r1, [r3, #8]
 800726c:	484a      	ldr	r0, [pc, #296]	; (8007398 <rt_test_007_002_execute+0x178>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800726e:	60a7      	str	r7, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8007270:	4b4a      	ldr	r3, [pc, #296]	; (800739c <rt_test_007_002_execute+0x17c>)
 8007272:	3104      	adds	r1, #4
 8007274:	f006 fe7c 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007278:	4607      	mov	r7, r0
 800727a:	68ea      	ldr	r2, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800727c:	4b48      	ldr	r3, [pc, #288]	; (80073a0 <rt_test_007_002_execute+0x180>)
 800727e:	6891      	ldr	r1, [r2, #8]
 8007280:	4848      	ldr	r0, [pc, #288]	; (80073a4 <rt_test_007_002_execute+0x184>)
 8007282:	4a3f      	ldr	r2, [pc, #252]	; (8007380 <rt_test_007_002_execute+0x160>)
 8007284:	3102      	adds	r1, #2
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8007286:	60e7      	str	r7, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8007288:	f006 fe72 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800728c:	2202      	movs	r2, #2
 800728e:	2320      	movs	r3, #32
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8007290:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8007292:	6032      	str	r2, [r6, #0]
 8007294:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 8007298:	4c43      	ldr	r4, [pc, #268]	; (80073a8 <rt_test_007_002_execute+0x188>)
 800729a:	68a3      	ldr	r3, [r4, #8]
 800729c:	3301      	adds	r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	60a3      	str	r3, [r4, #8]
 80072a2:	dd40      	ble.n	8007326 <rt_test_007_002_execute+0x106>
 80072a4:	2100      	movs	r1, #0
 80072a6:	f381 8811 	msr	BASEPRI, r1
 80072aa:	2320      	movs	r3, #32
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	68a3      	ldr	r3, [r4, #8]
 80072b2:	3301      	adds	r3, #1
 80072b4:	428b      	cmp	r3, r1
 80072b6:	60a3      	str	r3, [r4, #8]
 80072b8:	dd52      	ble.n	8007360 <rt_test_007_002_execute+0x140>
 80072ba:	2100      	movs	r1, #0
 80072bc:	f381 8811 	msr	BASEPRI, r1
 80072c0:	2320      	movs	r3, #32
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	68a3      	ldr	r3, [r4, #8]
 80072c8:	3301      	adds	r3, #1
 80072ca:	428b      	cmp	r3, r1
 80072cc:	60a3      	str	r3, [r4, #8]
 80072ce:	dd40      	ble.n	8007352 <rt_test_007_002_execute+0x132>
 80072d0:	2100      	movs	r1, #0
 80072d2:	f381 8811 	msr	BASEPRI, r1
 80072d6:	2320      	movs	r3, #32
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	68a3      	ldr	r3, [r4, #8]
 80072de:	3301      	adds	r3, #1
 80072e0:	428b      	cmp	r3, r1
 80072e2:	60a3      	str	r3, [r4, #8]
 80072e4:	dd2e      	ble.n	8007344 <rt_test_007_002_execute+0x124>
 80072e6:	2100      	movs	r1, #0
 80072e8:	f381 8811 	msr	BASEPRI, r1
 80072ec:	2320      	movs	r3, #32
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	68a3      	ldr	r3, [r4, #8]
 80072f4:	3301      	adds	r3, #1
 80072f6:	428b      	cmp	r3, r1
 80072f8:	60a3      	str	r3, [r4, #8]
 80072fa:	dd1c      	ble.n	8007336 <rt_test_007_002_execute+0x116>
 80072fc:	2600      	movs	r6, #0
 80072fe:	f386 8811 	msr	BASEPRI, r6
 8007302:	4c20      	ldr	r4, [pc, #128]	; (8007384 <rt_test_007_002_execute+0x164>)
 8007304:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8007308:	f854 0b04 	ldr.w	r0, [r4], #4
 800730c:	b118      	cbz	r0, 8007316 <rt_test_007_002_execute+0xf6>
      chThdWait(threads[i]);
 800730e:	f7fe f997 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8007312:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8007316:	42a5      	cmp	r5, r4
 8007318:	d1f6      	bne.n	8007308 <rt_test_007_002_execute+0xe8>
}
 800731a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800731e:	4923      	ldr	r1, [pc, #140]	; (80073ac <rt_test_007_002_execute+0x18c>)
 8007320:	4823      	ldr	r0, [pc, #140]	; (80073b0 <rt_test_007_002_execute+0x190>)
 8007322:	f7ff be5d 	b.w	8006fe0 <__test_assert_sequence>
  ch_queue_t *p = qp->next;
 8007326:	6820      	ldr	r0, [r4, #0]
    chSchWakeupS((thread_t *)ch_queue_fifo_remove(&sp->queue), MSG_OK);
 8007328:	2100      	movs	r1, #0
  qp->next       = p->next;
 800732a:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 800732c:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	f7fc fec6 	bl	80040c0 <chSchWakeupS>
 8007334:	e7b6      	b.n	80072a4 <rt_test_007_002_execute+0x84>
  ch_queue_t *p = qp->next;
 8007336:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8007338:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 800733a:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	f7fc febf 	bl	80040c0 <chSchWakeupS>
 8007342:	e7db      	b.n	80072fc <rt_test_007_002_execute+0xdc>
  ch_queue_t *p = qp->next;
 8007344:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8007346:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8007348:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	f7fc feb8 	bl	80040c0 <chSchWakeupS>
 8007350:	e7c9      	b.n	80072e6 <rt_test_007_002_execute+0xc6>
  ch_queue_t *p = qp->next;
 8007352:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8007354:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8007356:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	f7fc feb1 	bl	80040c0 <chSchWakeupS>
 800735e:	e7b7      	b.n	80072d0 <rt_test_007_002_execute+0xb0>
  ch_queue_t *p = qp->next;
 8007360:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8007362:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8007364:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8007366:	6023      	str	r3, [r4, #0]
 8007368:	f7fc feaa 	bl	80040c0 <chSchWakeupS>
 800736c:	e7a5      	b.n	80072ba <rt_test_007_002_execute+0x9a>
 800736e:	bf00      	nop
 8007370:	20001050 	.word	0x20001050
 8007374:	20001134 	.word	0x20001134
 8007378:	08010068 	.word	0x08010068
 800737c:	20001270 	.word	0x20001270
 8007380:	08001451 	.word	0x08001451
 8007384:	200019a0 	.word	0x200019a0
 8007388:	0801006c 	.word	0x0801006c
 800738c:	200013e0 	.word	0x200013e0
 8007390:	0801041c 	.word	0x0801041c
 8007394:	20001550 	.word	0x20001550
 8007398:	200016c0 	.word	0x200016c0
 800739c:	08011770 	.word	0x08011770
 80073a0:	08010438 	.word	0x08010438
 80073a4:	20001830 	.word	0x20001830
 80073a8:	20001254 	.word	0x20001254
 80073ac:	08010420 	.word	0x08010420
 80073b0:	08010434 	.word	0x08010434
	...

080073c0 <rt_test_007_003_execute>:
  test_set_step(1);
 80073c0:	2301      	movs	r3, #1
static void rt_test_007_003_execute(void) {
 80073c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 80073c6:	4d5e      	ldr	r5, [pc, #376]	; (8007540 <rt_test_007_003_execute+0x180>)
 80073c8:	2620      	movs	r6, #32
 80073ca:	602b      	str	r3, [r5, #0]
 80073cc:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 80073d0:	4c5c      	ldr	r4, [pc, #368]	; (8007544 <rt_test_007_003_execute+0x184>)
 80073d2:	68a2      	ldr	r2, [r4, #8]
 80073d4:	1e53      	subs	r3, r2, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	60a3      	str	r3, [r4, #8]
 80073da:	f04f 0300 	mov.w	r3, #0
 80073de:	db08      	blt.n	80073f2 <rt_test_007_003_execute+0x32>
 80073e0:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 80073e4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80073e8:	4a57      	ldr	r2, [pc, #348]	; (8007548 <rt_test_007_003_execute+0x188>)
  chtest.global_fail     = true;
 80073ea:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 80073ec:	60aa      	str	r2, [r5, #8]
}
 80073ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      sp->cnt++;
 80073f2:	60a2      	str	r2, [r4, #8]
 80073f4:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	42a3      	cmp	r3, r4
 80073fc:	d14f      	bne.n	800749e <rt_test_007_003_execute+0xde>
    test_assert(sem1.cnt == 0, "counter not zero");
 80073fe:	68a7      	ldr	r7, [r4, #8]
 8007400:	2f00      	cmp	r7, #0
 8007402:	d153      	bne.n	80074ac <rt_test_007_003_execute+0xec>
  test_set_step(2);
 8007404:	f04f 0c02 	mov.w	ip, #2
  return __sch_get_currthread();
 8007408:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800754c <rt_test_007_003_execute+0x18c>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800740c:	463b      	mov	r3, r7
  return chThdGetSelfX()->hdr.pqueue.prio;
 800740e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8007412:	484f      	ldr	r0, [pc, #316]	; (8007550 <rt_test_007_003_execute+0x190>)
 8007414:	6891      	ldr	r1, [r2, #8]
 8007416:	4a4f      	ldr	r2, [pc, #316]	; (8007554 <rt_test_007_003_execute+0x194>)
 8007418:	3901      	subs	r1, #1
  test_set_step(2);
 800741a:	f8c5 c000 	str.w	ip, [r5]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800741e:	f006 fda7 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007422:	4b4d      	ldr	r3, [pc, #308]	; (8007558 <rt_test_007_003_execute+0x198>)
 8007424:	6018      	str	r0, [r3, #0]
 8007426:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 800742a:	68a3      	ldr	r3, [r4, #8]
 800742c:	3b01      	subs	r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	60a3      	str	r3, [r4, #8]
 8007432:	db42      	blt.n	80074ba <rt_test_007_003_execute+0xfa>
 8007434:	f04f 0a00 	mov.w	sl, #0
 8007438:	f38a 8811 	msr	BASEPRI, sl
 800743c:	4e46      	ldr	r6, [pc, #280]	; (8007558 <rt_test_007_003_execute+0x198>)
 800743e:	f106 0914 	add.w	r9, r6, #20
    if (threads[i] != NULL) {
 8007442:	f856 0b04 	ldr.w	r0, [r6], #4
 8007446:	b118      	cbz	r0, 8007450 <rt_test_007_003_execute+0x90>
      chThdWait(threads[i]);
 8007448:	f7fe f8fa 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 800744c:	f846 ac04 	str.w	sl, [r6, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8007450:	45b1      	cmp	r9, r6
 8007452:	d1f6      	bne.n	8007442 <rt_test_007_003_execute+0x82>
 8007454:	b9ef      	cbnz	r7, 8007492 <rt_test_007_003_execute+0xd2>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	42a3      	cmp	r3, r4
 800745a:	d120      	bne.n	800749e <rt_test_007_003_execute+0xde>
 800745c:	68a3      	ldr	r3, [r4, #8]
 800745e:	bb2b      	cbnz	r3, 80074ac <rt_test_007_003_execute+0xec>
  test_set_step(3);
 8007460:	2303      	movs	r3, #3
 8007462:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 8007464:	f7fc fb6c 	bl	8003b40 <test_wait_tick>
 8007468:	2641      	movs	r6, #65	; 0x41
 800746a:	f04f 0920 	mov.w	r9, #32
 800746e:	4682      	mov	sl, r0
    for (i = 0; i < 5; i++) {
 8007470:	4f3a      	ldr	r7, [pc, #232]	; (800755c <rt_test_007_003_execute+0x19c>)
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8007472:	68eb      	ldr	r3, [r5, #12]
 8007474:	42bb      	cmp	r3, r7
 8007476:	d202      	bcs.n	800747e <rt_test_007_003_execute+0xbe>
    *chtest.tokp++ = token;
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	60ea      	str	r2, [r5, #12]
 800747c:	701e      	strb	r6, [r3, #0]
 800747e:	f389 8811 	msr	BASEPRI, r9
 8007482:	68a3      	ldr	r3, [r4, #8]
 8007484:	3b01      	subs	r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	60a3      	str	r3, [r4, #8]
 800748a:	db25      	blt.n	80074d8 <rt_test_007_003_execute+0x118>
 800748c:	2300      	movs	r3, #0
 800748e:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 8007492:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007496:	4a2c      	ldr	r2, [pc, #176]	; (8007548 <rt_test_007_003_execute+0x188>)
  chtest.global_fail     = true;
 8007498:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800749a:	60aa      	str	r2, [r5, #8]
 800749c:	e7a7      	b.n	80073ee <rt_test_007_003_execute+0x2e>
  chtest.global_fail     = true;
 800749e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80074a2:	4a2f      	ldr	r2, [pc, #188]	; (8007560 <rt_test_007_003_execute+0x1a0>)
  chtest.global_fail     = true;
 80074a4:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 80074a6:	60aa      	str	r2, [r5, #8]
}
 80074a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.global_fail     = true;
 80074ac:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80074b0:	4a2c      	ldr	r2, [pc, #176]	; (8007564 <rt_test_007_003_execute+0x1a4>)
  chtest.global_fail     = true;
 80074b2:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 80074b4:	60aa      	str	r2, [r5, #8]
 80074b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return __sch_get_currthread();
 80074ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
  p->prev       = qp->prev;
 80074be:	6862      	ldr	r2, [r4, #4]
    currtp->u.wtsemp = sp;
 80074c0:	629c      	str	r4, [r3, #40]	; 0x28
 80074c2:	e9c3 4200 	strd	r4, r2, [r3]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 80074c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  p->prev->next = p;
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	2005      	movs	r0, #5
  qp->prev      = p;
 80074ce:	6063      	str	r3, [r4, #4]
 80074d0:	f7fb fb5e 	bl	8002b90 <chSchGoSleepTimeoutS>
 80074d4:	4607      	mov	r7, r0
 80074d6:	e7ad      	b.n	8007434 <rt_test_007_003_execute+0x74>
 80074d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
  p->prev       = qp->prev;
 80074dc:	6862      	ldr	r2, [r4, #4]
  p->next       = qp;
 80074de:	601c      	str	r4, [r3, #0]
  p->prev       = qp->prev;
 80074e0:	605a      	str	r2, [r3, #4]
    currtp->u.wtsemp = sp;
 80074e2:	629c      	str	r4, [r3, #40]	; 0x28
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 80074e4:	2164      	movs	r1, #100	; 0x64
  p->prev->next = p;
 80074e6:	6013      	str	r3, [r2, #0]
 80074e8:	2005      	movs	r0, #5
  qp->prev      = p;
 80074ea:	6063      	str	r3, [r4, #4]
 80074ec:	f7fb fb50 	bl	8002b90 <chSchGoSleepTimeoutS>
 80074f0:	2300      	movs	r3, #0
 80074f2:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 80074f6:	3001      	adds	r0, #1
 80074f8:	d1cb      	bne.n	8007492 <rt_test_007_003_execute+0xd2>
 80074fa:	6823      	ldr	r3, [r4, #0]
    for (i = 0; i < 5; i++) {
 80074fc:	3601      	adds	r6, #1
 80074fe:	42a3      	cmp	r3, r4
 8007500:	b2f6      	uxtb	r6, r6
 8007502:	d1cc      	bne.n	800749e <rt_test_007_003_execute+0xde>
 8007504:	68a3      	ldr	r3, [r4, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1d0      	bne.n	80074ac <rt_test_007_003_execute+0xec>
 800750a:	2e46      	cmp	r6, #70	; 0x46
 800750c:	d1b1      	bne.n	8007472 <rt_test_007_003_execute+0xb2>
    test_assert_sequence("ABCDE", "invalid sequence");
 800750e:	4916      	ldr	r1, [pc, #88]	; (8007568 <rt_test_007_003_execute+0x1a8>)
 8007510:	4816      	ldr	r0, [pc, #88]	; (800756c <rt_test_007_003_execute+0x1ac>)
 8007512:	f7ff fd65 	bl	8006fe0 <__test_assert_sequence>
 8007516:	2800      	cmp	r0, #0
 8007518:	f47f af69 	bne.w	80073ee <rt_test_007_003_execute+0x2e>
 800751c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8007526:	eba3 030a 	sub.w	r3, r3, sl
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b03      	cmp	r3, #3
 800752e:	f67f af5e 	bls.w	80073ee <rt_test_007_003_execute+0x2e>
  chtest.global_fail     = true;
 8007532:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007536:	4a0e      	ldr	r2, [pc, #56]	; (8007570 <rt_test_007_003_execute+0x1b0>)
  chtest.global_fail     = true;
 8007538:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800753a:	60aa      	str	r2, [r5, #8]
    return __test_fail(msg);
 800753c:	e757      	b.n	80073ee <rt_test_007_003_execute+0x2e>
 800753e:	bf00      	nop
 8007540:	20001134 	.word	0x20001134
 8007544:	20001254 	.word	0x20001254
 8007548:	0801043c 	.word	0x0801043c
 800754c:	20001050 	.word	0x20001050
 8007550:	20001270 	.word	0x20001270
 8007554:	08003fd1 	.word	0x08003fd1
 8007558:	200019a0 	.word	0x200019a0
 800755c:	20001154 	.word	0x20001154
 8007560:	0800ff08 	.word	0x0800ff08
 8007564:	0800ff18 	.word	0x0800ff18
 8007568:	08010420 	.word	0x08010420
 800756c:	08010434 	.word	0x08010434
 8007570:	0800ff3c 	.word	0x0800ff3c
	...

08007580 <rt_test_007_004_execute>:
static void rt_test_007_004_execute(void) {
 8007580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8007584:	2401      	movs	r4, #1
 8007586:	4f32      	ldr	r7, [pc, #200]	; (8007650 <rt_test_007_004_execute+0xd0>)
 8007588:	4e32      	ldr	r6, [pc, #200]	; (8007654 <rt_test_007_004_execute+0xd4>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800758a:	68fa      	ldr	r2, [r7, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800758c:	4b32      	ldr	r3, [pc, #200]	; (8007658 <rt_test_007_004_execute+0xd8>)
 800758e:	6891      	ldr	r1, [r2, #8]
 8007590:	4832      	ldr	r0, [pc, #200]	; (800765c <rt_test_007_004_execute+0xdc>)
 8007592:	4421      	add	r1, r4
 8007594:	4a32      	ldr	r2, [pc, #200]	; (8007660 <rt_test_007_004_execute+0xe0>)
  test_set_step(1);
 8007596:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8007598:	f006 fcea 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800759c:	2202      	movs	r2, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800759e:	4931      	ldr	r1, [pc, #196]	; (8007664 <rt_test_007_004_execute+0xe4>)
 80075a0:	2320      	movs	r3, #32
 80075a2:	6008      	str	r0, [r1, #0]
  test_set_step(2);
 80075a4:	6032      	str	r2, [r6, #0]
 80075a6:	f383 8811 	msr	BASEPRI, r3
 * @param[in] n         value to be added to the semaphore counter. The value
 *                      must be positive.
 *
 * @iclass
 */
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 80075aa:	4d2f      	ldr	r5, [pc, #188]	; (8007668 <rt_test_007_004_execute+0xe8>)
  tp->state = CH_STATE_READY;
 80075ac:	f04f 0c00 	mov.w	ip, #0
 80075b0:	68ab      	ldr	r3, [r5, #8]
 80075b2:	1898      	adds	r0, r3, r2
 80075b4:	e001      	b.n	80075ba <rt_test_007_004_execute+0x3a>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 80075b6:	4283      	cmp	r3, r0
 80075b8:	d018      	beq.n	80075ec <rt_test_007_004_execute+0x6c>
    if (++sp->cnt <= (cnt_t)0) {
 80075ba:	3301      	adds	r3, #1
 80075bc:	2b00      	cmp	r3, #0
 80075be:	dcfa      	bgt.n	80075b6 <rt_test_007_004_execute+0x36>
  ch_queue_t *p = qp->next;
 80075c0:	682a      	ldr	r2, [r5, #0]
  qp->next       = p->next;
 80075c2:	6814      	ldr	r4, [r2, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80075c4:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80075c6:	f8d2 e008 	ldr.w	lr, [r2, #8]
  qp->next       = p->next;
 80075ca:	602c      	str	r4, [r5, #0]
  qp->next->prev = qp;
 80075cc:	6065      	str	r5, [r4, #4]
  tp->state = CH_STATE_READY;
 80075ce:	f882 c024 	strb.w	ip, [r2, #36]	; 0x24
    pqp = pqp->next;
 80075d2:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80075d4:	688c      	ldr	r4, [r1, #8]
 80075d6:	4574      	cmp	r4, lr
 80075d8:	d2fb      	bcs.n	80075d2 <rt_test_007_004_execute+0x52>
  p->prev       = pqp->prev;
 80075da:	684c      	ldr	r4, [r1, #4]
  while (n > (cnt_t)0) {
 80075dc:	4283      	cmp	r3, r0
 80075de:	e9c2 1400 	strd	r1, r4, [r2]
  p->prev->next = p;
 80075e2:	6022      	str	r2, [r4, #0]
  pqp->prev     = p;
 80075e4:	604a      	str	r2, [r1, #4]
      chSchReadyI((thread_t *)ch_queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 80075e6:	f8c2 c028 	str.w	ip, [r2, #40]	; 0x28
  while (n > (cnt_t)0) {
 80075ea:	d1e6      	bne.n	80075ba <rt_test_007_004_execute+0x3a>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	6889      	ldr	r1, [r1, #8]
 80075f2:	6892      	ldr	r2, [r2, #8]
 80075f4:	60ab      	str	r3, [r5, #8]
 80075f6:	4291      	cmp	r1, r2
 80075f8:	d901      	bls.n	80075fe <rt_test_007_004_execute+0x7e>
    __sch_reschedule_ahead();
 80075fa:	f7fc fae1 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 80075fe:	f04f 0800 	mov.w	r8, #0
 8007602:	f388 8811 	msr	BASEPRI, r8
 8007606:	4c17      	ldr	r4, [pc, #92]	; (8007664 <rt_test_007_004_execute+0xe4>)
 8007608:	f104 0714 	add.w	r7, r4, #20
    if (threads[i] != NULL) {
 800760c:	f854 0b04 	ldr.w	r0, [r4], #4
 8007610:	b118      	cbz	r0, 800761a <rt_test_007_004_execute+0x9a>
      chThdWait(threads[i]);
 8007612:	f7fe f815 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8007616:	f844 8c04 	str.w	r8, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800761a:	42bc      	cmp	r4, r7
 800761c:	d1f6      	bne.n	800760c <rt_test_007_004_execute+0x8c>
 800761e:	2320      	movs	r3, #32
 8007620:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8007624:	68ab      	ldr	r3, [r5, #8]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d108      	bne.n	800763c <rt_test_007_004_execute+0xbc>
 800762a:	2300      	movs	r3, #0
 800762c:	f383 8811 	msr	BASEPRI, r3
}
 8007630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("A", "invalid sequence");
 8007634:	490d      	ldr	r1, [pc, #52]	; (800766c <rt_test_007_004_execute+0xec>)
 8007636:	4808      	ldr	r0, [pc, #32]	; (8007658 <rt_test_007_004_execute+0xd8>)
 8007638:	f7ff bcd2 	b.w	8006fe0 <__test_assert_sequence>
  chtest.global_fail     = true;
 800763c:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 8007640:	490b      	ldr	r1, [pc, #44]	; (8007670 <rt_test_007_004_execute+0xf0>)
 8007642:	2300      	movs	r3, #0
 8007644:	60b1      	str	r1, [r6, #8]
  chtest.global_fail     = true;
 8007646:	80b2      	strh	r2, [r6, #4]
 8007648:	f383 8811 	msr	BASEPRI, r3
}
 800764c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007650:	20001050 	.word	0x20001050
 8007654:	20001134 	.word	0x20001134
 8007658:	08010068 	.word	0x08010068
 800765c:	20001270 	.word	0x20001270
 8007660:	08001451 	.word	0x08001451
 8007664:	200019a0 	.word	0x200019a0
 8007668:	20001254 	.word	0x20001254
 800766c:	08010420 	.word	0x08010420
 8007670:	08010454 	.word	0x08010454
	...

08007680 <rt_test_008_001_execute>:
  test_set_step(2);
 8007680:	2202      	movs	r2, #2
static void rt_test_008_001_execute(void) {
 8007682:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 8007686:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8007744 <rt_test_008_001_execute+0xc4>
  test_set_step(2);
 800768a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8007748 <rt_test_008_001_execute+0xc8>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800768e:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8007692:	2320      	movs	r3, #32
 8007694:	688d      	ldr	r5, [r1, #8]
 8007696:	f8c8 2000 	str.w	r2, [r8]
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	482b      	ldr	r0, [pc, #172]	; (800774c <rt_test_008_001_execute+0xcc>)
 80076a0:	f7fd f886 	bl	80047b0 <chMtxLockS>
 80076a4:	2700      	movs	r7, #0
 80076a6:	f387 8811 	msr	BASEPRI, r7
  test_set_step(3);
 80076aa:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80076ae:	4b28      	ldr	r3, [pc, #160]	; (8007750 <rt_test_008_001_execute+0xd0>)
 80076b0:	4a28      	ldr	r2, [pc, #160]	; (8007754 <rt_test_008_001_execute+0xd4>)
 80076b2:	1c69      	adds	r1, r5, #1
 80076b4:	4828      	ldr	r0, [pc, #160]	; (8007758 <rt_test_008_001_execute+0xd8>)
  test_set_step(3);
 80076b6:	f8c8 c000 	str.w	ip, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80076ba:	f006 fc59 	bl	800df70 <chThdCreateStatic.constprop.0>
 80076be:	4e27      	ldr	r6, [pc, #156]	; (800775c <rt_test_008_001_execute+0xdc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80076c0:	4b27      	ldr	r3, [pc, #156]	; (8007760 <rt_test_008_001_execute+0xe0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80076c2:	6030      	str	r0, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80076c4:	4a23      	ldr	r2, [pc, #140]	; (8007754 <rt_test_008_001_execute+0xd4>)
 80076c6:	1ca9      	adds	r1, r5, #2
 80076c8:	4826      	ldr	r0, [pc, #152]	; (8007764 <rt_test_008_001_execute+0xe4>)
 80076ca:	f006 fc51 	bl	800df70 <chThdCreateStatic.constprop.0>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80076ce:	4b26      	ldr	r3, [pc, #152]	; (8007768 <rt_test_008_001_execute+0xe8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80076d0:	6070      	str	r0, [r6, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80076d2:	4a20      	ldr	r2, [pc, #128]	; (8007754 <rt_test_008_001_execute+0xd4>)
 80076d4:	1ce9      	adds	r1, r5, #3
 80076d6:	4825      	ldr	r0, [pc, #148]	; (800776c <rt_test_008_001_execute+0xec>)
 80076d8:	f006 fc4a 	bl	800df70 <chThdCreateStatic.constprop.0>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80076dc:	4b24      	ldr	r3, [pc, #144]	; (8007770 <rt_test_008_001_execute+0xf0>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80076de:	60b0      	str	r0, [r6, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80076e0:	4a1c      	ldr	r2, [pc, #112]	; (8007754 <rt_test_008_001_execute+0xd4>)
 80076e2:	1d29      	adds	r1, r5, #4
 80076e4:	4823      	ldr	r0, [pc, #140]	; (8007774 <rt_test_008_001_execute+0xf4>)
 80076e6:	f006 fc43 	bl	800df70 <chThdCreateStatic.constprop.0>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80076ea:	4b23      	ldr	r3, [pc, #140]	; (8007778 <rt_test_008_001_execute+0xf8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80076ec:	60f0      	str	r0, [r6, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80076ee:	4a19      	ldr	r2, [pc, #100]	; (8007754 <rt_test_008_001_execute+0xd4>)
 80076f0:	1d69      	adds	r1, r5, #5
 80076f2:	4822      	ldr	r0, [pc, #136]	; (800777c <rt_test_008_001_execute+0xfc>)
 80076f4:	f006 fc3c 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_set_step(4);
 80076f8:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80076fa:	6130      	str	r0, [r6, #16]
    chMtxUnlock(&m1);
 80076fc:	4813      	ldr	r0, [pc, #76]	; (800774c <rt_test_008_001_execute+0xcc>)
  test_set_step(4);
 80076fe:	f8c8 3000 	str.w	r3, [r8]
    chMtxUnlock(&m1);
 8007702:	f7fd f8ed 	bl	80048e0 <chMtxUnlock>
 8007706:	4634      	mov	r4, r6
 8007708:	3614      	adds	r6, #20
    if (threads[i] != NULL) {
 800770a:	f854 0b04 	ldr.w	r0, [r4], #4
 800770e:	b118      	cbz	r0, 8007718 <rt_test_008_001_execute+0x98>
      chThdWait(threads[i]);
 8007710:	f7fd ff96 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8007714:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8007718:	42b4      	cmp	r4, r6
 800771a:	d1f6      	bne.n	800770a <rt_test_008_001_execute+0x8a>
 800771c:	f8d9 300c 	ldr.w	r3, [r9, #12]
  if (!condition) {
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	42ab      	cmp	r3, r5
 8007724:	d105      	bne.n	8007732 <rt_test_008_001_execute+0xb2>
}
 8007726:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800772a:	4915      	ldr	r1, [pc, #84]	; (8007780 <rt_test_008_001_execute+0x100>)
 800772c:	4815      	ldr	r0, [pc, #84]	; (8007784 <rt_test_008_001_execute+0x104>)
 800772e:	f7ff bc57 	b.w	8006fe0 <__test_assert_sequence>
  chtest.global_fail     = true;
 8007732:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007736:	4a14      	ldr	r2, [pc, #80]	; (8007788 <rt_test_008_001_execute+0x108>)
  chtest.global_fail     = true;
 8007738:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 800773c:	f8c8 2008 	str.w	r2, [r8, #8]
}
 8007740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007744:	20001050 	.word	0x20001050
 8007748:	20001134 	.word	0x20001134
 800774c:	20000818 	.word	0x20000818
 8007750:	08010438 	.word	0x08010438
 8007754:	08004971 	.word	0x08004971
 8007758:	20001270 	.word	0x20001270
 800775c:	200019a0 	.word	0x200019a0
 8007760:	08011770 	.word	0x08011770
 8007764:	200013e0 	.word	0x200013e0
 8007768:	0801041c 	.word	0x0801041c
 800776c:	20001550 	.word	0x20001550
 8007770:	0801006c 	.word	0x0801006c
 8007774:	200016c0 	.word	0x200016c0
 8007778:	08010068 	.word	0x08010068
 800777c:	20001830 	.word	0x20001830
 8007780:	08010420 	.word	0x08010420
 8007784:	08010434 	.word	0x08010434
 8007788:	08010070 	.word	0x08010070
 800778c:	00000000 	.word	0x00000000

08007790 <rt_test_008_007_execute>:
  test_set_step(1);
 8007790:	f04f 0c01 	mov.w	ip, #1
static void rt_test_008_007_execute(void) {
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return __sch_get_currthread();
 8007796:	4d5d      	ldr	r5, [pc, #372]	; (800790c <rt_test_008_007_execute+0x17c>)
  test_set_step(1);
 8007798:	4f5d      	ldr	r7, [pc, #372]	; (8007910 <rt_test_008_007_execute+0x180>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800779a:	68ea      	ldr	r2, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800779c:	4b5d      	ldr	r3, [pc, #372]	; (8007914 <rt_test_008_007_execute+0x184>)
 800779e:	6896      	ldr	r6, [r2, #8]
 80077a0:	485d      	ldr	r0, [pc, #372]	; (8007918 <rt_test_008_007_execute+0x188>)
 80077a2:	eb06 010c 	add.w	r1, r6, ip
 80077a6:	4a5d      	ldr	r2, [pc, #372]	; (800791c <rt_test_008_007_execute+0x18c>)
  test_set_step(1);
 80077a8:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80077ac:	f006 fbe0 	bl	800df70 <chThdCreateStatic.constprop.0>
 80077b0:	4684      	mov	ip, r0
 80077b2:	4c5b      	ldr	r4, [pc, #364]	; (8007920 <rt_test_008_007_execute+0x190>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80077b4:	1cb1      	adds	r1, r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80077b6:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80077ba:	4b5a      	ldr	r3, [pc, #360]	; (8007924 <rt_test_008_007_execute+0x194>)
 80077bc:	4a57      	ldr	r2, [pc, #348]	; (800791c <rt_test_008_007_execute+0x18c>)
 80077be:	485a      	ldr	r0, [pc, #360]	; (8007928 <rt_test_008_007_execute+0x198>)
 80077c0:	f006 fbd6 	bl	800df70 <chThdCreateStatic.constprop.0>
 80077c4:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80077c6:	1cf1      	adds	r1, r6, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80077c8:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80077cc:	4b57      	ldr	r3, [pc, #348]	; (800792c <rt_test_008_007_execute+0x19c>)
 80077ce:	4a53      	ldr	r2, [pc, #332]	; (800791c <rt_test_008_007_execute+0x18c>)
 80077d0:	4857      	ldr	r0, [pc, #348]	; (8007930 <rt_test_008_007_execute+0x1a0>)
 80077d2:	f006 fbcd 	bl	800df70 <chThdCreateStatic.constprop.0>
 80077d6:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80077d8:	1d31      	adds	r1, r6, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80077da:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80077de:	4b55      	ldr	r3, [pc, #340]	; (8007934 <rt_test_008_007_execute+0x1a4>)
 80077e0:	4a4e      	ldr	r2, [pc, #312]	; (800791c <rt_test_008_007_execute+0x18c>)
 80077e2:	4855      	ldr	r0, [pc, #340]	; (8007938 <rt_test_008_007_execute+0x1a8>)
 80077e4:	f006 fbc4 	bl	800df70 <chThdCreateStatic.constprop.0>
 80077e8:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80077ea:	4b54      	ldr	r3, [pc, #336]	; (800793c <rt_test_008_007_execute+0x1ac>)
 80077ec:	4a4b      	ldr	r2, [pc, #300]	; (800791c <rt_test_008_007_execute+0x18c>)
 80077ee:	1d71      	adds	r1, r6, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80077f0:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80077f4:	4852      	ldr	r0, [pc, #328]	; (8007940 <rt_test_008_007_execute+0x1b0>)
 80077f6:	f006 fbbb 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 80077fa:	2202      	movs	r2, #2
 80077fc:	2320      	movs	r3, #32
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80077fe:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8007800:	603a      	str	r2, [r7, #0]
 8007802:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8007806:	4b4f      	ldr	r3, [pc, #316]	; (8007944 <rt_test_008_007_execute+0x1b4>)
 8007808:	681a      	ldr	r2, [r3, #0]
  if (ch_queue_notempty(&cp->queue)) {
 800780a:	429a      	cmp	r2, r3
 800780c:	d061      	beq.n	80078d2 <rt_test_008_007_execute+0x142>
    tp->u.rdymsg = MSG_OK;
 800780e:	2400      	movs	r4, #0
  qp->next       = p->next;
 8007810:	6811      	ldr	r1, [r2, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8007812:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8007814:	6896      	ldr	r6, [r2, #8]
  qp->next->prev = qp;
 8007816:	604b      	str	r3, [r1, #4]
  qp->next       = p->next;
 8007818:	6019      	str	r1, [r3, #0]
 800781a:	6294      	str	r4, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800781c:	f882 4024 	strb.w	r4, [r2, #36]	; 0x24
    pqp = pqp->next;
 8007820:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8007822:	6884      	ldr	r4, [r0, #8]
 8007824:	42b4      	cmp	r4, r6
 8007826:	d2fb      	bcs.n	8007820 <rt_test_008_007_execute+0x90>
  p->prev       = pqp->prev;
 8007828:	6844      	ldr	r4, [r0, #4]
  if (ch_queue_notempty(&cp->queue)) {
 800782a:	4299      	cmp	r1, r3
  p->next       = pqp;
 800782c:	6010      	str	r0, [r2, #0]
  p->prev       = pqp->prev;
 800782e:	6054      	str	r4, [r2, #4]
  p->prev->next = p;
 8007830:	6022      	str	r2, [r4, #0]
  pqp->prev     = p;
 8007832:	6042      	str	r2, [r0, #4]
 8007834:	d04d      	beq.n	80078d2 <rt_test_008_007_execute+0x142>
    tp->u.rdymsg = MSG_OK;
 8007836:	2400      	movs	r4, #0
  qp->next       = p->next;
 8007838:	680a      	ldr	r2, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800783a:	6988      	ldr	r0, [r1, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800783c:	688e      	ldr	r6, [r1, #8]
  qp->next->prev = qp;
 800783e:	6053      	str	r3, [r2, #4]
  qp->next       = p->next;
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	628c      	str	r4, [r1, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8007844:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
    pqp = pqp->next;
 8007848:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800784a:	6884      	ldr	r4, [r0, #8]
 800784c:	42b4      	cmp	r4, r6
 800784e:	d2fb      	bcs.n	8007848 <rt_test_008_007_execute+0xb8>
  p->prev       = pqp->prev;
 8007850:	6844      	ldr	r4, [r0, #4]
  if (ch_queue_notempty(&cp->queue)) {
 8007852:	429a      	cmp	r2, r3
  p->next       = pqp;
 8007854:	6008      	str	r0, [r1, #0]
  p->prev       = pqp->prev;
 8007856:	604c      	str	r4, [r1, #4]
  p->prev->next = p;
 8007858:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 800785a:	6041      	str	r1, [r0, #4]
 800785c:	d039      	beq.n	80078d2 <rt_test_008_007_execute+0x142>
    tp->u.rdymsg = MSG_OK;
 800785e:	2400      	movs	r4, #0
  qp->next       = p->next;
 8007860:	6811      	ldr	r1, [r2, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8007862:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8007864:	6896      	ldr	r6, [r2, #8]
  qp->next->prev = qp;
 8007866:	604b      	str	r3, [r1, #4]
  qp->next       = p->next;
 8007868:	6019      	str	r1, [r3, #0]
 800786a:	6294      	str	r4, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800786c:	f882 4024 	strb.w	r4, [r2, #36]	; 0x24
    pqp = pqp->next;
 8007870:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8007872:	6884      	ldr	r4, [r0, #8]
 8007874:	42b4      	cmp	r4, r6
 8007876:	d2fb      	bcs.n	8007870 <rt_test_008_007_execute+0xe0>
  p->prev       = pqp->prev;
 8007878:	6844      	ldr	r4, [r0, #4]
  if (ch_queue_notempty(&cp->queue)) {
 800787a:	4299      	cmp	r1, r3
  p->next       = pqp;
 800787c:	6010      	str	r0, [r2, #0]
  p->prev       = pqp->prev;
 800787e:	6054      	str	r4, [r2, #4]
  p->prev->next = p;
 8007880:	6022      	str	r2, [r4, #0]
  pqp->prev     = p;
 8007882:	6042      	str	r2, [r0, #4]
 8007884:	d025      	beq.n	80078d2 <rt_test_008_007_execute+0x142>
    tp->u.rdymsg = MSG_OK;
 8007886:	2400      	movs	r4, #0
  qp->next       = p->next;
 8007888:	680a      	ldr	r2, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800788a:	6988      	ldr	r0, [r1, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800788c:	688e      	ldr	r6, [r1, #8]
  qp->next->prev = qp;
 800788e:	6053      	str	r3, [r2, #4]
  qp->next       = p->next;
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	628c      	str	r4, [r1, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8007894:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
    pqp = pqp->next;
 8007898:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800789a:	6884      	ldr	r4, [r0, #8]
 800789c:	42b4      	cmp	r4, r6
 800789e:	d2fb      	bcs.n	8007898 <rt_test_008_007_execute+0x108>
  p->prev       = pqp->prev;
 80078a0:	6844      	ldr	r4, [r0, #4]
  if (ch_queue_notempty(&cp->queue)) {
 80078a2:	429a      	cmp	r2, r3
  p->next       = pqp;
 80078a4:	6008      	str	r0, [r1, #0]
  p->prev       = pqp->prev;
 80078a6:	604c      	str	r4, [r1, #4]
  p->prev->next = p;
 80078a8:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 80078aa:	6041      	str	r1, [r0, #4]
 80078ac:	d011      	beq.n	80078d2 <rt_test_008_007_execute+0x142>
    tp->u.rdymsg = MSG_OK;
 80078ae:	2100      	movs	r1, #0
  qp->next       = p->next;
 80078b0:	6810      	ldr	r0, [r2, #0]
  qp->next->prev = qp;
 80078b2:	6043      	str	r3, [r0, #4]
  qp->next       = p->next;
 80078b4:	6018      	str	r0, [r3, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80078b6:	6993      	ldr	r3, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80078b8:	6890      	ldr	r0, [r2, #8]
 80078ba:	6291      	str	r1, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80078bc:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    pqp = pqp->next;
 80078c0:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80078c2:	6899      	ldr	r1, [r3, #8]
 80078c4:	4281      	cmp	r1, r0
 80078c6:	d2fb      	bcs.n	80078c0 <rt_test_008_007_execute+0x130>
  p->prev       = pqp->prev;
 80078c8:	6859      	ldr	r1, [r3, #4]
 80078ca:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 80078ce:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 80078d0:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80078d2:	682a      	ldr	r2, [r5, #0]
 80078d4:	68eb      	ldr	r3, [r5, #12]
 80078d6:	6892      	ldr	r2, [r2, #8]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d901      	bls.n	80078e2 <rt_test_008_007_execute+0x152>
    __sch_reschedule_ahead();
 80078de:	f7fc f96f 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 80078e2:	2600      	movs	r6, #0
 80078e4:	f386 8811 	msr	BASEPRI, r6
 80078e8:	4c0d      	ldr	r4, [pc, #52]	; (8007920 <rt_test_008_007_execute+0x190>)
 80078ea:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 80078ee:	f854 0b04 	ldr.w	r0, [r4], #4
 80078f2:	b118      	cbz	r0, 80078fc <rt_test_008_007_execute+0x16c>
      chThdWait(threads[i]);
 80078f4:	f7fd fea4 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 80078f8:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80078fc:	42a5      	cmp	r5, r4
 80078fe:	d1f6      	bne.n	80078ee <rt_test_008_007_execute+0x15e>
}
 8007900:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007904:	4910      	ldr	r1, [pc, #64]	; (8007948 <rt_test_008_007_execute+0x1b8>)
 8007906:	4811      	ldr	r0, [pc, #68]	; (800794c <rt_test_008_007_execute+0x1bc>)
 8007908:	f7ff bb6a 	b.w	8006fe0 <__test_assert_sequence>
 800790c:	20001050 	.word	0x20001050
 8007910:	20001134 	.word	0x20001134
 8007914:	08010438 	.word	0x08010438
 8007918:	20001270 	.word	0x20001270
 800791c:	08004a31 	.word	0x08004a31
 8007920:	200019a0 	.word	0x200019a0
 8007924:	08011770 	.word	0x08011770
 8007928:	200013e0 	.word	0x200013e0
 800792c:	0801041c 	.word	0x0801041c
 8007930:	20001550 	.word	0x20001550
 8007934:	0801006c 	.word	0x0801006c
 8007938:	200016c0 	.word	0x200016c0
 800793c:	08010068 	.word	0x08010068
 8007940:	20001830 	.word	0x20001830
 8007944:	20000800 	.word	0x20000800
 8007948:	08010420 	.word	0x08010420
 800794c:	08010434 	.word	0x08010434

08007950 <rt_test_008_008_execute>:
  test_set_step(1);
 8007950:	f04f 0c01 	mov.w	ip, #1
static void rt_test_008_008_execute(void) {
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return __sch_get_currthread();
 8007956:	4e38      	ldr	r6, [pc, #224]	; (8007a38 <rt_test_008_008_execute+0xe8>)
  test_set_step(1);
 8007958:	4f38      	ldr	r7, [pc, #224]	; (8007a3c <rt_test_008_008_execute+0xec>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800795a:	68f2      	ldr	r2, [r6, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800795c:	4b38      	ldr	r3, [pc, #224]	; (8007a40 <rt_test_008_008_execute+0xf0>)
 800795e:	6895      	ldr	r5, [r2, #8]
 8007960:	4838      	ldr	r0, [pc, #224]	; (8007a44 <rt_test_008_008_execute+0xf4>)
 8007962:	eb05 010c 	add.w	r1, r5, ip
 8007966:	4a38      	ldr	r2, [pc, #224]	; (8007a48 <rt_test_008_008_execute+0xf8>)
  test_set_step(1);
 8007968:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800796c:	f006 fb00 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007970:	4684      	mov	ip, r0
 8007972:	4c36      	ldr	r4, [pc, #216]	; (8007a4c <rt_test_008_008_execute+0xfc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007974:	1ca9      	adds	r1, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007976:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800797a:	4b35      	ldr	r3, [pc, #212]	; (8007a50 <rt_test_008_008_execute+0x100>)
 800797c:	4a32      	ldr	r2, [pc, #200]	; (8007a48 <rt_test_008_008_execute+0xf8>)
 800797e:	4835      	ldr	r0, [pc, #212]	; (8007a54 <rt_test_008_008_execute+0x104>)
 8007980:	f006 faf6 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007984:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007986:	1ce9      	adds	r1, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007988:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800798c:	4b32      	ldr	r3, [pc, #200]	; (8007a58 <rt_test_008_008_execute+0x108>)
 800798e:	4a2e      	ldr	r2, [pc, #184]	; (8007a48 <rt_test_008_008_execute+0xf8>)
 8007990:	4832      	ldr	r0, [pc, #200]	; (8007a5c <rt_test_008_008_execute+0x10c>)
 8007992:	f006 faed 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007996:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007998:	1d29      	adds	r1, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800799a:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800799e:	4b30      	ldr	r3, [pc, #192]	; (8007a60 <rt_test_008_008_execute+0x110>)
 80079a0:	4a29      	ldr	r2, [pc, #164]	; (8007a48 <rt_test_008_008_execute+0xf8>)
 80079a2:	4830      	ldr	r0, [pc, #192]	; (8007a64 <rt_test_008_008_execute+0x114>)
 80079a4:	f006 fae4 	bl	800df70 <chThdCreateStatic.constprop.0>
 80079a8:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80079aa:	4b2f      	ldr	r3, [pc, #188]	; (8007a68 <rt_test_008_008_execute+0x118>)
 80079ac:	4a26      	ldr	r2, [pc, #152]	; (8007a48 <rt_test_008_008_execute+0xf8>)
 80079ae:	1d69      	adds	r1, r5, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80079b0:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80079b4:	482d      	ldr	r0, [pc, #180]	; (8007a6c <rt_test_008_008_execute+0x11c>)
 80079b6:	f006 fadb 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 80079ba:	2202      	movs	r2, #2
 80079bc:	2320      	movs	r3, #32
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80079be:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 80079c0:	603a      	str	r2, [r7, #0]
 80079c2:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 80079c6:	482a      	ldr	r0, [pc, #168]	; (8007a70 <rt_test_008_008_execute+0x120>)
 80079c8:	6801      	ldr	r1, [r0, #0]
  while (ch_queue_notempty(&cp->queue)) {
 80079ca:	4281      	cmp	r1, r0
 80079cc:	d017      	beq.n	80079fe <rt_test_008_008_execute+0xae>
  tp->state = CH_STATE_READY;
 80079ce:	f04f 0c00 	mov.w	ip, #0
    chSchReadyI((thread_t *)ch_queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 80079d2:	f06f 0701 	mvn.w	r7, #1
 80079d6:	460b      	mov	r3, r1
  qp->next       = p->next;
 80079d8:	6809      	ldr	r1, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80079da:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80079dc:	689d      	ldr	r5, [r3, #8]
  qp->next->prev = qp;
 80079de:	6048      	str	r0, [r1, #4]
  qp->next       = p->next;
 80079e0:	6001      	str	r1, [r0, #0]
  tp->state = CH_STATE_READY;
 80079e2:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
    pqp = pqp->next;
 80079e6:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80079e8:	6894      	ldr	r4, [r2, #8]
 80079ea:	42ac      	cmp	r4, r5
 80079ec:	d2fb      	bcs.n	80079e6 <rt_test_008_008_execute+0x96>
  p->prev       = pqp->prev;
 80079ee:	6854      	ldr	r4, [r2, #4]
  while (ch_queue_notempty(&cp->queue)) {
 80079f0:	4281      	cmp	r1, r0
 80079f2:	e9c3 2400 	strd	r2, r4, [r3]
  p->prev->next = p;
 80079f6:	6023      	str	r3, [r4, #0]
  pqp->prev     = p;
 80079f8:	6053      	str	r3, [r2, #4]
    chSchReadyI((thread_t *)ch_queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 80079fa:	629f      	str	r7, [r3, #40]	; 0x28
  while (ch_queue_notempty(&cp->queue)) {
 80079fc:	d1eb      	bne.n	80079d6 <rt_test_008_008_execute+0x86>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80079fe:	6832      	ldr	r2, [r6, #0]
 8007a00:	68f3      	ldr	r3, [r6, #12]
 8007a02:	6892      	ldr	r2, [r2, #8]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d901      	bls.n	8007a0e <rt_test_008_008_execute+0xbe>
    __sch_reschedule_ahead();
 8007a0a:	f7fc f8d9 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8007a0e:	2600      	movs	r6, #0
 8007a10:	f386 8811 	msr	BASEPRI, r6
 8007a14:	4c0d      	ldr	r4, [pc, #52]	; (8007a4c <rt_test_008_008_execute+0xfc>)
 8007a16:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8007a1a:	f854 0b04 	ldr.w	r0, [r4], #4
 8007a1e:	b118      	cbz	r0, 8007a28 <rt_test_008_008_execute+0xd8>
      chThdWait(threads[i]);
 8007a20:	f7fd fe0e 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8007a24:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8007a28:	42a5      	cmp	r5, r4
 8007a2a:	d1f6      	bne.n	8007a1a <rt_test_008_008_execute+0xca>
}
 8007a2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007a30:	4910      	ldr	r1, [pc, #64]	; (8007a74 <rt_test_008_008_execute+0x124>)
 8007a32:	4811      	ldr	r0, [pc, #68]	; (8007a78 <rt_test_008_008_execute+0x128>)
 8007a34:	f7ff bad4 	b.w	8006fe0 <__test_assert_sequence>
 8007a38:	20001050 	.word	0x20001050
 8007a3c:	20001134 	.word	0x20001134
 8007a40:	08010438 	.word	0x08010438
 8007a44:	20001270 	.word	0x20001270
 8007a48:	08004a31 	.word	0x08004a31
 8007a4c:	200019a0 	.word	0x200019a0
 8007a50:	08011770 	.word	0x08011770
 8007a54:	200013e0 	.word	0x200013e0
 8007a58:	0801041c 	.word	0x0801041c
 8007a5c:	20001550 	.word	0x20001550
 8007a60:	0801006c 	.word	0x0801006c
 8007a64:	200016c0 	.word	0x200016c0
 8007a68:	08010068 	.word	0x08010068
 8007a6c:	20001830 	.word	0x20001830
 8007a70:	20000800 	.word	0x20000800
 8007a74:	08010420 	.word	0x08010420
 8007a78:	08010434 	.word	0x08010434
 8007a7c:	00000000 	.word	0x00000000

08007a80 <rt_test_008_009_execute>:

static void rt_test_008_009_execute(void) {
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  test_end_step(1);

  /* [8.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8007a82:	2702      	movs	r7, #2
  return __sch_get_currthread();
 8007a84:	4b2c      	ldr	r3, [pc, #176]	; (8007b38 <rt_test_008_009_execute+0xb8>)
 8007a86:	4d2d      	ldr	r5, [pc, #180]	; (8007b3c <rt_test_008_009_execute+0xbc>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8007a88:	68da      	ldr	r2, [r3, #12]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007a8a:	482d      	ldr	r0, [pc, #180]	; (8007b40 <rt_test_008_009_execute+0xc0>)
 8007a8c:	6896      	ldr	r6, [r2, #8]
 8007a8e:	4b2d      	ldr	r3, [pc, #180]	; (8007b44 <rt_test_008_009_execute+0xc4>)
 8007a90:	1c71      	adds	r1, r6, #1
 8007a92:	4a2d      	ldr	r2, [pc, #180]	; (8007b48 <rt_test_008_009_execute+0xc8>)
  test_set_step(2);
 8007a94:	602f      	str	r7, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007a96:	f006 fa6b 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007a9a:	4684      	mov	ip, r0
  }
  test_end_step(2);

  /* [8.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8007a9c:	2703      	movs	r7, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007a9e:	4c2b      	ldr	r4, [pc, #172]	; (8007b4c <rt_test_008_009_execute+0xcc>)
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007aa0:	1cb1      	adds	r1, r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007aa2:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007aa6:	4b2a      	ldr	r3, [pc, #168]	; (8007b50 <rt_test_008_009_execute+0xd0>)
 8007aa8:	4a2a      	ldr	r2, [pc, #168]	; (8007b54 <rt_test_008_009_execute+0xd4>)
 8007aaa:	482b      	ldr	r0, [pc, #172]	; (8007b58 <rt_test_008_009_execute+0xd8>)
  test_set_step(3);
 8007aac:	602f      	str	r7, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007aae:	f006 fa5f 	bl	800df70 <chThdCreateStatic.constprop.0>
 8007ab2:	4684      	mov	ip, r0
  }
  test_end_step(3);

  /* [8.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
 8007ab4:	2704      	movs	r7, #4
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007ab6:	4b29      	ldr	r3, [pc, #164]	; (8007b5c <rt_test_008_009_execute+0xdc>)
 8007ab8:	4a29      	ldr	r2, [pc, #164]	; (8007b60 <rt_test_008_009_execute+0xe0>)
 8007aba:	1cf1      	adds	r1, r6, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007abc:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007ac0:	4828      	ldr	r0, [pc, #160]	; (8007b64 <rt_test_008_009_execute+0xe4>)
  test_set_step(4);
 8007ac2:	602f      	str	r7, [r5, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007ac4:	f006 fa54 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_end_step(4);

  /* [8.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8007ac8:	2205      	movs	r2, #5
 8007aca:	2320      	movs	r3, #32
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007acc:	60a0      	str	r0, [r4, #8]
  test_set_step(5);
 8007ace:	602a      	str	r2, [r5, #0]
 8007ad0:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8007ad4:	4c24      	ldr	r4, [pc, #144]	; (8007b68 <rt_test_008_009_execute+0xe8>)
 8007ad6:	6820      	ldr	r0, [r4, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8007ad8:	42a0      	cmp	r0, r4
 8007ada:	d005      	beq.n	8007ae8 <rt_test_008_009_execute+0x68>
  qp->next       = p->next;
 8007adc:	6803      	ldr	r3, [r0, #0]
    chSchWakeupS((thread_t *)ch_queue_fifo_remove(&cp->queue), MSG_OK);
 8007ade:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8007ae0:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8007ae2:	6023      	str	r3, [r4, #0]
 8007ae4:	f7fc faec 	bl	80040c0 <chSchWakeupS>
 8007ae8:	2100      	movs	r1, #0
 8007aea:	f381 8811 	msr	BASEPRI, r1
    chCondSignal(&c1);
  }
  test_end_step(5);

  /* [8.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8007aee:	2206      	movs	r2, #6
 8007af0:	2320      	movs	r3, #32
 8007af2:	602a      	str	r2, [r5, #0]
 8007af4:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8007af8:	6820      	ldr	r0, [r4, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8007afa:	42a0      	cmp	r0, r4
 8007afc:	d004      	beq.n	8007b08 <rt_test_008_009_execute+0x88>
  qp->next       = p->next;
 8007afe:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8007b00:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8007b02:	6023      	str	r3, [r4, #0]
    chSchWakeupS((thread_t *)ch_queue_fifo_remove(&cp->queue), MSG_OK);
 8007b04:	f7fc fadc 	bl	80040c0 <chSchWakeupS>
 8007b08:	2700      	movs	r7, #0
 8007b0a:	f387 8811 	msr	BASEPRI, r7
    chCondSignal(&c1);
  }
  test_end_step(6);

  /* [8.9.7] Checking the order of operations.*/
  test_set_step(7);
 8007b0e:	2307      	movs	r3, #7
 8007b10:	4c0e      	ldr	r4, [pc, #56]	; (8007b4c <rt_test_008_009_execute+0xcc>)
 8007b12:	602b      	str	r3, [r5, #0]
 8007b14:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 8007b18:	f854 0b04 	ldr.w	r0, [r4], #4
 8007b1c:	b118      	cbz	r0, 8007b26 <rt_test_008_009_execute+0xa6>
      chThdWait(threads[i]);
 8007b1e:	f7fd fd8f 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8007b22:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8007b26:	42a6      	cmp	r6, r4
 8007b28:	d1f6      	bne.n	8007b18 <rt_test_008_009_execute+0x98>
  {
    test_wait_threads();
    test_assert_sequence("ABC", "invalid sequence");
  }
  test_end_step(7);
}
 8007b2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8007b2e:	490f      	ldr	r1, [pc, #60]	; (8007b6c <rt_test_008_009_execute+0xec>)
 8007b30:	480f      	ldr	r0, [pc, #60]	; (8007b70 <rt_test_008_009_execute+0xf0>)
 8007b32:	f7ff ba55 	b.w	8006fe0 <__test_assert_sequence>
 8007b36:	bf00      	nop
 8007b38:	20001050 	.word	0x20001050
 8007b3c:	20001134 	.word	0x20001134
 8007b40:	20001270 	.word	0x20001270
 8007b44:	08010068 	.word	0x08010068
 8007b48:	08004ad1 	.word	0x08004ad1
 8007b4c:	200019a0 	.word	0x200019a0
 8007b50:	0801041c 	.word	0x0801041c
 8007b54:	08004a31 	.word	0x08004a31
 8007b58:	200013e0 	.word	0x200013e0
 8007b5c:	0801006c 	.word	0x0801006c
 8007b60:	08004b91 	.word	0x08004b91
 8007b64:	20001550 	.word	0x20001550
 8007b68:	20000800 	.word	0x20000800
 8007b6c:	08010420 	.word	0x08010420
 8007b70:	08010464 	.word	0x08010464
	...

08007b80 <rt_test_009_001_execute>:
 * - [9.1.1] Starting the messenger thread.
 * - [9.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_009_001_execute(void) {
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  thread_t *tp;
  msg_t msg;

  /* [9.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8007b84:	f04f 0901 	mov.w	r9, #1
  return __sch_get_currthread();
 8007b88:	4f2e      	ldr	r7, [pc, #184]	; (8007c44 <rt_test_009_001_execute+0xc4>)
 8007b8a:	4e2f      	ldr	r6, [pc, #188]	; (8007c48 <rt_test_009_001_execute+0xc8>)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007b8e:	4a2f      	ldr	r2, [pc, #188]	; (8007c4c <rt_test_009_001_execute+0xcc>)
 8007b90:	6899      	ldr	r1, [r3, #8]
 8007b92:	482f      	ldr	r0, [pc, #188]	; (8007c50 <rt_test_009_001_execute+0xd0>)
static void rt_test_009_001_execute(void) {
 8007b94:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007b96:	4449      	add	r1, r9
  }
  test_end_step(1);

  /* [9.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 8007b98:	46b0      	mov	r8, r6
  test_set_step(1);
 8007b9a:	f8c6 9000 	str.w	r9, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007b9e:	f006 f9e7 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	2404      	movs	r4, #4
 8007ba6:	2520      	movs	r5, #32
 8007ba8:	f848 3b20 	str.w	r3, [r8], #32
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007bac:	4b29      	ldr	r3, [pc, #164]	; (8007c54 <rt_test_009_001_execute+0xd4>)
 8007bae:	6018      	str	r0, [r3, #0]
 8007bb0:	f385 8811 	msr	BASEPRI, r5
 8007bb4:	68f9      	ldr	r1, [r7, #12]
 8007bb6:	f04f 0a00 	mov.w	sl, #0
 8007bba:	468b      	mov	fp, r1
 8007bbc:	f85b 0f30 	ldr.w	r0, [fp, #48]!
 8007bc0:	4558      	cmp	r0, fp
 8007bc2:	d02e      	beq.n	8007c22 <rt_test_009_001_execute+0xa2>
  tp->state = CH_STATE_SNDMSG;
 8007bc4:	f04f 0c0d 	mov.w	ip, #13
 8007bc8:	6802      	ldr	r2, [r0, #0]
 8007bca:	630a      	str	r2, [r1, #48]	; 0x30
  qp->next->prev = qp;
 8007bcc:	f8c2 b004 	str.w	fp, [r2, #4]
 8007bd0:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
 8007bd4:	f38a 8811 	msr	BASEPRI, sl
  return tp->u.sentmsg;
 8007bd8:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
 8007bdc:	f385 8811 	msr	BASEPRI, r5
  chSchWakeupS(tp, msg);
 8007be0:	4659      	mov	r1, fp
 8007be2:	f7fc fa6d 	bl	80040c0 <chSchWakeupS>
 8007be6:	f38a 8811 	msr	BASEPRI, sl
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8007bea:	68f3      	ldr	r3, [r6, #12]
 8007bec:	4543      	cmp	r3, r8
 8007bee:	d203      	bcs.n	8007bf8 <rt_test_009_001_execute+0x78>
    *chtest.tokp++ = token;
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	60f2      	str	r2, [r6, #12]

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 8007bf4:	f883 b000 	strb.w	fp, [r3]
    for (i = 0; i < 4; i++) {
 8007bf8:	3c01      	subs	r4, #1
 8007bfa:	d1d9      	bne.n	8007bb0 <rt_test_009_001_execute+0x30>
 8007bfc:	4d15      	ldr	r5, [pc, #84]	; (8007c54 <rt_test_009_001_execute+0xd4>)
 8007bfe:	f105 0614 	add.w	r6, r5, #20
    if (threads[i] != NULL) {
 8007c02:	f855 0b04 	ldr.w	r0, [r5], #4
 8007c06:	b118      	cbz	r0, 8007c10 <rt_test_009_001_execute+0x90>
      chThdWait(threads[i]);
 8007c08:	f7fd fd1a 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8007c0c:	f845 4c04 	str.w	r4, [r5, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8007c10:	42ae      	cmp	r6, r5
 8007c12:	d1f6      	bne.n	8007c02 <rt_test_009_001_execute+0x82>
    }
    test_wait_threads();
    test_assert_sequence("ABCD", "invalid sequence");
 8007c14:	4910      	ldr	r1, [pc, #64]	; (8007c58 <rt_test_009_001_execute+0xd8>)
 8007c16:	4811      	ldr	r0, [pc, #68]	; (8007c5c <rt_test_009_001_execute+0xdc>)
  }
  test_end_step(2);
}
 8007c18:	b003      	add	sp, #12
 8007c1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 8007c1e:	f7ff b9df 	b.w	8006fe0 <__test_assert_sequence>
  otp->state = newstate;
 8007c22:	f04f 030e 	mov.w	r3, #14
  ch_priority_queue_t *p = pqp->next;
 8007c26:	6838      	ldr	r0, [r7, #0]
 8007c28:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8007c2c:	6802      	ldr	r2, [r0, #0]
  chSysSwitch(ntp, otp);
 8007c2e:	9101      	str	r1, [sp, #4]
  pqp->next->prev = pqp;
 8007c30:	6057      	str	r7, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8007c32:	f880 9024 	strb.w	r9, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8007c36:	60f8      	str	r0, [r7, #12]
  pqp->next       = p->next;
 8007c38:	603a      	str	r2, [r7, #0]
  chSysSwitch(ntp, otp);
 8007c3a:	f7f8 fb01 	bl	8000240 <__port_switch>
  ch_queue_t *p = qp->next;
 8007c3e:	9901      	ldr	r1, [sp, #4]
 8007c40:	6b08      	ldr	r0, [r1, #48]	; 0x30
}
 8007c42:	e7bf      	b.n	8007bc4 <rt_test_009_001_execute+0x44>
 8007c44:	20001050 	.word	0x20001050
 8007c48:	20001134 	.word	0x20001134
 8007c4c:	08001421 	.word	0x08001421
 8007c50:	20001270 	.word	0x20001270
 8007c54:	200019a0 	.word	0x200019a0
 8007c58:	08010420 	.word	0x08010420
 8007c5c:	08010468 	.word	0x08010468

08007c60 <rt_test_010_002_execute>:
static void rt_test_010_002_execute(void) {
 8007c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8007c62:	2701      	movs	r7, #1
 8007c64:	2507      	movs	r5, #7
  eid = (eventid_t)0;
 8007c66:	2400      	movs	r4, #0
 8007c68:	4b0c      	ldr	r3, [pc, #48]	; (8007c9c <rt_test_010_002_execute+0x3c>)
 8007c6a:	4e0d      	ldr	r6, [pc, #52]	; (8007ca0 <rt_test_010_002_execute+0x40>)
 8007c6c:	601f      	str	r7, [r3, #0]
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8007c6e:	fa25 f304 	lsr.w	r3, r5, r4
 8007c72:	07db      	lsls	r3, r3, #31
      events &= ~EVENT_MASK(eid);
 8007c74:	fa07 f204 	lsl.w	r2, r7, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8007c78:	d50e      	bpl.n	8007c98 <rt_test_010_002_execute+0x38>
      handlers[eid](eid);
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 8007c80:	ea25 0502 	bic.w	r5, r5, r2
      handlers[eid](eid);
 8007c84:	3401      	adds	r4, #1
 8007c86:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 8007c88:	2d00      	cmp	r5, #0
 8007c8a:	d1f0      	bne.n	8007c6e <rt_test_010_002_execute+0xe>
}
 8007c8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8007c90:	4904      	ldr	r1, [pc, #16]	; (8007ca4 <rt_test_010_002_execute+0x44>)
 8007c92:	4805      	ldr	r0, [pc, #20]	; (8007ca8 <rt_test_010_002_execute+0x48>)
 8007c94:	f7ff b9a4 	b.w	8006fe0 <__test_assert_sequence>
    eid++;
 8007c98:	3401      	adds	r4, #1
  while (events != (eventmask_t)0) {
 8007c9a:	e7e8      	b.n	8007c6e <rt_test_010_002_execute+0xe>
 8007c9c:	20001134 	.word	0x20001134
 8007ca0:	08011bc4 	.word	0x08011bc4
 8007ca4:	08010420 	.word	0x08010420
 8007ca8:	08010464 	.word	0x08010464
 8007cac:	00000000 	.word	0x00000000

08007cb0 <rt_test_011_001_execute>:
  test_set_step(2);
 8007cb0:	2202      	movs	r2, #2
static void rt_test_011_001_execute(void) {
 8007cb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb6:	4b6e      	ldr	r3, [pc, #440]	; (8007e70 <rt_test_011_001_execute+0x1c0>)
  test_set_step(2);
 8007cb8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8007e74 <rt_test_011_001_execute+0x1c4>
  return chThdGetSelfX()->hdr.pqueue.prio;
 8007cbc:	68d9      	ldr	r1, [r3, #12]
static void rt_test_011_001_execute(void) {
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	2320      	movs	r3, #32
 8007cc2:	f8d1 a008 	ldr.w	sl, [r1, #8]
  test_set_step(2);
 8007cc6:	f8c8 2000 	str.w	r2, [r8]
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8007e78 <rt_test_011_001_execute+0x1c8>
 8007cd2:	2500      	movs	r5, #0
 8007cd4:	f109 000c 	add.w	r0, r9, #12
 8007cd8:	f7fc fd6a 	bl	80047b0 <chMtxLockS>
 8007cdc:	f385 8811 	msr	BASEPRI, r5
  while (H_NEXT(qp) != NULL) {
 8007ce0:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8007ce4:	2c00      	cmp	r4, #0
 8007ce6:	f000 809a 	beq.w	8007e1e <rt_test_011_001_execute+0x16e>
  tpages = 0U;
 8007cea:	462f      	mov	r7, r5
  n = 0U;
 8007cec:	462e      	mov	r6, r5
    size_t pages = H_PAGES(H_NEXT(qp));
 8007cee:	6863      	ldr	r3, [r4, #4]
  while (H_NEXT(qp) != NULL) {
 8007cf0:	6824      	ldr	r4, [r4, #0]
 8007cf2:	429d      	cmp	r5, r3
 8007cf4:	bf38      	it	cc
 8007cf6:	461d      	movcc	r5, r3
    n++;
 8007cf8:	3601      	adds	r6, #1
    tpages += pages;
 8007cfa:	441f      	add	r7, r3
  while (H_NEXT(qp) != NULL) {
 8007cfc:	2c00      	cmp	r4, #0
 8007cfe:	d1f6      	bne.n	8007cee <rt_test_011_001_execute+0x3e>
  H_UNLOCK(heapp);
 8007d00:	485e      	ldr	r0, [pc, #376]	; (8007e7c <rt_test_011_001_execute+0x1cc>)
 8007d02:	f7fc fded 	bl	80048e0 <chMtxUnlock>
  if (!condition) {
 8007d06:	2e01      	cmp	r6, #1
 8007d08:	f040 808d 	bne.w	8007e26 <rt_test_011_001_execute+0x176>
  test_set_step(3);
 8007d0c:	2303      	movs	r3, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 8007d0e:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007e80 <rt_test_011_001_execute+0x1d0>
  test_set_step(3);
 8007d12:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateFromHeap(&heap1,
 8007d16:	4b5b      	ldr	r3, [pc, #364]	; (8007e84 <rt_test_011_001_execute+0x1d4>)
 8007d18:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	4a5a      	ldr	r2, [pc, #360]	; (8007e88 <rt_test_011_001_execute+0x1d8>)
 8007d20:	4855      	ldr	r0, [pc, #340]	; (8007e78 <rt_test_011_001_execute+0x1c8>)
 8007d22:	f8cd b000 	str.w	fp, [sp]
 8007d26:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007d2a:	f7fd fbf1 	bl	8005510 <chThdCreateFromHeap>
 8007d2e:	4e57      	ldr	r6, [pc, #348]	; (8007e8c <rt_test_011_001_execute+0x1dc>)
 8007d30:	6030      	str	r0, [r6, #0]
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d069      	beq.n	8007e0a <rt_test_011_001_execute+0x15a>
  test_set_step(4);
 8007d36:	2304      	movs	r3, #4
 8007d38:	f8c8 3000 	str.w	r3, [r8]
    threads[1] = chThdCreateFromHeap(&heap1,
 8007d3c:	4b54      	ldr	r3, [pc, #336]	; (8007e90 <rt_test_011_001_execute+0x1e0>)
 8007d3e:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	4a53      	ldr	r2, [pc, #332]	; (8007e94 <rt_test_011_001_execute+0x1e4>)
 8007d46:	484c      	ldr	r0, [pc, #304]	; (8007e78 <rt_test_011_001_execute+0x1c8>)
 8007d48:	f8cd b000 	str.w	fp, [sp]
 8007d4c:	f1aa 0302 	sub.w	r3, sl, #2
 8007d50:	f7fd fbde 	bl	8005510 <chThdCreateFromHeap>
 8007d54:	6070      	str	r0, [r6, #4]
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d057      	beq.n	8007e0a <rt_test_011_001_execute+0x15a>
  test_set_step(5);
 8007d5a:	2205      	movs	r2, #5
 8007d5c:	f8c8 2000 	str.w	r2, [r8]
    threads[2] = chThdCreateFromHeap(&heap1,
 8007d60:	4a4d      	ldr	r2, [pc, #308]	; (8007e98 <rt_test_011_001_execute+0x1e8>)
 8007d62:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007d66:	9201      	str	r2, [sp, #4]
 8007d68:	4843      	ldr	r0, [pc, #268]	; (8007e78 <rt_test_011_001_execute+0x1c8>)
 8007d6a:	4a4c      	ldr	r2, [pc, #304]	; (8007e9c <rt_test_011_001_execute+0x1ec>)
 8007d6c:	f8cd b000 	str.w	fp, [sp]
 8007d70:	f1aa 0303 	sub.w	r3, sl, #3
 8007d74:	f7fd fbcc 	bl	8005510 <chThdCreateFromHeap>
 8007d78:	60b0      	str	r0, [r6, #8]
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d15d      	bne.n	8007e3a <rt_test_011_001_execute+0x18a>
  test_set_step(6);
 8007d7e:	2306      	movs	r3, #6
 8007d80:	f106 0a14 	add.w	sl, r6, #20
 8007d84:	f8c8 3000 	str.w	r3, [r8]
    if (threads[i] != NULL) {
 8007d88:	f856 0b04 	ldr.w	r0, [r6], #4
 8007d8c:	b118      	cbz	r0, 8007d96 <rt_test_011_001_execute+0xe6>
      chThdWait(threads[i]);
 8007d8e:	f7fd fc57 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8007d92:	f846 4c04 	str.w	r4, [r6, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8007d96:	4556      	cmp	r6, sl
 8007d98:	d1f6      	bne.n	8007d88 <rt_test_011_001_execute+0xd8>
    test_assert_sequence("AB", "invalid sequence");
 8007d9a:	4941      	ldr	r1, [pc, #260]	; (8007ea0 <rt_test_011_001_execute+0x1f0>)
 8007d9c:	4841      	ldr	r0, [pc, #260]	; (8007ea4 <rt_test_011_001_execute+0x1f4>)
 8007d9e:	f7ff f91f 	bl	8006fe0 <__test_assert_sequence>
 8007da2:	4604      	mov	r4, r0
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d137      	bne.n	8007e18 <rt_test_011_001_execute+0x168>
  test_set_step(7);
 8007da8:	2307      	movs	r3, #7
 8007daa:	f8c8 3000 	str.w	r3, [r8]
 8007dae:	2320      	movs	r3, #32
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	4831      	ldr	r0, [pc, #196]	; (8007e7c <rt_test_011_001_execute+0x1cc>)
 8007db6:	f7fc fcfb 	bl	80047b0 <chMtxLockS>
 8007dba:	f384 8811 	msr	BASEPRI, r4
  while (H_NEXT(qp) != NULL) {
 8007dbe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d041      	beq.n	8007e4a <rt_test_011_001_execute+0x19a>
  tpages = 0U;
 8007dc6:	4626      	mov	r6, r4
  n = 0U;
 8007dc8:	46a1      	mov	r9, r4
    size_t pages = H_PAGES(H_NEXT(qp));
 8007dca:	685a      	ldr	r2, [r3, #4]
  while (H_NEXT(qp) != NULL) {
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4294      	cmp	r4, r2
 8007dd0:	bf38      	it	cc
 8007dd2:	4614      	movcc	r4, r2
    n++;
 8007dd4:	f109 0901 	add.w	r9, r9, #1
    tpages += pages;
 8007dd8:	4416      	add	r6, r2
  while (H_NEXT(qp) != NULL) {
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1f5      	bne.n	8007dca <rt_test_011_001_execute+0x11a>
  H_UNLOCK(heapp);
 8007dde:	4827      	ldr	r0, [pc, #156]	; (8007e7c <rt_test_011_001_execute+0x1cc>)
 8007de0:	f7fc fd7e 	bl	80048e0 <chMtxUnlock>
 8007de4:	f1b9 0f01 	cmp.w	r9, #1
 8007de8:	d132      	bne.n	8007e50 <rt_test_011_001_execute+0x1a0>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8007dea:	00f6      	lsls	r6, r6, #3
 8007dec:	ebb6 0fc7 	cmp.w	r6, r7, lsl #3
 8007df0:	d136      	bne.n	8007e60 <rt_test_011_001_execute+0x1b0>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8007df2:	00e4      	lsls	r4, r4, #3
 8007df4:	ebb4 0fc5 	cmp.w	r4, r5, lsl #3
 8007df8:	d00e      	beq.n	8007e18 <rt_test_011_001_execute+0x168>
  chtest.global_fail     = true;
 8007dfa:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007dfe:	4a2a      	ldr	r2, [pc, #168]	; (8007ea8 <rt_test_011_001_execute+0x1f8>)
  chtest.global_fail     = true;
 8007e00:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8007e04:	f8c8 2008 	str.w	r2, [r8, #8]
    return __test_fail(msg);
 8007e08:	e006      	b.n	8007e18 <rt_test_011_001_execute+0x168>
  chtest.global_fail     = true;
 8007e0a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007e0e:	4a27      	ldr	r2, [pc, #156]	; (8007eac <rt_test_011_001_execute+0x1fc>)
  chtest.global_fail     = true;
 8007e10:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8007e14:	f8c8 2008 	str.w	r2, [r8, #8]
}
 8007e18:	b003      	add	sp, #12
 8007e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  H_UNLOCK(heapp);
 8007e1e:	f109 000c 	add.w	r0, r9, #12
 8007e22:	f7fc fd5d 	bl	80048e0 <chMtxUnlock>
  chtest.global_fail     = true;
 8007e26:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007e2a:	4a21      	ldr	r2, [pc, #132]	; (8007eb0 <rt_test_011_001_execute+0x200>)
  chtest.global_fail     = true;
 8007e2c:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8007e30:	f8c8 2008 	str.w	r2, [r8, #8]
 8007e34:	b003      	add	sp, #12
 8007e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.global_fail     = true;
 8007e3a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007e3e:	4a1d      	ldr	r2, [pc, #116]	; (8007eb4 <rt_test_011_001_execute+0x204>)
  chtest.global_fail     = true;
 8007e40:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8007e44:	f8c8 2008 	str.w	r2, [r8, #8]
 8007e48:	e7e6      	b.n	8007e18 <rt_test_011_001_execute+0x168>
 8007e4a:	480c      	ldr	r0, [pc, #48]	; (8007e7c <rt_test_011_001_execute+0x1cc>)
 8007e4c:	f7fc fd48 	bl	80048e0 <chMtxUnlock>
  chtest.global_fail     = true;
 8007e50:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007e54:	4a18      	ldr	r2, [pc, #96]	; (8007eb8 <rt_test_011_001_execute+0x208>)
  chtest.global_fail     = true;
 8007e56:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8007e5a:	f8c8 2008 	str.w	r2, [r8, #8]
 8007e5e:	e7db      	b.n	8007e18 <rt_test_011_001_execute+0x168>
  chtest.global_fail     = true;
 8007e60:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007e64:	4a15      	ldr	r2, [pc, #84]	; (8007ebc <rt_test_011_001_execute+0x20c>)
  chtest.global_fail     = true;
 8007e66:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8007e6a:	f8c8 2008 	str.w	r2, [r8, #8]
 8007e6e:	e7d3      	b.n	8007e18 <rt_test_011_001_execute+0x168>
 8007e70:	20001050 	.word	0x20001050
 8007e74:	20001134 	.word	0x20001134
 8007e78:	20001228 	.word	0x20001228
 8007e7c:	20001234 	.word	0x20001234
 8007e80:	08000fb1 	.word	0x08000fb1
 8007e84:	08010068 	.word	0x08010068
 8007e88:	08010470 	.word	0x08010470
 8007e8c:	200019a0 	.word	0x200019a0
 8007e90:	0801006c 	.word	0x0801006c
 8007e94:	080104a0 	.word	0x080104a0
 8007e98:	0801041c 	.word	0x0801041c
 8007e9c:	080104a8 	.word	0x080104a8
 8007ea0:	08010420 	.word	0x08010420
 8007ea4:	080104cc 	.word	0x080104cc
 8007ea8:	08010504 	.word	0x08010504
 8007eac:	08010488 	.word	0x08010488
 8007eb0:	08010478 	.word	0x08010478
 8007eb4:	080104b0 	.word	0x080104b0
 8007eb8:	080104d0 	.word	0x080104d0
 8007ebc:	080104e8 	.word	0x080104e8

08007ec0 <rt_test_011_002_execute>:
static void rt_test_011_002_execute(void) {
  unsigned i;
  tprio_t prio;

  /* [11.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8007ec0:	2101      	movs	r1, #1
static void rt_test_011_002_execute(void) {
 8007ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec6:	2620      	movs	r6, #32
 8007ec8:	2400      	movs	r4, #0
  test_set_step(1);
 8007eca:	4f53      	ldr	r7, [pc, #332]	; (8008018 <rt_test_011_002_execute+0x158>)
 8007ecc:	4b53      	ldr	r3, [pc, #332]	; (800801c <rt_test_011_002_execute+0x15c>)
 8007ece:	4a54      	ldr	r2, [pc, #336]	; (8008020 <rt_test_011_002_execute+0x160>)
 8007ed0:	4d54      	ldr	r5, [pc, #336]	; (8008024 <rt_test_011_002_execute+0x164>)
 8007ed2:	f103 000c 	add.w	r0, r3, #12
 8007ed6:	6039      	str	r1, [r7, #0]
 8007ed8:	f386 8811 	msr	BASEPRI, r6
 8007edc:	6829      	ldr	r1, [r5, #0]
 8007ede:	6011      	str	r1, [r2, #0]
  mp->next = php;
 8007ee0:	602a      	str	r2, [r5, #0]
 8007ee2:	f384 8811 	msr	BASEPRI, r4
  {
    for (i = 0; i < 4; i++)
 8007ee6:	4298      	cmp	r0, r3
 8007ee8:	d002      	beq.n	8007ef0 <rt_test_011_002_execute+0x30>
      chPoolFree(&mp1, wa[i]);
 8007eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eee:	e7f3      	b.n	8007ed8 <rt_test_011_002_execute+0x18>
    prio = chThdGetPriorityX();
  }
  test_end_step(2);

  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
 8007ef0:	2303      	movs	r3, #3
  return __sch_get_currthread();
 8007ef2:	494d      	ldr	r1, [pc, #308]	; (8008028 <rt_test_011_002_execute+0x168>)
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007ef4:	4a4d      	ldr	r2, [pc, #308]	; (800802c <rt_test_011_002_execute+0x16c>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8007ef6:	68c9      	ldr	r1, [r1, #12]
 8007ef8:	484d      	ldr	r0, [pc, #308]	; (8008030 <rt_test_011_002_execute+0x170>)
 8007efa:	688e      	ldr	r6, [r1, #8]
  test_set_step(3);
 8007efc:	603b      	str	r3, [r7, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007efe:	1e71      	subs	r1, r6, #1
 8007f00:	f005 ff6e 	bl	800dde0 <chThdCreateFromMemoryPool.constprop.0>
 8007f04:	4603      	mov	r3, r0
 8007f06:	4c4b      	ldr	r4, [pc, #300]	; (8008034 <rt_test_011_002_execute+0x174>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007f08:	1eb1      	subs	r1, r6, #2
 8007f0a:	4a4b      	ldr	r2, [pc, #300]	; (8008038 <rt_test_011_002_execute+0x178>)
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007f0c:	6023      	str	r3, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007f0e:	484b      	ldr	r0, [pc, #300]	; (800803c <rt_test_011_002_execute+0x17c>)
 8007f10:	f005 ff66 	bl	800dde0 <chThdCreateFromMemoryPool.constprop.0>
 8007f14:	4603      	mov	r3, r0
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007f16:	1ef1      	subs	r1, r6, #3
 8007f18:	4a49      	ldr	r2, [pc, #292]	; (8008040 <rt_test_011_002_execute+0x180>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007f1a:	6063      	str	r3, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007f1c:	4849      	ldr	r0, [pc, #292]	; (8008044 <rt_test_011_002_execute+0x184>)
 8007f1e:	f005 ff5f 	bl	800dde0 <chThdCreateFromMemoryPool.constprop.0>
 8007f22:	4603      	mov	r3, r0
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007f24:	1f31      	subs	r1, r6, #4
 8007f26:	4a48      	ldr	r2, [pc, #288]	; (8008048 <rt_test_011_002_execute+0x188>)
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007f28:	60a3      	str	r3, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007f2a:	4848      	ldr	r0, [pc, #288]	; (800804c <rt_test_011_002_execute+0x18c>)
 8007f2c:	f005 ff58 	bl	800dde0 <chThdCreateFromMemoryPool.constprop.0>
 8007f30:	4603      	mov	r3, r0
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007f32:	4a47      	ldr	r2, [pc, #284]	; (8008050 <rt_test_011_002_execute+0x190>)
 8007f34:	1f71      	subs	r1, r6, #5
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007f36:	60e3      	str	r3, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007f38:	4846      	ldr	r0, [pc, #280]	; (8008054 <rt_test_011_002_execute+0x194>)
 8007f3a:	f005 ff51 	bl	800dde0 <chThdCreateFromMemoryPool.constprop.0>
  }
  test_end_step(3);

  /* [11.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
 8007f3e:	2204      	movs	r2, #4
  {
    test_assert((threads[0] != NULL) &&
 8007f40:	6823      	ldr	r3, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007f42:	4606      	mov	r6, r0
  test_set_step(4);
 8007f44:	603a      	str	r2, [r7, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007f46:	6120      	str	r0, [r4, #16]
    test_assert((threads[0] != NULL) &&
 8007f48:	b1ab      	cbz	r3, 8007f76 <rt_test_011_002_execute+0xb6>
 8007f4a:	6862      	ldr	r2, [r4, #4]
 8007f4c:	b19a      	cbz	r2, 8007f76 <rt_test_011_002_execute+0xb6>
 8007f4e:	68a2      	ldr	r2, [r4, #8]
 8007f50:	b18a      	cbz	r2, 8007f76 <rt_test_011_002_execute+0xb6>
 8007f52:	68e2      	ldr	r2, [r4, #12]
 8007f54:	b17a      	cbz	r2, 8007f76 <rt_test_011_002_execute+0xb6>
  if (!condition) {
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d146      	bne.n	8007fe8 <rt_test_011_002_execute+0x128>
  }
  test_end_step(4);

  /* [11.2.5] Letting them run, free the memory then checking the
     execution sequence.*/
  test_set_step(5);
 8007f5a:	2205      	movs	r2, #5
 8007f5c:	f104 0810 	add.w	r8, r4, #16
 8007f60:	603a      	str	r2, [r7, #0]
    if (threads[i] != NULL) {
 8007f62:	b11b      	cbz	r3, 8007f6c <rt_test_011_002_execute+0xac>
      chThdWait(threads[i]);
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fd fb6b 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8007f6a:	6026      	str	r6, [r4, #0]
  for (i = 0; i < MAX_THREADS; i++)
 8007f6c:	4544      	cmp	r4, r8
 8007f6e:	d009      	beq.n	8007f84 <rt_test_011_002_execute+0xc4>
    if (threads[i] != NULL) {
 8007f70:	f854 3f04 	ldr.w	r3, [r4, #4]!
 8007f74:	e7f5      	b.n	8007f62 <rt_test_011_002_execute+0xa2>
  chtest.global_fail     = true;
 8007f76:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007f7a:	4a37      	ldr	r2, [pc, #220]	; (8008058 <rt_test_011_002_execute+0x198>)
  chtest.global_fail     = true;
 8007f7c:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 8007f7e:	60ba      	str	r2, [r7, #8]
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
  test_end_step(6);
}
 8007f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert_sequence("ABCD", "invalid sequence");
 8007f84:	4935      	ldr	r1, [pc, #212]	; (800805c <rt_test_011_002_execute+0x19c>)
 8007f86:	4836      	ldr	r0, [pc, #216]	; (8008060 <rt_test_011_002_execute+0x1a0>)
 8007f88:	f7ff f82a 	bl	8006fe0 <__test_assert_sequence>
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d1f6      	bne.n	8007f80 <rt_test_011_002_execute+0xc0>
  test_set_step(6);
 8007f92:	2306      	movs	r3, #6
 8007f94:	2404      	movs	r4, #4
 8007f96:	f04f 0820 	mov.w	r8, #32
 8007f9a:	603b      	str	r3, [r7, #0]
 8007f9c:	f388 8811 	msr	BASEPRI, r8
  objp = mp->next;
 8007fa0:	6828      	ldr	r0, [r5, #0]
  if (objp != NULL) {
 8007fa2:	b340      	cbz	r0, 8007ff6 <rt_test_011_002_execute+0x136>
    mp->next = mp->next->next;
 8007fa4:	6803      	ldr	r3, [r0, #0]
 8007fa6:	602b      	str	r3, [r5, #0]
 8007fa8:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 8007fac:	b1a8      	cbz	r0, 8007fda <rt_test_011_002_execute+0x11a>
    for (i = 0; i < 4; i++)
 8007fae:	3c01      	subs	r4, #1
 8007fb0:	d1f4      	bne.n	8007f9c <rt_test_011_002_execute+0xdc>
 8007fb2:	2320      	movs	r3, #32
 8007fb4:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8007fb8:	6828      	ldr	r0, [r5, #0]
  if (objp != NULL) {
 8007fba:	b318      	cbz	r0, 8008004 <rt_test_011_002_execute+0x144>
    mp->next = mp->next->next;
 8007fbc:	6803      	ldr	r3, [r0, #0]
 8007fbe:	602b      	str	r3, [r5, #0]
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d0da      	beq.n	8007f80 <rt_test_011_002_execute+0xc0>
  chtest.global_fail     = true;
 8007fca:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007fce:	4a25      	ldr	r2, [pc, #148]	; (8008064 <rt_test_011_002_execute+0x1a4>)
  chtest.global_fail     = true;
 8007fd0:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 8007fd2:	60ba      	str	r2, [r7, #8]
    return __test_fail(msg);
 8007fd4:	e7d4      	b.n	8007f80 <rt_test_011_002_execute+0xc0>
 8007fd6:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 8007fda:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007fde:	4a22      	ldr	r2, [pc, #136]	; (8008068 <rt_test_011_002_execute+0x1a8>)
  chtest.global_fail     = true;
 8007fe0:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 8007fe2:	60ba      	str	r2, [r7, #8]
}
 8007fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.global_fail     = true;
 8007fe8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007fec:	4a1f      	ldr	r2, [pc, #124]	; (800806c <rt_test_011_002_execute+0x1ac>)
  chtest.global_fail     = true;
 8007fee:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 8007ff0:	60ba      	str	r2, [r7, #8]
 8007ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 8007ff6:	68eb      	ldr	r3, [r5, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d0ec      	beq.n	8007fd6 <rt_test_011_002_execute+0x116>
    objp = mp->provider(mp->object_size, mp->align);
 8007ffc:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8008000:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8008002:	e7d1      	b.n	8007fa8 <rt_test_011_002_execute+0xe8>
  else if (mp->provider != NULL) {
 8008004:	68eb      	ldr	r3, [r5, #12]
 8008006:	b11b      	cbz	r3, 8008010 <rt_test_011_002_execute+0x150>
    objp = mp->provider(mp->object_size, mp->align);
 8008008:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 800800c:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 800800e:	e7d7      	b.n	8007fc0 <rt_test_011_002_execute+0x100>
 8008010:	f384 8811 	msr	BASEPRI, r4
bool __test_assert(bool condition, const char *msg) {
 8008014:	e7b4      	b.n	8007f80 <rt_test_011_002_execute+0xc0>
 8008016:	bf00      	nop
 8008018:	20001134 	.word	0x20001134
 800801c:	080124ac 	.word	0x080124ac
 8008020:	20001270 	.word	0x20001270
 8008024:	20001244 	.word	0x20001244
 8008028:	20001050 	.word	0x20001050
 800802c:	08010068 	.word	0x08010068
 8008030:	08010470 	.word	0x08010470
 8008034:	200019a0 	.word	0x200019a0
 8008038:	0801006c 	.word	0x0801006c
 800803c:	080104a0 	.word	0x080104a0
 8008040:	0801041c 	.word	0x0801041c
 8008044:	080104a8 	.word	0x080104a8
 8008048:	08011770 	.word	0x08011770
 800804c:	08010524 	.word	0x08010524
 8008050:	08010438 	.word	0x08010438
 8008054:	0801052c 	.word	0x0801052c
 8008058:	08010488 	.word	0x08010488
 800805c:	08010420 	.word	0x08010420
 8008060:	08010468 	.word	0x08010468
 8008064:	08010544 	.word	0x08010544
 8008068:	08010534 	.word	0x08010534
 800806c:	080104b0 	.word	0x080104b0

08008070 <test_printf>:
 * @param[in] fmt       formatting string
 * @return              The number of bytes written.
 *
 * @api
 */
int test_printf(const char *fmt, ...) {
 8008070:	b40f      	push	{r0, r1, r2, r3}
 8008072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008076:	b087      	sub	sp, #28
 8008078:	ab10      	add	r3, sp, #64	; 0x40
 800807a:	f853 4b04 	ldr.w	r4, [r3], #4
    c = *fmt++;
 800807e:	46a0      	mov	r8, r4
 8008080:	f818 0b01 	ldrb.w	r0, [r8], #1
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8008084:	9302      	str	r3, [sp, #8]
    if (c == '\0') {
 8008086:	2800      	cmp	r0, #0
 8008088:	f000 820d 	beq.w	80084a6 <test_printf+0x436>
 800808c:	4699      	mov	r9, r3
  n = 0;
 800808e:	2600      	movs	r6, #0
 8008090:	4d8d      	ldr	r5, [pc, #564]	; (80082c8 <test_printf+0x258>)
 8008092:	e009      	b.n	80080a8 <test_printf+0x38>
  if (chtest.putchar != NULL) {
 8008094:	6a2b      	ldr	r3, [r5, #32]
 8008096:	b103      	cbz	r3, 800809a <test_printf+0x2a>
    chtest.putchar(c);
 8008098:	4798      	blx	r3
      continue;
 800809a:	4644      	mov	r4, r8
      n++;
 800809c:	3601      	adds	r6, #1
    c = *fmt++;
 800809e:	46a0      	mov	r8, r4
 80080a0:	f818 0b01 	ldrb.w	r0, [r8], #1
    if (c == '\0') {
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d07d      	beq.n	80081a4 <test_printf+0x134>
    if (c != '%') {
 80080a8:	2825      	cmp	r0, #37	; 0x25
 80080aa:	d1f3      	bne.n	8008094 <test_printf+0x24>
    if (*fmt == '-') {
 80080ac:	7863      	ldrb	r3, [r4, #1]
 80080ae:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 80080b0:	bf08      	it	eq
 80080b2:	f104 0802 	addeq.w	r8, r4, #2
    if (*fmt == '+') {
 80080b6:	f898 3000 	ldrb.w	r3, [r8]
      left_align = true;
 80080ba:	bf0c      	ite	eq
 80080bc:	f04f 0a01 	moveq.w	sl, #1
    left_align = false;
 80080c0:	f04f 0a00 	movne.w	sl, #0
    if (*fmt == '+') {
 80080c4:	2b2b      	cmp	r3, #43	; 0x2b
    if (*fmt == '0') {
 80080c6:	bf03      	ittte	eq
 80080c8:	f898 3001 	ldrbeq.w	r3, [r8, #1]
      do_sign = true;
 80080cc:	f04f 0c01 	moveq.w	ip, #1
      fmt++;
 80080d0:	f108 0801 	addeq.w	r8, r8, #1
    do_sign = false;
 80080d4:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '0') {
 80080d8:	2b30      	cmp	r3, #48	; 0x30
      fmt++;
 80080da:	bf03      	ittte	eq
 80080dc:	f108 0801 	addeq.w	r8, r8, #1
      filler = '0';
 80080e0:	461f      	moveq	r7, r3
    if ( *fmt == '*') {
 80080e2:	f898 3000 	ldrbeq.w	r3, [r8]
    filler = ' ';
 80080e6:	2720      	movne	r7, #32
    if ( *fmt == '*') {
 80080e8:	2b2a      	cmp	r3, #42	; 0x2a
 80080ea:	d14a      	bne.n	8008182 <test_printf+0x112>
      c = *fmt++;
 80080ec:	f898 3001 	ldrb.w	r3, [r8, #1]
      width = va_arg(ap, int);
 80080f0:	f859 2b04 	ldr.w	r2, [r9], #4
      c = *fmt++;
 80080f4:	f108 0402 	add.w	r4, r8, #2
    if (c == '.') {
 80080f8:	2b2e      	cmp	r3, #46	; 0x2e
 80080fa:	f000 8098 	beq.w	800822e <test_printf+0x1be>
    precision = 0;
 80080fe:	2000      	movs	r0, #0
    if ((c == 'l') || (c == 'L')) {
 8008100:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 8008104:	294c      	cmp	r1, #76	; 0x4c
 8008106:	d053      	beq.n	80081b0 <test_printf+0x140>
    switch (c) {
 8008108:	f1a3 0e44 	sub.w	lr, r3, #68	; 0x44
 800810c:	f1be 0f34 	cmp.w	lr, #52	; 0x34
 8008110:	f200 8097 	bhi.w	8008242 <test_printf+0x1d2>
 8008114:	e8df f01e 	tbh	[pc, lr, lsl #1]
 8008118:	009500da 	.word	0x009500da
 800811c:	00950095 	.word	0x00950095
 8008120:	00da0095 	.word	0x00da0095
 8008124:	00950095 	.word	0x00950095
 8008128:	00950095 	.word	0x00950095
 800812c:	014b0095 	.word	0x014b0095
 8008130:	0095010e 	.word	0x0095010e
 8008134:	00950095 	.word	0x00950095
 8008138:	01ba0095 	.word	0x01ba0095
 800813c:	00950095 	.word	0x00950095
 8008140:	0095010e 	.word	0x0095010e
 8008144:	00950095 	.word	0x00950095
 8008148:	00950095 	.word	0x00950095
 800814c:	00950095 	.word	0x00950095
 8008150:	00950095 	.word	0x00950095
 8008154:	016a0095 	.word	0x016a0095
 8008158:	009500da 	.word	0x009500da
 800815c:	00950095 	.word	0x00950095
 8008160:	00da0095 	.word	0x00da0095
 8008164:	00950095 	.word	0x00950095
 8008168:	00950095 	.word	0x00950095
 800816c:	014b0095 	.word	0x014b0095
 8008170:	0095010e 	.word	0x0095010e
 8008174:	014e0095 	.word	0x014e0095
 8008178:	01ba0095 	.word	0x01ba0095
 800817c:	00950095 	.word	0x00950095
 8008180:	010e      	.short	0x010e
        c = *fmt++;
 8008182:	f108 0401 	add.w	r4, r8, #1
        if (c == '\0') {
 8008186:	b16b      	cbz	r3, 80081a4 <test_printf+0x134>
      width = 0;
 8008188:	2200      	movs	r2, #0
        if ((c >= '0') && (c <= '9')) {
 800818a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800818e:	b2c9      	uxtb	r1, r1
 8008190:	2909      	cmp	r1, #9
          width = width * 10 + c;
 8008192:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if ((c >= '0') && (c <= '9')) {
 8008196:	d8af      	bhi.n	80080f8 <test_printf+0x88>
        c = *fmt++;
 8008198:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 800819c:	eb01 0240 	add.w	r2, r1, r0, lsl #1
        if (c == '\0') {
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f2      	bne.n	800818a <test_printf+0x11a>
  formatted_bytes = test_vprintf(fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80081a4:	4630      	mov	r0, r6
 80081a6:	b007      	add	sp, #28
 80081a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	b004      	add	sp, #16
 80081ae:	4770      	bx	lr
      c = *fmt++;
 80081b0:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == '\0') {
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0f5      	beq.n	80081a4 <test_printf+0x134>
    switch (c) {
 80081b8:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 80081bc:	2934      	cmp	r1, #52	; 0x34
 80081be:	d840      	bhi.n	8008242 <test_printf+0x1d2>
 80081c0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80081c4:	003f0084 	.word	0x003f0084
 80081c8:	003f003f 	.word	0x003f003f
 80081cc:	0084003f 	.word	0x0084003f
 80081d0:	003f003f 	.word	0x003f003f
 80081d4:	003f003f 	.word	0x003f003f
 80081d8:	00f5003f 	.word	0x00f5003f
 80081dc:	003f00b8 	.word	0x003f00b8
 80081e0:	003f003f 	.word	0x003f003f
 80081e4:	0164003f 	.word	0x0164003f
 80081e8:	003f003f 	.word	0x003f003f
 80081ec:	003f00b8 	.word	0x003f00b8
 80081f0:	003f003f 	.word	0x003f003f
 80081f4:	003f003f 	.word	0x003f003f
 80081f8:	003f003f 	.word	0x003f003f
 80081fc:	003f003f 	.word	0x003f003f
 8008200:	0114003f 	.word	0x0114003f
 8008204:	003f0084 	.word	0x003f0084
 8008208:	003f003f 	.word	0x003f003f
 800820c:	0084003f 	.word	0x0084003f
 8008210:	003f003f 	.word	0x003f003f
 8008214:	003f003f 	.word	0x003f003f
 8008218:	00f5003f 	.word	0x00f5003f
 800821c:	003f00b8 	.word	0x003f00b8
 8008220:	00f8003f 	.word	0x00f8003f
 8008224:	0164003f 	.word	0x0164003f
 8008228:	003f003f 	.word	0x003f003f
 800822c:	00b8      	.short	0x00b8
      c = *fmt++;
 800822e:	7823      	ldrb	r3, [r4, #0]
      if (c == '\0') {
 8008230:	2b00      	cmp	r3, #0
 8008232:	d0b7      	beq.n	80081a4 <test_printf+0x134>
      if (c == '*') {
 8008234:	2b2a      	cmp	r3, #42	; 0x2a
 8008236:	d136      	bne.n	80082a6 <test_printf+0x236>
        c = *fmt++;
 8008238:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 800823a:	f859 0b04 	ldr.w	r0, [r9], #4
        c = *fmt++;
 800823e:	3402      	adds	r4, #2
 8008240:	e75e      	b.n	8008100 <test_printf+0x90>
      *p++ = c;
 8008242:	3a01      	subs	r2, #1
 8008244:	f88d 300c 	strb.w	r3, [sp, #12]
    if (width < 0) {
 8008248:	ea22 78e2 	bic.w	r8, r2, r2, asr #31
    if (left_align == false) {
 800824c:	f1ba 0f00 	cmp.w	sl, #0
 8008250:	f040 80d8 	bne.w	8008404 <test_printf+0x394>
    if (width < 0) {
 8008254:	2a00      	cmp	r2, #0
      width = -width;
 8008256:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 800825a:	f8cd a000 	str.w	sl, [sp]
 800825e:	f300 8103 	bgt.w	8008468 <test_printf+0x3f8>
    if (left_align == false) {
 8008262:	ab03      	add	r3, sp, #12
 8008264:	469b      	mov	fp, r3
 8008266:	9b00      	ldr	r3, [sp, #0]
 8008268:	eb0b 0a03 	add.w	sl, fp, r3
  if (chtest.putchar != NULL) {
 800826c:	6a2b      	ldr	r3, [r5, #32]
      test_putchar(*s++);
 800826e:	f10b 0b01 	add.w	fp, fp, #1
  if (chtest.putchar != NULL) {
 8008272:	b113      	cbz	r3, 800827a <test_printf+0x20a>
    chtest.putchar(c);
 8008274:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
 8008278:	4798      	blx	r3
    while (--i >= 0) {
 800827a:	ebaa 030b 	sub.w	r3, sl, fp
 800827e:	2b00      	cmp	r3, #0
 8008280:	daf4      	bge.n	800826c <test_printf+0x1fc>
      n++;
 8008282:	9b00      	ldr	r3, [sp, #0]
 8008284:	3601      	adds	r6, #1
 8008286:	4433      	add	r3, r6
 8008288:	461e      	mov	r6, r3
    while (width) {
 800828a:	f1b8 0f00 	cmp.w	r8, #0
 800828e:	f43f af06 	beq.w	800809e <test_printf+0x2e>
 8008292:	46c2      	mov	sl, r8
  if (chtest.putchar != NULL) {
 8008294:	6a2b      	ldr	r3, [r5, #32]
 8008296:	b10b      	cbz	r3, 800829c <test_printf+0x22c>
    chtest.putchar(c);
 8008298:	4638      	mov	r0, r7
 800829a:	4798      	blx	r3
    while (width) {
 800829c:	f1ba 0a01 	subs.w	sl, sl, #1
 80082a0:	d1f8      	bne.n	8008294 <test_printf+0x224>
      n++;
 80082a2:	4446      	add	r6, r8
 80082a4:	e6fb      	b.n	800809e <test_printf+0x2e>
    precision = 0;
 80082a6:	2000      	movs	r0, #0
      c = *fmt++;
 80082a8:	3401      	adds	r4, #1
        while ((c >= '0') && (c <= '9')) {
 80082aa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80082ae:	b2c9      	uxtb	r1, r1
 80082b0:	2909      	cmp	r1, #9
          precision = precision * 10 + c;
 80082b2:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
        while ((c >= '0') && (c <= '9')) {
 80082b6:	f63f af23 	bhi.w	8008100 <test_printf+0x90>
          c = *fmt++;
 80082ba:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 80082be:	eb01 004e 	add.w	r0, r1, lr, lsl #1
          if (c == '\0') {
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1f1      	bne.n	80082aa <test_printf+0x23a>
 80082c6:	e76d      	b.n	80081a4 <test_printf+0x134>
 80082c8:	20001134 	.word	0x20001134
        arg = va_arg(ap, int);
 80082cc:	f859 0b04 	ldr.w	r0, [r9], #4
      if (arg < 0) {
 80082d0:	2800      	cmp	r0, #0
 80082d2:	f2c0 80c1 	blt.w	8008458 <test_printf+0x3e8>
        if (do_sign) {
 80082d6:	f1bc 0f00 	cmp.w	ip, #0
 80082da:	f000 80df 	beq.w	800849c <test_printf+0x42c>
          *p++ = '+';
 80082de:	232b      	movs	r3, #43	; 0x2b
 80082e0:	f10d 080d 	add.w	r8, sp, #13
 80082e4:	f88d 300c 	strb.w	r3, [sp, #12]
 80082e8:	ab03      	add	r3, sp, #12
  q = p + MAX_FILLER;
 80082ea:	f108 010b 	add.w	r1, r8, #11
 80082ee:	468c      	mov	ip, r1
    c = (int)(l % (long)radix);
 80082f0:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 80084b8 <test_printf+0x448>
  q = p + MAX_FILLER;
 80082f4:	9100      	str	r1, [sp, #0]
    c = (int)(l % (long)radix);
 80082f6:	fbab e100 	umull	lr, r1, fp, r0
 80082fa:	08c9      	lsrs	r1, r1, #3
 80082fc:	468e      	mov	lr, r1
 80082fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008302:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
  } while (ll != 0);
 8008306:	4670      	mov	r0, lr
    c += '0';
 8008308:	3130      	adds	r1, #48	; 0x30
    *--q = (char)c;
 800830a:	b2c9      	uxtb	r1, r1
 800830c:	f80c 1d01 	strb.w	r1, [ip, #-1]!
  } while (ll != 0);
 8008310:	2800      	cmp	r0, #0
 8008312:	d1f0      	bne.n	80082f6 <test_printf+0x286>
  i = (int)(p + MAX_FILLER - q);
 8008314:	9800      	ldr	r0, [sp, #0]
 8008316:	eba0 000c 	sub.w	r0, r0, ip
 800831a:	4440      	add	r0, r8
 800831c:	e001      	b.n	8008322 <test_printf+0x2b2>
    *p++ = *q++;
 800831e:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8008322:	f808 1b01 	strb.w	r1, [r8], #1
  } while (--i);
 8008326:	4540      	cmp	r0, r8
 8008328:	d1f9      	bne.n	800831e <test_printf+0x2ae>
    i = (int)(p - s);
 800832a:	1ac0      	subs	r0, r0, r3
        i--;
 800832c:	1e41      	subs	r1, r0, #1
    width -= i;
 800832e:	1a12      	subs	r2, r2, r0
        i--;
 8008330:	9100      	str	r1, [sp, #0]
 8008332:	e02e      	b.n	8008392 <test_printf+0x322>
      radix = 16;
 8008334:	f04f 0e10 	mov.w	lr, #16
        arg = va_arg(ap, unsigned int);
 8008338:	f859 cb04 	ldr.w	ip, [r9], #4
      if (c == '\0') {
 800833c:	f10d 0317 	add.w	r3, sp, #23
 8008340:	e000      	b.n	8008344 <test_printf+0x2d4>
 8008342:	465b      	mov	r3, fp
    c = (int)(l % (long)radix);
 8008344:	fb9c f0fe 	sdiv	r0, ip, lr
 8008348:	fb0e c810 	mls	r8, lr, r0, ip
    c += '0';
 800834c:	f108 0130 	add.w	r1, r8, #48	; 0x30
    if (c > '9') {
 8008350:	2939      	cmp	r1, #57	; 0x39
      c += ('A' - '0') - 10;
 8008352:	bfc8      	it	gt
 8008354:	f108 0137 	addgt.w	r1, r8, #55	; 0x37
    *--q = (char)c;
 8008358:	b2c9      	uxtb	r1, r1
    l /= radix;
 800835a:	4684      	mov	ip, r0
    *--q = (char)c;
 800835c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008360:	f803 1c01 	strb.w	r1, [r3, #-1]
  } while (ll != 0);
 8008364:	2800      	cmp	r0, #0
 8008366:	d1ec      	bne.n	8008342 <test_printf+0x2d2>
 8008368:	4618      	mov	r0, r3
  i = (int)(p + MAX_FILLER - q);
 800836a:	f10d 0317 	add.w	r3, sp, #23
 800836e:	eba3 0b0b 	sub.w	fp, r3, fp
 8008372:	ab03      	add	r3, sp, #12
 8008374:	469c      	mov	ip, r3
 8008376:	f10d 0e17 	add.w	lr, sp, #23
 800837a:	e001      	b.n	8008380 <test_printf+0x310>
    *p++ = *q++;
 800837c:	f810 1b01 	ldrb.w	r1, [r0], #1
  } while (--i);
 8008380:	4586      	cmp	lr, r0
    *p++ = *q++;
 8008382:	f80c 1b01 	strb.w	r1, [ip], #1
  } while (--i);
 8008386:	d1f9      	bne.n	800837c <test_printf+0x30c>
        i--;
 8008388:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
    width -= i;
 800838c:	eba2 020b 	sub.w	r2, r2, fp
        i--;
 8008390:	9100      	str	r1, [sp, #0]
    if (width < 0) {
 8008392:	ea22 78e2 	bic.w	r8, r2, r2, asr #31
    if (left_align == false) {
 8008396:	f1ba 0f00 	cmp.w	sl, #0
 800839a:	d103      	bne.n	80083a4 <test_printf+0x334>
    if (width < 0) {
 800839c:	2a00      	cmp	r2, #0
      width = -width;
 800839e:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 80083a2:	dc32      	bgt.n	800840a <test_printf+0x39a>
    while (--i >= 0) {
 80083a4:	9a00      	ldr	r2, [sp, #0]
 80083a6:	2a00      	cmp	r2, #0
 80083a8:	f6bf af5c 	bge.w	8008264 <test_printf+0x1f4>
 80083ac:	e76d      	b.n	800828a <test_printf+0x21a>
      radix = 8;
 80083ae:	f04f 0e08 	mov.w	lr, #8
 80083b2:	e7c1      	b.n	8008338 <test_printf+0x2c8>
      if ((s = va_arg(ap, char *)) == NULL) {
 80083b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d06a      	beq.n	8008492 <test_printf+0x422>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 80083bc:	7819      	ldrb	r1, [r3, #0]
      if (precision == 0) {
 80083be:	2800      	cmp	r0, #0
 80083c0:	d055      	beq.n	800846e <test_printf+0x3fe>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 80083c2:	2900      	cmp	r1, #0
 80083c4:	d057      	beq.n	8008476 <test_printf+0x406>
 80083c6:	3801      	subs	r0, #1
 80083c8:	d455      	bmi.n	8008476 <test_printf+0x406>
 80083ca:	4619      	mov	r1, r3
 80083cc:	e002      	b.n	80083d4 <test_printf+0x364>
 80083ce:	eb1c 0f00 	cmn.w	ip, r0
 80083d2:	d405      	bmi.n	80083e0 <test_printf+0x370>
 80083d4:	f811 7f01 	ldrb.w	r7, [r1, #1]!
 80083d8:	eba3 0c01 	sub.w	ip, r3, r1
 80083dc:	2f00      	cmp	r7, #0
 80083de:	d1f6      	bne.n	80083ce <test_printf+0x35e>
    i = (int)(p - s);
 80083e0:	1ac9      	subs	r1, r1, r3
    width -= i;
 80083e2:	1a52      	subs	r2, r2, r1
        i--;
 80083e4:	3901      	subs	r1, #1
      filler = ' ';
 80083e6:	2720      	movs	r7, #32
        i--;
 80083e8:	9100      	str	r1, [sp, #0]
 80083ea:	e7d2      	b.n	8008392 <test_printf+0x322>
      *p++ = va_arg(ap, int);
 80083ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80083f0:	3a01      	subs	r2, #1
      filler = ' ';
 80083f2:	2720      	movs	r7, #32
      *p++ = va_arg(ap, int);
 80083f4:	f88d 300c 	strb.w	r3, [sp, #12]
    if (width < 0) {
 80083f8:	ea22 78e2 	bic.w	r8, r2, r2, asr #31
    if (left_align == false) {
 80083fc:	f1ba 0f00 	cmp.w	sl, #0
 8008400:	f43f af28 	beq.w	8008254 <test_printf+0x1e4>
 8008404:	2300      	movs	r3, #0
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	e72b      	b.n	8008262 <test_printf+0x1f2>
      width = -width;
 800840a:	46c2      	mov	sl, r8
      if (((*s == '-') || (*s == '+')) && (filler == '0')) {
 800840c:	7818      	ldrb	r0, [r3, #0]
 800840e:	282d      	cmp	r0, #45	; 0x2d
 8008410:	d00b      	beq.n	800842a <test_printf+0x3ba>
 8008412:	282b      	cmp	r0, #43	; 0x2b
 8008414:	d009      	beq.n	800842a <test_printf+0x3ba>
 8008416:	469b      	mov	fp, r3
  if (chtest.putchar != NULL) {
 8008418:	6a2a      	ldr	r2, [r5, #32]
 800841a:	b10a      	cbz	r2, 8008420 <test_printf+0x3b0>
    chtest.putchar(c);
 800841c:	4638      	mov	r0, r7
 800841e:	4790      	blx	r2
      } while (++width != 0);
 8008420:	f118 0801 	adds.w	r8, r8, #1
 8008424:	d010      	beq.n	8008448 <test_printf+0x3d8>
  if (chtest.putchar != NULL) {
 8008426:	6a2a      	ldr	r2, [r5, #32]
 8008428:	e7f7      	b.n	800841a <test_printf+0x3aa>
      if (((*s == '-') || (*s == '+')) && (filler == '0')) {
 800842a:	2f30      	cmp	r7, #48	; 0x30
 800842c:	d1f3      	bne.n	8008416 <test_printf+0x3a6>
  if (chtest.putchar != NULL) {
 800842e:	6a2a      	ldr	r2, [r5, #32]
        test_putchar(*s++);
 8008430:	3301      	adds	r3, #1
  if (chtest.putchar != NULL) {
 8008432:	b11a      	cbz	r2, 800843c <test_printf+0x3cc>
 8008434:	9301      	str	r3, [sp, #4]
    chtest.putchar(c);
 8008436:	4790      	blx	r2
  if (chtest.putchar != NULL) {
 8008438:	6a2a      	ldr	r2, [r5, #32]
 800843a:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 800843c:	9900      	ldr	r1, [sp, #0]
 800843e:	469b      	mov	fp, r3
 8008440:	3901      	subs	r1, #1
        n++;
 8008442:	3601      	adds	r6, #1
    while (--i >= 0) {
 8008444:	9100      	str	r1, [sp, #0]
 8008446:	e7e8      	b.n	800841a <test_printf+0x3aa>
 8008448:	9a00      	ldr	r2, [sp, #0]
 800844a:	465b      	mov	r3, fp
 800844c:	2a00      	cmp	r2, #0
 800844e:	eba6 060a 	sub.w	r6, r6, sl
 8008452:	f6bf af07 	bge.w	8008264 <test_printf+0x1f4>
 8008456:	e622      	b.n	800809e <test_printf+0x2e>
        *p++ = '-';
 8008458:	232d      	movs	r3, #45	; 0x2d
        arg = -arg;
 800845a:	4240      	negs	r0, r0
        *p++ = '-';
 800845c:	f88d 300c 	strb.w	r3, [sp, #12]
 8008460:	f10d 080d 	add.w	r8, sp, #13
 8008464:	ab03      	add	r3, sp, #12
 8008466:	e740      	b.n	80082ea <test_printf+0x27a>
      width = -width;
 8008468:	46c2      	mov	sl, r8
    if (width < 0) {
 800846a:	ab03      	add	r3, sp, #12
 800846c:	e7ce      	b.n	800840c <test_printf+0x39c>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 800846e:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8008472:	2900      	cmp	r1, #0
 8008474:	d1a9      	bne.n	80083ca <test_printf+0x35a>
    if (width < 0) {
 8008476:	ea22 78e2 	bic.w	r8, r2, r2, asr #31
    if (left_align == false) {
 800847a:	f1ba 0f00 	cmp.w	sl, #0
 800847e:	d103      	bne.n	8008488 <test_printf+0x418>
    if (width < 0) {
 8008480:	2a00      	cmp	r2, #0
      width = -width;
 8008482:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 8008486:	dc10      	bgt.n	80084aa <test_printf+0x43a>
    if (left_align == false) {
 8008488:	2720      	movs	r7, #32
 800848a:	e6fe      	b.n	800828a <test_printf+0x21a>
      if (c == '\0') {
 800848c:	f04f 0e0a 	mov.w	lr, #10
 8008490:	e752      	b.n	8008338 <test_printf+0x2c8>
      if (precision == 0) {
 8008492:	b930      	cbnz	r0, 80084a2 <test_printf+0x432>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 8008494:	f647 70fe 	movw	r0, #32766	; 0x7ffe
        s = "(null)";
 8008498:	4b08      	ldr	r3, [pc, #32]	; (80084bc <test_printf+0x44c>)
 800849a:	e796      	b.n	80083ca <test_printf+0x35a>
    p = tmpbuf;
 800849c:	ab03      	add	r3, sp, #12
 800849e:	4698      	mov	r8, r3
 80084a0:	e723      	b.n	80082ea <test_printf+0x27a>
        s = "(null)";
 80084a2:	4b06      	ldr	r3, [pc, #24]	; (80084bc <test_printf+0x44c>)
 80084a4:	e78f      	b.n	80083c6 <test_printf+0x356>
  n = 0;
 80084a6:	4606      	mov	r6, r0
  return formatted_bytes;
 80084a8:	e67c      	b.n	80081a4 <test_printf+0x134>
    if (width < 0) {
 80084aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      width = -width;
 80084ae:	46c2      	mov	sl, r8
    if (width < 0) {
 80084b0:	2720      	movs	r7, #32
 80084b2:	9200      	str	r2, [sp, #0]
 80084b4:	e7aa      	b.n	800840c <test_printf+0x39c>
 80084b6:	bf00      	nop
 80084b8:	cccccccd 	.word	0xcccccccd
 80084bc:	08010108 	.word	0x08010108

080084c0 <rt_test_001_001_execute.lto_priv.0>:
 */

static void rt_test_001_001_execute(void) {

  /* [1.1.1] Prints the version string.*/
  test_set_step(1);
 80084c0:	2201      	movs	r2, #1
static void rt_test_001_001_execute(void) {
 80084c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @api
 */
static inline void test_print(const char *msgp) {

  test_printf("%s", msgp);
 80084c4:	4d25      	ldr	r5, [pc, #148]	; (800855c <rt_test_001_001_execute.lto_priv.0+0x9c>)
  test_set_step(1);
 80084c6:	4b26      	ldr	r3, [pc, #152]	; (8008560 <rt_test_001_001_execute.lto_priv.0+0xa0>)
 *
 * @api
 */
static inline void test_println(const char *msgp) {

  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80084c8:	4c26      	ldr	r4, [pc, #152]	; (8008564 <rt_test_001_001_execute.lto_priv.0+0xa4>)
  test_printf("%s", msgp);
 80084ca:	4628      	mov	r0, r5
 80084cc:	4926      	ldr	r1, [pc, #152]	; (8008568 <rt_test_001_001_execute.lto_priv.0+0xa8>)
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	f7ff fdce 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80084d4:	4620      	mov	r0, r4
 80084d6:	4925      	ldr	r1, [pc, #148]	; (800856c <rt_test_001_001_execute.lto_priv.0+0xac>)
 80084d8:	f7ff fdca 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80084dc:	4628      	mov	r0, r5
 80084de:	4924      	ldr	r1, [pc, #144]	; (8008570 <rt_test_001_001_execute.lto_priv.0+0xb0>)
 80084e0:	f7ff fdc6 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80084e4:	4620      	mov	r0, r4
 80084e6:	4923      	ldr	r1, [pc, #140]	; (8008574 <rt_test_001_001_execute.lto_priv.0+0xb4>)
 80084e8:	f7ff fdc2 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80084ec:	4628      	mov	r0, r5
 80084ee:	4922      	ldr	r1, [pc, #136]	; (8008578 <rt_test_001_001_execute.lto_priv.0+0xb8>)
 80084f0:	f7ff fdbe 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80084f4:	4620      	mov	r0, r4
 80084f6:	4921      	ldr	r1, [pc, #132]	; (800857c <rt_test_001_001_execute.lto_priv.0+0xbc>)
 80084f8:	f7ff fdba 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80084fc:	4628      	mov	r0, r5
 80084fe:	4920      	ldr	r1, [pc, #128]	; (8008580 <rt_test_001_001_execute.lto_priv.0+0xc0>)
 8008500:	f7ff fdb6 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008504:	4f1f      	ldr	r7, [pc, #124]	; (8008584 <rt_test_001_001_execute.lto_priv.0+0xc4>)
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008506:	4620      	mov	r0, r4
 8008508:	491f      	ldr	r1, [pc, #124]	; (8008588 <rt_test_001_001_execute.lto_priv.0+0xc8>)
 800850a:	f7ff fdb1 	bl	8008070 <test_printf>
 800850e:	4e1f      	ldr	r6, [pc, #124]	; (800858c <rt_test_001_001_execute.lto_priv.0+0xcc>)
  test_printf("%s", msgp);
 8008510:	4628      	mov	r0, r5
 8008512:	491f      	ldr	r1, [pc, #124]	; (8008590 <rt_test_001_001_execute.lto_priv.0+0xd0>)
 8008514:	f7ff fdac 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008518:	2104      	movs	r1, #4
 800851a:	4638      	mov	r0, r7
 800851c:	f7ff fda8 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008520:	4631      	mov	r1, r6
 8008522:	4620      	mov	r0, r4
 8008524:	f7ff fda4 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008528:	4628      	mov	r0, r5
 800852a:	491a      	ldr	r1, [pc, #104]	; (8008594 <rt_test_001_001_execute.lto_priv.0+0xd4>)
 800852c:	f7ff fda0 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008530:	2108      	movs	r1, #8
 8008532:	4638      	mov	r0, r7
 8008534:	f7ff fd9c 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008538:	4631      	mov	r1, r6
 800853a:	4620      	mov	r0, r4
 800853c:	f7ff fd98 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008540:	4628      	mov	r0, r5
 8008542:	4915      	ldr	r1, [pc, #84]	; (8008598 <rt_test_001_001_execute.lto_priv.0+0xd8>)
 8008544:	f7ff fd94 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008548:	2108      	movs	r1, #8
 800854a:	4638      	mov	r0, r7
 800854c:	f7ff fd90 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008550:	4631      	mov	r1, r6
 8008552:	4620      	mov	r0, r4
    test_printn(PORT_WORKING_AREA_ALIGN);
    test_println("");
#endif
  }
  test_end_step(1);
}
 8008554:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008558:	f7ff bd8a 	b.w	8008070 <test_printf>
 800855c:	08010188 	.word	0x08010188
 8008560:	20001134 	.word	0x20001134
 8008564:	08012cc0 	.word	0x08012cc0
 8008568:	08010558 	.word	0x08010558
 800856c:	080101ec 	.word	0x080101ec
 8008570:	08010584 	.word	0x08010584
 8008574:	08010208 	.word	0x08010208
 8008578:	080105b0 	.word	0x080105b0
 800857c:	080101b8 	.word	0x080101b8
 8008580:	080105dc 	.word	0x080105dc
 8008584:	08010634 	.word	0x08010634
 8008588:	08010228 	.word	0x08010228
 800858c:	08010190 	.word	0x08010190
 8008590:	08010608 	.word	0x08010608
 8008594:	08010638 	.word	0x08010638
 8008598:	08010664 	.word	0x08010664
 800859c:	00000000 	.word	0x00000000

080085a0 <rt_test_001_002_execute>:
 */

static void rt_test_001_002_execute(void) {

  /* [1.2.1] Prints the version string.*/
  test_set_step(1);
 80085a0:	2201      	movs	r2, #1
static void rt_test_001_002_execute(void) {
 80085a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a4:	4c21      	ldr	r4, [pc, #132]	; (800862c <rt_test_001_002_execute+0x8c>)
  test_set_step(1);
 80085a6:	4b22      	ldr	r3, [pc, #136]	; (8008630 <rt_test_001_002_execute+0x90>)
  test_printf("%s", msgp);
 80085a8:	4d22      	ldr	r5, [pc, #136]	; (8008634 <rt_test_001_002_execute+0x94>)
  test_printf("%u", n);
 80085aa:	4f23      	ldr	r7, [pc, #140]	; (8008638 <rt_test_001_002_execute+0x98>)
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80085ac:	4620      	mov	r0, r4
 80085ae:	4923      	ldr	r1, [pc, #140]	; (800863c <rt_test_001_002_execute+0x9c>)
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	4e23      	ldr	r6, [pc, #140]	; (8008640 <rt_test_001_002_execute+0xa0>)
 80085b4:	f7ff fd5c 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80085b8:	4628      	mov	r0, r5
 80085ba:	4922      	ldr	r1, [pc, #136]	; (8008644 <rt_test_001_002_execute+0xa4>)
 80085bc:	f7ff fd58 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80085c0:	2100      	movs	r1, #0
 80085c2:	4638      	mov	r0, r7
 80085c4:	f7ff fd54 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80085c8:	4631      	mov	r1, r6
 80085ca:	4620      	mov	r0, r4
 80085cc:	f7ff fd50 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80085d0:	4628      	mov	r0, r5
 80085d2:	491d      	ldr	r1, [pc, #116]	; (8008648 <rt_test_001_002_execute+0xa8>)
 80085d4:	f7ff fd4c 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80085d8:	4620      	mov	r0, r4
 80085da:	491c      	ldr	r1, [pc, #112]	; (800864c <rt_test_001_002_execute+0xac>)
 80085dc:	f7ff fd48 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80085e0:	4628      	mov	r0, r5
 80085e2:	491b      	ldr	r1, [pc, #108]	; (8008650 <rt_test_001_002_execute+0xb0>)
 80085e4:	f7ff fd44 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80085e8:	2107      	movs	r1, #7
 80085ea:	4638      	mov	r0, r7
 80085ec:	f7ff fd40 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80085f0:	4631      	mov	r1, r6
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7ff fd3c 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80085f8:	4628      	mov	r0, r5
 80085fa:	4916      	ldr	r1, [pc, #88]	; (8008654 <rt_test_001_002_execute+0xb4>)
 80085fc:	f7ff fd38 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008600:	2100      	movs	r1, #0
 8008602:	4638      	mov	r0, r7
 8008604:	f7ff fd34 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008608:	4631      	mov	r1, r6
 800860a:	4620      	mov	r0, r4
 800860c:	f7ff fd30 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008610:	4628      	mov	r0, r5
 8008612:	4911      	ldr	r1, [pc, #68]	; (8008658 <rt_test_001_002_execute+0xb8>)
 8008614:	f7ff fd2c 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008618:	2100      	movs	r1, #0
 800861a:	4638      	mov	r0, r7
 800861c:	f7ff fd28 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008620:	4631      	mov	r1, r6
 8008622:	4620      	mov	r0, r4
    test_print("--- Patch Number:                       ");
    test_printn(CH_KERNEL_PATCH);
    test_println("");
  }
  test_end_step(1);
}
 8008624:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008628:	f7ff bd22 	b.w	8008070 <test_printf>
 800862c:	08012cc0 	.word	0x08012cc0
 8008630:	20001134 	.word	0x20001134
 8008634:	08010188 	.word	0x08010188
 8008638:	08010634 	.word	0x08010634
 800863c:	08010690 	.word	0x08010690
 8008640:	08010190 	.word	0x08010190
 8008644:	080106c4 	.word	0x080106c4
 8008648:	080106f0 	.word	0x080106f0
 800864c:	0801019c 	.word	0x0801019c
 8008650:	0801071c 	.word	0x0801071c
 8008654:	08010748 	.word	0x08010748
 8008658:	08010774 	.word	0x08010774
 800865c:	00000000 	.word	0x00000000

08008660 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8008660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8008664:	f04f 0801 	mov.w	r8, #1
  test_printf("%s", msgp);
 8008668:	4fc4      	ldr	r7, [pc, #784]	; (800897c <rt_test_001_003_execute+0x31c>)
 800866a:	4bc5      	ldr	r3, [pc, #788]	; (8008980 <rt_test_001_003_execute+0x320>)
  test_printf("%u", n);
 800866c:	4ec5      	ldr	r6, [pc, #788]	; (8008984 <rt_test_001_003_execute+0x324>)
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800866e:	4dc6      	ldr	r5, [pc, #792]	; (8008988 <rt_test_001_003_execute+0x328>)
 8008670:	4cc6      	ldr	r4, [pc, #792]	; (800898c <rt_test_001_003_execute+0x32c>)
  test_printf("%s", msgp);
 8008672:	4638      	mov	r0, r7
 8008674:	49c6      	ldr	r1, [pc, #792]	; (8008990 <rt_test_001_003_execute+0x330>)
 8008676:	f8c3 8000 	str.w	r8, [r3]
 800867a:	f7ff fcf9 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800867e:	2110      	movs	r1, #16
 8008680:	4630      	mov	r0, r6
 8008682:	f7ff fcf5 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008686:	4629      	mov	r1, r5
 8008688:	4620      	mov	r0, r4
 800868a:	f7ff fcf1 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 800868e:	4638      	mov	r0, r7
 8008690:	49c0      	ldr	r1, [pc, #768]	; (8008994 <rt_test_001_003_execute+0x334>)
 8008692:	f7ff fced 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008696:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800869a:	4630      	mov	r0, r6
 800869c:	f7ff fce8 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80086a0:	4629      	mov	r1, r5
 80086a2:	4620      	mov	r0, r4
 80086a4:	f7ff fce4 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80086a8:	4638      	mov	r0, r7
 80086aa:	49bb      	ldr	r1, [pc, #748]	; (8008998 <rt_test_001_003_execute+0x338>)
 80086ac:	f7ff fce0 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80086b0:	2120      	movs	r1, #32
 80086b2:	4630      	mov	r0, r6
 80086b4:	f7ff fcdc 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80086b8:	4629      	mov	r1, r5
 80086ba:	4620      	mov	r0, r4
 80086bc:	f7ff fcd8 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80086c0:	4638      	mov	r0, r7
 80086c2:	49b6      	ldr	r1, [pc, #728]	; (800899c <rt_test_001_003_execute+0x33c>)
 80086c4:	f7ff fcd4 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80086c8:	2120      	movs	r1, #32
 80086ca:	4630      	mov	r0, r6
 80086cc:	f7ff fcd0 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80086d0:	4629      	mov	r1, r5
 80086d2:	4620      	mov	r0, r4
 80086d4:	f7ff fccc 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80086d8:	4638      	mov	r0, r7
 80086da:	49b1      	ldr	r1, [pc, #708]	; (80089a0 <rt_test_001_003_execute+0x340>)
 80086dc:	f7ff fcc8 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80086e0:	2102      	movs	r1, #2
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7ff fcc4 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80086e8:	4629      	mov	r1, r5
 80086ea:	4620      	mov	r0, r4
 80086ec:	f7ff fcc0 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80086f0:	4638      	mov	r0, r7
 80086f2:	49ac      	ldr	r1, [pc, #688]	; (80089a4 <rt_test_001_003_execute+0x344>)
 80086f4:	f7ff fcbc 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80086f8:	2100      	movs	r1, #0
 80086fa:	4630      	mov	r0, r6
 80086fc:	f7ff fcb8 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008700:	4629      	mov	r1, r5
 8008702:	4620      	mov	r0, r4
 8008704:	f7ff fcb4 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008708:	4638      	mov	r0, r7
 800870a:	49a7      	ldr	r1, [pc, #668]	; (80089a8 <rt_test_001_003_execute+0x348>)
 800870c:	f7ff fcb0 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008710:	2100      	movs	r1, #0
 8008712:	4630      	mov	r0, r6
 8008714:	f7ff fcac 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008718:	4629      	mov	r1, r5
 800871a:	4620      	mov	r0, r4
 800871c:	f7ff fca8 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008720:	4638      	mov	r0, r7
 8008722:	49a2      	ldr	r1, [pc, #648]	; (80089ac <rt_test_001_003_execute+0x34c>)
 8008724:	f7ff fca4 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008728:	2100      	movs	r1, #0
 800872a:	4630      	mov	r0, r6
 800872c:	f7ff fca0 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008730:	4629      	mov	r1, r5
 8008732:	4620      	mov	r0, r4
 8008734:	f7ff fc9c 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008738:	4638      	mov	r0, r7
 800873a:	499d      	ldr	r1, [pc, #628]	; (80089b0 <rt_test_001_003_execute+0x350>)
 800873c:	f7ff fc98 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008740:	4641      	mov	r1, r8
 8008742:	4630      	mov	r0, r6
 8008744:	f7ff fc94 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008748:	4629      	mov	r1, r5
 800874a:	4620      	mov	r0, r4
 800874c:	f7ff fc90 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008750:	4638      	mov	r0, r7
 8008752:	4998      	ldr	r1, [pc, #608]	; (80089b4 <rt_test_001_003_execute+0x354>)
 8008754:	f7ff fc8c 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008758:	4641      	mov	r1, r8
 800875a:	4630      	mov	r0, r6
 800875c:	f7ff fc88 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008760:	4629      	mov	r1, r5
 8008762:	4620      	mov	r0, r4
 8008764:	f7ff fc84 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008768:	4638      	mov	r0, r7
 800876a:	4993      	ldr	r1, [pc, #588]	; (80089b8 <rt_test_001_003_execute+0x358>)
 800876c:	f7ff fc80 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008770:	4641      	mov	r1, r8
 8008772:	4630      	mov	r0, r6
 8008774:	f7ff fc7c 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008778:	4629      	mov	r1, r5
 800877a:	4620      	mov	r0, r4
 800877c:	f7ff fc78 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008780:	4638      	mov	r0, r7
 8008782:	498e      	ldr	r1, [pc, #568]	; (80089bc <rt_test_001_003_execute+0x35c>)
 8008784:	f7ff fc74 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008788:	4641      	mov	r1, r8
 800878a:	4630      	mov	r0, r6
 800878c:	f7ff fc70 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008790:	4629      	mov	r1, r5
 8008792:	4620      	mov	r0, r4
 8008794:	f7ff fc6c 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008798:	4638      	mov	r0, r7
 800879a:	4989      	ldr	r1, [pc, #548]	; (80089c0 <rt_test_001_003_execute+0x360>)
 800879c:	f7ff fc68 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80087a0:	4641      	mov	r1, r8
 80087a2:	4630      	mov	r0, r6
 80087a4:	f7ff fc64 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80087a8:	4629      	mov	r1, r5
 80087aa:	4620      	mov	r0, r4
 80087ac:	f7ff fc60 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80087b0:	4638      	mov	r0, r7
 80087b2:	4984      	ldr	r1, [pc, #528]	; (80089c4 <rt_test_001_003_execute+0x364>)
 80087b4:	f7ff fc5c 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80087b8:	2100      	movs	r1, #0
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7ff fc58 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80087c0:	4629      	mov	r1, r5
 80087c2:	4620      	mov	r0, r4
 80087c4:	f7ff fc54 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80087c8:	4638      	mov	r0, r7
 80087ca:	497f      	ldr	r1, [pc, #508]	; (80089c8 <rt_test_001_003_execute+0x368>)
 80087cc:	f7ff fc50 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80087d0:	4641      	mov	r1, r8
 80087d2:	4630      	mov	r0, r6
 80087d4:	f7ff fc4c 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80087d8:	4629      	mov	r1, r5
 80087da:	4620      	mov	r0, r4
 80087dc:	f7ff fc48 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80087e0:	4638      	mov	r0, r7
 80087e2:	497a      	ldr	r1, [pc, #488]	; (80089cc <rt_test_001_003_execute+0x36c>)
 80087e4:	f7ff fc44 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80087e8:	2100      	movs	r1, #0
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7ff fc40 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80087f0:	4629      	mov	r1, r5
 80087f2:	4620      	mov	r0, r4
 80087f4:	f7ff fc3c 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80087f8:	4638      	mov	r0, r7
 80087fa:	4975      	ldr	r1, [pc, #468]	; (80089d0 <rt_test_001_003_execute+0x370>)
 80087fc:	f7ff fc38 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008800:	4641      	mov	r1, r8
 8008802:	4630      	mov	r0, r6
 8008804:	f7ff fc34 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008808:	4629      	mov	r1, r5
 800880a:	4620      	mov	r0, r4
 800880c:	f7ff fc30 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008810:	4638      	mov	r0, r7
 8008812:	4970      	ldr	r1, [pc, #448]	; (80089d4 <rt_test_001_003_execute+0x374>)
 8008814:	f7ff fc2c 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008818:	4641      	mov	r1, r8
 800881a:	4630      	mov	r0, r6
 800881c:	f7ff fc28 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008820:	4629      	mov	r1, r5
 8008822:	4620      	mov	r0, r4
 8008824:	f7ff fc24 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008828:	4638      	mov	r0, r7
 800882a:	496b      	ldr	r1, [pc, #428]	; (80089d8 <rt_test_001_003_execute+0x378>)
 800882c:	f7ff fc20 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008830:	4641      	mov	r1, r8
 8008832:	4630      	mov	r0, r6
 8008834:	f7ff fc1c 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008838:	4629      	mov	r1, r5
 800883a:	4620      	mov	r0, r4
 800883c:	f7ff fc18 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008840:	4638      	mov	r0, r7
 8008842:	4966      	ldr	r1, [pc, #408]	; (80089dc <rt_test_001_003_execute+0x37c>)
 8008844:	f7ff fc14 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008848:	4641      	mov	r1, r8
 800884a:	4630      	mov	r0, r6
 800884c:	f7ff fc10 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008850:	4629      	mov	r1, r5
 8008852:	4620      	mov	r0, r4
 8008854:	f7ff fc0c 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008858:	4638      	mov	r0, r7
 800885a:	4961      	ldr	r1, [pc, #388]	; (80089e0 <rt_test_001_003_execute+0x380>)
 800885c:	f7ff fc08 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008860:	4641      	mov	r1, r8
 8008862:	4630      	mov	r0, r6
 8008864:	f7ff fc04 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008868:	4629      	mov	r1, r5
 800886a:	4620      	mov	r0, r4
 800886c:	f7ff fc00 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008870:	4638      	mov	r0, r7
 8008872:	495c      	ldr	r1, [pc, #368]	; (80089e4 <rt_test_001_003_execute+0x384>)
 8008874:	f7ff fbfc 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008878:	2100      	movs	r1, #0
 800887a:	4630      	mov	r0, r6
 800887c:	f7ff fbf8 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008880:	4629      	mov	r1, r5
 8008882:	4620      	mov	r0, r4
 8008884:	f7ff fbf4 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008888:	4638      	mov	r0, r7
 800888a:	4957      	ldr	r1, [pc, #348]	; (80089e8 <rt_test_001_003_execute+0x388>)
 800888c:	f7ff fbf0 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008890:	4641      	mov	r1, r8
 8008892:	4630      	mov	r0, r6
 8008894:	f7ff fbec 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008898:	4629      	mov	r1, r5
 800889a:	4620      	mov	r0, r4
 800889c:	f7ff fbe8 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80088a0:	4638      	mov	r0, r7
 80088a2:	4952      	ldr	r1, [pc, #328]	; (80089ec <rt_test_001_003_execute+0x38c>)
 80088a4:	f7ff fbe4 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80088a8:	2100      	movs	r1, #0
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7ff fbe0 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80088b0:	4629      	mov	r1, r5
 80088b2:	4620      	mov	r0, r4
 80088b4:	f7ff fbdc 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80088b8:	4638      	mov	r0, r7
 80088ba:	494d      	ldr	r1, [pc, #308]	; (80089f0 <rt_test_001_003_execute+0x390>)
 80088bc:	f7ff fbd8 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80088c0:	2100      	movs	r1, #0
 80088c2:	4630      	mov	r0, r6
 80088c4:	f7ff fbd4 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80088c8:	4629      	mov	r1, r5
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7ff fbd0 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80088d0:	4638      	mov	r0, r7
 80088d2:	4948      	ldr	r1, [pc, #288]	; (80089f4 <rt_test_001_003_execute+0x394>)
 80088d4:	f7ff fbcc 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80088d8:	2100      	movs	r1, #0
 80088da:	4630      	mov	r0, r6
 80088dc:	f7ff fbc8 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80088e0:	4629      	mov	r1, r5
 80088e2:	4620      	mov	r0, r4
 80088e4:	f7ff fbc4 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80088e8:	4638      	mov	r0, r7
 80088ea:	4943      	ldr	r1, [pc, #268]	; (80089f8 <rt_test_001_003_execute+0x398>)
 80088ec:	f7ff fbc0 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80088f0:	2100      	movs	r1, #0
 80088f2:	4630      	mov	r0, r6
 80088f4:	f7ff fbbc 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80088f8:	4629      	mov	r1, r5
 80088fa:	4620      	mov	r0, r4
 80088fc:	f7ff fbb8 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008900:	4638      	mov	r0, r7
 8008902:	493e      	ldr	r1, [pc, #248]	; (80089fc <rt_test_001_003_execute+0x39c>)
 8008904:	f7ff fbb4 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008908:	21ff      	movs	r1, #255	; 0xff
 800890a:	4630      	mov	r0, r6
 800890c:	f7ff fbb0 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008910:	4629      	mov	r1, r5
 8008912:	4620      	mov	r0, r4
 8008914:	f7ff fbac 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008918:	4638      	mov	r0, r7
 800891a:	4939      	ldr	r1, [pc, #228]	; (8008a00 <rt_test_001_003_execute+0x3a0>)
 800891c:	f7ff fba8 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008920:	2180      	movs	r1, #128	; 0x80
 8008922:	4630      	mov	r0, r6
 8008924:	f7ff fba4 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008928:	4629      	mov	r1, r5
 800892a:	4620      	mov	r0, r4
 800892c:	f7ff fba0 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008930:	4638      	mov	r0, r7
 8008932:	4934      	ldr	r1, [pc, #208]	; (8008a04 <rt_test_001_003_execute+0x3a4>)
 8008934:	f7ff fb9c 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008938:	2100      	movs	r1, #0
 800893a:	4630      	mov	r0, r6
 800893c:	f7ff fb98 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008940:	4629      	mov	r1, r5
 8008942:	4620      	mov	r0, r4
 8008944:	f7ff fb94 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008948:	4638      	mov	r0, r7
 800894a:	492f      	ldr	r1, [pc, #188]	; (8008a08 <rt_test_001_003_execute+0x3a8>)
 800894c:	f7ff fb90 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008950:	2100      	movs	r1, #0
 8008952:	4630      	mov	r0, r6
 8008954:	f7ff fb8c 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008958:	4629      	mov	r1, r5
 800895a:	4620      	mov	r0, r4
 800895c:	f7ff fb88 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008960:	4638      	mov	r0, r7
 8008962:	492a      	ldr	r1, [pc, #168]	; (8008a0c <rt_test_001_003_execute+0x3ac>)
 8008964:	f7ff fb84 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008968:	2100      	movs	r1, #0
 800896a:	4630      	mov	r0, r6
 800896c:	f7ff fb80 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008970:	4629      	mov	r1, r5
 8008972:	4620      	mov	r0, r4
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
    test_printn(CH_DBG_THREADS_PROFILING);
    test_println("");
  }
  test_end_step(1);
}
 8008974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008978:	f7ff bb7a 	b.w	8008070 <test_printf>
 800897c:	08010188 	.word	0x08010188
 8008980:	20001134 	.word	0x20001134
 8008984:	08010634 	.word	0x08010634
 8008988:	08010190 	.word	0x08010190
 800898c:	08012cc0 	.word	0x08012cc0
 8008990:	080107a0 	.word	0x080107a0
 8008994:	080107cc 	.word	0x080107cc
 8008998:	080107f8 	.word	0x080107f8
 800899c:	08010824 	.word	0x08010824
 80089a0:	08010850 	.word	0x08010850
 80089a4:	0801087c 	.word	0x0801087c
 80089a8:	080108a8 	.word	0x080108a8
 80089ac:	080108d4 	.word	0x080108d4
 80089b0:	08010900 	.word	0x08010900
 80089b4:	0801092c 	.word	0x0801092c
 80089b8:	08010958 	.word	0x08010958
 80089bc:	08010984 	.word	0x08010984
 80089c0:	080109b0 	.word	0x080109b0
 80089c4:	080109dc 	.word	0x080109dc
 80089c8:	08010a08 	.word	0x08010a08
 80089cc:	08010a34 	.word	0x08010a34
 80089d0:	08010a60 	.word	0x08010a60
 80089d4:	08010a8c 	.word	0x08010a8c
 80089d8:	08010ab8 	.word	0x08010ab8
 80089dc:	08010ae4 	.word	0x08010ae4
 80089e0:	08010b10 	.word	0x08010b10
 80089e4:	08010b3c 	.word	0x08010b3c
 80089e8:	08010b68 	.word	0x08010b68
 80089ec:	08010b94 	.word	0x08010b94
 80089f0:	08010bc0 	.word	0x08010bc0
 80089f4:	08010bec 	.word	0x08010bec
 80089f8:	08010c18 	.word	0x08010c18
 80089fc:	08010c44 	.word	0x08010c44
 8008a00:	08010c70 	.word	0x08010c70
 8008a04:	08010c9c 	.word	0x08010c9c
 8008a08:	08010cc8 	.word	0x08010cc8
 8008a0c:	08010cf4 	.word	0x08010cf4

08008a10 <rt_test_012_001_execute>:
  return __sch_get_currthread();
 8008a10:	4b1c      	ldr	r3, [pc, #112]	; (8008a84 <rt_test_012_001_execute+0x74>)
 *   second time window.
 * - [12.1.3] Score is printed.
 * .
 */

static void rt_test_012_001_execute(void) {
 8008a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 8008a16:	68da      	ldr	r2, [r3, #12]
  uint32_t n;

  /* [12.1.1] The messenger thread is started at a lower priority than
     the current thread.*/
  test_set_step(1);
 8008a18:	2601      	movs	r6, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6891      	ldr	r1, [r2, #8]
  test_set_step(1);
 8008a1e:	4f1a      	ldr	r7, [pc, #104]	; (8008a88 <rt_test_012_001_execute+0x78>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008a20:	4a1a      	ldr	r2, [pc, #104]	; (8008a8c <rt_test_012_001_execute+0x7c>)
 8008a22:	3901      	subs	r1, #1
 8008a24:	481a      	ldr	r0, [pc, #104]	; (8008a90 <rt_test_012_001_execute+0x80>)
      threads[i] = NULL;
 8008a26:	4698      	mov	r8, r3
  test_set_step(1);
 8008a28:	603e      	str	r6, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008a2a:	f005 faa1 	bl	800df70 <chThdCreateStatic.constprop.0>
  }
  test_end_step(1);

  /* [12.1.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 8008a2e:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008a30:	4d18      	ldr	r5, [pc, #96]	; (8008a94 <rt_test_012_001_execute+0x84>)
  test_set_step(2);
 8008a32:	603b      	str	r3, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008a34:	6028      	str	r0, [r5, #0]
  {
    n = msg_loop_test(threads[0]);
 8008a36:	f7fa fdbb 	bl	80035b0 <msg_loop_test>
 8008a3a:	4606      	mov	r6, r0
  for (i = 0; i < MAX_THREADS; i++)
 8008a3c:	462c      	mov	r4, r5
 8008a3e:	3514      	adds	r5, #20
    if (threads[i] != NULL) {
 8008a40:	f854 0b04 	ldr.w	r0, [r4], #4
 8008a44:	b118      	cbz	r0, 8008a4e <rt_test_012_001_execute+0x3e>
      chThdWait(threads[i]);
 8008a46:	f7fc fdfb 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8008a4a:	f844 8c04 	str.w	r8, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008a4e:	42ac      	cmp	r4, r5
 8008a50:	d1f6      	bne.n	8008a40 <rt_test_012_001_execute+0x30>
    test_wait_threads();
  }
  test_end_step(2);

  /* [12.1.3] Score is printed.*/
  test_set_step(3);
 8008a52:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 8008a54:	4910      	ldr	r1, [pc, #64]	; (8008a98 <rt_test_012_001_execute+0x88>)
 8008a56:	4811      	ldr	r0, [pc, #68]	; (8008a9c <rt_test_012_001_execute+0x8c>)
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	f7ff fb09 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008a5e:	4631      	mov	r1, r6
 8008a60:	480f      	ldr	r0, [pc, #60]	; (8008aa0 <rt_test_012_001_execute+0x90>)
 8008a62:	f7ff fb05 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008a66:	490f      	ldr	r1, [pc, #60]	; (8008aa4 <rt_test_012_001_execute+0x94>)
 8008a68:	480c      	ldr	r0, [pc, #48]	; (8008a9c <rt_test_012_001_execute+0x8c>)
 8008a6a:	f7ff fb01 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008a6e:	0071      	lsls	r1, r6, #1
 8008a70:	480b      	ldr	r0, [pc, #44]	; (8008aa0 <rt_test_012_001_execute+0x90>)
 8008a72:	f7ff fafd 	bl	8008070 <test_printf>
    test_print(" msgs/S, ");
    test_printn(n << 1);
    test_println(" ctxswc/S");
  }
  test_end_step(3);
}
 8008a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008a7a:	490b      	ldr	r1, [pc, #44]	; (8008aa8 <rt_test_012_001_execute+0x98>)
 8008a7c:	480b      	ldr	r0, [pc, #44]	; (8008aac <rt_test_012_001_execute+0x9c>)
 8008a7e:	f7ff baf7 	b.w	8008070 <test_printf>
 8008a82:	bf00      	nop
 8008a84:	20001050 	.word	0x20001050
 8008a88:	20001134 	.word	0x20001134
 8008a8c:	080042b1 	.word	0x080042b1
 8008a90:	20001270 	.word	0x20001270
 8008a94:	200019a0 	.word	0x200019a0
 8008a98:	08010d20 	.word	0x08010d20
 8008a9c:	08010188 	.word	0x08010188
 8008aa0:	08010634 	.word	0x08010634
 8008aa4:	08010d30 	.word	0x08010d30
 8008aa8:	08010d3c 	.word	0x08010d3c
 8008aac:	08012cc0 	.word	0x08012cc0

08008ab0 <rt_test_012_002_execute>:
  return __sch_get_currthread();
 8008ab0:	4b1c      	ldr	r3, [pc, #112]	; (8008b24 <rt_test_012_002_execute+0x74>)
 *   second time window.
 * - [12.2.3] Score is printed.
 * .
 */

static void rt_test_012_002_execute(void) {
 8008ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t n;

  /* [12.2.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 8008ab6:	2601      	movs	r6, #1
  return chThdGetSelfX()->hdr.pqueue.prio;
 8008ab8:	68da      	ldr	r2, [r3, #12]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008aba:	2300      	movs	r3, #0
 8008abc:	6891      	ldr	r1, [r2, #8]
  test_set_step(1);
 8008abe:	4f1a      	ldr	r7, [pc, #104]	; (8008b28 <rt_test_012_002_execute+0x78>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008ac0:	4431      	add	r1, r6
 8008ac2:	4a1a      	ldr	r2, [pc, #104]	; (8008b2c <rt_test_012_002_execute+0x7c>)
 8008ac4:	481a      	ldr	r0, [pc, #104]	; (8008b30 <rt_test_012_002_execute+0x80>)
      threads[i] = NULL;
 8008ac6:	4698      	mov	r8, r3
  test_set_step(1);
 8008ac8:	603e      	str	r6, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008aca:	f005 fa51 	bl	800df70 <chThdCreateStatic.constprop.0>
  }
  test_end_step(1);

  /* [12.2.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 8008ace:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008ad0:	4d18      	ldr	r5, [pc, #96]	; (8008b34 <rt_test_012_002_execute+0x84>)
  test_set_step(2);
 8008ad2:	603b      	str	r3, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008ad4:	6028      	str	r0, [r5, #0]
  {
    n = msg_loop_test(threads[0]);
 8008ad6:	f7fa fd6b 	bl	80035b0 <msg_loop_test>
 8008ada:	4606      	mov	r6, r0
  for (i = 0; i < MAX_THREADS; i++)
 8008adc:	462c      	mov	r4, r5
 8008ade:	3514      	adds	r5, #20
    if (threads[i] != NULL) {
 8008ae0:	f854 0b04 	ldr.w	r0, [r4], #4
 8008ae4:	b118      	cbz	r0, 8008aee <rt_test_012_002_execute+0x3e>
      chThdWait(threads[i]);
 8008ae6:	f7fc fdab 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8008aea:	f844 8c04 	str.w	r8, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008aee:	42ac      	cmp	r4, r5
 8008af0:	d1f6      	bne.n	8008ae0 <rt_test_012_002_execute+0x30>
    test_wait_threads();
  }
  test_end_step(2);

  /* [12.2.3] Score is printed.*/
  test_set_step(3);
 8008af2:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 8008af4:	4910      	ldr	r1, [pc, #64]	; (8008b38 <rt_test_012_002_execute+0x88>)
 8008af6:	4811      	ldr	r0, [pc, #68]	; (8008b3c <rt_test_012_002_execute+0x8c>)
 8008af8:	603b      	str	r3, [r7, #0]
 8008afa:	f7ff fab9 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008afe:	4631      	mov	r1, r6
 8008b00:	480f      	ldr	r0, [pc, #60]	; (8008b40 <rt_test_012_002_execute+0x90>)
 8008b02:	f7ff fab5 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008b06:	490f      	ldr	r1, [pc, #60]	; (8008b44 <rt_test_012_002_execute+0x94>)
 8008b08:	480c      	ldr	r0, [pc, #48]	; (8008b3c <rt_test_012_002_execute+0x8c>)
 8008b0a:	f7ff fab1 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008b0e:	0071      	lsls	r1, r6, #1
 8008b10:	480b      	ldr	r0, [pc, #44]	; (8008b40 <rt_test_012_002_execute+0x90>)
 8008b12:	f7ff faad 	bl	8008070 <test_printf>
    test_print(" msgs/S, ");
    test_printn(n << 1);
    test_println(" ctxswc/S");
  }
  test_end_step(3);
}
 8008b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008b1a:	490b      	ldr	r1, [pc, #44]	; (8008b48 <rt_test_012_002_execute+0x98>)
 8008b1c:	480b      	ldr	r0, [pc, #44]	; (8008b4c <rt_test_012_002_execute+0x9c>)
 8008b1e:	f7ff baa7 	b.w	8008070 <test_printf>
 8008b22:	bf00      	nop
 8008b24:	20001050 	.word	0x20001050
 8008b28:	20001134 	.word	0x20001134
 8008b2c:	080042b1 	.word	0x080042b1
 8008b30:	20001270 	.word	0x20001270
 8008b34:	200019a0 	.word	0x200019a0
 8008b38:	08010d20 	.word	0x08010d20
 8008b3c:	08010188 	.word	0x08010188
 8008b40:	08010634 	.word	0x08010634
 8008b44:	08010d30 	.word	0x08010d30
 8008b48:	08010d3c 	.word	0x08010d3c
 8008b4c:	08012cc0 	.word	0x08012cc0

08008b50 <rt_test_012_003_execute>:
static void rt_test_012_003_execute(void) {
  uint32_t n;

  /* [12.3.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 8008b50:	f04f 0c01 	mov.w	ip, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008b54:	2300      	movs	r3, #0
static void rt_test_012_003_execute(void) {
 8008b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 8008b5a:	4e2e      	ldr	r6, [pc, #184]	; (8008c14 <rt_test_012_003_execute+0xc4>)
  test_set_step(1);
 8008b5c:	4f2e      	ldr	r7, [pc, #184]	; (8008c18 <rt_test_012_003_execute+0xc8>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8008b5e:	68f2      	ldr	r2, [r6, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008b60:	482e      	ldr	r0, [pc, #184]	; (8008c1c <rt_test_012_003_execute+0xcc>)
 8008b62:	6891      	ldr	r1, [r2, #8]
 8008b64:	4a2e      	ldr	r2, [pc, #184]	; (8008c20 <rt_test_012_003_execute+0xd0>)
 8008b66:	4461      	add	r1, ip
      threads[i] = NULL;
 8008b68:	4698      	mov	r8, r3
  test_set_step(1);
 8008b6a:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008b6e:	f005 f9ff 	bl	800df70 <chThdCreateStatic.constprop.0>
  }
  test_end_step(1);

  /* [12.3.2] Four threads are started at a lower priority than the
     current thread.*/
  test_set_step(2);
 8008b72:	2302      	movs	r3, #2
 8008b74:	603b      	str	r3, [r7, #0]
 8008b76:	68f3      	ldr	r3, [r6, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008b78:	4d2a      	ldr	r5, [pc, #168]	; (8008c24 <rt_test_012_003_execute+0xd4>)
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8008b7a:	6899      	ldr	r1, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008b7c:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8008b7e:	4643      	mov	r3, r8
 8008b80:	4a29      	ldr	r2, [pc, #164]	; (8008c28 <rt_test_012_003_execute+0xd8>)
 8008b82:	3902      	subs	r1, #2
 8008b84:	4829      	ldr	r0, [pc, #164]	; (8008c2c <rt_test_012_003_execute+0xdc>)
 8008b86:	f005 f9f3 	bl	800df70 <chThdCreateStatic.constprop.0>
 8008b8a:	68f3      	ldr	r3, [r6, #12]
 8008b8c:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8008b8e:	6899      	ldr	r1, [r3, #8]
 8008b90:	4a25      	ldr	r2, [pc, #148]	; (8008c28 <rt_test_012_003_execute+0xd8>)
 8008b92:	4643      	mov	r3, r8
 8008b94:	3903      	subs	r1, #3
 8008b96:	4826      	ldr	r0, [pc, #152]	; (8008c30 <rt_test_012_003_execute+0xe0>)
 8008b98:	f005 f9ea 	bl	800df70 <chThdCreateStatic.constprop.0>
 8008b9c:	68f3      	ldr	r3, [r6, #12]
 8008b9e:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 8008ba0:	6899      	ldr	r1, [r3, #8]
 8008ba2:	4a21      	ldr	r2, [pc, #132]	; (8008c28 <rt_test_012_003_execute+0xd8>)
 8008ba4:	4643      	mov	r3, r8
 8008ba6:	3904      	subs	r1, #4
 8008ba8:	4822      	ldr	r0, [pc, #136]	; (8008c34 <rt_test_012_003_execute+0xe4>)
 8008baa:	f005 f9e1 	bl	800df70 <chThdCreateStatic.constprop.0>
 8008bae:	68f3      	ldr	r3, [r6, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8008bb0:	4a1d      	ldr	r2, [pc, #116]	; (8008c28 <rt_test_012_003_execute+0xd8>)
 8008bb2:	6899      	ldr	r1, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 8008bb4:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8008bb6:	4643      	mov	r3, r8
 8008bb8:	3905      	subs	r1, #5
 8008bba:	481f      	ldr	r0, [pc, #124]	; (8008c38 <rt_test_012_003_execute+0xe8>)
 8008bbc:	f005 f9d8 	bl	800df70 <chThdCreateStatic.constprop.0>
  }
  test_end_step(2);

  /* [12.3.3] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(3);
 8008bc0:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8008bc2:	6128      	str	r0, [r5, #16]
  {
    n = msg_loop_test(threads[0]);
 8008bc4:	6828      	ldr	r0, [r5, #0]
  test_set_step(3);
 8008bc6:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 8008bc8:	f7fa fcf2 	bl	80035b0 <msg_loop_test>
 8008bcc:	4606      	mov	r6, r0
  for (i = 0; i < MAX_THREADS; i++)
 8008bce:	462c      	mov	r4, r5
 8008bd0:	3514      	adds	r5, #20
    if (threads[i] != NULL) {
 8008bd2:	f854 0b04 	ldr.w	r0, [r4], #4
 8008bd6:	b118      	cbz	r0, 8008be0 <rt_test_012_003_execute+0x90>
      chThdWait(threads[i]);
 8008bd8:	f7fc fd32 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 8008bdc:	f844 8c04 	str.w	r8, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008be0:	42ac      	cmp	r4, r5
 8008be2:	d1f6      	bne.n	8008bd2 <rt_test_012_003_execute+0x82>
    test_wait_threads();
  }
  test_end_step(3);

  /* [12.3.4] Score is printed.*/
  test_set_step(4);
 8008be4:	2304      	movs	r3, #4
  test_printf("%s", msgp);
 8008be6:	4915      	ldr	r1, [pc, #84]	; (8008c3c <rt_test_012_003_execute+0xec>)
 8008be8:	4815      	ldr	r0, [pc, #84]	; (8008c40 <rt_test_012_003_execute+0xf0>)
 8008bea:	603b      	str	r3, [r7, #0]
 8008bec:	f7ff fa40 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008bf0:	4631      	mov	r1, r6
 8008bf2:	4814      	ldr	r0, [pc, #80]	; (8008c44 <rt_test_012_003_execute+0xf4>)
 8008bf4:	f7ff fa3c 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8008bf8:	4913      	ldr	r1, [pc, #76]	; (8008c48 <rt_test_012_003_execute+0xf8>)
 8008bfa:	4811      	ldr	r0, [pc, #68]	; (8008c40 <rt_test_012_003_execute+0xf0>)
 8008bfc:	f7ff fa38 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8008c00:	0071      	lsls	r1, r6, #1
 8008c02:	4810      	ldr	r0, [pc, #64]	; (8008c44 <rt_test_012_003_execute+0xf4>)
 8008c04:	f7ff fa34 	bl	8008070 <test_printf>
    test_print(" msgs/S, ");
    test_printn(n << 1);
    test_println(" ctxswc/S");
  }
  test_end_step(4);
}
 8008c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8008c0c:	490f      	ldr	r1, [pc, #60]	; (8008c4c <rt_test_012_003_execute+0xfc>)
 8008c0e:	4810      	ldr	r0, [pc, #64]	; (8008c50 <rt_test_012_003_execute+0x100>)
 8008c10:	f7ff ba2e 	b.w	8008070 <test_printf>
 8008c14:	20001050 	.word	0x20001050
 8008c18:	20001134 	.word	0x20001134
 8008c1c:	20001270 	.word	0x20001270
 8008c20:	080042b1 	.word	0x080042b1
 8008c24:	200019a0 	.word	0x200019a0
 8008c28:	080014c1 	.word	0x080014c1
 8008c2c:	200013e0 	.word	0x200013e0
 8008c30:	20001550 	.word	0x20001550
 8008c34:	200016c0 	.word	0x200016c0
 8008c38:	20001830 	.word	0x20001830
 8008c3c:	08010d20 	.word	0x08010d20
 8008c40:	08010188 	.word	0x08010188
 8008c44:	08010634 	.word	0x08010634
 8008c48:	08010d30 	.word	0x08010d30
 8008c4c:	08010d3c 	.word	0x08010d3c
 8008c50:	08012cc0 	.word	0x08012cc0
	...

08008c60 <rt_test_012_007_setup.lto_priv.0>:
  sp->cnt = n;
 8008c60:	2200      	movs	r2, #0
  qp->next = qp;
 8008c62:	4b02      	ldr	r3, [pc, #8]	; (8008c6c <rt_test_012_007_setup.lto_priv.0+0xc>)
  qp->prev = qp;
 8008c64:	e9c3 3300 	strd	r3, r3, [r3]
 8008c68:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_012_007_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 8008c6a:	4770      	bx	lr
 8008c6c:	20001260 	.word	0x20001260

08008c70 <rt_test_012_010_setup.lto_priv.0>:
 8008c70:	2201      	movs	r2, #1
  qp->next = qp;
 8008c72:	4b02      	ldr	r3, [pc, #8]	; (8008c7c <rt_test_012_010_setup.lto_priv.0+0xc>)
  qp->prev = qp;
 8008c74:	e9c3 3300 	strd	r3, r3, [r3]
 8008c78:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_012_010_setup(void) {
  chSemObjectInit(&sem1, 1);
}
 8008c7a:	4770      	bx	lr
 8008c7c:	20001260 	.word	0x20001260

08008c80 <rt_test_012_011_setup.lto_priv.0>:
  mp->owner = NULL;
 8008c80:	2200      	movs	r2, #0
  qp->next = qp;
 8008c82:	4b02      	ldr	r3, [pc, #8]	; (8008c8c <rt_test_012_011_setup.lto_priv.0+0xc>)
  qp->prev = qp;
 8008c84:	e9c3 3300 	strd	r3, r3, [r3]
 8008c88:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_012_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 8008c8a:	4770      	bx	lr
 8008c8c:	20002544 	.word	0x20002544

08008c90 <oslib_test_002_003_setup.lto_priv.0>:
  mbp->cnt    = (size_t)0;
 8008c90:	2100      	movs	r1, #0
 *   active state.
 * - [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_002_003_setup(void) {
 8008c92:	b430      	push	{r4, r5}
  mbp->buffer = buf;
 8008c94:	4b09      	ldr	r3, [pc, #36]	; (8008cbc <oslib_test_002_003_setup.lto_priv.0+0x2c>)
 8008c96:	4a0a      	ldr	r2, [pc, #40]	; (8008cc0 <oslib_test_002_003_setup.lto_priv.0+0x30>)
  qp->next = qp;
 8008c98:	f103 0418 	add.w	r4, r3, #24
  mbp->top    = &buf[n];
 8008c9c:	f102 0510 	add.w	r5, r2, #16
 8008ca0:	f103 0020 	add.w	r0, r3, #32
  mbp->buffer = buf;
 8008ca4:	e9c3 2500 	strd	r2, r5, [r3]
  qp->prev = qp;
 8008ca8:	e9c3 4406 	strd	r4, r4, [r3, #24]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 8008cac:	bc30      	pop	{r4, r5}
  mbp->wrptr  = buf;
 8008cae:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8008cb2:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->cnt    = (size_t)0;
 8008cb6:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 8008cb8:	7519      	strb	r1, [r3, #20]
 8008cba:	4770      	bx	lr
 8008cbc:	20000854 	.word	0x20000854
 8008cc0:	20002524 	.word	0x20002524
	...

08008cd0 <oslib_test_002_001_setup.lto_priv.0>:
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	b430      	push	{r4, r5}
 8008cd4:	4b09      	ldr	r3, [pc, #36]	; (8008cfc <oslib_test_002_001_setup.lto_priv.0+0x2c>)
 8008cd6:	4a0a      	ldr	r2, [pc, #40]	; (8008d00 <oslib_test_002_001_setup.lto_priv.0+0x30>)
 8008cd8:	f103 0418 	add.w	r4, r3, #24
 8008cdc:	f102 0510 	add.w	r5, r2, #16
 8008ce0:	f103 0020 	add.w	r0, r3, #32
 8008ce4:	e9c3 2500 	strd	r2, r5, [r3]
 8008ce8:	e9c3 4406 	strd	r4, r4, [r3, #24]
 8008cec:	bc30      	pop	{r4, r5}
 8008cee:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8008cf2:	e9c3 0008 	strd	r0, r0, [r3, #32]
 8008cf6:	6119      	str	r1, [r3, #16]
 8008cf8:	7519      	strb	r1, [r3, #20]
 8008cfa:	4770      	bx	lr
 8008cfc:	20000854 	.word	0x20000854
 8008d00:	20002524 	.word	0x20002524
	...

08008d10 <oslib_test_002_002_setup.lto_priv.0>:
 8008d10:	2100      	movs	r1, #0
 8008d12:	b430      	push	{r4, r5}
 8008d14:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <oslib_test_002_002_setup.lto_priv.0+0x2c>)
 8008d16:	4a0a      	ldr	r2, [pc, #40]	; (8008d40 <oslib_test_002_002_setup.lto_priv.0+0x30>)
 8008d18:	f103 0418 	add.w	r4, r3, #24
 8008d1c:	f102 0510 	add.w	r5, r2, #16
 8008d20:	f103 0020 	add.w	r0, r3, #32
 8008d24:	e9c3 2500 	strd	r2, r5, [r3]
 8008d28:	e9c3 4406 	strd	r4, r4, [r3, #24]
 8008d2c:	bc30      	pop	{r4, r5}
 8008d2e:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8008d32:	e9c3 0008 	strd	r0, r0, [r3, #32]
 8008d36:	6119      	str	r1, [r3, #16]
 8008d38:	7519      	strb	r1, [r3, #20]
 8008d3a:	4770      	bx	lr
 8008d3c:	20000854 	.word	0x20000854
 8008d40:	20002524 	.word	0x20002524
	...

08008d50 <oslib_test_003_001_setup.lto_priv.0>:

  pp->buffer = buf;
  pp->rdptr  = buf;
  pp->wrptr  = buf;
  pp->top    = &buf[n];
  pp->cnt    = (size_t)0;
 8008d50:	2200      	movs	r2, #0
 * - [3.1.13] Write wrapping buffer boundary.
 * - [3.1.14] Read wrapping buffer boundary.
 * .
 */

static void oslib_test_003_001_setup(void) {
 8008d52:	b430      	push	{r4, r5}
  pp->buffer = buf;
 8008d54:	490e      	ldr	r1, [pc, #56]	; (8008d90 <oslib_test_003_001_setup.lto_priv.0+0x40>)
 8008d56:	4b0f      	ldr	r3, [pc, #60]	; (8008d94 <oslib_test_003_001_setup.lto_priv.0+0x44>)
  pp->top    = &buf[n];
 8008d58:	f101 0510 	add.w	r5, r1, #16
  pp->buffer = buf;
 8008d5c:	e9c3 1500 	strd	r1, r5, [r3]
  qp->next = qp;
 8008d60:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8008d64:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008d68:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008d6c:	f103 0140 	add.w	r1, r3, #64	; 0x40
  qp->prev = qp;
 8008d70:	e9c3 4408 	strd	r4, r4, [r3, #32]
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE);
}
 8008d74:	bc30      	pop	{r4, r5}
 8008d76:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 8008d7a:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->reset  = false;
  pp->wtr    = NULL;
  pp->rtr    = NULL;
 8008d7e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 8008d82:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8008d84:	751a      	strb	r2, [r3, #20]
 8008d86:	629a      	str	r2, [r3, #40]	; 0x28
 8008d88:	639a      	str	r2, [r3, #56]	; 0x38
 8008d8a:	649a      	str	r2, [r3, #72]	; 0x48
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	20001dfc 	.word	0x20001dfc
 8008d94:	20000894 	.word	0x20000894
	...

08008da0 <oslib_test_003_002_setup.lto_priv.0>:
  pp->cnt    = (size_t)0;
 8008da0:	2200      	movs	r2, #0
 * - [3.2.1] Reading while pipe is empty.
 * - [3.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_003_002_setup(void) {
 8008da2:	b430      	push	{r4, r5}
  pp->buffer = buf;
 8008da4:	490e      	ldr	r1, [pc, #56]	; (8008de0 <oslib_test_003_002_setup.lto_priv.0+0x40>)
 8008da6:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <oslib_test_003_002_setup.lto_priv.0+0x44>)
  pp->top    = &buf[n];
 8008da8:	f101 0508 	add.w	r5, r1, #8
  pp->buffer = buf;
 8008dac:	e9c3 1500 	strd	r1, r5, [r3]
  qp->next = qp;
 8008db0:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8008db4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008db8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008dbc:	f103 0140 	add.w	r1, r3, #64	; 0x40
  qp->prev = qp;
 8008dc0:	e9c3 4408 	strd	r4, r4, [r3, #32]
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}
 8008dc4:	bc30      	pop	{r4, r5}
 8008dc6:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 8008dca:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->rtr    = NULL;
 8008dce:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 8008dd2:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8008dd4:	751a      	strb	r2, [r3, #20]
 8008dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8008dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8008dda:	649a      	str	r2, [r3, #72]	; 0x48
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20001dfc 	.word	0x20001dfc
 8008de4:	20000894 	.word	0x20000894
	...

08008df0 <dis_func0>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008df0:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <dis_func0+0x1c>)
 8008df2:	68da      	ldr	r2, [r3, #12]
 8008df4:	f103 0120 	add.w	r1, r3, #32
 8008df8:	428a      	cmp	r2, r1
 8008dfa:	d203      	bcs.n	8008e04 <dis_func0+0x14>
    *chtest.tokp++ = token;
 8008dfc:	2130      	movs	r1, #48	; 0x30
 8008dfe:	1c50      	adds	r0, r2, #1
 8008e00:	60d8      	str	r0, [r3, #12]
 8008e02:	7011      	strb	r1, [r2, #0]
static int dis_func0(void) {

  test_emit_token('0');

  return (msg_t)0x55AA;
}
 8008e04:	f245 50aa 	movw	r0, #21930	; 0x55aa
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	20001134 	.word	0x20001134

08008e10 <dis_func1>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008e10:	4b04      	ldr	r3, [pc, #16]	; (8008e24 <dis_func1+0x14>)
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	f103 0120 	add.w	r1, r3, #32
 8008e18:	428a      	cmp	r2, r1
 8008e1a:	d202      	bcs.n	8008e22 <dis_func1+0x12>
    *chtest.tokp++ = token;
 8008e1c:	1c51      	adds	r1, r2, #1
 8008e1e:	60d9      	str	r1, [r3, #12]

static msg_t dis_func1(msg_t a) {

  test_emit_token((char)a);
 8008e20:	7010      	strb	r0, [r2, #0]

  return (msg_t)a;
}
 8008e22:	4770      	bx	lr
 8008e24:	20001134 	.word	0x20001134
	...

08008e30 <dis_func2>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008e30:	4b09      	ldr	r3, [pc, #36]	; (8008e58 <dis_func2+0x28>)
 8008e32:	68da      	ldr	r2, [r3, #12]
 8008e34:	f103 0c20 	add.w	ip, r3, #32
 8008e38:	4562      	cmp	r2, ip
 8008e3a:	d20c      	bcs.n	8008e56 <dis_func2+0x26>

static msg_t dis_func2(msg_t a, msg_t b) {
 8008e3c:	b410      	push	{r4}
    *chtest.tokp++ = token;
 8008e3e:	1c54      	adds	r4, r2, #1
 8008e40:	60dc      	str	r4, [r3, #12]

  test_emit_token((char)a);
 8008e42:	7010      	strb	r0, [r2, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008e44:	68da      	ldr	r2, [r3, #12]
  test_emit_token((char)b);
 8008e46:	b2c9      	uxtb	r1, r1
 8008e48:	4562      	cmp	r2, ip
 8008e4a:	d202      	bcs.n	8008e52 <dis_func2+0x22>
    *chtest.tokp++ = token;
 8008e4c:	1c54      	adds	r4, r2, #1
 8008e4e:	60dc      	str	r4, [r3, #12]
 8008e50:	7011      	strb	r1, [r2, #0]

  return (msg_t)a;
}
 8008e52:	bc10      	pop	{r4}
 8008e54:	4770      	bx	lr
 8008e56:	4770      	bx	lr
 8008e58:	20001134 	.word	0x20001134
 8008e5c:	00000000 	.word	0x00000000

08008e60 <dis_func3>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008e60:	4b0c      	ldr	r3, [pc, #48]	; (8008e94 <dis_func3+0x34>)

static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8008e62:	b430      	push	{r4, r5}
 8008e64:	68dc      	ldr	r4, [r3, #12]
 8008e66:	f103 0c20 	add.w	ip, r3, #32
 8008e6a:	4564      	cmp	r4, ip
 8008e6c:	d210      	bcs.n	8008e90 <dis_func3+0x30>
    *chtest.tokp++ = token;
 8008e6e:	1c65      	adds	r5, r4, #1
 8008e70:	60dd      	str	r5, [r3, #12]

  test_emit_token((char)a);
 8008e72:	7020      	strb	r0, [r4, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008e74:	68dc      	ldr	r4, [r3, #12]
  test_emit_token((char)b);
 8008e76:	b2c9      	uxtb	r1, r1
 8008e78:	4564      	cmp	r4, ip
 8008e7a:	d209      	bcs.n	8008e90 <dis_func3+0x30>
    *chtest.tokp++ = token;
 8008e7c:	1c65      	adds	r5, r4, #1
 8008e7e:	60dd      	str	r5, [r3, #12]
 8008e80:	7021      	strb	r1, [r4, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008e82:	68d9      	ldr	r1, [r3, #12]
  test_emit_token((char)c);
 8008e84:	b2d2      	uxtb	r2, r2
 8008e86:	4561      	cmp	r1, ip
 8008e88:	d202      	bcs.n	8008e90 <dis_func3+0x30>
    *chtest.tokp++ = token;
 8008e8a:	1c4c      	adds	r4, r1, #1
 8008e8c:	60dc      	str	r4, [r3, #12]
 8008e8e:	700a      	strb	r2, [r1, #0]

  return (msg_t)a;
}
 8008e90:	bc30      	pop	{r4, r5}
 8008e92:	4770      	bx	lr
 8008e94:	20001134 	.word	0x20001134
	...

08008ea0 <dis_func4>:

static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8008ea0:	b470      	push	{r4, r5, r6}
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008ea2:	4c10      	ldr	r4, [pc, #64]	; (8008ee4 <dis_func4+0x44>)
 8008ea4:	68e5      	ldr	r5, [r4, #12]
 8008ea6:	f104 0c20 	add.w	ip, r4, #32
 8008eaa:	4565      	cmp	r5, ip
 8008eac:	d217      	bcs.n	8008ede <dis_func4+0x3e>
    *chtest.tokp++ = token;
 8008eae:	1c6e      	adds	r6, r5, #1
 8008eb0:	60e6      	str	r6, [r4, #12]

  test_emit_token((char)a);
 8008eb2:	7028      	strb	r0, [r5, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008eb4:	68e5      	ldr	r5, [r4, #12]
  test_emit_token((char)b);
 8008eb6:	b2c9      	uxtb	r1, r1
 8008eb8:	4565      	cmp	r5, ip
 8008eba:	d210      	bcs.n	8008ede <dis_func4+0x3e>
    *chtest.tokp++ = token;
 8008ebc:	1c6e      	adds	r6, r5, #1
 8008ebe:	60e6      	str	r6, [r4, #12]
 8008ec0:	7029      	strb	r1, [r5, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008ec2:	68e1      	ldr	r1, [r4, #12]
  test_emit_token((char)c);
 8008ec4:	b2d2      	uxtb	r2, r2
 8008ec6:	4561      	cmp	r1, ip
 8008ec8:	d209      	bcs.n	8008ede <dis_func4+0x3e>
    *chtest.tokp++ = token;
 8008eca:	1c4d      	adds	r5, r1, #1
 8008ecc:	60e5      	str	r5, [r4, #12]
 8008ece:	700a      	strb	r2, [r1, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008ed0:	68e2      	ldr	r2, [r4, #12]
  test_emit_token((char)d);
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	4562      	cmp	r2, ip
 8008ed6:	d202      	bcs.n	8008ede <dis_func4+0x3e>
    *chtest.tokp++ = token;
 8008ed8:	1c51      	adds	r1, r2, #1
 8008eda:	60e1      	str	r1, [r4, #12]
 8008edc:	7013      	strb	r3, [r2, #0]

  return (msg_t)a;
}
 8008ede:	bc70      	pop	{r4, r5, r6}
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	20001134 	.word	0x20001134
	...

08008ef0 <dis_func_end>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008ef0:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <dis_func_end+0x20>)
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	f103 0120 	add.w	r1, r3, #32
 8008ef8:	428a      	cmp	r2, r1
 8008efa:	d203      	bcs.n	8008f04 <dis_func_end+0x14>
    *chtest.tokp++ = token;
 8008efc:	215a      	movs	r1, #90	; 0x5a
 8008efe:	1c50      	adds	r0, r2, #1
 8008f00:	60d8      	str	r0, [r3, #12]
 8008f02:	7011      	strb	r1, [r2, #0]

static int dis_func_end(void) {

  test_emit_token('Z');
  exit_flag = true;
 8008f04:	2201      	movs	r2, #1
 8008f06:	4b03      	ldr	r3, [pc, #12]	; (8008f14 <dis_func_end+0x24>)

  return (msg_t)0xAA55;
}
 8008f08:	f64a 2055 	movw	r0, #43605	; 0xaa55
  exit_flag = true;
 8008f0c:	701a      	strb	r2, [r3, #0]
}
 8008f0e:	4770      	bx	lr
 8008f10:	20001134 	.word	0x20001134
 8008f14:	20001f54 	.word	0x20001f54
	...

08008f20 <obj_write>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008f20:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <obj_write+0x1c>)
 8008f22:	68da      	ldr	r2, [r3, #12]
 8008f24:	f103 0020 	add.w	r0, r3, #32
 8008f28:	4282      	cmp	r2, r0
 8008f2a:	d204      	bcs.n	8008f36 <obj_write+0x16>
                      oc_object_t *objp,
                      bool async) {
  (void)ocp;
  (void)async;

  test_emit_token('A' + objp->obj_key);
 8008f2c:	6949      	ldr	r1, [r1, #20]
    *chtest.tokp++ = token;
 8008f2e:	1c50      	adds	r0, r2, #1
 8008f30:	3141      	adds	r1, #65	; 0x41
 8008f32:	60d8      	str	r0, [r3, #12]
 8008f34:	7011      	strb	r1, [r2, #0]

  return false;
}
 8008f36:	2000      	movs	r0, #0
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20001134 	.word	0x20001134

08008f40 <null_provider>:

  (void)size;
  (void)align;

  return NULL;
}
 8008f40:	2000      	movs	r0, #0
 8008f42:	4770      	bx	lr
	...

08008f50 <oslib_test_007_001_setup.lto_priv.0>:
  mp->next = NULL;
 8008f50:	2200      	movs	r2, #0
  mp->object_size = size;
 8008f52:	2104      	movs	r1, #4
  mp->next = NULL;
 8008f54:	4b02      	ldr	r3, [pc, #8]	; (8008f60 <oslib_test_007_001_setup.lto_priv.0+0x10>)
  mp->object_size = size;
 8008f56:	e9c3 2100 	strd	r2, r1, [r3]
  mp->provider = provider;
 8008f5a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 * .
 */

static void oslib_test_007_001_setup(void) {
  chPoolObjectInit(&mp1, sizeof (uint32_t), NULL);
}
 8008f5e:	4770      	bx	lr
 8008f60:	2000087c 	.word	0x2000087c
	...

08008f70 <oslib_test_007_001_execute.lto_priv.0>:

static void oslib_test_007_001_execute(void) {
  unsigned i;

  /* [7.1.1] Adding the objects to the pool using chPoolLoadArray().*/
  test_set_step(1);
 8008f70:	2101      	movs	r1, #1
static void oslib_test_007_001_execute(void) {
 8008f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8008f76:	2204      	movs	r2, #4
 8008f78:	2520      	movs	r5, #32
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	4f5b      	ldr	r7, [pc, #364]	; (80090ec <oslib_test_007_001_execute.lto_priv.0+0x17c>)
 8008f7e:	4b5c      	ldr	r3, [pc, #368]	; (80090f0 <oslib_test_007_001_execute.lto_priv.0+0x180>)
 8008f80:	4c5c      	ldr	r4, [pc, #368]	; (80090f4 <oslib_test_007_001_execute.lto_priv.0+0x184>)
 8008f82:	6039      	str	r1, [r7, #0]
 8008f84:	f385 8811 	msr	BASEPRI, r5
  php->next = mp->next;
 8008f88:	6821      	ldr	r1, [r4, #0]
  mp->next = php;
 8008f8a:	6023      	str	r3, [r4, #0]
  php->next = mp->next;
 8008f8c:	6019      	str	r1, [r3, #0]
 8008f8e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8008f92:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8008f94:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8008f96:	440b      	add	r3, r1
  while (n != 0U) {
 8008f98:	d1f4      	bne.n	8008f84 <oslib_test_007_001_execute.lto_priv.0+0x14>
    chPoolLoadArray(&mp1, objects, MEMORY_POOL_SIZE);
  }
  test_end_step(1);

  /* [7.1.2] Emptying the pool using chPoolAlloc().*/
  test_set_step(2);
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	2604      	movs	r6, #4
 8008f9e:	4615      	mov	r5, r2
 8008fa0:	f04f 0820 	mov.w	r8, #32
 8008fa4:	603b      	str	r3, [r7, #0]
 8008fa6:	f388 8811 	msr	BASEPRI, r8
  objp = mp->next;
 8008faa:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d06f      	beq.n	8009090 <oslib_test_007_001_execute.lto_priv.0+0x120>
    mp->next = mp->next->next;
 8008fb0:	6803      	ldr	r3, [r0, #0]
 8008fb2:	6023      	str	r3, [r4, #0]
 8008fb4:	f385 8811 	msr	BASEPRI, r5
  if (!condition) {
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d062      	beq.n	8009082 <oslib_test_007_001_execute.lto_priv.0+0x112>
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8008fbc:	3e01      	subs	r6, #1
 8008fbe:	d1f2      	bne.n	8008fa6 <oslib_test_007_001_execute.lto_priv.0+0x36>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }
  test_end_step(2);

  /* [7.1.3] Now must be empty.*/
  test_set_step(3);
 8008fc0:	2203      	movs	r2, #3
 8008fc2:	2320      	movs	r3, #32
 8008fc4:	603a      	str	r2, [r7, #0]
 8008fc6:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8008fca:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d071      	beq.n	80090b4 <oslib_test_007_001_execute.lto_priv.0+0x144>
    mp->next = mp->next->next;
 8008fd0:	6803      	ldr	r3, [r0, #0]
 8008fd2:	6023      	str	r3, [r4, #0]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d163      	bne.n	80090a6 <oslib_test_007_001_execute.lto_priv.0+0x136>
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
  }
  test_end_step(3);

  /* [7.1.4] Adding the objects to the pool using chPoolFree().*/
  test_set_step(4);
 8008fde:	2204      	movs	r2, #4
 8008fe0:	2620      	movs	r6, #32
 8008fe2:	2500      	movs	r5, #0
 8008fe4:	4b42      	ldr	r3, [pc, #264]	; (80090f0 <oslib_test_007_001_execute.lto_priv.0+0x180>)
 8008fe6:	603a      	str	r2, [r7, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8008fe8:	f103 0010 	add.w	r0, r3, #16
 8008fec:	f386 8811 	msr	BASEPRI, r6
  php->next = mp->next;
 8008ff0:	6822      	ldr	r2, [r4, #0]
  mp->next = php;
 8008ff2:	6023      	str	r3, [r4, #0]
  php->next = mp->next;
 8008ff4:	f843 2b04 	str.w	r2, [r3], #4
 8008ff8:	f385 8811 	msr	BASEPRI, r5
 8008ffc:	4298      	cmp	r0, r3
 8008ffe:	d1f5      	bne.n	8008fec <oslib_test_007_001_execute.lto_priv.0+0x7c>
      chPoolFree(&mp1, &objects[i]);
  }
  test_end_step(4);

  /* [7.1.5] Emptying the pool using chPoolAlloc() again.*/
  test_set_step(5);
 8009000:	2305      	movs	r3, #5
 8009002:	2504      	movs	r5, #4
 8009004:	2620      	movs	r6, #32
 8009006:	f04f 0800 	mov.w	r8, #0
 800900a:	603b      	str	r3, [r7, #0]
 800900c:	f386 8811 	msr	BASEPRI, r6
  objp = mp->next;
 8009010:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 8009012:	2800      	cmp	r0, #0
 8009014:	d031      	beq.n	800907a <oslib_test_007_001_execute.lto_priv.0+0x10a>
    mp->next = mp->next->next;
 8009016:	6803      	ldr	r3, [r0, #0]
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	f388 8811 	msr	BASEPRI, r8
 800901e:	2800      	cmp	r0, #0
 8009020:	d02f      	beq.n	8009082 <oslib_test_007_001_execute.lto_priv.0+0x112>
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8009022:	3d01      	subs	r5, #1
 8009024:	d1f2      	bne.n	800900c <oslib_test_007_001_execute.lto_priv.0+0x9c>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }
  test_end_step(5);

  /* [7.1.6] Now must be empty again.*/
  test_set_step(6);
 8009026:	2206      	movs	r2, #6
 8009028:	2320      	movs	r3, #32
 800902a:	603a      	str	r2, [r7, #0]
 800902c:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8009030:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 8009032:	2800      	cmp	r0, #0
 8009034:	d044      	beq.n	80090c0 <oslib_test_007_001_execute.lto_priv.0+0x150>
    mp->next = mp->next->next;
 8009036:	6803      	ldr	r3, [r0, #0]
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	2300      	movs	r3, #0
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	2800      	cmp	r0, #0
 8009042:	d130      	bne.n	80090a6 <oslib_test_007_001_execute.lto_priv.0+0x136>
  mp->object_size = size;
 8009044:	2304      	movs	r3, #4
  }
  test_end_step(6);

  /* [7.1.7] Covering the case where a provider is unable to return
     more memory.*/
  test_set_step(7);
 8009046:	2007      	movs	r0, #7
  mp->next = NULL;
 8009048:	2100      	movs	r1, #0
  mp->provider = provider;
 800904a:	4a2b      	ldr	r2, [pc, #172]	; (80090f8 <oslib_test_007_001_execute.lto_priv.0+0x188>)
  mp->object_size = size;
 800904c:	6063      	str	r3, [r4, #4]
  mp->provider = provider;
 800904e:	60e2      	str	r2, [r4, #12]
 8009050:	6038      	str	r0, [r7, #0]
 8009052:	2220      	movs	r2, #32
  mp->next = NULL;
 8009054:	6021      	str	r1, [r4, #0]
  mp->align = align;
 8009056:	60a3      	str	r3, [r4, #8]
 8009058:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 800905c:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 800905e:	2800      	cmp	r0, #0
 8009060:	d034      	beq.n	80090cc <oslib_test_007_001_execute.lto_priv.0+0x15c>
    mp->next = mp->next->next;
 8009062:	6803      	ldr	r3, [r0, #0]
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	2300      	movs	r3, #0
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	b170      	cbz	r0, 800908c <oslib_test_007_001_execute.lto_priv.0+0x11c>
  chtest.global_fail     = true;
 800906e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8009072:	4a22      	ldr	r2, [pc, #136]	; (80090fc <oslib_test_007_001_execute.lto_priv.0+0x18c>)
  chtest.global_fail     = true;
 8009074:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 8009076:	60ba      	str	r2, [r7, #8]
    return __test_fail(msg);
 8009078:	e008      	b.n	800908c <oslib_test_007_001_execute.lto_priv.0+0x11c>
  else if (mp->provider != NULL) {
 800907a:	68e3      	ldr	r3, [r4, #12]
 800907c:	b97b      	cbnz	r3, 800909e <oslib_test_007_001_execute.lto_priv.0+0x12e>
 800907e:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 8009082:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8009086:	4a1e      	ldr	r2, [pc, #120]	; (8009100 <oslib_test_007_001_execute.lto_priv.0+0x190>)
  chtest.global_fail     = true;
 8009088:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800908a:	60ba      	str	r2, [r7, #8]
  {
    chPoolObjectInit(&mp1, sizeof (uint32_t), null_provider);
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
  }
  test_end_step(7);
}
 800908c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009090:	68e3      	ldr	r3, [r4, #12]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0f3      	beq.n	800907e <oslib_test_007_001_execute.lto_priv.0+0x10e>
    objp = mp->provider(mp->object_size, mp->align);
 8009096:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800909a:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 800909c:	e78a      	b.n	8008fb4 <oslib_test_007_001_execute.lto_priv.0+0x44>
    objp = mp->provider(mp->object_size, mp->align);
 800909e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80090a2:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 80090a4:	e7b9      	b.n	800901a <oslib_test_007_001_execute.lto_priv.0+0xaa>
  chtest.global_fail     = true;
 80090a6:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80090aa:	4a16      	ldr	r2, [pc, #88]	; (8009104 <oslib_test_007_001_execute.lto_priv.0+0x194>)
  chtest.global_fail     = true;
 80090ac:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 80090ae:	60ba      	str	r2, [r7, #8]
 80090b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 80090b4:	68e3      	ldr	r3, [r4, #12]
 80090b6:	b17b      	cbz	r3, 80090d8 <oslib_test_007_001_execute.lto_priv.0+0x168>
    objp = mp->provider(mp->object_size, mp->align);
 80090b8:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80090bc:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 80090be:	e789      	b.n	8008fd4 <oslib_test_007_001_execute.lto_priv.0+0x64>
  else if (mp->provider != NULL) {
 80090c0:	68e3      	ldr	r3, [r4, #12]
 80090c2:	b163      	cbz	r3, 80090de <oslib_test_007_001_execute.lto_priv.0+0x16e>
    objp = mp->provider(mp->object_size, mp->align);
 80090c4:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80090c8:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 80090ca:	e7b6      	b.n	800903a <oslib_test_007_001_execute.lto_priv.0+0xca>
  else if (mp->provider != NULL) {
 80090cc:	68e3      	ldr	r3, [r4, #12]
 80090ce:	b14b      	cbz	r3, 80090e4 <oslib_test_007_001_execute.lto_priv.0+0x174>
    objp = mp->provider(mp->object_size, mp->align);
 80090d0:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80090d4:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 80090d6:	e7c6      	b.n	8009066 <oslib_test_007_001_execute.lto_priv.0+0xf6>
 80090d8:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 80090dc:	e77f      	b.n	8008fde <oslib_test_007_001_execute.lto_priv.0+0x6e>
 80090de:	f385 8811 	msr	BASEPRI, r5
 80090e2:	e7af      	b.n	8009044 <oslib_test_007_001_execute.lto_priv.0+0xd4>
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	e7d0      	b.n	800908c <oslib_test_007_001_execute.lto_priv.0+0x11c>
 80090ea:	bf00      	nop
 80090ec:	20001134 	.word	0x20001134
 80090f0:	20002644 	.word	0x20002644
 80090f4:	2000087c 	.word	0x2000087c
 80090f8:	08008f41 	.word	0x08008f41
 80090fc:	080124dc 	.word	0x080124dc
 8009100:	080124c0 	.word	0x080124c0
 8009104:	080124cc 	.word	0x080124cc
	...

08009110 <oslib_test_007_003_setup.lto_priv.0>:
  mp->next = NULL;
 8009110:	2200      	movs	r2, #0
  mp->object_size = size;
 8009112:	2104      	movs	r1, #4
  mp->next = NULL;
 8009114:	4b04      	ldr	r3, [pc, #16]	; (8009128 <oslib_test_007_003_setup.lto_priv.0+0x18>)
 8009116:	e9c3 3300 	strd	r3, r3, [r3]
  mp->object_size = size;
 800911a:	e9c3 2103 	strd	r2, r1, [r3, #12]
  mp->provider = provider;
 800911e:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009122:	609a      	str	r2, [r3, #8]
 * .
 */

static void oslib_test_007_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	20000838 	.word	0x20000838
 800912c:	00000000 	.word	0x00000000

08009130 <oslib_test_007_002_setup.lto_priv.0>:
 8009130:	2200      	movs	r2, #0
 8009132:	2104      	movs	r1, #4
 8009134:	4b04      	ldr	r3, [pc, #16]	; (8009148 <oslib_test_007_002_setup.lto_priv.0+0x18>)
 8009136:	e9c3 3300 	strd	r3, r3, [r3]
 800913a:	e9c3 2103 	strd	r2, r1, [r3, #12]
 800913e:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009142:	609a      	str	r2, [r3, #8]
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	20000838 	.word	0x20000838
 800914c:	00000000 	.word	0x00000000

08009150 <oslib_test_008_001_setup.lto_priv.0>:
  heapp->provider = NULL;
 8009150:	2000      	movs	r0, #0
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8009152:	4b0a      	ldr	r3, [pc, #40]	; (800917c <oslib_test_008_001_setup.lto_priv.0+0x2c>)
  heapp->provider = NULL;
 8009154:	4a0a      	ldr	r2, [pc, #40]	; (8009180 <oslib_test_008_001_setup.lto_priv.0+0x30>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8009156:	1dd9      	adds	r1, r3, #7
 8009158:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800915c:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800915e:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8009162:	08db      	lsrs	r3, r3, #3
  H_NEXT(&heapp->header) = hp;
 8009164:	6051      	str	r1, [r2, #4]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8009166:	604b      	str	r3, [r1, #4]
  qp->next = qp;
 8009168:	f102 030c 	add.w	r3, r2, #12
  qp->prev = qp;
 800916c:	e9c2 3303 	strd	r3, r3, [r2, #12]
  heapp->provider = NULL;
 8009170:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 8009172:	6090      	str	r0, [r2, #8]
  H_NEXT(hp) = NULL;
 8009174:	6008      	str	r0, [r1, #0]
 8009176:	6150      	str	r0, [r2, #20]
 * .
 */

static void oslib_test_008_001_setup(void) {
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	20002678 	.word	0x20002678
 8009180:	2000265c 	.word	0x2000265c
	...

08009190 <Thread1.lto_priv.2>:
 8009190:	2620      	movs	r6, #32

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8009192:	b508      	push	{r3, lr}
 8009194:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <Thread1.lto_priv.2+0x38>)
 8009196:	4a0d      	ldr	r2, [pc, #52]	; (80091cc <Thread1.lto_priv.2+0x3c>)
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	4d0d      	ldr	r5, [pc, #52]	; (80091d0 <Thread1.lto_priv.2+0x40>)

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palTogglePad(GPIOF, GPIOF_LED1);
 800919c:	4c0d      	ldr	r4, [pc, #52]	; (80091d4 <Thread1.lto_priv.2+0x44>)
 800919e:	61da      	str	r2, [r3, #28]
 80091a0:	68e3      	ldr	r3, [r4, #12]
 80091a2:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80091a6:	60e3      	str	r3, [r4, #12]
    chThdSleepMilliseconds(fs_ready ? 125 : 500);
 80091a8:	782b      	ldrb	r3, [r5, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	bf14      	ite	ne
 80091ae:	21fa      	movne	r1, #250	; 0xfa
 80091b0:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
 80091b4:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80091b8:	2008      	movs	r0, #8
 80091ba:	f7f9 fce9 	bl	8002b90 <chSchGoSleepTimeoutS>
 80091be:	2300      	movs	r3, #0
 80091c0:	f383 8811 	msr	BASEPRI, r3
}
 80091c4:	e7ec      	b.n	80091a0 <Thread1.lto_priv.2+0x10>
 80091c6:	bf00      	nop
 80091c8:	20001050 	.word	0x20001050
 80091cc:	080124f8 	.word	0x080124f8
 80091d0:	20002478 	.word	0x20002478
 80091d4:	40011c00 	.word	0x40011c00
	...

080091e0 <init_alloc_info.isra.0>:
	obj->n_frag = 0;										/* No last fragment info */
 80091e0:	2200      	movs	r2, #0
	rv = rv << 8 | ptr[0];
 80091e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
static void init_alloc_info (
 80091e4:	b410      	push	{r4}
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 80091e6:	608b      	str	r3, [r1, #8]
	rv = rv << 8 | ptr[0];
 80091e8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80091ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 80091ec:	e9c1 4304 	strd	r4, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 80091f0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
}
 80091f4:	bc10      	pop	{r4}
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 80091f6:	f003 0302 	and.w	r3, r3, #2
	obj->n_frag = 0;										/* No last fragment info */
 80091fa:	61ca      	str	r2, [r1, #28]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 80091fc:	71cb      	strb	r3, [r1, #7]
}
 80091fe:	4770      	bx	lr

08009200 <rt_test_012_012_execute.lto_priv.0>:
 * - [12.12.8] The size of an event listener is printed.
 * - [12.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_012_012_execute(void) {
 8009200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  /* [12.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8009204:	2301      	movs	r3, #1
  test_printf("%s", msgp);
 8009206:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8009314 <rt_test_012_012_execute.lto_priv.0+0x114>
 800920a:	4f43      	ldr	r7, [pc, #268]	; (8009318 <rt_test_012_012_execute.lto_priv.0+0x118>)
  test_printf("%u", n);
 800920c:	4e43      	ldr	r6, [pc, #268]	; (800931c <rt_test_012_012_execute.lto_priv.0+0x11c>)
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800920e:	4d44      	ldr	r5, [pc, #272]	; (8009320 <rt_test_012_012_execute.lto_priv.0+0x120>)
 8009210:	4c44      	ldr	r4, [pc, #272]	; (8009324 <rt_test_012_012_execute.lto_priv.0+0x124>)
  test_printf("%s", msgp);
 8009212:	4640      	mov	r0, r8
 8009214:	4944      	ldr	r1, [pc, #272]	; (8009328 <rt_test_012_012_execute.lto_priv.0+0x128>)
 8009216:	603b      	str	r3, [r7, #0]
 8009218:	f7fe ff2a 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800921c:	2188      	movs	r1, #136	; 0x88
 800921e:	4630      	mov	r0, r6
 8009220:	f7fe ff26 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8009224:	4629      	mov	r1, r5
 8009226:	4620      	mov	r0, r4
 8009228:	f7fe ff22 	bl	8008070 <test_printf>
    test_println(" bytes");
  }
  test_end_step(1);

  /* [12.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 800922c:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 800922e:	4640      	mov	r0, r8
 8009230:	493e      	ldr	r1, [pc, #248]	; (800932c <rt_test_012_012_execute.lto_priv.0+0x12c>)
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	f7fe ff1c 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8009238:	2148      	movs	r1, #72	; 0x48
 800923a:	4630      	mov	r0, r6
 800923c:	f7fe ff18 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8009240:	4629      	mov	r1, r5
 8009242:	4620      	mov	r0, r4
 8009244:	f7fe ff14 	bl	8008070 <test_printf>
    test_println(" bytes");
  }
  test_end_step(2);

  /* [12.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8009248:	2303      	movs	r3, #3
    test_println(" bytes");
  }
  test_end_step(3);

  /* [12.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 800924a:	f04f 0904 	mov.w	r9, #4
  test_printf("%s", msgp);
 800924e:	4640      	mov	r0, r8
 8009250:	4937      	ldr	r1, [pc, #220]	; (8009330 <rt_test_012_012_execute.lto_priv.0+0x130>)
  test_set_step(3);
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	f7fe ff0c 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8009258:	2118      	movs	r1, #24
 800925a:	4630      	mov	r0, r6
 800925c:	f7fe ff08 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8009260:	4629      	mov	r1, r5
 8009262:	4620      	mov	r0, r4
 8009264:	f7fe ff04 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8009268:	4640      	mov	r0, r8
 800926a:	4932      	ldr	r1, [pc, #200]	; (8009334 <rt_test_012_012_execute.lto_priv.0+0x134>)
  test_set_step(4);
 800926c:	f8c7 9000 	str.w	r9, [r7]
 8009270:	f7fe fefe 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8009274:	210c      	movs	r1, #12
 8009276:	4630      	mov	r0, r6
 8009278:	f7fe fefa 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800927c:	4629      	mov	r1, r5
 800927e:	4620      	mov	r0, r4
 8009280:	f7fe fef6 	bl	8008070 <test_printf>
#endif
  }
  test_end_step(4);

  /* [12.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 8009284:	2305      	movs	r3, #5
  test_printf("%s", msgp);
 8009286:	4640      	mov	r0, r8
 8009288:	492b      	ldr	r1, [pc, #172]	; (8009338 <rt_test_012_012_execute.lto_priv.0+0x138>)
 800928a:	603b      	str	r3, [r7, #0]
 800928c:	f7fe fef0 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8009290:	2110      	movs	r1, #16
 8009292:	4630      	mov	r0, r6
 8009294:	f7fe feec 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8009298:	4629      	mov	r1, r5
 800929a:	4620      	mov	r0, r4
 800929c:	f7fe fee8 	bl	8008070 <test_printf>
#endif
  }
  test_end_step(5);

  /* [12.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 80092a0:	2306      	movs	r3, #6
  test_printf("%s", msgp);
 80092a2:	4640      	mov	r0, r8
 80092a4:	4925      	ldr	r1, [pc, #148]	; (800933c <rt_test_012_012_execute.lto_priv.0+0x13c>)
 80092a6:	603b      	str	r3, [r7, #0]
 80092a8:	f7fe fee2 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80092ac:	2108      	movs	r1, #8
 80092ae:	4630      	mov	r0, r6
 80092b0:	f7fe fede 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80092b4:	4629      	mov	r1, r5
 80092b6:	4620      	mov	r0, r4
 80092b8:	f7fe feda 	bl	8008070 <test_printf>
#endif
  }
  test_end_step(6);

  /* [12.12.7] The size of an event source is printed.*/
  test_set_step(7);
 80092bc:	2307      	movs	r3, #7
  test_printf("%s", msgp);
 80092be:	4640      	mov	r0, r8
 80092c0:	491f      	ldr	r1, [pc, #124]	; (8009340 <rt_test_012_012_execute.lto_priv.0+0x140>)
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	f7fe fed4 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80092c8:	4649      	mov	r1, r9
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7fe fed0 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80092d0:	4629      	mov	r1, r5
 80092d2:	4620      	mov	r0, r4
 80092d4:	f7fe fecc 	bl	8008070 <test_printf>
#endif
  }
  test_end_step(7);

  /* [12.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 80092d8:	2308      	movs	r3, #8
  test_printf("%s", msgp);
 80092da:	4640      	mov	r0, r8
 80092dc:	4919      	ldr	r1, [pc, #100]	; (8009344 <rt_test_012_012_execute.lto_priv.0+0x144>)
 80092de:	603b      	str	r3, [r7, #0]
 80092e0:	f7fe fec6 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80092e4:	2114      	movs	r1, #20
 80092e6:	4630      	mov	r0, r6
 80092e8:	f7fe fec2 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80092ec:	4629      	mov	r1, r5
 80092ee:	4620      	mov	r0, r4
 80092f0:	f7fe febe 	bl	8008070 <test_printf>
#endif
  }
  test_end_step(8);

  /* [12.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 80092f4:	2309      	movs	r3, #9
  test_printf("%s", msgp);
 80092f6:	4640      	mov	r0, r8
 80092f8:	4913      	ldr	r1, [pc, #76]	; (8009348 <rt_test_012_012_execute.lto_priv.0+0x148>)
 80092fa:	603b      	str	r3, [r7, #0]
 80092fc:	f7fe feb8 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8009300:	2128      	movs	r1, #40	; 0x28
 8009302:	4630      	mov	r0, r6
 8009304:	f7fe feb4 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8009308:	4629      	mov	r1, r5
 800930a:	4620      	mov	r0, r4
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
#endif
  }
  test_end_step(9);
}
 800930c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009310:	f7fe beae 	b.w	8008070 <test_printf>
 8009314:	08010188 	.word	0x08010188
 8009318:	20001134 	.word	0x20001134
 800931c:	08010634 	.word	0x08010634
 8009320:	08012510 	.word	0x08012510
 8009324:	08012cc0 	.word	0x08012cc0
 8009328:	08012500 	.word	0x08012500
 800932c:	08012518 	.word	0x08012518
 8009330:	08012528 	.word	0x08012528
 8009334:	08012538 	.word	0x08012538
 8009338:	08012548 	.word	0x08012548
 800933c:	08012558 	.word	0x08012558
 8009340:	08012568 	.word	0x08012568
 8009344:	08012578 	.word	0x08012578
 8009348:	08012588 	.word	0x08012588
 800934c:	00000000 	.word	0x00000000

08009350 <oslib_test_001_002_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.2.1] Prints the version string.
 * .
 */

static void oslib_test_001_002_execute(void) {
 8009350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* [1.2.1] Prints the version string.*/
  test_set_step(1);
 8009354:	f04f 0801 	mov.w	r8, #1
 8009358:	4c22      	ldr	r4, [pc, #136]	; (80093e4 <oslib_test_001_002_execute.lto_priv.0+0x94>)
 800935a:	4b23      	ldr	r3, [pc, #140]	; (80093e8 <oslib_test_001_002_execute.lto_priv.0+0x98>)
  test_printf("%s", msgp);
 800935c:	4d23      	ldr	r5, [pc, #140]	; (80093ec <oslib_test_001_002_execute.lto_priv.0+0x9c>)
  test_printf("%u", n);
 800935e:	4f24      	ldr	r7, [pc, #144]	; (80093f0 <oslib_test_001_002_execute.lto_priv.0+0xa0>)
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8009360:	4620      	mov	r0, r4
 8009362:	4924      	ldr	r1, [pc, #144]	; (80093f4 <oslib_test_001_002_execute.lto_priv.0+0xa4>)
 8009364:	f8c3 8000 	str.w	r8, [r3]
 8009368:	4e23      	ldr	r6, [pc, #140]	; (80093f8 <oslib_test_001_002_execute.lto_priv.0+0xa8>)
 800936a:	f7fe fe81 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 800936e:	4628      	mov	r0, r5
 8009370:	4922      	ldr	r1, [pc, #136]	; (80093fc <oslib_test_001_002_execute.lto_priv.0+0xac>)
 8009372:	f7fe fe7d 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8009376:	2100      	movs	r1, #0
 8009378:	4638      	mov	r0, r7
 800937a:	f7fe fe79 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800937e:	4631      	mov	r1, r6
 8009380:	4620      	mov	r0, r4
 8009382:	f7fe fe75 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8009386:	4628      	mov	r0, r5
 8009388:	491d      	ldr	r1, [pc, #116]	; (8009400 <oslib_test_001_002_execute.lto_priv.0+0xb0>)
 800938a:	f7fe fe71 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800938e:	4620      	mov	r0, r4
 8009390:	491c      	ldr	r1, [pc, #112]	; (8009404 <oslib_test_001_002_execute.lto_priv.0+0xb4>)
 8009392:	f7fe fe6d 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8009396:	4628      	mov	r0, r5
 8009398:	491b      	ldr	r1, [pc, #108]	; (8009408 <oslib_test_001_002_execute.lto_priv.0+0xb8>)
 800939a:	f7fe fe69 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800939e:	4641      	mov	r1, r8
 80093a0:	4638      	mov	r0, r7
 80093a2:	f7fe fe65 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80093a6:	4631      	mov	r1, r6
 80093a8:	4620      	mov	r0, r4
 80093aa:	f7fe fe61 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80093ae:	4628      	mov	r0, r5
 80093b0:	4916      	ldr	r1, [pc, #88]	; (800940c <oslib_test_001_002_execute.lto_priv.0+0xbc>)
 80093b2:	f7fe fe5d 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80093b6:	2103      	movs	r1, #3
 80093b8:	4638      	mov	r0, r7
 80093ba:	f7fe fe59 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80093be:	4631      	mov	r1, r6
 80093c0:	4620      	mov	r0, r4
 80093c2:	f7fe fe55 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80093c6:	4628      	mov	r0, r5
 80093c8:	4911      	ldr	r1, [pc, #68]	; (8009410 <oslib_test_001_002_execute.lto_priv.0+0xc0>)
 80093ca:	f7fe fe51 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80093ce:	2100      	movs	r1, #0
 80093d0:	4638      	mov	r0, r7
 80093d2:	f7fe fe4d 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80093d6:	4631      	mov	r1, r6
 80093d8:	4620      	mov	r0, r4
    test_print("--- Patch Number:                       ");
    test_printn(CH_OSLIB_PATCH);
    test_println("");
  }
  test_end_step(1);
}
 80093da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093de:	f7fe be47 	b.w	8008070 <test_printf>
 80093e2:	bf00      	nop
 80093e4:	08012cc0 	.word	0x08012cc0
 80093e8:	20001134 	.word	0x20001134
 80093ec:	08010188 	.word	0x08010188
 80093f0:	08010634 	.word	0x08010634
 80093f4:	08012598 	.word	0x08012598
 80093f8:	08010190 	.word	0x08010190
 80093fc:	080106c4 	.word	0x080106c4
 8009400:	080106f0 	.word	0x080106f0
 8009404:	080125cc 	.word	0x080125cc
 8009408:	0801071c 	.word	0x0801071c
 800940c:	08010748 	.word	0x08010748
 8009410:	08010774 	.word	0x08010774
	...

08009420 <oslib_test_001_003_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void oslib_test_001_003_execute(void) {
 8009420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8009424:	2701      	movs	r7, #1
  test_printf("%s", msgp);
 8009426:	f8df 8190 	ldr.w	r8, [pc, #400]	; 80095b8 <oslib_test_001_003_execute.lto_priv.0+0x198>
 800942a:	4b64      	ldr	r3, [pc, #400]	; (80095bc <oslib_test_001_003_execute.lto_priv.0+0x19c>)
  test_printf("%u", n);
 800942c:	4e64      	ldr	r6, [pc, #400]	; (80095c0 <oslib_test_001_003_execute.lto_priv.0+0x1a0>)
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800942e:	4d65      	ldr	r5, [pc, #404]	; (80095c4 <oslib_test_001_003_execute.lto_priv.0+0x1a4>)
 8009430:	4c65      	ldr	r4, [pc, #404]	; (80095c8 <oslib_test_001_003_execute.lto_priv.0+0x1a8>)
  test_printf("%s", msgp);
 8009432:	4640      	mov	r0, r8
 8009434:	4965      	ldr	r1, [pc, #404]	; (80095cc <oslib_test_001_003_execute.lto_priv.0+0x1ac>)
 8009436:	601f      	str	r7, [r3, #0]
 8009438:	f7fe fe1a 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800943c:	4639      	mov	r1, r7
 800943e:	4630      	mov	r0, r6
 8009440:	f7fe fe16 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8009444:	4629      	mov	r1, r5
 8009446:	4620      	mov	r0, r4
 8009448:	f7fe fe12 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 800944c:	4640      	mov	r0, r8
 800944e:	4960      	ldr	r1, [pc, #384]	; (80095d0 <oslib_test_001_003_execute.lto_priv.0+0x1b0>)
 8009450:	f7fe fe0e 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8009454:	4639      	mov	r1, r7
 8009456:	4630      	mov	r0, r6
 8009458:	f7fe fe0a 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800945c:	4629      	mov	r1, r5
 800945e:	4620      	mov	r0, r4
 8009460:	f7fe fe06 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8009464:	4640      	mov	r0, r8
 8009466:	495b      	ldr	r1, [pc, #364]	; (80095d4 <oslib_test_001_003_execute.lto_priv.0+0x1b4>)
 8009468:	f7fe fe02 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800946c:	4639      	mov	r1, r7
 800946e:	4630      	mov	r0, r6
 8009470:	f7fe fdfe 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8009474:	4629      	mov	r1, r5
 8009476:	4620      	mov	r0, r4
 8009478:	f7fe fdfa 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 800947c:	4640      	mov	r0, r8
 800947e:	4956      	ldr	r1, [pc, #344]	; (80095d8 <oslib_test_001_003_execute.lto_priv.0+0x1b8>)
 8009480:	f7fe fdf6 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8009484:	4639      	mov	r1, r7
 8009486:	4630      	mov	r0, r6
 8009488:	f7fe fdf2 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800948c:	4629      	mov	r1, r5
 800948e:	4620      	mov	r0, r4
 8009490:	f7fe fdee 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8009494:	4640      	mov	r0, r8
 8009496:	4951      	ldr	r1, [pc, #324]	; (80095dc <oslib_test_001_003_execute.lto_priv.0+0x1bc>)
 8009498:	f7fe fdea 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800949c:	4639      	mov	r1, r7
 800949e:	4630      	mov	r0, r6
 80094a0:	f7fe fde6 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80094a4:	4629      	mov	r1, r5
 80094a6:	4620      	mov	r0, r4
 80094a8:	f7fe fde2 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80094ac:	4640      	mov	r0, r8
 80094ae:	494c      	ldr	r1, [pc, #304]	; (80095e0 <oslib_test_001_003_execute.lto_priv.0+0x1c0>)
 80094b0:	f7fe fdde 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80094b4:	4639      	mov	r1, r7
 80094b6:	4630      	mov	r0, r6
 80094b8:	f7fe fdda 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80094bc:	4629      	mov	r1, r5
 80094be:	4620      	mov	r0, r4
 80094c0:	f7fe fdd6 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80094c4:	4640      	mov	r0, r8
 80094c6:	4947      	ldr	r1, [pc, #284]	; (80095e4 <oslib_test_001_003_execute.lto_priv.0+0x1c4>)
 80094c8:	f7fe fdd2 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80094cc:	4639      	mov	r1, r7
 80094ce:	4630      	mov	r0, r6
 80094d0:	f7fe fdce 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80094d4:	4629      	mov	r1, r5
 80094d6:	4620      	mov	r0, r4
 80094d8:	f7fe fdca 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80094dc:	4640      	mov	r0, r8
 80094de:	4942      	ldr	r1, [pc, #264]	; (80095e8 <oslib_test_001_003_execute.lto_priv.0+0x1c8>)
 80094e0:	f7fe fdc6 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80094e4:	4639      	mov	r1, r7
 80094e6:	4630      	mov	r0, r6
 80094e8:	f7fe fdc2 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80094ec:	4629      	mov	r1, r5
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7fe fdbe 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 80094f4:	4640      	mov	r0, r8
 80094f6:	493d      	ldr	r1, [pc, #244]	; (80095ec <oslib_test_001_003_execute.lto_priv.0+0x1cc>)
 80094f8:	f7fe fdba 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80094fc:	4639      	mov	r1, r7
 80094fe:	4630      	mov	r0, r6
 8009500:	f7fe fdb6 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8009504:	4629      	mov	r1, r5
 8009506:	4620      	mov	r0, r4
 8009508:	f7fe fdb2 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 800950c:	4640      	mov	r0, r8
 800950e:	4938      	ldr	r1, [pc, #224]	; (80095f0 <oslib_test_001_003_execute.lto_priv.0+0x1d0>)
 8009510:	f7fe fdae 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8009514:	2108      	movs	r1, #8
 8009516:	4630      	mov	r0, r6
 8009518:	f7fe fdaa 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800951c:	4629      	mov	r1, r5
 800951e:	4620      	mov	r0, r4
 8009520:	f7fe fda6 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8009524:	4640      	mov	r0, r8
 8009526:	4933      	ldr	r1, [pc, #204]	; (80095f4 <oslib_test_001_003_execute.lto_priv.0+0x1d4>)
 8009528:	f7fe fda2 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800952c:	4639      	mov	r1, r7
 800952e:	4630      	mov	r0, r6
 8009530:	f7fe fd9e 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8009534:	4629      	mov	r1, r5
 8009536:	4620      	mov	r0, r4
 8009538:	f7fe fd9a 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 800953c:	4640      	mov	r0, r8
 800953e:	492e      	ldr	r1, [pc, #184]	; (80095f8 <oslib_test_001_003_execute.lto_priv.0+0x1d8>)
 8009540:	f7fe fd96 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8009544:	4639      	mov	r1, r7
 8009546:	4630      	mov	r0, r6
 8009548:	f7fe fd92 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800954c:	4629      	mov	r1, r5
 800954e:	4620      	mov	r0, r4
 8009550:	f7fe fd8e 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8009554:	4640      	mov	r0, r8
 8009556:	4929      	ldr	r1, [pc, #164]	; (80095fc <oslib_test_001_003_execute.lto_priv.0+0x1dc>)
 8009558:	f7fe fd8a 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800955c:	4639      	mov	r1, r7
 800955e:	4630      	mov	r0, r6
 8009560:	f7fe fd86 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8009564:	4629      	mov	r1, r5
 8009566:	4620      	mov	r0, r4
 8009568:	f7fe fd82 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 800956c:	4640      	mov	r0, r8
 800956e:	4924      	ldr	r1, [pc, #144]	; (8009600 <oslib_test_001_003_execute.lto_priv.0+0x1e0>)
 8009570:	f7fe fd7e 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8009574:	4639      	mov	r1, r7
 8009576:	4630      	mov	r0, r6
 8009578:	f7fe fd7a 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800957c:	4629      	mov	r1, r5
 800957e:	4620      	mov	r0, r4
 8009580:	f7fe fd76 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 8009584:	4640      	mov	r0, r8
 8009586:	491f      	ldr	r1, [pc, #124]	; (8009604 <oslib_test_001_003_execute.lto_priv.0+0x1e4>)
 8009588:	f7fe fd72 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800958c:	4639      	mov	r1, r7
 800958e:	4630      	mov	r0, r6
 8009590:	f7fe fd6e 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8009594:	4629      	mov	r1, r5
 8009596:	4620      	mov	r0, r4
 8009598:	f7fe fd6a 	bl	8008070 <test_printf>
  test_printf("%s", msgp);
 800959c:	4640      	mov	r0, r8
 800959e:	491a      	ldr	r1, [pc, #104]	; (8009608 <oslib_test_001_003_execute.lto_priv.0+0x1e8>)
 80095a0:	f7fe fd66 	bl	8008070 <test_printf>
  test_printf("%u", n);
 80095a4:	4639      	mov	r1, r7
 80095a6:	4630      	mov	r0, r6
 80095a8:	f7fe fd62 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 80095ac:	4629      	mov	r1, r5
 80095ae:	4620      	mov	r0, r4
    test_print("--- CH_CFG_FACTORY_PIPES:               ");
    test_printn(CH_CFG_FACTORY_PIPES);
    test_println("");
  }
  test_end_step(1);
}
 80095b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095b4:	f7fe bd5c 	b.w	8008070 <test_printf>
 80095b8:	08010188 	.word	0x08010188
 80095bc:	20001134 	.word	0x20001134
 80095c0:	08010634 	.word	0x08010634
 80095c4:	08010190 	.word	0x08010190
 80095c8:	08012cc0 	.word	0x08012cc0
 80095cc:	080125d4 	.word	0x080125d4
 80095d0:	08012600 	.word	0x08012600
 80095d4:	0801262c 	.word	0x0801262c
 80095d8:	08012658 	.word	0x08012658
 80095dc:	08012684 	.word	0x08012684
 80095e0:	080126b0 	.word	0x080126b0
 80095e4:	080126dc 	.word	0x080126dc
 80095e8:	08012708 	.word	0x08012708
 80095ec:	08012734 	.word	0x08012734
 80095f0:	08012760 	.word	0x08012760
 80095f4:	0801278c 	.word	0x0801278c
 80095f8:	080127b8 	.word	0x080127b8
 80095fc:	080127e4 	.word	0x080127e4
 8009600:	08012810 	.word	0x08012810
 8009604:	0801283c 	.word	0x0801283c
 8009608:	08012868 	.word	0x08012868
 800960c:	00000000 	.word	0x00000000

08009610 <ShellHandler>:
static void ShellHandler(eventid_t id) {
 8009610:	b510      	push	{r4, lr}
  if (chThdTerminatedX(shelltp)) {
 8009612:	4c06      	ldr	r4, [pc, #24]	; (800962c <ShellHandler+0x1c>)
 8009614:	6820      	ldr	r0, [r4, #0]
 8009616:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800961a:	2b0f      	cmp	r3, #15
 800961c:	d000      	beq.n	8009620 <ShellHandler+0x10>
}
 800961e:	bd10      	pop	{r4, pc}
    chThdWait(shelltp);                 /* Returning memory to heap.        */
 8009620:	f7fc f80e 	bl	8005640 <chThdWait>
    shelltp = NULL;
 8009624:	2300      	movs	r3, #0
 8009626:	6023      	str	r3, [r4, #0]
}
 8009628:	bd10      	pop	{r4, pc}
 800962a:	bf00      	nop
 800962c:	20002658 	.word	0x20002658

08009630 <rt_test_012_010_execute.lto_priv.0>:
  test_set_step(1);
 8009630:	2101      	movs	r1, #1
static void rt_test_012_010_execute(void) {
 8009632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8009636:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8009824 <rt_test_012_010_execute.lto_priv.0+0x1f4>
 800963a:	2520      	movs	r5, #32
 800963c:	f8ca 1000 	str.w	r1, [sl]
 8009640:	f385 8811 	msr	BASEPRI, r5
 8009644:	2008      	movs	r0, #8
 8009646:	f7f9 faa3 	bl	8002b90 <chSchGoSleepTimeoutS>
 800964a:	f04f 0800 	mov.w	r8, #0
 800964e:	f388 8811 	msr	BASEPRI, r8
 8009652:	f385 8811 	msr	BASEPRI, r5
 8009656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	fa1f f983 	uxth.w	r9, r3
 8009660:	f388 8811 	msr	BASEPRI, r8
  return systime + (systime_t)interval;
 8009664:	4c70      	ldr	r4, [pc, #448]	; (8009828 <rt_test_012_010_execute.lto_priv.0+0x1f8>)
 8009666:	4646      	mov	r6, r8
  return __sch_get_currthread();
 8009668:	4f70      	ldr	r7, [pc, #448]	; (800982c <rt_test_012_010_execute.lto_priv.0+0x1fc>)
 800966a:	e044      	b.n	80096f6 <rt_test_012_010_execute.lto_priv.0+0xc6>
 800966c:	f386 8811 	msr	BASEPRI, r6
 8009670:	f385 8811 	msr	BASEPRI, r5
  if (--sp->cnt < (cnt_t)0) {
 8009674:	68a3      	ldr	r3, [r4, #8]
 8009676:	3b01      	subs	r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	60a3      	str	r3, [r4, #8]
 800967c:	db6b      	blt.n	8009756 <rt_test_012_010_execute.lto_priv.0+0x126>
 800967e:	f386 8811 	msr	BASEPRI, r6
 8009682:	f385 8811 	msr	BASEPRI, r5
  if (++sp->cnt <= (cnt_t)0) {
 8009686:	68a3      	ldr	r3, [r4, #8]
 8009688:	3301      	adds	r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	60a3      	str	r3, [r4, #8]
 800968e:	dd5a      	ble.n	8009746 <rt_test_012_010_execute.lto_priv.0+0x116>
 8009690:	f386 8811 	msr	BASEPRI, r6
 8009694:	f385 8811 	msr	BASEPRI, r5
  if (--sp->cnt < (cnt_t)0) {
 8009698:	68a3      	ldr	r3, [r4, #8]
 800969a:	3b01      	subs	r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	60a3      	str	r3, [r4, #8]
 80096a0:	f2c0 8098 	blt.w	80097d4 <rt_test_012_010_execute.lto_priv.0+0x1a4>
 80096a4:	f386 8811 	msr	BASEPRI, r6
 80096a8:	f385 8811 	msr	BASEPRI, r5
  if (++sp->cnt <= (cnt_t)0) {
 80096ac:	68a3      	ldr	r3, [r4, #8]
 80096ae:	3301      	adds	r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	60a3      	str	r3, [r4, #8]
 80096b4:	dd3f      	ble.n	8009736 <rt_test_012_010_execute.lto_priv.0+0x106>
 80096b6:	f386 8811 	msr	BASEPRI, r6
 80096ba:	f385 8811 	msr	BASEPRI, r5
  if (--sp->cnt < (cnt_t)0) {
 80096be:	68a3      	ldr	r3, [r4, #8]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	60a3      	str	r3, [r4, #8]
 80096c6:	db70      	blt.n	80097aa <rt_test_012_010_execute.lto_priv.0+0x17a>
 80096c8:	f386 8811 	msr	BASEPRI, r6
 80096cc:	f385 8811 	msr	BASEPRI, r5
  if (++sp->cnt <= (cnt_t)0) {
 80096d0:	68a3      	ldr	r3, [r4, #8]
 80096d2:	3301      	adds	r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	60a3      	str	r3, [r4, #8]
 80096d8:	dd25      	ble.n	8009726 <rt_test_012_010_execute.lto_priv.0+0xf6>
 80096da:	f386 8811 	msr	BASEPRI, r6
 80096de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 80096e4:	f108 0801 	add.w	r8, r8, #1
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80096e8:	eba3 0309 	sub.w	r3, r3, r9
    } while (chVTIsSystemTimeWithinX(start, end));
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80096f2:	f080 8084 	bcs.w	80097fe <rt_test_012_010_execute.lto_priv.0+0x1ce>
 80096f6:	f385 8811 	msr	BASEPRI, r5
  if (--sp->cnt < (cnt_t)0) {
 80096fa:	68a3      	ldr	r3, [r4, #8]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	60a3      	str	r3, [r4, #8]
 8009702:	db3d      	blt.n	8009780 <rt_test_012_010_execute.lto_priv.0+0x150>
 8009704:	f386 8811 	msr	BASEPRI, r6
 8009708:	f385 8811 	msr	BASEPRI, r5
  if (++sp->cnt <= (cnt_t)0) {
 800970c:	68a3      	ldr	r3, [r4, #8]
 800970e:	3301      	adds	r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	60a3      	str	r3, [r4, #8]
 8009714:	dcaa      	bgt.n	800966c <rt_test_012_010_execute.lto_priv.0+0x3c>
  ch_queue_t *p = qp->next;
 8009716:	6820      	ldr	r0, [r4, #0]
    chSchWakeupS((thread_t *)ch_queue_fifo_remove(&sp->queue), MSG_OK);
 8009718:	2100      	movs	r1, #0
  qp->next       = p->next;
 800971a:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 800971c:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800971e:	6023      	str	r3, [r4, #0]
 8009720:	f7fa fcce 	bl	80040c0 <chSchWakeupS>
 8009724:	e7a2      	b.n	800966c <rt_test_012_010_execute.lto_priv.0+0x3c>
  ch_queue_t *p = qp->next;
 8009726:	6820      	ldr	r0, [r4, #0]
 8009728:	2100      	movs	r1, #0
  qp->next       = p->next;
 800972a:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 800972c:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	f7fa fcc6 	bl	80040c0 <chSchWakeupS>
 8009734:	e7d1      	b.n	80096da <rt_test_012_010_execute.lto_priv.0+0xaa>
  ch_queue_t *p = qp->next;
 8009736:	6820      	ldr	r0, [r4, #0]
 8009738:	2100      	movs	r1, #0
  qp->next       = p->next;
 800973a:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 800973c:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	f7fa fcbe 	bl	80040c0 <chSchWakeupS>
 8009744:	e7b7      	b.n	80096b6 <rt_test_012_010_execute.lto_priv.0+0x86>
  ch_queue_t *p = qp->next;
 8009746:	6820      	ldr	r0, [r4, #0]
 8009748:	2100      	movs	r1, #0
  qp->next       = p->next;
 800974a:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 800974c:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800974e:	6023      	str	r3, [r4, #0]
 8009750:	f7fa fcb6 	bl	80040c0 <chSchWakeupS>
 8009754:	e79c      	b.n	8009690 <rt_test_012_010_execute.lto_priv.0+0x60>
  otp->state = newstate;
 8009756:	2005      	movs	r0, #5
  ntp->state = CH_STATE_CURRENT;
 8009758:	2201      	movs	r2, #1
 800975a:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 800975c:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 800975e:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8009760:	604b      	str	r3, [r1, #4]
    currtp->u.wtsemp = sp;
 8009762:	628c      	str	r4, [r1, #40]	; 0x28
  p->prev->next = p;
 8009764:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8009766:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  ch_priority_queue_t *p = pqp->next;
 800976a:	6838      	ldr	r0, [r7, #0]
  qp->prev      = p;
 800976c:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 800976e:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8009770:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8009772:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8009776:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 8009778:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 800977a:	f7f6 fd61 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 800977e:	e77e      	b.n	800967e <rt_test_012_010_execute.lto_priv.0+0x4e>
  otp->state = newstate;
 8009780:	2005      	movs	r0, #5
  ntp->state = CH_STATE_CURRENT;
 8009782:	2201      	movs	r2, #1
 8009784:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 8009786:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 8009788:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 800978a:	604b      	str	r3, [r1, #4]
    currtp->u.wtsemp = sp;
 800978c:	628c      	str	r4, [r1, #40]	; 0x28
  p->prev->next = p;
 800978e:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8009790:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  ch_priority_queue_t *p = pqp->next;
 8009794:	6838      	ldr	r0, [r7, #0]
  qp->prev      = p;
 8009796:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8009798:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800979a:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800979c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  pqp->next       = p->next;
 80097a0:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 80097a2:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 80097a4:	f7f6 fd4c 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 80097a8:	e7ac      	b.n	8009704 <rt_test_012_010_execute.lto_priv.0+0xd4>
  otp->state = newstate;
 80097aa:	2005      	movs	r0, #5
  ntp->state = CH_STATE_CURRENT;
 80097ac:	2201      	movs	r2, #1
 80097ae:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 80097b0:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 80097b2:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 80097b4:	604b      	str	r3, [r1, #4]
    currtp->u.wtsemp = sp;
 80097b6:	628c      	str	r4, [r1, #40]	; 0x28
  p->prev->next = p;
 80097b8:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 80097ba:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  ch_priority_queue_t *p = pqp->next;
 80097be:	6838      	ldr	r0, [r7, #0]
  qp->prev      = p;
 80097c0:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 80097c2:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 80097c4:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80097c6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  pqp->next       = p->next;
 80097ca:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 80097cc:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 80097ce:	f7f6 fd37 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 80097d2:	e779      	b.n	80096c8 <rt_test_012_010_execute.lto_priv.0+0x98>
  otp->state = newstate;
 80097d4:	2005      	movs	r0, #5
  ntp->state = CH_STATE_CURRENT;
 80097d6:	2201      	movs	r2, #1
 80097d8:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 80097da:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 80097dc:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 80097de:	604b      	str	r3, [r1, #4]
    currtp->u.wtsemp = sp;
 80097e0:	628c      	str	r4, [r1, #40]	; 0x28
  p->prev->next = p;
 80097e2:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 80097e4:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  ch_priority_queue_t *p = pqp->next;
 80097e8:	6838      	ldr	r0, [r7, #0]
  qp->prev      = p;
 80097ea:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 80097ec:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 80097ee:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80097f0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  pqp->next       = p->next;
 80097f4:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 80097f6:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 80097f8:	f7f6 fd22 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 80097fc:	e752      	b.n	80096a4 <rt_test_012_010_execute.lto_priv.0+0x74>
  test_set_step(2);
 80097fe:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 8009800:	490b      	ldr	r1, [pc, #44]	; (8009830 <rt_test_012_010_execute.lto_priv.0+0x200>)
 8009802:	480c      	ldr	r0, [pc, #48]	; (8009834 <rt_test_012_010_execute.lto_priv.0+0x204>)
 8009804:	f8ca 3000 	str.w	r3, [sl]
 8009808:	f7fe fc32 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800980c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8009810:	4809      	ldr	r0, [pc, #36]	; (8009838 <rt_test_012_010_execute.lto_priv.0+0x208>)
 8009812:	f7fe fc2d 	bl	8008070 <test_printf>
}
 8009816:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800981a:	4908      	ldr	r1, [pc, #32]	; (800983c <rt_test_012_010_execute.lto_priv.0+0x20c>)
 800981c:	4808      	ldr	r0, [pc, #32]	; (8009840 <rt_test_012_010_execute.lto_priv.0+0x210>)
 800981e:	f7fe bc27 	b.w	8008070 <test_printf>
 8009822:	bf00      	nop
 8009824:	20001134 	.word	0x20001134
 8009828:	20001260 	.word	0x20001260
 800982c:	20001050 	.word	0x20001050
 8009830:	08010d20 	.word	0x08010d20
 8009834:	08010188 	.word	0x08010188
 8009838:	08010634 	.word	0x08010634
 800983c:	08012894 	.word	0x08012894
 8009840:	08012cc0 	.word	0x08012cc0
	...

08009850 <chCacheGetObject.constprop.0>:
 * @param[in] key       object identifier within the group
 * @return              The pointer to the retrieved object.
 *
 * @api
 */
oc_object_t *chCacheGetObject(objects_cache_t *ocp,
 8009850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009854:	2320      	movs	r3, #32
 8009856:	4605      	mov	r5, r0
 8009858:	f383 8811 	msr	BASEPRI, r3
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 800985c:	4e53      	ldr	r6, [pc, #332]	; (80099ac <chCacheGetObject.constprop.0+0x15c>)
 800985e:	e9d6 3100 	ldrd	r3, r1, [r6]
 8009862:	3b01      	subs	r3, #1
 8009864:	4003      	ands	r3, r0
  objp = hhp->hash_next;
 8009866:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 800986a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
  while (objp != (oc_object_t *)hhp) {
 800986e:	42a2      	cmp	r2, r4
 8009870:	d103      	bne.n	800987a <chCacheGetObject.constprop.0+0x2a>
 8009872:	e01b      	b.n	80098ac <chCacheGetObject.constprop.0+0x5c>
    objp = objp->hash_next;
 8009874:	6824      	ldr	r4, [r4, #0]
  while (objp != (oc_object_t *)hhp) {
 8009876:	42a2      	cmp	r2, r4
 8009878:	d018      	beq.n	80098ac <chCacheGetObject.constprop.0+0x5c>
    if ((objp->obj_key == key) && (objp->obj_group == group)) {
 800987a:	6963      	ldr	r3, [r4, #20]
 800987c:	429d      	cmp	r5, r3
 800987e:	d1f9      	bne.n	8009874 <chCacheGetObject.constprop.0+0x24>
 8009880:	6923      	ldr	r3, [r4, #16]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1f6      	bne.n	8009874 <chCacheGetObject.constprop.0+0x24>
 */
static inline cnt_t chSemGetCounterI(const semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->cnt;
 8009886:	6a23      	ldr	r3, [r4, #32]
    chDbgAssert((objp->obj_flags & OC_FLAG_INHASH) == OC_FLAG_INHASH,
                "not in hash");

    /* Cache hit, checking if the buffer is owned by some
       other thread.*/
    if (chSemGetCounterI(&objp->obj_sem) > (cnt_t)0) {
 8009888:	2b00      	cmp	r3, #0
 800988a:	dd51      	ble.n	8009930 <chCacheGetObject.constprop.0+0xe0>

      chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == OC_FLAG_INLRU,
                  "not in LRU");

      /* Removing the object from LRU, now it is "owned".*/
      LRU_REMOVE(objp);
 800988c:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
      objp->obj_flags &= ~OC_FLAG_INLRU;
 8009890:	6a62      	ldr	r2, [r4, #36]	; 0x24
  sp->cnt--;
 8009892:	3b01      	subs	r3, #1
 8009894:	f022 0201 	bic.w	r2, r2, #1
      LRU_REMOVE(objp);
 8009898:	6081      	str	r1, [r0, #8]
 800989a:	60c8      	str	r0, [r1, #12]
 800989c:	e9c4 3208 	strd	r3, r2, [r4, #32]
 80098a0:	2300      	movs	r3, #0
 80098a2:	f383 8811 	msr	BASEPRI, r3

  /* Out of critical section and returning the object.*/
  chSysUnlock();

  return objp;
}
 80098a6:	4620      	mov	r0, r4
 80098a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    currtp->u.wtsemp = sp;
 80098ac:	4f40      	ldr	r7, [pc, #256]	; (80099b0 <chCacheGetObject.constprop.0+0x160>)
 80098ae:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80099b4 <chCacheGetObject.constprop.0+0x164>
    (void) ocp->writef(ocp, objp, true);
 80098b2:	f1a7 0930 	sub.w	r9, r7, #48	; 0x30
 80098b6:	e01c      	b.n	80098f2 <chCacheGetObject.constprop.0+0xa2>
    objp = ocp->lru.lru_prev;
 80098b8:	6a34      	ldr	r4, [r6, #32]
 80098ba:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
    LRU_REMOVE(objp);
 80098be:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	6081      	str	r1, [r0, #8]
 80098c6:	60c8      	str	r0, [r1, #12]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 80098c8:	f022 0101 	bic.w	r1, r2, #1
 80098cc:	e9c4 3108 	strd	r3, r1, [r4, #32]
    if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 80098d0:	06d1      	lsls	r1, r2, #27
 80098d2:	d54c      	bpl.n	800996e <chCacheGetObject.constprop.0+0x11e>
 80098d4:	2300      	movs	r3, #0
 80098d6:	f383 8811 	msr	BASEPRI, r3
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 80098da:	f04f 0c22 	mov.w	ip, #34	; 0x22
    (void) ocp->writef(ocp, objp, true);
 80098de:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80098e0:	2201      	movs	r2, #1
 80098e2:	4621      	mov	r1, r4
 80098e4:	4648      	mov	r0, r9
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 80098e6:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
    (void) ocp->writef(ocp, objp, true);
 80098ea:	4798      	blx	r3
 80098ec:	2320      	movs	r3, #32
 80098ee:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80098f2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80098f4:	3b01      	subs	r3, #1
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	63b3      	str	r3, [r6, #56]	; 0x38
 80098fa:	dadd      	bge.n	80098b8 <chCacheGetObject.constprop.0+0x68>
  otp->state = newstate;
 80098fc:	2005      	movs	r0, #5
  ntp->state = CH_STATE_CURRENT;
 80098fe:	2201      	movs	r2, #1
 8009900:	f8d8 100c 	ldr.w	r1, [r8, #12]
  p->prev       = qp->prev;
 8009904:	6b73      	ldr	r3, [r6, #52]	; 0x34
  p->next       = qp;
 8009906:	600f      	str	r7, [r1, #0]
  p->prev       = qp->prev;
 8009908:	604b      	str	r3, [r1, #4]
    currtp->u.wtsemp = sp;
 800990a:	628f      	str	r7, [r1, #40]	; 0x28
  p->prev->next = p;
 800990c:	6019      	str	r1, [r3, #0]
  qp->prev      = p;
 800990e:	6371      	str	r1, [r6, #52]	; 0x34
  otp->state = newstate;
 8009910:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  ch_priority_queue_t *p = pqp->next;
 8009914:	f8d8 0000 	ldr.w	r0, [r8]
  pqp->next       = p->next;
 8009918:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800991a:	f8c3 8004 	str.w	r8, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800991e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8009922:	f8c8 3000 	str.w	r3, [r8]
  __instance_set_currthread(oip, ntp);
 8009926:	f8c8 000c 	str.w	r0, [r8, #12]
  chSysSwitch(ntp, otp);
 800992a:	f7f6 fc89 	bl	8000240 <__port_switch>
 800992e:	e7c3      	b.n	80098b8 <chCacheGetObject.constprop.0+0x68>
 8009930:	4a20      	ldr	r2, [pc, #128]	; (80099b4 <chCacheGetObject.constprop.0+0x164>)
  otp->state = newstate;
 8009932:	2605      	movs	r6, #5
  p->prev       = qp->prev;
 8009934:	69e5      	ldr	r5, [r4, #28]
 8009936:	68d1      	ldr	r1, [r2, #12]
      (void) chSemWaitS(&objp->obj_sem);
 8009938:	f104 0018 	add.w	r0, r4, #24
  if (--sp->cnt < (cnt_t)0) {
 800993c:	3b01      	subs	r3, #1
 800993e:	6223      	str	r3, [r4, #32]
  p->next       = qp;
 8009940:	6008      	str	r0, [r1, #0]
  p->prev       = qp->prev;
 8009942:	604d      	str	r5, [r1, #4]
    currtp->u.wtsemp = sp;
 8009944:	6288      	str	r0, [r1, #40]	; 0x28
  p->prev->next = p;
 8009946:	6029      	str	r1, [r5, #0]
  ntp->state = CH_STATE_CURRENT;
 8009948:	2501      	movs	r5, #1
  ch_priority_queue_t *p = pqp->next;
 800994a:	6810      	ldr	r0, [r2, #0]
  qp->prev      = p;
 800994c:	61e1      	str	r1, [r4, #28]
  otp->state = newstate;
 800994e:	f881 6024 	strb.w	r6, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8009952:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8009954:	605a      	str	r2, [r3, #4]
  pqp->next       = p->next;
 8009956:	6013      	str	r3, [r2, #0]
  ntp->state = CH_STATE_CURRENT;
 8009958:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 800995c:	60d0      	str	r0, [r2, #12]
  chSysSwitch(ntp, otp);
 800995e:	f7f6 fc6f 	bl	8000240 <__port_switch>
 8009962:	2300      	movs	r3, #0
 8009964:	f383 8811 	msr	BASEPRI, r3
}
 8009968:	4620      	mov	r0, r4
 800996a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((objp->obj_flags & OC_FLAG_INHASH) != 0U) {
 800996e:	0793      	lsls	r3, r2, #30
 8009970:	d504      	bpl.n	800997c <chCacheGetObject.constprop.0+0x12c>
        HASH_REMOVE(objp);
 8009972:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	6822      	ldr	r2, [r4, #0]
 800997a:	6053      	str	r3, [r2, #4]
    objp->obj_group = group;
 800997c:	2000      	movs	r0, #0
    HASH_INSERT(ocp, objp, group, key);
 800997e:	e9d6 3200 	ldrd	r3, r2, [r6]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 8009982:	210a      	movs	r1, #10
    HASH_INSERT(ocp, objp, group, key);
 8009984:	3b01      	subs	r3, #1
    objp->obj_key   = key;
 8009986:	6165      	str	r5, [r4, #20]
    HASH_INSERT(ocp, objp, group, key);
 8009988:	401d      	ands	r5, r3
 800998a:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
 800998e:	eb02 06c5 	add.w	r6, r2, r5, lsl #3
 8009992:	6023      	str	r3, [r4, #0]
 8009994:	6066      	str	r6, [r4, #4]
    objp->obj_group = group;
 8009996:	6120      	str	r0, [r4, #16]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 8009998:	6261      	str	r1, [r4, #36]	; 0x24
    HASH_INSERT(ocp, objp, group, key);
 800999a:	605c      	str	r4, [r3, #4]
 800999c:	f842 4035 	str.w	r4, [r2, r5, lsl #3]
 80099a0:	2300      	movs	r3, #0
 80099a2:	f383 8811 	msr	BASEPRI, r3
}
 80099a6:	4620      	mov	r0, r4
 80099a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ac:	20001e0c 	.word	0x20001e0c
 80099b0:	20001e3c 	.word	0x20001e3c
 80099b4:	20001050 	.word	0x20001050
	...

080099c0 <rt_test_012_011_execute.lto_priv.0>:
  test_set_step(1);
 80099c0:	2101      	movs	r1, #1
static void rt_test_012_011_execute(void) {
 80099c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80099c6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8009a80 <rt_test_012_011_execute.lto_priv.0+0xc0>
 80099ca:	2520      	movs	r5, #32
 80099cc:	f8c8 1000 	str.w	r1, [r8]
 80099d0:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80099d4:	2008      	movs	r0, #8
 80099d6:	f7f9 f8db 	bl	8002b90 <chSchGoSleepTimeoutS>
 80099da:	f04f 0900 	mov.w	r9, #0
 80099de:	f389 8811 	msr	BASEPRI, r9
 80099e2:	f385 8811 	msr	BASEPRI, r5
 80099e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099ea:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 80099ec:	b2bf      	uxth	r7, r7
 80099ee:	f389 8811 	msr	BASEPRI, r9
 80099f2:	464e      	mov	r6, r9
  chMtxLockS(mp);
 80099f4:	4c23      	ldr	r4, [pc, #140]	; (8009a84 <rt_test_012_011_execute.lto_priv.0+0xc4>)
 80099f6:	f385 8811 	msr	BASEPRI, r5
 80099fa:	4620      	mov	r0, r4
 80099fc:	f7fa fed8 	bl	80047b0 <chMtxLockS>
 8009a00:	f386 8811 	msr	BASEPRI, r6
      chMtxUnlock(&mtx1);
 8009a04:	4620      	mov	r0, r4
 8009a06:	f7fa ff6b 	bl	80048e0 <chMtxUnlock>
 8009a0a:	f385 8811 	msr	BASEPRI, r5
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f7fa fece 	bl	80047b0 <chMtxLockS>
 8009a14:	f386 8811 	msr	BASEPRI, r6
      chMtxUnlock(&mtx1);
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f7fa ff61 	bl	80048e0 <chMtxUnlock>
 8009a1e:	f385 8811 	msr	BASEPRI, r5
 8009a22:	4620      	mov	r0, r4
 8009a24:	f7fa fec4 	bl	80047b0 <chMtxLockS>
 8009a28:	f386 8811 	msr	BASEPRI, r6
      chMtxUnlock(&mtx1);
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f7fa ff57 	bl	80048e0 <chMtxUnlock>
 8009a32:	f385 8811 	msr	BASEPRI, r5
 8009a36:	4620      	mov	r0, r4
 8009a38:	f7fa feba 	bl	80047b0 <chMtxLockS>
 8009a3c:	f386 8811 	msr	BASEPRI, r6
      chMtxUnlock(&mtx1);
 8009a40:	4620      	mov	r0, r4
 8009a42:	f7fa ff4d 	bl	80048e0 <chMtxUnlock>
 8009a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 8009a4c:	f109 0901 	add.w	r9, r9, #1
 8009a50:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009a58:	d3cd      	bcc.n	80099f6 <rt_test_012_011_execute.lto_priv.0+0x36>
  test_set_step(2);
 8009a5a:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 8009a5c:	490a      	ldr	r1, [pc, #40]	; (8009a88 <rt_test_012_011_execute.lto_priv.0+0xc8>)
 8009a5e:	480b      	ldr	r0, [pc, #44]	; (8009a8c <rt_test_012_011_execute.lto_priv.0+0xcc>)
 8009a60:	f8c8 3000 	str.w	r3, [r8]
 8009a64:	f7fe fb04 	bl	8008070 <test_printf>
  test_printf("%u", n);
 8009a68:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8009a6c:	4808      	ldr	r0, [pc, #32]	; (8009a90 <rt_test_012_011_execute.lto_priv.0+0xd0>)
 8009a6e:	f7fe faff 	bl	8008070 <test_printf>
}
 8009a72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 8009a76:	4907      	ldr	r1, [pc, #28]	; (8009a94 <rt_test_012_011_execute.lto_priv.0+0xd4>)
 8009a78:	4807      	ldr	r0, [pc, #28]	; (8009a98 <rt_test_012_011_execute.lto_priv.0+0xd8>)
 8009a7a:	f7fe baf9 	b.w	8008070 <test_printf>
 8009a7e:	bf00      	nop
 8009a80:	20001134 	.word	0x20001134
 8009a84:	20002544 	.word	0x20002544
 8009a88:	08010d20 	.word	0x08010d20
 8009a8c:	08010188 	.word	0x08010188
 8009a90:	08010634 	.word	0x08010634
 8009a94:	080128a4 	.word	0x080128a4
 8009a98:	08012cc0 	.word	0x08012cc0
 8009a9c:	00000000 	.word	0x00000000

08009aa0 <oslib_test_001_001_execute.lto_priv.0>:
 8009aa0:	f7fe bd0e 	b.w	80084c0 <rt_test_001_001_execute.lto_priv.0>
	...

08009ab0 <chMBPostAheadI.constprop.0>:
  if (mbp->reset) {
 8009ab0:	4b19      	ldr	r3, [pc, #100]	; (8009b18 <chMBPostAheadI.constprop.0+0x68>)
 8009ab2:	7d1a      	ldrb	r2, [r3, #20]
 8009ab4:	2a00      	cmp	r2, #0
 8009ab6:	d12c      	bne.n	8009b12 <chMBPostAheadI.constprop.0+0x62>
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8009ab8:	b430      	push	{r4, r5}
  return (size_t)(mbp->top - mbp->buffer);
 8009aba:	e9d3 2500 	ldrd	r2, r5, [r3]
  return mbp->cnt;
 8009abe:	691c      	ldr	r4, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8009ac0:	1aa9      	subs	r1, r5, r2
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8009ac2:	ebb4 0fa1 	cmp.w	r4, r1, asr #2
 8009ac6:	d021      	beq.n	8009b0c <chMBPostAheadI.constprop.0+0x5c>
    if (--mbp->rdptr < mbp->buffer) {
 8009ac8:	68d9      	ldr	r1, [r3, #12]
    mbp->cnt++;
 8009aca:	3401      	adds	r4, #1
    if (--mbp->rdptr < mbp->buffer) {
 8009acc:	3904      	subs	r1, #4
 8009ace:	428a      	cmp	r2, r1
      mbp->rdptr = mbp->top - 1;
 8009ad0:	bf88      	it	hi
 8009ad2:	1f29      	subhi	r1, r5, #4
  return (bool)(qp->next != qp);
 8009ad4:	6a1a      	ldr	r2, [r3, #32]
 8009ad6:	60d9      	str	r1, [r3, #12]
    *mbp->rdptr = msg;
 8009ad8:	6008      	str	r0, [r1, #0]
  if (ch_queue_notempty(&tqp->queue)) {
 8009ada:	4910      	ldr	r1, [pc, #64]	; (8009b1c <chMBPostAheadI.constprop.0+0x6c>)
  tp->u.rdymsg = msg;
 8009adc:	2000      	movs	r0, #0
 8009ade:	428a      	cmp	r2, r1
    mbp->cnt++;
 8009ae0:	611c      	str	r4, [r3, #16]
 8009ae2:	d011      	beq.n	8009b08 <chMBPostAheadI.constprop.0+0x58>
  qp->next       = p->next;
 8009ae4:	6814      	ldr	r4, [r2, #0]
 8009ae6:	621c      	str	r4, [r3, #32]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8009ae8:	6993      	ldr	r3, [r2, #24]
  qp->next->prev = qp;
 8009aea:	6061      	str	r1, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8009aec:	6894      	ldr	r4, [r2, #8]
 8009aee:	6290      	str	r0, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8009af0:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
    pqp = pqp->next;
 8009af4:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8009af6:	6899      	ldr	r1, [r3, #8]
 8009af8:	42a1      	cmp	r1, r4
 8009afa:	d2fb      	bcs.n	8009af4 <chMBPostAheadI.constprop.0+0x44>
    return MSG_OK;
 8009afc:	2000      	movs	r0, #0
  p->prev       = pqp->prev;
 8009afe:	6859      	ldr	r1, [r3, #4]
 8009b00:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 8009b04:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 8009b06:	605a      	str	r2, [r3, #4]
}
 8009b08:	bc30      	pop	{r4, r5}
 8009b0a:	4770      	bx	lr
  return MSG_TIMEOUT;
 8009b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b10:	e7fa      	b.n	8009b08 <chMBPostAheadI.constprop.0+0x58>
    return MSG_RESET;
 8009b12:	f06f 0001 	mvn.w	r0, #1
}
 8009b16:	4770      	bx	lr
 8009b18:	20000854 	.word	0x20000854
 8009b1c:	20000874 	.word	0x20000874

08009b20 <oslib_test_002_001_teardown.lto_priv.0>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	2320      	movs	r3, #32
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	4c26      	ldr	r4, [pc, #152]	; (8009bc4 <oslib_test_002_001_teardown.lto_priv.0+0xa4>)
 8009b2a:	2700      	movs	r7, #0
 8009b2c:	4625      	mov	r5, r4
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f855 1f18 	ldr.w	r1, [r5, #24]!
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	42a9      	cmp	r1, r5
 8009b38:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8009b3c:	6127      	str	r7, [r4, #16]
 8009b3e:	7522      	strb	r2, [r4, #20]
 8009b40:	d016      	beq.n	8009b70 <oslib_test_002_001_teardown.lto_priv.0+0x50>
 8009b42:	f06f 0c01 	mvn.w	ip, #1
 8009b46:	460b      	mov	r3, r1
 8009b48:	6809      	ldr	r1, [r1, #0]
 8009b4a:	699a      	ldr	r2, [r3, #24]
 8009b4c:	689e      	ldr	r6, [r3, #8]
 8009b4e:	61a1      	str	r1, [r4, #24]
 8009b50:	604d      	str	r5, [r1, #4]
 8009b52:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 8009b56:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
 8009b5a:	6812      	ldr	r2, [r2, #0]
 8009b5c:	6890      	ldr	r0, [r2, #8]
 8009b5e:	42b0      	cmp	r0, r6
 8009b60:	d2fb      	bcs.n	8009b5a <oslib_test_002_001_teardown.lto_priv.0+0x3a>
 8009b62:	6850      	ldr	r0, [r2, #4]
 8009b64:	42a9      	cmp	r1, r5
 8009b66:	e9c3 2000 	strd	r2, r0, [r3]
 8009b6a:	6003      	str	r3, [r0, #0]
 8009b6c:	6053      	str	r3, [r2, #4]
 8009b6e:	d1ea      	bne.n	8009b46 <oslib_test_002_001_teardown.lto_priv.0+0x26>
 8009b70:	6a21      	ldr	r1, [r4, #32]
 8009b72:	4d15      	ldr	r5, [pc, #84]	; (8009bc8 <oslib_test_002_001_teardown.lto_priv.0+0xa8>)
 8009b74:	42a9      	cmp	r1, r5
 8009b76:	d017      	beq.n	8009ba8 <oslib_test_002_001_teardown.lto_priv.0+0x88>
 8009b78:	f06f 0c01 	mvn.w	ip, #1
 8009b7c:	2700      	movs	r7, #0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	6809      	ldr	r1, [r1, #0]
 8009b82:	699a      	ldr	r2, [r3, #24]
 8009b84:	689e      	ldr	r6, [r3, #8]
 8009b86:	6221      	str	r1, [r4, #32]
 8009b88:	604d      	str	r5, [r1, #4]
 8009b8a:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 8009b8e:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
 8009b92:	6812      	ldr	r2, [r2, #0]
 8009b94:	6890      	ldr	r0, [r2, #8]
 8009b96:	42b0      	cmp	r0, r6
 8009b98:	d2fb      	bcs.n	8009b92 <oslib_test_002_001_teardown.lto_priv.0+0x72>
 8009b9a:	6850      	ldr	r0, [r2, #4]
 8009b9c:	42a9      	cmp	r1, r5
 8009b9e:	e9c3 2000 	strd	r2, r0, [r3]
 8009ba2:	6003      	str	r3, [r0, #0]
 8009ba4:	6053      	str	r3, [r2, #4]
 8009ba6:	d1ea      	bne.n	8009b7e <oslib_test_002_001_teardown.lto_priv.0+0x5e>
 8009ba8:	4b08      	ldr	r3, [pc, #32]	; (8009bcc <oslib_test_002_001_teardown.lto_priv.0+0xac>)
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	6892      	ldr	r2, [r2, #8]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d901      	bls.n	8009bba <oslib_test_002_001_teardown.lto_priv.0+0x9a>
 8009bb6:	f7fa f803 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20000854 	.word	0x20000854
 8009bc8:	20000874 	.word	0x20000874
 8009bcc:	20001050 	.word	0x20001050

08009bd0 <oslib_test_002_002_teardown.lto_priv.0>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	2320      	movs	r3, #32
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	4c26      	ldr	r4, [pc, #152]	; (8009c74 <oslib_test_002_002_teardown.lto_priv.0+0xa4>)
 8009bda:	2700      	movs	r7, #0
 8009bdc:	4625      	mov	r5, r4
 8009bde:	2201      	movs	r2, #1
 8009be0:	f855 1f18 	ldr.w	r1, [r5, #24]!
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	42a9      	cmp	r1, r5
 8009be8:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8009bec:	6127      	str	r7, [r4, #16]
 8009bee:	7522      	strb	r2, [r4, #20]
 8009bf0:	d016      	beq.n	8009c20 <oslib_test_002_002_teardown.lto_priv.0+0x50>
 8009bf2:	f06f 0c01 	mvn.w	ip, #1
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	6809      	ldr	r1, [r1, #0]
 8009bfa:	699a      	ldr	r2, [r3, #24]
 8009bfc:	689e      	ldr	r6, [r3, #8]
 8009bfe:	61a1      	str	r1, [r4, #24]
 8009c00:	604d      	str	r5, [r1, #4]
 8009c02:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 8009c06:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
 8009c0a:	6812      	ldr	r2, [r2, #0]
 8009c0c:	6890      	ldr	r0, [r2, #8]
 8009c0e:	42b0      	cmp	r0, r6
 8009c10:	d2fb      	bcs.n	8009c0a <oslib_test_002_002_teardown.lto_priv.0+0x3a>
 8009c12:	6850      	ldr	r0, [r2, #4]
 8009c14:	42a9      	cmp	r1, r5
 8009c16:	e9c3 2000 	strd	r2, r0, [r3]
 8009c1a:	6003      	str	r3, [r0, #0]
 8009c1c:	6053      	str	r3, [r2, #4]
 8009c1e:	d1ea      	bne.n	8009bf6 <oslib_test_002_002_teardown.lto_priv.0+0x26>
 8009c20:	6a21      	ldr	r1, [r4, #32]
 8009c22:	4d15      	ldr	r5, [pc, #84]	; (8009c78 <oslib_test_002_002_teardown.lto_priv.0+0xa8>)
 8009c24:	42a9      	cmp	r1, r5
 8009c26:	d017      	beq.n	8009c58 <oslib_test_002_002_teardown.lto_priv.0+0x88>
 8009c28:	f06f 0c01 	mvn.w	ip, #1
 8009c2c:	2700      	movs	r7, #0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	6809      	ldr	r1, [r1, #0]
 8009c32:	699a      	ldr	r2, [r3, #24]
 8009c34:	689e      	ldr	r6, [r3, #8]
 8009c36:	6221      	str	r1, [r4, #32]
 8009c38:	604d      	str	r5, [r1, #4]
 8009c3a:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 8009c3e:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
 8009c42:	6812      	ldr	r2, [r2, #0]
 8009c44:	6890      	ldr	r0, [r2, #8]
 8009c46:	42b0      	cmp	r0, r6
 8009c48:	d2fb      	bcs.n	8009c42 <oslib_test_002_002_teardown.lto_priv.0+0x72>
 8009c4a:	6850      	ldr	r0, [r2, #4]
 8009c4c:	42a9      	cmp	r1, r5
 8009c4e:	e9c3 2000 	strd	r2, r0, [r3]
 8009c52:	6003      	str	r3, [r0, #0]
 8009c54:	6053      	str	r3, [r2, #4]
 8009c56:	d1ea      	bne.n	8009c2e <oslib_test_002_002_teardown.lto_priv.0+0x5e>
 8009c58:	4b08      	ldr	r3, [pc, #32]	; (8009c7c <oslib_test_002_002_teardown.lto_priv.0+0xac>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	6892      	ldr	r2, [r2, #8]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d901      	bls.n	8009c6a <oslib_test_002_002_teardown.lto_priv.0+0x9a>
 8009c66:	f7f9 ffab 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000854 	.word	0x20000854
 8009c78:	20000874 	.word	0x20000874
 8009c7c:	20001050 	.word	0x20001050

08009c80 <oslib_test_002_003_teardown.lto_priv.0>:

static void oslib_test_002_003_teardown(void) {
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	2320      	movs	r3, #32
 8009c84:	f383 8811 	msr	BASEPRI, r3
  mbp->wrptr = mbp->buffer;
 8009c88:	4c26      	ldr	r4, [pc, #152]	; (8009d24 <oslib_test_002_003_teardown.lto_priv.0+0xa4>)
  mbp->cnt   = (size_t)0;
 8009c8a:	2700      	movs	r7, #0
  return (bool)(qp->next != qp);
 8009c8c:	4625      	mov	r5, r4
  mbp->reset = true;
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f855 1f18 	ldr.w	r1, [r5, #24]!
  mbp->wrptr = mbp->buffer;
 8009c94:	6823      	ldr	r3, [r4, #0]
  while (ch_queue_notempty(&tqp->queue)) {
 8009c96:	42a9      	cmp	r1, r5
  mbp->rdptr = mbp->buffer;
 8009c98:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 8009c9c:	6127      	str	r7, [r4, #16]
  mbp->reset = true;
 8009c9e:	7522      	strb	r2, [r4, #20]
 8009ca0:	d016      	beq.n	8009cd0 <oslib_test_002_003_teardown.lto_priv.0+0x50>
 8009ca2:	f06f 0c01 	mvn.w	ip, #1
 8009ca6:	460b      	mov	r3, r1
  qp->next       = p->next;
 8009ca8:	6809      	ldr	r1, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8009caa:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8009cac:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 8009cae:	61a1      	str	r1, [r4, #24]
  qp->next->prev = qp;
 8009cb0:	604d      	str	r5, [r1, #4]
 8009cb2:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8009cb6:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
    pqp = pqp->next;
 8009cba:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8009cbc:	6890      	ldr	r0, [r2, #8]
 8009cbe:	42b0      	cmp	r0, r6
 8009cc0:	d2fb      	bcs.n	8009cba <oslib_test_002_003_teardown.lto_priv.0+0x3a>
  p->prev       = pqp->prev;
 8009cc2:	6850      	ldr	r0, [r2, #4]
 8009cc4:	42a9      	cmp	r1, r5
 8009cc6:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8009cca:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8009ccc:	6053      	str	r3, [r2, #4]
 8009cce:	d1ea      	bne.n	8009ca6 <oslib_test_002_003_teardown.lto_priv.0+0x26>
  return (bool)(qp->next != qp);
 8009cd0:	6a21      	ldr	r1, [r4, #32]
 8009cd2:	4d15      	ldr	r5, [pc, #84]	; (8009d28 <oslib_test_002_003_teardown.lto_priv.0+0xa8>)
 8009cd4:	42a9      	cmp	r1, r5
 8009cd6:	d017      	beq.n	8009d08 <oslib_test_002_003_teardown.lto_priv.0+0x88>
 8009cd8:	f06f 0c01 	mvn.w	ip, #1
 8009cdc:	2700      	movs	r7, #0
 8009cde:	460b      	mov	r3, r1
  qp->next       = p->next;
 8009ce0:	6809      	ldr	r1, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8009ce2:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8009ce4:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 8009ce6:	6221      	str	r1, [r4, #32]
  qp->next->prev = qp;
 8009ce8:	604d      	str	r5, [r1, #4]
 8009cea:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8009cee:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
    pqp = pqp->next;
 8009cf2:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8009cf4:	6890      	ldr	r0, [r2, #8]
 8009cf6:	42b0      	cmp	r0, r6
 8009cf8:	d2fb      	bcs.n	8009cf2 <oslib_test_002_003_teardown.lto_priv.0+0x72>
  p->prev       = pqp->prev;
 8009cfa:	6850      	ldr	r0, [r2, #4]
 8009cfc:	42a9      	cmp	r1, r5
 8009cfe:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8009d02:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8009d04:	6053      	str	r3, [r2, #4]
 8009d06:	d1ea      	bne.n	8009cde <oslib_test_002_003_teardown.lto_priv.0+0x5e>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8009d08:	4b08      	ldr	r3, [pc, #32]	; (8009d2c <oslib_test_002_003_teardown.lto_priv.0+0xac>)
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	6892      	ldr	r2, [r2, #8]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d901      	bls.n	8009d1a <oslib_test_002_003_teardown.lto_priv.0+0x9a>
    __sch_reschedule_ahead();
 8009d16:	f7f9 ff53 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f383 8811 	msr	BASEPRI, r3
  chMBReset(&mb1);
}
 8009d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20000854 	.word	0x20000854
 8009d28:	20000874 	.word	0x20000874
 8009d2c:	20001050 	.word	0x20001050

08009d30 <obj_read>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8009d30:	4b2f      	ldr	r3, [pc, #188]	; (8009df0 <obj_read+0xc0>)
                     bool async) {
 8009d32:	b570      	push	{r4, r5, r6, lr}
 8009d34:	68dd      	ldr	r5, [r3, #12]
 8009d36:	f103 0c20 	add.w	ip, r3, #32
 8009d3a:	4565      	cmp	r5, ip
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	d204      	bcs.n	8009d4a <obj_read+0x1a>
  test_emit_token('a' + objp->obj_key);
 8009d40:	6949      	ldr	r1, [r1, #20]
    *chtest.tokp++ = token;
 8009d42:	1c6e      	adds	r6, r5, #1
 8009d44:	3161      	adds	r1, #97	; 0x61
 8009d46:	60de      	str	r6, [r3, #12]
 8009d48:	7029      	strb	r1, [r5, #0]
  objp->obj_flags &= ~OC_FLAG_NOTSYNC;
 8009d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d4c:	f023 0308 	bic.w	r3, r3, #8
 8009d50:	6263      	str	r3, [r4, #36]	; 0x24
  if (async) {
 8009d52:	b90a      	cbnz	r2, 8009d58 <obj_read+0x28>
}
 8009d54:	2000      	movs	r0, #0
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	2320      	movs	r3, #32
 8009d5a:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(chSemGetCounterI(&objp->obj_sem) <= (cnt_t)0,
              "semaphore counter greater than 0");

  /* If some thread is waiting for this specific buffer then it is
     handed directly without going through the LRU.*/
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8009d5e:	6a23      	ldr	r3, [r4, #32]
 8009d60:	2b00      	cmp	r3, #0
    /* Clearing all flags except those that are still meaningful, note,
       OC_FLAG_NOTSYNC and OC_FLAG_LAZYWRITE are passed, the other thread
       will handle them.*/
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8009d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8009d64:	db3c      	blt.n	8009de0 <obj_read+0xb0>
    return;
  }

  /* If the object specifies OC_FLAG_NOTSYNC then it must be invalidated
     and removed from the hash table.*/
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8009d66:	0719      	lsls	r1, r3, #28
 8009d68:	d421      	bmi.n	8009dae <obj_read+0x7e>
    objp->obj_key   = 0U;
    objp->obj_flags = OC_FLAG_INLRU;
  }
  else {
    /* LRU insertion point depends on the OC_FLAG_FORGET flag.*/
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 8009d6a:	069a      	lsls	r2, r3, #26
 8009d6c:	d430      	bmi.n	8009dd0 <obj_read+0xa0>
      /* Placing it on head.*/
      LRU_INSERT_HEAD(ocp, objp);
 8009d6e:	69c2      	ldr	r2, [r0, #28]
 8009d70:	f100 0114 	add.w	r1, r0, #20
 8009d74:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8009d78:	60d4      	str	r4, [r2, #12]
 8009d7a:	61c4      	str	r4, [r0, #28]
    }
    else {
      /* Low priority data, placing it on tail.*/
      LRU_INSERT_TAIL(ocp, objp);
    }
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8009d7c:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8009d80:	f043 0301 	orr.w	r3, r3, #1
 8009d84:	6263      	str	r3, [r4, #36]	; 0x24
  }

  /* Increasing the LRU counter semaphore.*/
  chSemSignalI(&ocp->lru_sem);
 8009d86:	3030      	adds	r0, #48	; 0x30
 8009d88:	f7fa fbca 	bl	8004520 <chSemSignalI>
  sp->cnt++;
 8009d8c:	6a23      	ldr	r3, [r4, #32]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	6223      	str	r3, [r4, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8009d92:	4b18      	ldr	r3, [pc, #96]	; (8009df4 <obj_read+0xc4>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	6892      	ldr	r2, [r2, #8]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d901      	bls.n	8009da4 <obj_read+0x74>
    __sch_reschedule_ahead();
 8009da0:	f7f9 ff0e 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8009da4:	2300      	movs	r3, #0
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	2000      	movs	r0, #0
 8009dac:	bd70      	pop	{r4, r5, r6, pc}
    objp->obj_group = 0U;
 8009dae:	2300      	movs	r3, #0
    HASH_REMOVE(objp);
 8009db0:	e9d4 1500 	ldrd	r1, r5, [r4]
    objp->obj_flags = OC_FLAG_INLRU;
 8009db4:	2601      	movs	r6, #1
    LRU_INSERT_TAIL(ocp, objp);
 8009db6:	6a02      	ldr	r2, [r0, #32]
    HASH_REMOVE(objp);
 8009db8:	6029      	str	r1, [r5, #0]
 8009dba:	604d      	str	r5, [r1, #4]
    LRU_INSERT_TAIL(ocp, objp);
 8009dbc:	f100 0114 	add.w	r1, r0, #20
 8009dc0:	60e2      	str	r2, [r4, #12]
 8009dc2:	60a1      	str	r1, [r4, #8]
 8009dc4:	6094      	str	r4, [r2, #8]
 8009dc6:	6204      	str	r4, [r0, #32]
    objp->obj_key   = 0U;
 8009dc8:	e9c4 3304 	strd	r3, r3, [r4, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 8009dcc:	6266      	str	r6, [r4, #36]	; 0x24
 8009dce:	e7da      	b.n	8009d86 <obj_read+0x56>
      LRU_INSERT_TAIL(ocp, objp);
 8009dd0:	6a02      	ldr	r2, [r0, #32]
 8009dd2:	f100 0114 	add.w	r1, r0, #20
 8009dd6:	e9c4 1202 	strd	r1, r2, [r4, #8]
 8009dda:	6094      	str	r4, [r2, #8]
 8009ddc:	6204      	str	r4, [r0, #32]
 8009dde:	e7cd      	b.n	8009d7c <obj_read+0x4c>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8009de0:	f003 031a 	and.w	r3, r3, #26
    chSemSignalI(&objp->obj_sem);
 8009de4:	f104 0018 	add.w	r0, r4, #24
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8009de8:	6263      	str	r3, [r4, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 8009dea:	f7fa fb99 	bl	8004520 <chSemSignalI>
    return;
 8009dee:	e7d0      	b.n	8009d92 <obj_read+0x62>
 8009df0:	20001134 	.word	0x20001134
 8009df4:	20001050 	.word	0x20001050
	...

08009e00 <chMBPostAheadTimeout.constprop.0>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8009e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e04:	2320      	movs	r3, #32
 8009e06:	4607      	mov	r7, r0
 8009e08:	4688      	mov	r8, r1
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	4c28      	ldr	r4, [pc, #160]	; (8009eb0 <chMBPostAheadTimeout.constprop.0+0xb0>)
  return __sch_get_currthread();
 8009e10:	4e28      	ldr	r6, [pc, #160]	; (8009eb4 <chMBPostAheadTimeout.constprop.0+0xb4>)
  p->next       = qp;
 8009e12:	f104 0518 	add.w	r5, r4, #24
 8009e16:	e011      	b.n	8009e3c <chMBPostAheadTimeout.constprop.0+0x3c>
  return mbp->cnt;
 8009e18:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8009e1a:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009e1e:	1a88      	subs	r0, r1, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8009e20:	ebb3 0fa0 	cmp.w	r3, r0, asr #2
 8009e24:	d114      	bne.n	8009e50 <chMBPostAheadTimeout.constprop.0+0x50>
 8009e26:	68f3      	ldr	r3, [r6, #12]
  p->prev       = qp->prev;
 8009e28:	69e2      	ldr	r2, [r4, #28]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8009e2a:	4641      	mov	r1, r8
 8009e2c:	e9c3 5200 	strd	r5, r2, [r3]
 8009e30:	2004      	movs	r0, #4
  p->prev->next = p;
 8009e32:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8009e34:	61e3      	str	r3, [r4, #28]
 8009e36:	f7f8 feab 	bl	8002b90 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 8009e3a:	b920      	cbnz	r0, 8009e46 <chMBPostAheadTimeout.constprop.0+0x46>
    if (mbp->reset) {
 8009e3c:	7d23      	ldrb	r3, [r4, #20]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d0ea      	beq.n	8009e18 <chMBPostAheadTimeout.constprop.0+0x18>
      return MSG_RESET;
 8009e42:	f06f 0001 	mvn.w	r0, #1
 8009e46:	2300      	movs	r3, #0
 8009e48:	f383 8811 	msr	BASEPRI, r3
}
 8009e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (--mbp->rdptr < mbp->buffer) {
 8009e50:	68e0      	ldr	r0, [r4, #12]
      mbp->cnt++;
 8009e52:	3301      	adds	r3, #1
      if (--mbp->rdptr < mbp->buffer) {
 8009e54:	3804      	subs	r0, #4
 8009e56:	4282      	cmp	r2, r0
        mbp->rdptr = mbp->top - 1;
 8009e58:	bf88      	it	hi
 8009e5a:	1f08      	subhi	r0, r1, #4
  return (bool)(qp->next != qp);
 8009e5c:	6a22      	ldr	r2, [r4, #32]
  if (ch_queue_notempty(&tqp->queue)) {
 8009e5e:	4916      	ldr	r1, [pc, #88]	; (8009eb8 <chMBPostAheadTimeout.constprop.0+0xb8>)
 8009e60:	60e0      	str	r0, [r4, #12]
 8009e62:	428a      	cmp	r2, r1
      *mbp->rdptr = msg;
 8009e64:	6007      	str	r7, [r0, #0]
      mbp->cnt++;
 8009e66:	6123      	str	r3, [r4, #16]
 8009e68:	d011      	beq.n	8009e8e <chMBPostAheadTimeout.constprop.0+0x8e>
  tp->u.rdymsg = msg;
 8009e6a:	2000      	movs	r0, #0
  qp->next       = p->next;
 8009e6c:	6815      	ldr	r5, [r2, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8009e6e:	6993      	ldr	r3, [r2, #24]
 8009e70:	6225      	str	r5, [r4, #32]
  } while (unlikely(pqp->prio >= p->prio));
 8009e72:	6894      	ldr	r4, [r2, #8]
  qp->next->prev = qp;
 8009e74:	6069      	str	r1, [r5, #4]
 8009e76:	6290      	str	r0, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8009e78:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
    pqp = pqp->next;
 8009e7c:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8009e7e:	6899      	ldr	r1, [r3, #8]
 8009e80:	42a1      	cmp	r1, r4
 8009e82:	d2fb      	bcs.n	8009e7c <chMBPostAheadTimeout.constprop.0+0x7c>
  p->prev       = pqp->prev;
 8009e84:	6859      	ldr	r1, [r3, #4]
 8009e86:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 8009e8a:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 8009e8c:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8009e8e:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <chMBPostAheadTimeout.constprop.0+0xb4>)
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	6892      	ldr	r2, [r2, #8]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d907      	bls.n	8009eac <chMBPostAheadTimeout.constprop.0+0xac>
    __sch_reschedule_ahead();
 8009e9c:	f7f9 fe90 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
      return MSG_OK;
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f383 8811 	msr	BASEPRI, r3
}
 8009ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MSG_OK;
 8009eac:	2000      	movs	r0, #0
 8009eae:	e7ca      	b.n	8009e46 <chMBPostAheadTimeout.constprop.0+0x46>
 8009eb0:	20000854 	.word	0x20000854
 8009eb4:	20001050 	.word	0x20001050
 8009eb8:	20000874 	.word	0x20000874
 8009ebc:	00000000 	.word	0x00000000

08009ec0 <oslib_test_006_001_execute.lto_priv.0>:
  sp->cnt = n;
 8009ec0:	2104      	movs	r1, #4
  ocp->hashn            = hashn;
 8009ec2:	2008      	movs	r0, #8
 * - [6.1.5] Checking cached objects.
 * - [6.1.6] Checking non-cached objects.
 * .
 */

static void oslib_test_006_001_execute(void) {
 8009ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ocp->lru.hash_next    = NULL;
 8009ec8:	2200      	movs	r2, #0
 8009eca:	2501      	movs	r5, #1
  qp->next = qp;
 8009ecc:	4c5a      	ldr	r4, [pc, #360]	; (800a038 <oslib_test_006_001_execute.lto_priv.0+0x178>)
  ocp->hashp            = hashp;
 8009ece:	4b5b      	ldr	r3, [pc, #364]	; (800a03c <oslib_test_006_001_execute.lto_priv.0+0x17c>)
 8009ed0:	63a1      	str	r1, [r4, #56]	; 0x38
  ocp->objn             = objn;
 8009ed2:	60a1      	str	r1, [r4, #8]
  ocp->readf            = readf;
 8009ed4:	495a      	ldr	r1, [pc, #360]	; (800a040 <oslib_test_006_001_execute.lto_priv.0+0x180>)
  ocp->hashn            = hashn;
 8009ed6:	6020      	str	r0, [r4, #0]
  ocp->readf            = readf;
 8009ed8:	63e1      	str	r1, [r4, #60]	; 0x3c
  ocp->writef           = writef;
 8009eda:	495a      	ldr	r1, [pc, #360]	; (800a044 <oslib_test_006_001_execute.lto_priv.0+0x184>)
  ocp->objvp            = objvp;
 8009edc:	485a      	ldr	r0, [pc, #360]	; (800a048 <oslib_test_006_001_execute.lto_priv.0+0x188>)
  ocp->writef           = writef;
 8009ede:	6421      	str	r1, [r4, #64]	; 0x40
 8009ee0:	f104 0124 	add.w	r1, r4, #36	; 0x24
  qp->prev = qp;
 8009ee4:	e9c4 1109 	strd	r1, r1, [r4, #36]	; 0x24
  qp->next = qp;
 8009ee8:	f104 0130 	add.w	r1, r4, #48	; 0x30
  qp->prev = qp;
 8009eec:	e9c4 110c 	strd	r1, r1, [r4, #48]	; 0x30
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8009ef0:	f104 0614 	add.w	r6, r4, #20
  ocp->lru.hash_prev    = NULL;
 8009ef4:	e9c4 2205 	strd	r2, r2, [r4, #20]
  ocp->hashp            = hashp;
 8009ef8:	6063      	str	r3, [r4, #4]
 8009efa:	62e5      	str	r5, [r4, #44]	; 0x2c
  ocp->objvp            = objvp;
 8009efc:	6120      	str	r0, [r4, #16]
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8009efe:	6226      	str	r6, [r4, #32]
 8009f00:	f103 0240 	add.w	r2, r3, #64	; 0x40
    hashp->hash_prev = (oc_object_t *)hashp;
 8009f04:	e9c3 3300 	strd	r3, r3, [r3]
    hashp++;
 8009f08:	3308      	adds	r3, #8
  } while (hashp < &ocp->hashp[ocp->hashn]);
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d1fa      	bne.n	8009f04 <oslib_test_006_001_execute.lto_priv.0+0x44>
 8009f0e:	4b4e      	ldr	r3, [pc, #312]	; (800a048 <oslib_test_006_001_execute.lto_priv.0+0x188>)
 8009f10:	2701      	movs	r7, #1
    objp->obj_group = 0U;
 8009f12:	2200      	movs	r2, #0
 8009f14:	494d      	ldr	r1, [pc, #308]	; (800a04c <oslib_test_006_001_execute.lto_priv.0+0x18c>)
 8009f16:	f103 0cf0 	add.w	ip, r3, #240	; 0xf0
 8009f1a:	e000      	b.n	8009f1e <oslib_test_006_001_execute.lto_priv.0+0x5e>
 8009f1c:	462b      	mov	r3, r5
    objvp = (void *)((uint8_t *)objvp + objsz);
 8009f1e:	f103 053c 	add.w	r5, r3, #60	; 0x3c
 8009f22:	f103 0018 	add.w	r0, r3, #24
  } while (objn > (ucnt_t)0);
 8009f26:	4565      	cmp	r5, ip
    LRU_INSERT_HEAD(ocp, objp);
 8009f28:	6099      	str	r1, [r3, #8]
 8009f2a:	e9c3 0006 	strd	r0, r0, [r3, #24]
 8009f2e:	621f      	str	r7, [r3, #32]
 8009f30:	60de      	str	r6, [r3, #12]
 8009f32:	60cb      	str	r3, [r1, #12]
 8009f34:	4619      	mov	r1, r3
    objp->obj_key   = 0U;
 8009f36:	e9c3 2204 	strd	r2, r2, [r3, #16]
    objp->dptr      = NULL;
 8009f3a:	e9c3 7209 	strd	r7, r2, [r3, #36]	; 0x24
  } while (objn > (ucnt_t)0);
 8009f3e:	d1ed      	bne.n	8009f1c <oslib_test_006_001_execute.lto_priv.0+0x5c>
                      obj_write);
  }
  test_end_step(1);

  /* [6.1.2] Getting and releasing objects without initialization.*/
  test_set_step(2);
 8009f40:	2302      	movs	r3, #2
 8009f42:	4a43      	ldr	r2, [pc, #268]	; (800a050 <oslib_test_006_001_execute.lto_priv.0+0x190>)
 8009f44:	4d43      	ldr	r5, [pc, #268]	; (800a054 <oslib_test_006_001_execute.lto_priv.0+0x194>)
  {
    uint32_t i;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8009f46:	f04f 0800 	mov.w	r8, #0
 8009f4a:	f04f 0920 	mov.w	r9, #32
  chSemSignalI(&ocp->lru_sem);
 8009f4e:	f8df a108 	ldr.w	sl, [pc, #264]	; 800a058 <oslib_test_006_001_execute.lto_priv.0+0x198>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8009f52:	4f42      	ldr	r7, [pc, #264]	; (800a05c <oslib_test_006_001_execute.lto_priv.0+0x19c>)
 8009f54:	61e2      	str	r2, [r4, #28]
  test_set_step(2);
 8009f56:	602b      	str	r3, [r5, #0]
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8009f58:	e02b      	b.n	8009fb2 <oslib_test_006_001_execute.lto_priv.0+0xf2>
    objp->obj_group = 0U;
 8009f5a:	2300      	movs	r3, #0
    objp->obj_flags = OC_FLAG_INLRU;
 8009f5c:	f04f 0c01 	mov.w	ip, #1
    LRU_INSERT_TAIL(ocp, objp);
 8009f60:	6a22      	ldr	r2, [r4, #32]
    HASH_REMOVE(objp);
 8009f62:	f8db 0004 	ldr.w	r0, [fp, #4]
 8009f66:	f8db 1000 	ldr.w	r1, [fp]
 8009f6a:	6001      	str	r1, [r0, #0]
 8009f6c:	6048      	str	r0, [r1, #4]
    LRU_INSERT_TAIL(ocp, objp);
 8009f6e:	e9cb 6202 	strd	r6, r2, [fp, #8]
 8009f72:	f8c2 b008 	str.w	fp, [r2, #8]
 8009f76:	f8c4 b020 	str.w	fp, [r4, #32]
    objp->obj_key   = 0U;
 8009f7a:	e9cb 3304 	strd	r3, r3, [fp, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 8009f7e:	f8cb c024 	str.w	ip, [fp, #36]	; 0x24
  chSemSignalI(&ocp->lru_sem);
 8009f82:	4650      	mov	r0, sl
 8009f84:	f7fa facc 	bl	8004520 <chSemSignalI>
 8009f88:	f8db 3020 	ldr.w	r3, [fp, #32]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	f8cb 3020 	str.w	r3, [fp, #32]
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6892      	ldr	r2, [r2, #8]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d901      	bls.n	8009fa2 <oslib_test_006_001_execute.lto_priv.0+0xe2>
    __sch_reschedule_ahead();
 8009f9e:	f7f9 fe0f 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f108 0801 	add.w	r8, r8, #1
 8009fac:	f1b8 0f08 	cmp.w	r8, #8
 8009fb0:	d05a      	beq.n	800a068 <oslib_test_006_001_execute.lto_priv.0+0x1a8>
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	f7ff fc4c 	bl	8009850 <chCacheGetObject.constprop.0>

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8009fb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 8009fba:	4683      	mov	fp, r0
  if (!condition) {
 8009fbc:	0798      	lsls	r0, r3, #30
 8009fbe:	d51b      	bpl.n	8009ff8 <oslib_test_006_001_execute.lto_priv.0+0x138>
 8009fc0:	0719      	lsls	r1, r3, #28
 8009fc2:	d520      	bpl.n	800a006 <oslib_test_006_001_execute.lto_priv.0+0x146>
 8009fc4:	f389 8811 	msr	BASEPRI, r9
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8009fc8:	f8db 3020 	ldr.w	r3, [fp, #32]
 8009fcc:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8009fce:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8009fd2:	db27      	blt.n	800a024 <oslib_test_006_001_execute.lto_priv.0+0x164>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8009fd4:	071a      	lsls	r2, r3, #28
 8009fd6:	d4c0      	bmi.n	8009f5a <oslib_test_006_001_execute.lto_priv.0+0x9a>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 8009fd8:	0698      	lsls	r0, r3, #26
 8009fda:	d41b      	bmi.n	800a014 <oslib_test_006_001_execute.lto_priv.0+0x154>
      LRU_INSERT_HEAD(ocp, objp);
 8009fdc:	69e2      	ldr	r2, [r4, #28]
 8009fde:	e9cb 2602 	strd	r2, r6, [fp, #8]
 8009fe2:	f8c2 b00c 	str.w	fp, [r2, #12]
 8009fe6:	f8c4 b01c 	str.w	fp, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8009fea:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8009fee:	f043 0301 	orr.w	r3, r3, #1
 8009ff2:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8009ff6:	e7c4      	b.n	8009f82 <oslib_test_006_001_execute.lto_priv.0+0xc2>
  chtest.global_fail     = true;
 8009ff8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8009ffc:	4a18      	ldr	r2, [pc, #96]	; (800a060 <oslib_test_006_001_execute.lto_priv.0+0x1a0>)
  chtest.global_fail     = true;
 8009ffe:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800a000:	60aa      	str	r2, [r5, #8]
    }

    test_assert_sequence("", "unexpected tokens");
  }
  test_end_step(6);
}
 800a002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.global_fail     = true;
 800a006:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800a00a:	4a16      	ldr	r2, [pc, #88]	; (800a064 <oslib_test_006_001_execute.lto_priv.0+0x1a4>)
  chtest.global_fail     = true;
 800a00c:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800a00e:	60aa      	str	r2, [r5, #8]
 800a010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LRU_INSERT_TAIL(ocp, objp);
 800a014:	6a22      	ldr	r2, [r4, #32]
 800a016:	e9cb 6202 	strd	r6, r2, [fp, #8]
 800a01a:	f8c2 b008 	str.w	fp, [r2, #8]
 800a01e:	f8c4 b020 	str.w	fp, [r4, #32]
 800a022:	e7e2      	b.n	8009fea <oslib_test_006_001_execute.lto_priv.0+0x12a>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a024:	f003 031a 	and.w	r3, r3, #26
 800a028:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800a02c:	f10b 0018 	add.w	r0, fp, #24
 800a030:	f7fa fa76 	bl	8004520 <chSemSignalI>
    return;
 800a034:	e7ad      	b.n	8009f92 <oslib_test_006_001_execute.lto_priv.0+0xd2>
 800a036:	bf00      	nop
 800a038:	20001e0c 	.word	0x20001e0c
 800a03c:	2000247c 	.word	0x2000247c
 800a040:	08009d31 	.word	0x08009d31
 800a044:	08008f21 	.word	0x08008f21
 800a048:	20002554 	.word	0x20002554
 800a04c:	20001e20 	.word	0x20001e20
 800a050:	20002608 	.word	0x20002608
 800a054:	20001134 	.word	0x20001134
 800a058:	20001e3c 	.word	0x20001e3c
 800a05c:	20001050 	.word	0x20001050
 800a060:	080128b4 	.word	0x080128b4
 800a064:	080128c0 	.word	0x080128c0
    test_assert_sequence("", "unexpected tokens");
 800a068:	49b1      	ldr	r1, [pc, #708]	; (800a330 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 800a06a:	48b2      	ldr	r0, [pc, #712]	; (800a334 <oslib_test_006_001_execute.lto_priv.0+0x474>)
 800a06c:	f7fc ffb8 	bl	8006fe0 <__test_assert_sequence>
 800a070:	4681      	mov	r9, r0
 800a072:	2800      	cmp	r0, #0
 800a074:	d1c5      	bne.n	800a002 <oslib_test_006_001_execute.lto_priv.0+0x142>
  test_set_step(3);
 800a076:	2303      	movs	r3, #3
  /* Marking it as OC_FLAG_NOTSYNC because the read operation is going
     to corrupt it in case of failure. It is responsibility of the read
     implementation to clear it if the operation succeeds.*/
  objp->obj_flags |= OC_FLAG_NOTSYNC;

  return ocp->readf(ocp, objp, async);
 800a078:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 800a338 <oslib_test_006_001_execute.lto_priv.0+0x478>
 800a07c:	602b      	str	r3, [r5, #0]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800a07e:	4648      	mov	r0, r9
 800a080:	f7ff fbe6 	bl	8009850 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800a084:	6a43      	ldr	r3, [r0, #36]	; 0x24
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800a086:	4683      	mov	fp, r0
  if (!condition) {
 800a088:	0799      	lsls	r1, r3, #30
 800a08a:	d5b5      	bpl.n	8009ff8 <oslib_test_006_001_execute.lto_priv.0+0x138>
 800a08c:	071a      	lsls	r2, r3, #28
 800a08e:	f140 813d 	bpl.w	800a30c <oslib_test_006_001_execute.lto_priv.0+0x44c>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 800a092:	f043 0308 	orr.w	r3, r3, #8
 800a096:	6243      	str	r3, [r0, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 800a098:	4601      	mov	r1, r0
 800a09a:	2200      	movs	r2, #0
 800a09c:	4650      	mov	r0, sl
 800a09e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a0a0:	4798      	blx	r3
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	f040 813e 	bne.w	800a324 <oslib_test_006_001_execute.lto_priv.0+0x464>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800a0a8:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800a0ac:	0798      	lsls	r0, r3, #30
 800a0ae:	d5a3      	bpl.n	8009ff8 <oslib_test_006_001_execute.lto_priv.0+0x138>
 800a0b0:	f013 0808 	ands.w	r8, r3, #8
 800a0b4:	f040 8130 	bne.w	800a318 <oslib_test_006_001_execute.lto_priv.0+0x458>
 800a0b8:	2320      	movs	r3, #32
 800a0ba:	f383 8811 	msr	BASEPRI, r3
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a0be:	f8db 3020 	ldr.w	r3, [fp, #32]
 800a0c2:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a0c4:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a0c8:	f2c0 815a 	blt.w	800a380 <oslib_test_006_001_execute.lto_priv.0+0x4c0>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800a0cc:	0719      	lsls	r1, r3, #28
 800a0ce:	f140 813f 	bpl.w	800a350 <oslib_test_006_001_execute.lto_priv.0+0x490>
    HASH_REMOVE(objp);
 800a0d2:	e9db 2100 	ldrd	r2, r1, [fp]
    objp->obj_flags = OC_FLAG_INLRU;
 800a0d6:	2001      	movs	r0, #1
    LRU_INSERT_TAIL(ocp, objp);
 800a0d8:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 800a0da:	600a      	str	r2, [r1, #0]
 800a0dc:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 800a0de:	e9cb 6302 	strd	r6, r3, [fp, #8]
 800a0e2:	f8c3 b008 	str.w	fp, [r3, #8]
 800a0e6:	f8c4 b020 	str.w	fp, [r4, #32]
    objp->obj_key   = 0U;
 800a0ea:	e9cb 8804 	strd	r8, r8, [fp, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 800a0ee:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
  chSemSignalI(&ocp->lru_sem);
 800a0f2:	4892      	ldr	r0, [pc, #584]	; (800a33c <oslib_test_006_001_execute.lto_priv.0+0x47c>)
 800a0f4:	f7fa fa14 	bl	8004520 <chSemSignalI>
 800a0f8:	f8db 3020 	ldr.w	r3, [fp, #32]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	f8cb 3020 	str.w	r3, [fp, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	689a      	ldr	r2, [r3, #8]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d901      	bls.n	800a112 <oslib_test_006_001_execute.lto_priv.0+0x252>
    __sch_reschedule_ahead();
 800a10e:	f7f9 fd57 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800a112:	2300      	movs	r3, #0
 800a114:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800a118:	f109 0901 	add.w	r9, r9, #1
 800a11c:	f1b9 0f08 	cmp.w	r9, #8
 800a120:	d1ad      	bne.n	800a07e <oslib_test_006_001_execute.lto_priv.0+0x1be>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 800a122:	4983      	ldr	r1, [pc, #524]	; (800a330 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 800a124:	4886      	ldr	r0, [pc, #536]	; (800a340 <oslib_test_006_001_execute.lto_priv.0+0x480>)
 800a126:	f7fc ff5b 	bl	8006fe0 <__test_assert_sequence>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	f47f af69 	bne.w	800a002 <oslib_test_006_001_execute.lto_priv.0+0x142>
  test_set_step(4);
 800a130:	2304      	movs	r3, #4
  return ocp->readf(ocp, objp, async);
 800a132:	f04f 0b01 	mov.w	fp, #1
 800a136:	f04f 0a20 	mov.w	sl, #32
 800a13a:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 800a338 <oslib_test_006_001_execute.lto_priv.0+0x478>
 800a13e:	602b      	str	r3, [r5, #0]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800a140:	4640      	mov	r0, r8
 800a142:	f7ff fb85 	bl	8009850 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800a146:	6a43      	ldr	r3, [r0, #36]	; 0x24
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800a148:	4601      	mov	r1, r0
 800a14a:	0798      	lsls	r0, r3, #30
 800a14c:	f57f af54 	bpl.w	8009ff8 <oslib_test_006_001_execute.lto_priv.0+0x138>
 800a150:	071a      	lsls	r2, r3, #28
 800a152:	f140 80db 	bpl.w	800a30c <oslib_test_006_001_execute.lto_priv.0+0x44c>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 800a156:	f043 0308 	orr.w	r3, r3, #8
 800a15a:	624b      	str	r3, [r1, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 800a15c:	2201      	movs	r2, #1
 800a15e:	4648      	mov	r0, r9
 800a160:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a162:	4798      	blx	r3
 800a164:	2800      	cmp	r0, #0
 800a166:	f040 80dd 	bne.w	800a324 <oslib_test_006_001_execute.lto_priv.0+0x464>
      objp = chCacheGetObject(&cache1, 0U, i);
 800a16a:	4640      	mov	r0, r8
 800a16c:	f7ff fb70 	bl	8009850 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800a170:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a172:	0793      	lsls	r3, r2, #30
 800a174:	f57f af40 	bpl.w	8009ff8 <oslib_test_006_001_execute.lto_priv.0+0x138>
 800a178:	f012 0208 	ands.w	r2, r2, #8
 800a17c:	f040 80cc 	bne.w	800a318 <oslib_test_006_001_execute.lto_priv.0+0x458>
 800a180:	f38a 8811 	msr	BASEPRI, sl
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a184:	6a03      	ldr	r3, [r0, #32]
 800a186:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a188:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a18a:	f2c0 8132 	blt.w	800a3f2 <oslib_test_006_001_execute.lto_priv.0+0x532>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800a18e:	0719      	lsls	r1, r3, #28
 800a190:	f140 80ff 	bpl.w	800a392 <oslib_test_006_001_execute.lto_priv.0+0x4d2>
    HASH_REMOVE(objp);
 800a194:	e9d0 1c00 	ldrd	r1, ip, [r0]
    LRU_INSERT_TAIL(ocp, objp);
 800a198:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 800a19a:	f8cc 1000 	str.w	r1, [ip]
 800a19e:	f8c1 c004 	str.w	ip, [r1, #4]
    LRU_INSERT_TAIL(ocp, objp);
 800a1a2:	e9c0 6302 	strd	r6, r3, [r0, #8]
 800a1a6:	6098      	str	r0, [r3, #8]
  if (++sp->cnt <= (cnt_t)0) {
 800a1a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a1aa:	6220      	str	r0, [r4, #32]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	2b00      	cmp	r3, #0
    objp->obj_key   = 0U;
 800a1b0:	e9c0 2204 	strd	r2, r2, [r0, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 800a1b4:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
 800a1b8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a1ba:	f340 80fc 	ble.w	800a3b6 <oslib_test_006_001_execute.lto_priv.0+0x4f6>
 800a1be:	6a03      	ldr	r3, [r0, #32]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	6203      	str	r3, [r0, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	689a      	ldr	r2, [r3, #8]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d901      	bls.n	800a1d4 <oslib_test_006_001_execute.lto_priv.0+0x314>
    __sch_reschedule_ahead();
 800a1d0:	f7f9 fcf6 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800a1da:	f108 0801 	add.w	r8, r8, #1
 800a1de:	f1b8 0f08 	cmp.w	r8, #8
 800a1e2:	d1ad      	bne.n	800a140 <oslib_test_006_001_execute.lto_priv.0+0x280>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 800a1e4:	4952      	ldr	r1, [pc, #328]	; (800a330 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 800a1e6:	4856      	ldr	r0, [pc, #344]	; (800a340 <oslib_test_006_001_execute.lto_priv.0+0x480>)
 800a1e8:	f7fc fefa 	bl	8006fe0 <__test_assert_sequence>
 800a1ec:	4681      	mov	r9, r0
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f47f af07 	bne.w	800a002 <oslib_test_006_001_execute.lto_priv.0+0x142>
  test_set_step(5);
 800a1f4:	2305      	movs	r3, #5
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 800a1f6:	f04f 0b04 	mov.w	fp, #4
 800a1fa:	f04f 0a20 	mov.w	sl, #32
  test_set_step(5);
 800a1fe:	602b      	str	r3, [r5, #0]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800a200:	4658      	mov	r0, fp
 800a202:	f7ff fb25 	bl	8009850 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800a206:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a208:	0799      	lsls	r1, r3, #30
 800a20a:	f57f aef5 	bpl.w	8009ff8 <oslib_test_006_001_execute.lto_priv.0+0x138>
 800a20e:	f013 0808 	ands.w	r8, r3, #8
 800a212:	f040 8081 	bne.w	800a318 <oslib_test_006_001_execute.lto_priv.0+0x458>
 800a216:	f38a 8811 	msr	BASEPRI, sl
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a21a:	6a03      	ldr	r3, [r0, #32]
 800a21c:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a21e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a220:	f2c0 8124 	blt.w	800a46c <oslib_test_006_001_execute.lto_priv.0+0x5ac>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800a224:	071a      	lsls	r2, r3, #28
 800a226:	f140 80eb 	bpl.w	800a400 <oslib_test_006_001_execute.lto_priv.0+0x540>
    HASH_REMOVE(objp);
 800a22a:	e9d0 2100 	ldrd	r2, r1, [r0]
    LRU_INSERT_TAIL(ocp, objp);
 800a22e:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 800a230:	600a      	str	r2, [r1, #0]
 800a232:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 800a234:	e9c0 6302 	strd	r6, r3, [r0, #8]
 800a238:	6098      	str	r0, [r3, #8]
    objp->obj_flags = OC_FLAG_INLRU;
 800a23a:	2301      	movs	r3, #1
    LRU_INSERT_TAIL(ocp, objp);
 800a23c:	6220      	str	r0, [r4, #32]
    objp->obj_key   = 0U;
 800a23e:	e9c0 8804 	strd	r8, r8, [r0, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 800a242:	6243      	str	r3, [r0, #36]	; 0x24
 800a244:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a246:	3301      	adds	r3, #1
 800a248:	2b00      	cmp	r3, #0
 800a24a:	63a3      	str	r3, [r4, #56]	; 0x38
 800a24c:	f340 80f8 	ble.w	800a440 <oslib_test_006_001_execute.lto_priv.0+0x580>
 800a250:	6a03      	ldr	r3, [r0, #32]
 800a252:	3301      	adds	r3, #1
 800a254:	6203      	str	r3, [r0, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	689a      	ldr	r2, [r3, #8]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d901      	bls.n	800a266 <oslib_test_006_001_execute.lto_priv.0+0x3a6>
    __sch_reschedule_ahead();
 800a262:	f7f9 fcad 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800a266:	f389 8811 	msr	BASEPRI, r9
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 800a26a:	f10b 0b01 	add.w	fp, fp, #1
 800a26e:	f1bb 0f08 	cmp.w	fp, #8
 800a272:	d1c5      	bne.n	800a200 <oslib_test_006_001_execute.lto_priv.0+0x340>
    test_assert_sequence("", "unexpected tokens");
 800a274:	492e      	ldr	r1, [pc, #184]	; (800a330 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 800a276:	482f      	ldr	r0, [pc, #188]	; (800a334 <oslib_test_006_001_execute.lto_priv.0+0x474>)
 800a278:	f7fc feb2 	bl	8006fe0 <__test_assert_sequence>
 800a27c:	4681      	mov	r9, r0
 800a27e:	2800      	cmp	r0, #0
 800a280:	f47f aebf 	bne.w	800a002 <oslib_test_006_001_execute.lto_priv.0+0x142>
  test_set_step(6);
 800a284:	2306      	movs	r3, #6
 800a286:	f04f 0a20 	mov.w	sl, #32
 800a28a:	f04f 0b01 	mov.w	fp, #1
 800a28e:	602b      	str	r3, [r5, #0]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800a290:	4640      	mov	r0, r8
 800a292:	f7ff fadd 	bl	8009850 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800a296:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a298:	079a      	lsls	r2, r3, #30
 800a29a:	f57f aead 	bpl.w	8009ff8 <oslib_test_006_001_execute.lto_priv.0+0x138>
 800a29e:	071b      	lsls	r3, r3, #28
 800a2a0:	d534      	bpl.n	800a30c <oslib_test_006_001_execute.lto_priv.0+0x44c>
 800a2a2:	f38a 8811 	msr	BASEPRI, sl
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a2a6:	6a03      	ldr	r3, [r0, #32]
 800a2a8:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a2aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a2ac:	f2c0 8101 	blt.w	800a4b2 <oslib_test_006_001_execute.lto_priv.0+0x5f2>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800a2b0:	0719      	lsls	r1, r3, #28
 800a2b2:	f140 80b8 	bpl.w	800a426 <oslib_test_006_001_execute.lto_priv.0+0x566>
    HASH_REMOVE(objp);
 800a2b6:	e9d0 2100 	ldrd	r2, r1, [r0]
    LRU_INSERT_TAIL(ocp, objp);
 800a2ba:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 800a2bc:	600a      	str	r2, [r1, #0]
 800a2be:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 800a2c0:	e9c0 6302 	strd	r6, r3, [r0, #8]
 800a2c4:	6098      	str	r0, [r3, #8]
 800a2c6:	6220      	str	r0, [r4, #32]
    objp->obj_key   = 0U;
 800a2c8:	e9c0 9904 	strd	r9, r9, [r0, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 800a2cc:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
 800a2d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	63a3      	str	r3, [r4, #56]	; 0x38
 800a2d8:	f340 80cf 	ble.w	800a47a <oslib_test_006_001_execute.lto_priv.0+0x5ba>
 800a2dc:	6a03      	ldr	r3, [r0, #32]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	6203      	str	r3, [r0, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	689a      	ldr	r2, [r3, #8]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d901      	bls.n	800a2f2 <oslib_test_006_001_execute.lto_priv.0+0x432>
    __sch_reschedule_ahead();
 800a2ee:	f7f9 fc67 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800a2f2:	f389 8811 	msr	BASEPRI, r9
    for (i = 0; i < NUM_OBJECTS; i++) {
 800a2f6:	f108 0801 	add.w	r8, r8, #1
 800a2fa:	f1b8 0f04 	cmp.w	r8, #4
 800a2fe:	d1c7      	bne.n	800a290 <oslib_test_006_001_execute.lto_priv.0+0x3d0>
}
 800a300:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("", "unexpected tokens");
 800a304:	490a      	ldr	r1, [pc, #40]	; (800a330 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 800a306:	480b      	ldr	r0, [pc, #44]	; (800a334 <oslib_test_006_001_execute.lto_priv.0+0x474>)
 800a308:	f7fc be6a 	b.w	8006fe0 <__test_assert_sequence>
  chtest.global_fail     = true;
 800a30c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800a310:	4a0c      	ldr	r2, [pc, #48]	; (800a344 <oslib_test_006_001_execute.lto_priv.0+0x484>)
  chtest.global_fail     = true;
 800a312:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800a314:	60aa      	str	r2, [r5, #8]
 800a316:	e674      	b.n	800a002 <oslib_test_006_001_execute.lto_priv.0+0x142>
  chtest.global_fail     = true;
 800a318:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800a31c:	4a0a      	ldr	r2, [pc, #40]	; (800a348 <oslib_test_006_001_execute.lto_priv.0+0x488>)
  chtest.global_fail     = true;
 800a31e:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800a320:	60aa      	str	r2, [r5, #8]
 800a322:	e66e      	b.n	800a002 <oslib_test_006_001_execute.lto_priv.0+0x142>
  chtest.global_fail     = true;
 800a324:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800a328:	4a08      	ldr	r2, [pc, #32]	; (800a34c <oslib_test_006_001_execute.lto_priv.0+0x48c>)
  chtest.global_fail     = true;
 800a32a:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800a32c:	60aa      	str	r2, [r5, #8]
 800a32e:	e668      	b.n	800a002 <oslib_test_006_001_execute.lto_priv.0+0x142>
 800a330:	080128d8 	.word	0x080128d8
 800a334:	08010190 	.word	0x08010190
 800a338:	20001e0c 	.word	0x20001e0c
 800a33c:	20001e3c 	.word	0x20001e3c
 800a340:	08012908 	.word	0x08012908
 800a344:	08012900 	.word	0x08012900
 800a348:	080128fc 	.word	0x080128fc
 800a34c:	080128ec 	.word	0x080128ec
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800a350:	069a      	lsls	r2, r3, #26
 800a352:	d40d      	bmi.n	800a370 <oslib_test_006_001_execute.lto_priv.0+0x4b0>
      LRU_INSERT_HEAD(ocp, objp);
 800a354:	69e2      	ldr	r2, [r4, #28]
 800a356:	e9cb 2602 	strd	r2, r6, [fp, #8]
 800a35a:	f8c2 b00c 	str.w	fp, [r2, #12]
 800a35e:	f8c4 b01c 	str.w	fp, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 800a362:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800a366:	f043 0301 	orr.w	r3, r3, #1
 800a36a:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 800a36e:	e6c0      	b.n	800a0f2 <oslib_test_006_001_execute.lto_priv.0+0x232>
      LRU_INSERT_TAIL(ocp, objp);
 800a370:	6a22      	ldr	r2, [r4, #32]
 800a372:	e9cb 6202 	strd	r6, r2, [fp, #8]
 800a376:	f8c2 b008 	str.w	fp, [r2, #8]
 800a37a:	f8c4 b020 	str.w	fp, [r4, #32]
 800a37e:	e7f0      	b.n	800a362 <oslib_test_006_001_execute.lto_priv.0+0x4a2>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a380:	f003 031a 	and.w	r3, r3, #26
 800a384:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800a388:	f10b 0018 	add.w	r0, fp, #24
 800a38c:	f7fa f8c8 	bl	8004520 <chSemSignalI>
    return;
 800a390:	e6b7      	b.n	800a102 <oslib_test_006_001_execute.lto_priv.0+0x242>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800a392:	069a      	lsls	r2, r3, #26
 800a394:	d427      	bmi.n	800a3e6 <oslib_test_006_001_execute.lto_priv.0+0x526>
      LRU_INSERT_HEAD(ocp, objp);
 800a396:	69e2      	ldr	r2, [r4, #28]
 800a398:	e9c0 2602 	strd	r2, r6, [r0, #8]
 800a39c:	60d0      	str	r0, [r2, #12]
 800a39e:	61e0      	str	r0, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 800a3a0:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800a3a4:	f043 0301 	orr.w	r3, r3, #1
 800a3a8:	6243      	str	r3, [r0, #36]	; 0x24
 800a3aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	63a3      	str	r3, [r4, #56]	; 0x38
 800a3b2:	f73f af04 	bgt.w	800a1be <oslib_test_006_001_execute.lto_priv.0+0x2fe>
    tp->u.rdymsg = MSG_OK;
 800a3b6:	2100      	movs	r1, #0
  ch_queue_t *p = qp->next;
 800a3b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800a3ba:	f8df c104 	ldr.w	ip, [pc, #260]	; 800a4c0 <oslib_test_006_001_execute.lto_priv.0+0x600>
  qp->next       = p->next;
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	6322      	str	r2, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800a3c2:	f8c2 c004 	str.w	ip, [r2, #4]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800a3c6:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800a3c8:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800a3cc:	6299      	str	r1, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800a3ce:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 800a3d2:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800a3d4:	6891      	ldr	r1, [r2, #8]
 800a3d6:	4561      	cmp	r1, ip
 800a3d8:	d2fb      	bcs.n	800a3d2 <oslib_test_006_001_execute.lto_priv.0+0x512>
  p->prev       = pqp->prev;
 800a3da:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 800a3dc:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800a3de:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 800a3e0:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800a3e2:	6053      	str	r3, [r2, #4]
  return __sch_ready_behind(tp);
 800a3e4:	e6eb      	b.n	800a1be <oslib_test_006_001_execute.lto_priv.0+0x2fe>
      LRU_INSERT_TAIL(ocp, objp);
 800a3e6:	6a22      	ldr	r2, [r4, #32]
 800a3e8:	e9c0 6202 	strd	r6, r2, [r0, #8]
 800a3ec:	6090      	str	r0, [r2, #8]
 800a3ee:	6220      	str	r0, [r4, #32]
 800a3f0:	e7d6      	b.n	800a3a0 <oslib_test_006_001_execute.lto_priv.0+0x4e0>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a3f2:	f003 031a 	and.w	r3, r3, #26
 800a3f6:	6243      	str	r3, [r0, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800a3f8:	3018      	adds	r0, #24
 800a3fa:	f7fa f891 	bl	8004520 <chSemSignalI>
    return;
 800a3fe:	e6e1      	b.n	800a1c4 <oslib_test_006_001_execute.lto_priv.0+0x304>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800a400:	0699      	lsls	r1, r3, #26
 800a402:	d50a      	bpl.n	800a41a <oslib_test_006_001_execute.lto_priv.0+0x55a>
      LRU_INSERT_TAIL(ocp, objp);
 800a404:	6a22      	ldr	r2, [r4, #32]
 800a406:	e9c0 6202 	strd	r6, r2, [r0, #8]
 800a40a:	6090      	str	r0, [r2, #8]
 800a40c:	6220      	str	r0, [r4, #32]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 800a40e:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800a412:	f043 0301 	orr.w	r3, r3, #1
 800a416:	6243      	str	r3, [r0, #36]	; 0x24
 800a418:	e714      	b.n	800a244 <oslib_test_006_001_execute.lto_priv.0+0x384>
      LRU_INSERT_HEAD(ocp, objp);
 800a41a:	69e2      	ldr	r2, [r4, #28]
 800a41c:	e9c0 2602 	strd	r2, r6, [r0, #8]
 800a420:	60d0      	str	r0, [r2, #12]
 800a422:	61e0      	str	r0, [r4, #28]
 800a424:	e7f3      	b.n	800a40e <oslib_test_006_001_execute.lto_priv.0+0x54e>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800a426:	069a      	lsls	r2, r3, #26
 800a428:	d43d      	bmi.n	800a4a6 <oslib_test_006_001_execute.lto_priv.0+0x5e6>
      LRU_INSERT_HEAD(ocp, objp);
 800a42a:	69e2      	ldr	r2, [r4, #28]
 800a42c:	e9c0 2602 	strd	r2, r6, [r0, #8]
 800a430:	60d0      	str	r0, [r2, #12]
 800a432:	61e0      	str	r0, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 800a434:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800a438:	f043 0301 	orr.w	r3, r3, #1
 800a43c:	6243      	str	r3, [r0, #36]	; 0x24
 800a43e:	e747      	b.n	800a2d0 <oslib_test_006_001_execute.lto_priv.0+0x410>
  ch_queue_t *p = qp->next;
 800a440:	6b22      	ldr	r2, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800a442:	491f      	ldr	r1, [pc, #124]	; (800a4c0 <oslib_test_006_001_execute.lto_priv.0+0x600>)
  qp->next       = p->next;
 800a444:	6813      	ldr	r3, [r2, #0]
 800a446:	6323      	str	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800a448:	6059      	str	r1, [r3, #4]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800a44a:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800a44c:	6893      	ldr	r3, [r2, #8]
 800a44e:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800a452:	f882 9024 	strb.w	r9, [r2, #36]	; 0x24
    pqp = pqp->next;
 800a456:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800a458:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a45c:	459c      	cmp	ip, r3
 800a45e:	d2fa      	bcs.n	800a456 <oslib_test_006_001_execute.lto_priv.0+0x596>
  p->prev       = pqp->prev;
 800a460:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 800a462:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 800a464:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 800a466:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 800a468:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 800a46a:	e6f1      	b.n	800a250 <oslib_test_006_001_execute.lto_priv.0+0x390>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a46c:	f003 031a 	and.w	r3, r3, #26
 800a470:	6243      	str	r3, [r0, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800a472:	3018      	adds	r0, #24
 800a474:	f7fa f854 	bl	8004520 <chSemSignalI>
    return;
 800a478:	e6ed      	b.n	800a256 <oslib_test_006_001_execute.lto_priv.0+0x396>
  ch_queue_t *p = qp->next;
 800a47a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800a47c:	4910      	ldr	r1, [pc, #64]	; (800a4c0 <oslib_test_006_001_execute.lto_priv.0+0x600>)
  qp->next       = p->next;
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	6322      	str	r2, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800a482:	6051      	str	r1, [r2, #4]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800a484:	6999      	ldr	r1, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800a486:	689a      	ldr	r2, [r3, #8]
 800a488:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800a48c:	f883 9024 	strb.w	r9, [r3, #36]	; 0x24
    pqp = pqp->next;
 800a490:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800a492:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a496:	4594      	cmp	ip, r2
 800a498:	d2fa      	bcs.n	800a490 <oslib_test_006_001_execute.lto_priv.0+0x5d0>
  p->prev       = pqp->prev;
 800a49a:	684a      	ldr	r2, [r1, #4]
  p->next       = pqp;
 800a49c:	6019      	str	r1, [r3, #0]
  p->prev       = pqp->prev;
 800a49e:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 800a4a0:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 800a4a2:	604b      	str	r3, [r1, #4]
  return __sch_ready_behind(tp);
 800a4a4:	e71a      	b.n	800a2dc <oslib_test_006_001_execute.lto_priv.0+0x41c>
      LRU_INSERT_TAIL(ocp, objp);
 800a4a6:	6a22      	ldr	r2, [r4, #32]
 800a4a8:	e9c0 6202 	strd	r6, r2, [r0, #8]
 800a4ac:	6090      	str	r0, [r2, #8]
 800a4ae:	6220      	str	r0, [r4, #32]
 800a4b0:	e7c0      	b.n	800a434 <oslib_test_006_001_execute.lto_priv.0+0x574>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a4b2:	f003 031a 	and.w	r3, r3, #26
 800a4b6:	6243      	str	r3, [r0, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800a4b8:	3018      	adds	r0, #24
 800a4ba:	f7fa f831 	bl	8004520 <chSemSignalI>
    return;
 800a4be:	e710      	b.n	800a2e2 <oslib_test_006_001_execute.lto_priv.0+0x422>
 800a4c0:	20001e3c 	.word	0x20001e3c
	...

0800a4d0 <oslib_test_002_001_execute.lto_priv.0>:
  test_set_step(1);
 800a4d0:	2101      	movs	r1, #1
static void oslib_test_002_001_execute(void) {
 800a4d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 800a4d6:	4dba      	ldr	r5, [pc, #744]	; (800a7c0 <oslib_test_002_001_execute.lto_priv.0+0x2f0>)
 800a4d8:	2020      	movs	r0, #32
static void oslib_test_002_001_execute(void) {
 800a4da:	b083      	sub	sp, #12
  test_set_step(1);
 800a4dc:	6029      	str	r1, [r5, #0]
 800a4de:	f380 8811 	msr	BASEPRI, r0
 800a4e2:	4cb8      	ldr	r4, [pc, #736]	; (800a7c4 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
 800a4e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a4e8:	1a9a      	subs	r2, r3, r2
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a4ea:	6923      	ldr	r3, [r4, #16]
 800a4ec:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  if (!condition) {
 800a4f0:	2b04      	cmp	r3, #4
 800a4f2:	f040 815a 	bne.w	800a7aa <oslib_test_002_001_execute.lto_priv.0+0x2da>
 800a4f6:	f04f 0c00 	mov.w	ip, #0
 800a4fa:	f38c 8811 	msr	BASEPRI, ip
  test_set_step(2);
 800a4fe:	2302      	movs	r3, #2
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	f380 8811 	msr	BASEPRI, r0
  return (bool)(qp->next != qp);
 800a506:	4626      	mov	r6, r4
  mbp->reset = true;
 800a508:	7521      	strb	r1, [r4, #20]
 800a50a:	f856 1f18 	ldr.w	r1, [r6, #24]!
  mbp->wrptr = mbp->buffer;
 800a50e:	6823      	ldr	r3, [r4, #0]
  while (ch_queue_notempty(&tqp->queue)) {
 800a510:	42b1      	cmp	r1, r6
  mbp->rdptr = mbp->buffer;
 800a512:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 800a516:	f8c4 c010 	str.w	ip, [r4, #16]
 800a51a:	d016      	beq.n	800a54a <oslib_test_002_001_execute.lto_priv.0+0x7a>
 800a51c:	f06f 0e01 	mvn.w	lr, #1
 800a520:	460b      	mov	r3, r1
  qp->next       = p->next;
 800a522:	6809      	ldr	r1, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800a524:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800a526:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 800a528:	61a1      	str	r1, [r4, #24]
  qp->next->prev = qp;
 800a52a:	604e      	str	r6, [r1, #4]
 800a52c:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800a530:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
    pqp = pqp->next;
 800a534:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800a536:	6890      	ldr	r0, [r2, #8]
 800a538:	42b8      	cmp	r0, r7
 800a53a:	d2fb      	bcs.n	800a534 <oslib_test_002_001_execute.lto_priv.0+0x64>
  p->prev       = pqp->prev;
 800a53c:	6850      	ldr	r0, [r2, #4]
 800a53e:	42b1      	cmp	r1, r6
 800a540:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800a544:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800a546:	6053      	str	r3, [r2, #4]
 800a548:	d1ea      	bne.n	800a520 <oslib_test_002_001_execute.lto_priv.0+0x50>
  return (bool)(qp->next != qp);
 800a54a:	6a21      	ldr	r1, [r4, #32]
 800a54c:	4e9e      	ldr	r6, [pc, #632]	; (800a7c8 <oslib_test_002_001_execute.lto_priv.0+0x2f8>)
 800a54e:	42b1      	cmp	r1, r6
 800a550:	d018      	beq.n	800a584 <oslib_test_002_001_execute.lto_priv.0+0xb4>
 800a552:	f06f 0e01 	mvn.w	lr, #1
 800a556:	f04f 0c00 	mov.w	ip, #0
 800a55a:	460b      	mov	r3, r1
  qp->next       = p->next;
 800a55c:	6809      	ldr	r1, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800a55e:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800a560:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 800a562:	6221      	str	r1, [r4, #32]
  qp->next->prev = qp;
 800a564:	604e      	str	r6, [r1, #4]
 800a566:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800a56a:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
    pqp = pqp->next;
 800a56e:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800a570:	6890      	ldr	r0, [r2, #8]
 800a572:	42b8      	cmp	r0, r7
 800a574:	d2fb      	bcs.n	800a56e <oslib_test_002_001_execute.lto_priv.0+0x9e>
  p->prev       = pqp->prev;
 800a576:	6850      	ldr	r0, [r2, #4]
 800a578:	42b1      	cmp	r1, r6
 800a57a:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800a57e:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800a580:	6053      	str	r3, [r2, #4]
 800a582:	d1ea      	bne.n	800a55a <oslib_test_002_001_execute.lto_priv.0+0x8a>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800a584:	4b91      	ldr	r3, [pc, #580]	; (800a7cc <oslib_test_002_001_execute.lto_priv.0+0x2fc>)
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	6892      	ldr	r2, [r2, #8]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d901      	bls.n	800a596 <oslib_test_002_001_execute.lto_priv.0+0xc6>
    __sch_reschedule_ahead();
 800a592:	f7f9 fb15 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800a596:	2300      	movs	r3, #0
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	2720      	movs	r7, #32
 800a59e:	f387 8811 	msr	BASEPRI, r7
  return (size_t)(mbp->top - mbp->buffer);
 800a5a2:	e9d4 2600 	ldrd	r2, r6, [r4]
 800a5a6:	1ab6      	subs	r6, r6, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a5a8:	6922      	ldr	r2, [r4, #16]
 800a5aa:	ebc2 06a6 	rsb	r6, r2, r6, asr #2
 800a5ae:	2e04      	cmp	r6, #4
 800a5b0:	f040 8122 	bne.w	800a7f8 <oslib_test_002_001_execute.lto_priv.0+0x328>
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f387 8811 	msr	BASEPRI, r7
 800a5bc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800a5c0:	f1b8 0f00 	cmp.w	r8, #0
 800a5c4:	f040 812a 	bne.w	800a81c <oslib_test_002_001_execute.lto_priv.0+0x34c>
 800a5c8:	f388 8811 	msr	BASEPRI, r8
 800a5cc:	f387 8811 	msr	BASEPRI, r7
 800a5d0:	6822      	ldr	r2, [r4, #0]
 800a5d2:	68a3      	ldr	r3, [r4, #8]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	f040 8119 	bne.w	800a80c <oslib_test_002_001_execute.lto_priv.0+0x33c>
 800a5da:	f388 8811 	msr	BASEPRI, r8
 800a5de:	f387 8811 	msr	BASEPRI, r7
 800a5e2:	6822      	ldr	r2, [r4, #0]
 800a5e4:	68e3      	ldr	r3, [r4, #12]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	f040 8128 	bne.w	800a83c <oslib_test_002_001_execute.lto_priv.0+0x36c>
 800a5ec:	f388 8811 	msr	BASEPRI, r8
  test_set_step(3);
 800a5f0:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800a5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5f6:	4641      	mov	r1, r8
 800a5f8:	4872      	ldr	r0, [pc, #456]	; (800a7c4 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
  test_set_step(3);
 800a5fa:	602b      	str	r3, [r5, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800a5fc:	f7fa fe50 	bl	80052a0 <chMBPostTimeout>
 800a600:	3002      	adds	r0, #2
 800a602:	f040 8115 	bne.w	800a830 <oslib_test_002_001_execute.lto_priv.0+0x360>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800a606:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a60a:	4640      	mov	r0, r8
 800a60c:	f7ff fbf8 	bl	8009e00 <chMBPostAheadTimeout.constprop.0>
 800a610:	3002      	adds	r0, #2
 800a612:	f040 810d 	bne.w	800a830 <oslib_test_002_001_execute.lto_priv.0+0x360>
 800a616:	f387 8811 	msr	BASEPRI, r7
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 800a61a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a61e:	a901      	add	r1, sp, #4
 800a620:	4868      	ldr	r0, [pc, #416]	; (800a7c4 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
 800a622:	f7fa fea5 	bl	8005370 <chMBFetchTimeoutS>
 800a626:	f388 8811 	msr	BASEPRI, r8
 800a62a:	3002      	adds	r0, #2
 800a62c:	f040 8100 	bne.w	800a830 <oslib_test_002_001_execute.lto_priv.0+0x360>
  test_set_step(4);
 800a630:	2742      	movs	r7, #66	; 0x42
 800a632:	602e      	str	r6, [r5, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800a634:	4e63      	ldr	r6, [pc, #396]	; (800a7c4 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 800a636:	f884 8014 	strb.w	r8, [r4, #20]
 800a63a:	4639      	mov	r1, r7
 800a63c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a640:	4630      	mov	r0, r6
 800a642:	f7fa fe2d 	bl	80052a0 <chMBPostTimeout>
    for (i = 0; i < MB_SIZE - 1; i++) {
 800a646:	3701      	adds	r7, #1
 800a648:	2800      	cmp	r0, #0
 800a64a:	f040 80ff 	bne.w	800a84c <oslib_test_002_001_execute.lto_priv.0+0x37c>
 800a64e:	2f45      	cmp	r7, #69	; 0x45
 800a650:	d1f3      	bne.n	800a63a <oslib_test_002_001_execute.lto_priv.0+0x16a>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 800a652:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a656:	2041      	movs	r0, #65	; 0x41
 800a658:	f7ff fbd2 	bl	8009e00 <chMBPostAheadTimeout.constprop.0>
 800a65c:	4607      	mov	r7, r0
 800a65e:	2800      	cmp	r0, #0
 800a660:	f040 80f4 	bne.w	800a84c <oslib_test_002_001_execute.lto_priv.0+0x37c>
  test_set_step(5);
 800a664:	2305      	movs	r3, #5
 800a666:	f04f 0820 	mov.w	r8, #32
 800a66a:	602b      	str	r3, [r5, #0]
 800a66c:	f388 8811 	msr	BASEPRI, r8
  return (size_t)(mbp->top - mbp->buffer);
 800a670:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a674:	1a9b      	subs	r3, r3, r2
 800a676:	6922      	ldr	r2, [r4, #16]
 800a678:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 800a67c:	f040 80ec 	bne.w	800a858 <oslib_test_002_001_execute.lto_priv.0+0x388>
 800a680:	f380 8811 	msr	BASEPRI, r0
 800a684:	f388 8811 	msr	BASEPRI, r8
  return mbp->cnt;
 800a688:	6926      	ldr	r6, [r4, #16]
 800a68a:	2e04      	cmp	r6, #4
 800a68c:	f040 80ec 	bne.w	800a868 <oslib_test_002_001_execute.lto_priv.0+0x398>
 800a690:	f380 8811 	msr	BASEPRI, r0
 800a694:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800a698:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 800a69c:	eba0 0c03 	sub.w	ip, r0, r3
 800a6a0:	f1dc 0000 	rsbs	r0, ip, #0
 800a6a4:	eb40 000c 	adc.w	r0, r0, ip
 800a6a8:	4949      	ldr	r1, [pc, #292]	; (800a7d0 <oslib_test_002_001_execute.lto_priv.0+0x300>)
 800a6aa:	f7fc fc89 	bl	8006fc0 <__test_assert>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	f040 80e2 	bne.w	800a878 <oslib_test_002_001_execute.lto_priv.0+0x3a8>
 800a6b4:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 800a6b8:	2306      	movs	r3, #6
 800a6ba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a7c4 <oslib_test_002_001_execute.lto_priv.0+0x2f4>
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800a6be:	4f45      	ldr	r7, [pc, #276]	; (800a7d4 <oslib_test_002_001_execute.lto_priv.0+0x304>)
 800a6c0:	602b      	str	r3, [r5, #0]
 800a6c2:	f388 8811 	msr	BASEPRI, r8
 800a6c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6ca:	4648      	mov	r0, r9
 800a6cc:	a901      	add	r1, sp, #4
 800a6ce:	f7fa fe4f 	bl	8005370 <chMBFetchTimeoutS>
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f382 8811 	msr	BASEPRI, r2
  if (!condition) {
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	f040 80b7 	bne.w	800a84c <oslib_test_002_001_execute.lto_priv.0+0x37c>
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800a6de:	68eb      	ldr	r3, [r5, #12]
 800a6e0:	42bb      	cmp	r3, r7
 800a6e2:	d203      	bcs.n	800a6ec <oslib_test_002_001_execute.lto_priv.0+0x21c>
      test_emit_token(msg2);
 800a6e4:	9a01      	ldr	r2, [sp, #4]
    *chtest.tokp++ = token;
 800a6e6:	1c59      	adds	r1, r3, #1
 800a6e8:	60e9      	str	r1, [r5, #12]
 800a6ea:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MB_SIZE; i++) {
 800a6ec:	3e01      	subs	r6, #1
 800a6ee:	d1e8      	bne.n	800a6c2 <oslib_test_002_001_execute.lto_priv.0+0x1f2>
    test_assert_sequence("ABCD", "wrong get sequence");
 800a6f0:	4939      	ldr	r1, [pc, #228]	; (800a7d8 <oslib_test_002_001_execute.lto_priv.0+0x308>)
 800a6f2:	483a      	ldr	r0, [pc, #232]	; (800a7dc <oslib_test_002_001_execute.lto_priv.0+0x30c>)
 800a6f4:	f7fc fc74 	bl	8006fe0 <__test_assert_sequence>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d15e      	bne.n	800a7ba <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  test_set_step(7);
 800a6fc:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800a6fe:	2146      	movs	r1, #70	; 0x46
 800a700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a704:	482f      	ldr	r0, [pc, #188]	; (800a7c4 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
  test_set_step(7);
 800a706:	602b      	str	r3, [r5, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800a708:	f7fa fdca 	bl	80052a0 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a70c:	fab0 f080 	clz	r0, r0
 800a710:	4933      	ldr	r1, [pc, #204]	; (800a7e0 <oslib_test_002_001_execute.lto_priv.0+0x310>)
 800a712:	0940      	lsrs	r0, r0, #5
 800a714:	f7fc fc54 	bl	8006fc0 <__test_assert>
 800a718:	2800      	cmp	r0, #0
 800a71a:	d14e      	bne.n	800a7ba <oslib_test_002_001_execute.lto_priv.0+0x2ea>
 800a71c:	2720      	movs	r7, #32
 800a71e:	f387 8811 	msr	BASEPRI, r7
 800a722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a726:	a901      	add	r1, sp, #4
 800a728:	4826      	ldr	r0, [pc, #152]	; (800a7c4 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
 800a72a:	f7fa fe21 	bl	8005370 <chMBFetchTimeoutS>
 800a72e:	f386 8811 	msr	BASEPRI, r6
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a732:	fab0 f080 	clz	r0, r0
 800a736:	492a      	ldr	r1, [pc, #168]	; (800a7e0 <oslib_test_002_001_execute.lto_priv.0+0x310>)
 800a738:	0940      	lsrs	r0, r0, #5
 800a73a:	f7fc fc41 	bl	8006fc0 <__test_assert>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d13b      	bne.n	800a7ba <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  test_set_step(8);
 800a742:	2308      	movs	r3, #8
 800a744:	602b      	str	r3, [r5, #0]
 800a746:	f387 8811 	msr	BASEPRI, r7
  return (size_t)(mbp->top - mbp->buffer);
 800a74a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a74e:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a750:	6923      	ldr	r3, [r4, #16]
 800a752:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800a756:	1f19      	subs	r1, r3, #4
 800a758:	4248      	negs	r0, r1
 800a75a:	4148      	adcs	r0, r1
 800a75c:	4921      	ldr	r1, [pc, #132]	; (800a7e4 <oslib_test_002_001_execute.lto_priv.0+0x314>)
 800a75e:	f7fc fc2f 	bl	8006fc0 <__test_assert>
 800a762:	2800      	cmp	r0, #0
 800a764:	f040 808b 	bne.w	800a87e <oslib_test_002_001_execute.lto_priv.0+0x3ae>
 800a768:	f386 8811 	msr	BASEPRI, r6
 800a76c:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800a770:	6920      	ldr	r0, [r4, #16]
 800a772:	491d      	ldr	r1, [pc, #116]	; (800a7e8 <oslib_test_002_001_execute.lto_priv.0+0x318>)
 800a774:	fab0 f080 	clz	r0, r0
 800a778:	0940      	lsrs	r0, r0, #5
 800a77a:	f7fc fc21 	bl	8006fc0 <__test_assert>
 800a77e:	2800      	cmp	r0, #0
 800a780:	d17d      	bne.n	800a87e <oslib_test_002_001_execute.lto_priv.0+0x3ae>
 800a782:	f386 8811 	msr	BASEPRI, r6
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800a786:	6820      	ldr	r0, [r4, #0]
 800a788:	68a3      	ldr	r3, [r4, #8]
 800a78a:	4918      	ldr	r1, [pc, #96]	; (800a7ec <oslib_test_002_001_execute.lto_priv.0+0x31c>)
 800a78c:	1ac2      	subs	r2, r0, r3
 800a78e:	4250      	negs	r0, r2
 800a790:	4150      	adcs	r0, r2
 800a792:	f7fc fc15 	bl	8006fc0 <__test_assert>
 800a796:	b980      	cbnz	r0, 800a7ba <oslib_test_002_001_execute.lto_priv.0+0x2ea>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800a798:	6820      	ldr	r0, [r4, #0]
 800a79a:	68e3      	ldr	r3, [r4, #12]
 800a79c:	4914      	ldr	r1, [pc, #80]	; (800a7f0 <oslib_test_002_001_execute.lto_priv.0+0x320>)
 800a79e:	1ac3      	subs	r3, r0, r3
 800a7a0:	4258      	negs	r0, r3
 800a7a2:	4158      	adcs	r0, r3
 800a7a4:	f7fc fc0c 	bl	8006fc0 <__test_assert>
 800a7a8:	e007      	b.n	800a7ba <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  chtest.global_fail     = true;
 800a7aa:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800a7ae:	4911      	ldr	r1, [pc, #68]	; (800a7f4 <oslib_test_002_001_execute.lto_priv.0+0x324>)
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60a9      	str	r1, [r5, #8]
  chtest.global_fail     = true;
 800a7b4:	80aa      	strh	r2, [r5, #4]
 800a7b6:	f383 8811 	msr	BASEPRI, r3
}
 800a7ba:	b003      	add	sp, #12
 800a7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7c0:	20001134 	.word	0x20001134
 800a7c4:	20000854 	.word	0x20000854
 800a7c8:	20000874 	.word	0x20000874
 800a7cc:	20001050 	.word	0x20001050
 800a7d0:	080129ac 	.word	0x080129ac
 800a7d4:	20001154 	.word	0x20001154
 800a7d8:	080129c4 	.word	0x080129c4
 800a7dc:	08010468 	.word	0x08010468
 800a7e0:	0801043c 	.word	0x0801043c
 800a7e4:	08012920 	.word	0x08012920
 800a7e8:	0801292c 	.word	0x0801292c
 800a7ec:	08012938 	.word	0x08012938
 800a7f0:	0801295c 	.word	0x0801295c
 800a7f4:	08012914 	.word	0x08012914
 800a7f8:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800a7fc:	4921      	ldr	r1, [pc, #132]	; (800a884 <oslib_test_002_001_execute.lto_priv.0+0x3b4>)
  chtest.global_fail     = true;
 800a7fe:	80aa      	strh	r2, [r5, #4]
  chtest.failure_message = msg;
 800a800:	60a9      	str	r1, [r5, #8]
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	b003      	add	sp, #12
 800a808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.global_fail     = true;
 800a80c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800a810:	4a1d      	ldr	r2, [pc, #116]	; (800a888 <oslib_test_002_001_execute.lto_priv.0+0x3b8>)
  chtest.global_fail     = true;
 800a812:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800a814:	60aa      	str	r2, [r5, #8]
 800a816:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800a81a:	e7ce      	b.n	800a7ba <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  chtest.global_fail     = true;
 800a81c:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800a820:	491a      	ldr	r1, [pc, #104]	; (800a88c <oslib_test_002_001_execute.lto_priv.0+0x3bc>)
  chtest.global_fail     = true;
 800a822:	80aa      	strh	r2, [r5, #4]
  chtest.failure_message = msg;
 800a824:	60a9      	str	r1, [r5, #8]
 800a826:	f383 8811 	msr	BASEPRI, r3
}
 800a82a:	b003      	add	sp, #12
 800a82c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.global_fail     = true;
 800a830:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800a834:	4a16      	ldr	r2, [pc, #88]	; (800a890 <oslib_test_002_001_execute.lto_priv.0+0x3c0>)
  chtest.global_fail     = true;
 800a836:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800a838:	60aa      	str	r2, [r5, #8]
 800a83a:	e7be      	b.n	800a7ba <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  chtest.global_fail     = true;
 800a83c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800a840:	4a14      	ldr	r2, [pc, #80]	; (800a894 <oslib_test_002_001_execute.lto_priv.0+0x3c4>)
  chtest.global_fail     = true;
 800a842:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800a844:	60aa      	str	r2, [r5, #8]
 800a846:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800a84a:	e7b6      	b.n	800a7ba <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  chtest.global_fail     = true;
 800a84c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800a850:	4a11      	ldr	r2, [pc, #68]	; (800a898 <oslib_test_002_001_execute.lto_priv.0+0x3c8>)
  chtest.global_fail     = true;
 800a852:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800a854:	60aa      	str	r2, [r5, #8]
 800a856:	e7b0      	b.n	800a7ba <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  chtest.global_fail     = true;
 800a858:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800a85c:	4a0f      	ldr	r2, [pc, #60]	; (800a89c <oslib_test_002_001_execute.lto_priv.0+0x3cc>)
  chtest.global_fail     = true;
 800a85e:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800a860:	60aa      	str	r2, [r5, #8]
 800a862:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800a866:	e7a8      	b.n	800a7ba <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  chtest.global_fail     = true;
 800a868:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800a86c:	4a0c      	ldr	r2, [pc, #48]	; (800a8a0 <oslib_test_002_001_execute.lto_priv.0+0x3d0>)
  chtest.global_fail     = true;
 800a86e:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800a870:	60aa      	str	r2, [r5, #8]
 800a872:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800a876:	e7a0      	b.n	800a7ba <oslib_test_002_001_execute.lto_priv.0+0x2ea>
 800a878:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800a87c:	e79d      	b.n	800a7ba <oslib_test_002_001_execute.lto_priv.0+0x2ea>
 800a87e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800a882:	e79a      	b.n	800a7ba <oslib_test_002_001_execute.lto_priv.0+0x2ea>
 800a884:	08012920 	.word	0x08012920
 800a888:	08012938 	.word	0x08012938
 800a88c:	0801292c 	.word	0x0801292c
 800a890:	08012980 	.word	0x08012980
 800a894:	0801295c 	.word	0x0801295c
 800a898:	0801043c 	.word	0x0801043c
 800a89c:	08012994 	.word	0x08012994
 800a8a0:	080129a0 	.word	0x080129a0
	...

0800a8b0 <oslib_test_002_002_execute.lto_priv.0>:
  test_set_step(1);
 800a8b0:	2101      	movs	r1, #1
static void oslib_test_002_002_execute(void) {
 800a8b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 800a8b6:	4dba      	ldr	r5, [pc, #744]	; (800aba0 <oslib_test_002_002_execute.lto_priv.0+0x2f0>)
 800a8b8:	2020      	movs	r0, #32
static void oslib_test_002_002_execute(void) {
 800a8ba:	b083      	sub	sp, #12
  test_set_step(1);
 800a8bc:	6029      	str	r1, [r5, #0]
 800a8be:	f380 8811 	msr	BASEPRI, r0
  return (size_t)(mbp->top - mbp->buffer);
 800a8c2:	4cb8      	ldr	r4, [pc, #736]	; (800aba4 <oslib_test_002_002_execute.lto_priv.0+0x2f4>)
 800a8c4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a8c8:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a8ca:	6923      	ldr	r3, [r4, #16]
 800a8cc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  if (!condition) {
 800a8d0:	2b04      	cmp	r3, #4
 800a8d2:	f040 818b 	bne.w	800abec <oslib_test_002_002_execute.lto_priv.0+0x33c>
 800a8d6:	f04f 0c00 	mov.w	ip, #0
 800a8da:	f38c 8811 	msr	BASEPRI, ip
  test_set_step(2);
 800a8de:	2302      	movs	r3, #2
 800a8e0:	602b      	str	r3, [r5, #0]
 800a8e2:	f380 8811 	msr	BASEPRI, r0
  return (bool)(qp->next != qp);
 800a8e6:	4626      	mov	r6, r4
  mbp->reset = true;
 800a8e8:	7521      	strb	r1, [r4, #20]
 800a8ea:	f856 1f18 	ldr.w	r1, [r6, #24]!
  mbp->wrptr = mbp->buffer;
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	42b1      	cmp	r1, r6
  mbp->rdptr = mbp->buffer;
 800a8f2:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 800a8f6:	f8c4 c010 	str.w	ip, [r4, #16]
 800a8fa:	d016      	beq.n	800a92a <oslib_test_002_002_execute.lto_priv.0+0x7a>
 800a8fc:	f06f 0e01 	mvn.w	lr, #1
 800a900:	460b      	mov	r3, r1
  qp->next       = p->next;
 800a902:	6809      	ldr	r1, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800a904:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800a906:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 800a908:	61a1      	str	r1, [r4, #24]
  qp->next->prev = qp;
 800a90a:	604e      	str	r6, [r1, #4]
 800a90c:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800a910:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
    pqp = pqp->next;
 800a914:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800a916:	6890      	ldr	r0, [r2, #8]
 800a918:	42b8      	cmp	r0, r7
 800a91a:	d2fb      	bcs.n	800a914 <oslib_test_002_002_execute.lto_priv.0+0x64>
  p->prev       = pqp->prev;
 800a91c:	6850      	ldr	r0, [r2, #4]
 800a91e:	42b1      	cmp	r1, r6
 800a920:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800a924:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800a926:	6053      	str	r3, [r2, #4]
 800a928:	d1ea      	bne.n	800a900 <oslib_test_002_002_execute.lto_priv.0+0x50>
  return (bool)(qp->next != qp);
 800a92a:	6a21      	ldr	r1, [r4, #32]
 800a92c:	4f9e      	ldr	r7, [pc, #632]	; (800aba8 <oslib_test_002_002_execute.lto_priv.0+0x2f8>)
 800a92e:	42b9      	cmp	r1, r7
 800a930:	d019      	beq.n	800a966 <oslib_test_002_002_execute.lto_priv.0+0xb6>
 800a932:	f06f 0801 	mvn.w	r8, #1
 800a936:	f04f 0e00 	mov.w	lr, #0
 800a93a:	460b      	mov	r3, r1
  qp->next       = p->next;
 800a93c:	6809      	ldr	r1, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800a93e:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800a940:	6898      	ldr	r0, [r3, #8]
  qp->next       = p->next;
 800a942:	6221      	str	r1, [r4, #32]
  qp->next->prev = qp;
 800a944:	604f      	str	r7, [r1, #4]
 800a946:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800a94a:	f883 e024 	strb.w	lr, [r3, #36]	; 0x24
    pqp = pqp->next;
 800a94e:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800a950:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800a954:	4584      	cmp	ip, r0
 800a956:	d2fa      	bcs.n	800a94e <oslib_test_002_002_execute.lto_priv.0+0x9e>
  p->prev       = pqp->prev;
 800a958:	6850      	ldr	r0, [r2, #4]
 800a95a:	42b9      	cmp	r1, r7
 800a95c:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800a960:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800a962:	6053      	str	r3, [r2, #4]
 800a964:	d1e9      	bne.n	800a93a <oslib_test_002_002_execute.lto_priv.0+0x8a>
 800a966:	2100      	movs	r1, #0
 800a968:	f381 8811 	msr	BASEPRI, r1
 800a96c:	2020      	movs	r0, #32
 800a96e:	f380 8811 	msr	BASEPRI, r0
  return (size_t)(mbp->top - mbp->buffer);
 800a972:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a976:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a978:	6923      	ldr	r3, [r4, #16]
 800a97a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800a97e:	2b04      	cmp	r3, #4
 800a980:	f040 813f 	bne.w	800ac02 <oslib_test_002_002_execute.lto_priv.0+0x352>
 800a984:	f381 8811 	msr	BASEPRI, r1
 800a988:	f380 8811 	msr	BASEPRI, r0
 800a98c:	6923      	ldr	r3, [r4, #16]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f040 8149 	bne.w	800ac26 <oslib_test_002_002_execute.lto_priv.0+0x376>
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f380 8811 	msr	BASEPRI, r0
 800a99c:	6821      	ldr	r1, [r4, #0]
 800a99e:	68a2      	ldr	r2, [r4, #8]
 800a9a0:	4291      	cmp	r1, r2
 800a9a2:	f040 8138 	bne.w	800ac16 <oslib_test_002_002_execute.lto_priv.0+0x366>
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f380 8811 	msr	BASEPRI, r0
 800a9ae:	6821      	ldr	r1, [r4, #0]
 800a9b0:	68e2      	ldr	r2, [r4, #12]
 800a9b2:	4291      	cmp	r1, r2
 800a9b4:	f040 8149 	bne.w	800ac4a <oslib_test_002_002_execute.lto_priv.0+0x39a>
 800a9b8:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 800a9bc:	2203      	movs	r2, #3
 800a9be:	f04f 0c42 	mov.w	ip, #66	; 0x42
  mbp->reset = false;
 800a9c2:	7523      	strb	r3, [r4, #20]
 800a9c4:	602a      	str	r2, [r5, #0]
 800a9c6:	f380 8811 	msr	BASEPRI, r0
  if (mbp->reset) {
 800a9ca:	7d21      	ldrb	r1, [r4, #20]
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	f040 815c 	bne.w	800ac8a <oslib_test_002_002_execute.lto_priv.0+0x3da>
  return (size_t)(mbp->top - mbp->buffer);
 800a9d2:	e9d4 9e00 	ldrd	r9, lr, [r4]
  return mbp->cnt;
 800a9d6:	6922      	ldr	r2, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a9d8:	ebae 0809 	sub.w	r8, lr, r9
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a9dc:	ebb2 0fa8 	cmp.w	r2, r8, asr #2
 800a9e0:	f000 812b 	beq.w	800ac3a <oslib_test_002_002_execute.lto_priv.0+0x38a>
    *mbp->wrptr++ = msg;
 800a9e4:	f8d4 8008 	ldr.w	r8, [r4, #8]
    mbp->cnt++;
 800a9e8:	3201      	adds	r2, #1
    *mbp->wrptr++ = msg;
 800a9ea:	f108 0104 	add.w	r1, r8, #4
 800a9ee:	60a1      	str	r1, [r4, #8]
 800a9f0:	f8c8 c000 	str.w	ip, [r8]
    mbp->cnt++;
 800a9f4:	6122      	str	r2, [r4, #16]
  return (bool)(qp->next != qp);
 800a9f6:	6a22      	ldr	r2, [r4, #32]
    if (mbp->wrptr >= mbp->top) {
 800a9f8:	458e      	cmp	lr, r1
      mbp->wrptr = mbp->buffer;
 800a9fa:	bf98      	it	ls
 800a9fc:	f8c4 9008 	strls.w	r9, [r4, #8]
  if (ch_queue_notempty(&tqp->queue)) {
 800aa00:	42ba      	cmp	r2, r7
 800aa02:	d016      	beq.n	800aa32 <oslib_test_002_002_execute.lto_priv.0+0x182>
  qp->next       = p->next;
 800aa04:	6811      	ldr	r1, [r2, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800aa06:	f8d2 e018 	ldr.w	lr, [r2, #24]
 800aa0a:	6221      	str	r1, [r4, #32]
  qp->next->prev = qp;
 800aa0c:	604f      	str	r7, [r1, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800aa0e:	6891      	ldr	r1, [r2, #8]
 800aa10:	6293      	str	r3, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800aa12:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    pqp = pqp->next;
 800aa16:	f8de e000 	ldr.w	lr, [lr]
  } while (unlikely(pqp->prio >= p->prio));
 800aa1a:	f8de 8008 	ldr.w	r8, [lr, #8]
 800aa1e:	4588      	cmp	r8, r1
 800aa20:	d2f9      	bcs.n	800aa16 <oslib_test_002_002_execute.lto_priv.0+0x166>
  p->prev       = pqp->prev;
 800aa22:	f8de 1004 	ldr.w	r1, [lr, #4]
  p->next       = pqp;
 800aa26:	f8c2 e000 	str.w	lr, [r2]
  p->prev       = pqp->prev;
 800aa2a:	6051      	str	r1, [r2, #4]
  p->prev->next = p;
 800aa2c:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 800aa2e:	f8ce 2004 	str.w	r2, [lr, #4]
 800aa32:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < MB_SIZE - 1; i++) {
 800aa36:	f10c 0c01 	add.w	ip, ip, #1
 800aa3a:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
 800aa3e:	d1c2      	bne.n	800a9c6 <oslib_test_002_002_execute.lto_priv.0+0x116>
 800aa40:	2720      	movs	r7, #32
 800aa42:	f387 8811 	msr	BASEPRI, r7
    msg1 = chMBPostAheadI(&mb1, 'A');
 800aa46:	2041      	movs	r0, #65	; 0x41
 800aa48:	f7ff f832 	bl	8009ab0 <chMBPostAheadI.constprop.0>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	2800      	cmp	r0, #0
 800aa54:	f040 80f3 	bne.w	800ac3e <oslib_test_002_002_execute.lto_priv.0+0x38e>
  test_set_step(4);
 800aa58:	2304      	movs	r3, #4
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	f387 8811 	msr	BASEPRI, r7
 800aa60:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aa64:	1a9b      	subs	r3, r3, r2
 800aa66:	6922      	ldr	r2, [r4, #16]
 800aa68:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 800aa6c:	f040 80f5 	bne.w	800ac5a <oslib_test_002_002_execute.lto_priv.0+0x3aa>
 800aa70:	f380 8811 	msr	BASEPRI, r0
 800aa74:	f387 8811 	msr	BASEPRI, r7
  return mbp->cnt;
 800aa78:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800aa7c:	f1b8 0f04 	cmp.w	r8, #4
 800aa80:	f040 80f3 	bne.w	800ac6a <oslib_test_002_002_execute.lto_priv.0+0x3ba>
 800aa84:	f380 8811 	msr	BASEPRI, r0
 800aa88:	f387 8811 	msr	BASEPRI, r7
 800aa8c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	f040 80f2 	bne.w	800ac7a <oslib_test_002_002_execute.lto_priv.0+0x3ca>
 800aa96:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 800aa9a:	2305      	movs	r3, #5
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800aa9c:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800abac <oslib_test_002_002_execute.lto_priv.0+0x2fc>
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	f387 8811 	msr	BASEPRI, r7

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 800aaa6:	7d23      	ldrb	r3, [r4, #20]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f040 80ee 	bne.w	800ac8a <oslib_test_002_002_execute.lto_priv.0+0x3da>
 800aaae:	6921      	ldr	r1, [r4, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800aab0:	2900      	cmp	r1, #0
 800aab2:	f000 80c2 	beq.w	800ac3a <oslib_test_002_002_execute.lto_priv.0+0x38a>
    *msgp = *mbp->rdptr++;
 800aab6:	68e2      	ldr	r2, [r4, #12]
    if (mbp->rdptr >= mbp->top) {
 800aab8:	6863      	ldr	r3, [r4, #4]
    *msgp = *mbp->rdptr++;
 800aaba:	f8d2 e000 	ldr.w	lr, [r2]
 800aabe:	3204      	adds	r2, #4
    if (mbp->rdptr >= mbp->top) {
 800aac0:	429a      	cmp	r2, r3
      mbp->rdptr = mbp->buffer;
 800aac2:	bf28      	it	cs
 800aac4:	6823      	ldrcs	r3, [r4, #0]
    *msgp = *mbp->rdptr++;
 800aac6:	60e2      	str	r2, [r4, #12]
      mbp->rdptr = mbp->buffer;
 800aac8:	bf28      	it	cs
 800aaca:	60e3      	strcs	r3, [r4, #12]
  return (bool)(qp->next != qp);
 800aacc:	69a3      	ldr	r3, [r4, #24]
    }
    mbp->cnt--;
 800aace:	3901      	subs	r1, #1
 800aad0:	42b3      	cmp	r3, r6
    *msgp = *mbp->rdptr++;
 800aad2:	f8cd e004 	str.w	lr, [sp, #4]
    mbp->cnt--;
 800aad6:	6121      	str	r1, [r4, #16]
 800aad8:	d011      	beq.n	800aafe <oslib_test_002_002_execute.lto_priv.0+0x24e>
  qp->next       = p->next;
 800aada:	681a      	ldr	r2, [r3, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800aadc:	6999      	ldr	r1, [r3, #24]
 800aade:	61a2      	str	r2, [r4, #24]
  qp->next->prev = qp;
 800aae0:	6056      	str	r6, [r2, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800aae2:	689a      	ldr	r2, [r3, #8]
 800aae4:	6298      	str	r0, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800aae6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
    pqp = pqp->next;
 800aaea:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800aaec:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800aaf0:	4596      	cmp	lr, r2
 800aaf2:	d2fa      	bcs.n	800aaea <oslib_test_002_002_execute.lto_priv.0+0x23a>
  p->prev       = pqp->prev;
 800aaf4:	684a      	ldr	r2, [r1, #4]
  p->next       = pqp;
 800aaf6:	6019      	str	r1, [r3, #0]
  p->prev       = pqp->prev;
 800aaf8:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 800aafa:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 800aafc:	604b      	str	r3, [r1, #4]
 800aafe:	f380 8811 	msr	BASEPRI, r0
 800ab02:	68ea      	ldr	r2, [r5, #12]
 800ab04:	4562      	cmp	r2, ip
 800ab06:	d203      	bcs.n	800ab10 <oslib_test_002_002_execute.lto_priv.0+0x260>
      test_emit_token(msg2);
 800ab08:	9b01      	ldr	r3, [sp, #4]
    *chtest.tokp++ = token;
 800ab0a:	1c51      	adds	r1, r2, #1
 800ab0c:	60e9      	str	r1, [r5, #12]
 800ab0e:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < MB_SIZE; i++) {
 800ab10:	f1b8 0801 	subs.w	r8, r8, #1
 800ab14:	d1c5      	bne.n	800aaa2 <oslib_test_002_002_execute.lto_priv.0+0x1f2>
    test_assert_sequence("ABCD", "wrong get sequence");
 800ab16:	4926      	ldr	r1, [pc, #152]	; (800abb0 <oslib_test_002_002_execute.lto_priv.0+0x300>)
 800ab18:	4826      	ldr	r0, [pc, #152]	; (800abb4 <oslib_test_002_002_execute.lto_priv.0+0x304>)
 800ab1a:	f7fc fa61 	bl	8006fe0 <__test_assert_sequence>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d16c      	bne.n	800abfc <oslib_test_002_002_execute.lto_priv.0+0x34c>
  test_set_step(6);
 800ab22:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800ab24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab28:	2146      	movs	r1, #70	; 0x46
 800ab2a:	481e      	ldr	r0, [pc, #120]	; (800aba4 <oslib_test_002_002_execute.lto_priv.0+0x2f4>)
  test_set_step(6);
 800ab2c:	602b      	str	r3, [r5, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800ab2e:	f7fa fbb7 	bl	80052a0 <chMBPostTimeout>
  if (!condition) {
 800ab32:	2800      	cmp	r0, #0
 800ab34:	f040 8083 	bne.w	800ac3e <oslib_test_002_002_execute.lto_priv.0+0x38e>
 800ab38:	2620      	movs	r6, #32
 800ab3a:	f386 8811 	msr	BASEPRI, r6
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 800ab3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab42:	a901      	add	r1, sp, #4
 800ab44:	4817      	ldr	r0, [pc, #92]	; (800aba4 <oslib_test_002_002_execute.lto_priv.0+0x2f4>)
 800ab46:	f7fa fc13 	bl	8005370 <chMBFetchTimeoutS>
 800ab4a:	f388 8811 	msr	BASEPRI, r8
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800ab4e:	fab0 f080 	clz	r0, r0
 800ab52:	4919      	ldr	r1, [pc, #100]	; (800abb8 <oslib_test_002_002_execute.lto_priv.0+0x308>)
 800ab54:	0940      	lsrs	r0, r0, #5
 800ab56:	f7fc fa33 	bl	8006fc0 <__test_assert>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d14e      	bne.n	800abfc <oslib_test_002_002_execute.lto_priv.0+0x34c>
  test_set_step(7);
 800ab5e:	2307      	movs	r3, #7
 800ab60:	602b      	str	r3, [r5, #0]
 800ab62:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 800ab66:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab6a:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800ab6c:	6923      	ldr	r3, [r4, #16]
 800ab6e:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800ab72:	1f19      	subs	r1, r3, #4
 800ab74:	4248      	negs	r0, r1
 800ab76:	4148      	adcs	r0, r1
 800ab78:	4910      	ldr	r1, [pc, #64]	; (800abbc <oslib_test_002_002_execute.lto_priv.0+0x30c>)
 800ab7a:	f7fc fa21 	bl	8006fc0 <__test_assert>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	f040 8087 	bne.w	800ac92 <oslib_test_002_002_execute.lto_priv.0+0x3e2>
 800ab84:	f388 8811 	msr	BASEPRI, r8
 800ab88:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800ab8c:	6920      	ldr	r0, [r4, #16]
 800ab8e:	490c      	ldr	r1, [pc, #48]	; (800abc0 <oslib_test_002_002_execute.lto_priv.0+0x310>)
 800ab90:	fab0 f080 	clz	r0, r0
 800ab94:	0940      	lsrs	r0, r0, #5
 800ab96:	f7fc fa13 	bl	8006fc0 <__test_assert>
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d179      	bne.n	800ac92 <oslib_test_002_002_execute.lto_priv.0+0x3e2>
 800ab9e:	e011      	b.n	800abc4 <oslib_test_002_002_execute.lto_priv.0+0x314>
 800aba0:	20001134 	.word	0x20001134
 800aba4:	20000854 	.word	0x20000854
 800aba8:	20000874 	.word	0x20000874
 800abac:	20001154 	.word	0x20001154
 800abb0:	080129c4 	.word	0x080129c4
 800abb4:	08010468 	.word	0x08010468
 800abb8:	0801043c 	.word	0x0801043c
 800abbc:	08012920 	.word	0x08012920
 800abc0:	0801292c 	.word	0x0801292c
 800abc4:	f388 8811 	msr	BASEPRI, r8
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800abc8:	6820      	ldr	r0, [r4, #0]
 800abca:	68a3      	ldr	r3, [r4, #8]
 800abcc:	4932      	ldr	r1, [pc, #200]	; (800ac98 <oslib_test_002_002_execute.lto_priv.0+0x3e8>)
 800abce:	1ac2      	subs	r2, r0, r3
 800abd0:	4250      	negs	r0, r2
 800abd2:	4150      	adcs	r0, r2
 800abd4:	f7fc f9f4 	bl	8006fc0 <__test_assert>
 800abd8:	b980      	cbnz	r0, 800abfc <oslib_test_002_002_execute.lto_priv.0+0x34c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800abda:	6820      	ldr	r0, [r4, #0]
 800abdc:	68e3      	ldr	r3, [r4, #12]
 800abde:	492f      	ldr	r1, [pc, #188]	; (800ac9c <oslib_test_002_002_execute.lto_priv.0+0x3ec>)
 800abe0:	1ac3      	subs	r3, r0, r3
 800abe2:	4258      	negs	r0, r3
 800abe4:	4158      	adcs	r0, r3
 800abe6:	f7fc f9eb 	bl	8006fc0 <__test_assert>
 800abea:	e007      	b.n	800abfc <oslib_test_002_002_execute.lto_priv.0+0x34c>
  chtest.global_fail     = true;
 800abec:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800abf0:	492b      	ldr	r1, [pc, #172]	; (800aca0 <oslib_test_002_002_execute.lto_priv.0+0x3f0>)
 800abf2:	2300      	movs	r3, #0
 800abf4:	60a9      	str	r1, [r5, #8]
  chtest.global_fail     = true;
 800abf6:	80aa      	strh	r2, [r5, #4]
 800abf8:	f383 8811 	msr	BASEPRI, r3
}
 800abfc:	b003      	add	sp, #12
 800abfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac02:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ac06:	4a27      	ldr	r2, [pc, #156]	; (800aca4 <oslib_test_002_002_execute.lto_priv.0+0x3f4>)
  chtest.global_fail     = true;
 800ac08:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800ac0a:	60aa      	str	r2, [r5, #8]
 800ac0c:	f381 8811 	msr	BASEPRI, r1
 800ac10:	b003      	add	sp, #12
 800ac12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.global_fail     = true;
 800ac16:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800ac1a:	491f      	ldr	r1, [pc, #124]	; (800ac98 <oslib_test_002_002_execute.lto_priv.0+0x3e8>)
  chtest.global_fail     = true;
 800ac1c:	80aa      	strh	r2, [r5, #4]
  chtest.failure_message = msg;
 800ac1e:	60a9      	str	r1, [r5, #8]
 800ac20:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800ac24:	e7ea      	b.n	800abfc <oslib_test_002_002_execute.lto_priv.0+0x34c>
  chtest.global_fail     = true;
 800ac26:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ac2a:	4a1f      	ldr	r2, [pc, #124]	; (800aca8 <oslib_test_002_002_execute.lto_priv.0+0x3f8>)
  chtest.global_fail     = true;
 800ac2c:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800ac2e:	60aa      	str	r2, [r5, #8]
 800ac30:	f381 8811 	msr	BASEPRI, r1
}
 800ac34:	b003      	add	sp, #12
 800ac36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac3a:	f381 8811 	msr	BASEPRI, r1
  chtest.global_fail     = true;
 800ac3e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ac42:	4a1a      	ldr	r2, [pc, #104]	; (800acac <oslib_test_002_002_execute.lto_priv.0+0x3fc>)
  chtest.global_fail     = true;
 800ac44:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800ac46:	60aa      	str	r2, [r5, #8]
 800ac48:	e7d8      	b.n	800abfc <oslib_test_002_002_execute.lto_priv.0+0x34c>
  chtest.global_fail     = true;
 800ac4a:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800ac4e:	4913      	ldr	r1, [pc, #76]	; (800ac9c <oslib_test_002_002_execute.lto_priv.0+0x3ec>)
  chtest.global_fail     = true;
 800ac50:	80aa      	strh	r2, [r5, #4]
  chtest.failure_message = msg;
 800ac52:	60a9      	str	r1, [r5, #8]
 800ac54:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800ac58:	e7d0      	b.n	800abfc <oslib_test_002_002_execute.lto_priv.0+0x34c>
  chtest.global_fail     = true;
 800ac5a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ac5e:	4a14      	ldr	r2, [pc, #80]	; (800acb0 <oslib_test_002_002_execute.lto_priv.0+0x400>)
  chtest.global_fail     = true;
 800ac60:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800ac62:	60aa      	str	r2, [r5, #8]
 800ac64:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800ac68:	e7c8      	b.n	800abfc <oslib_test_002_002_execute.lto_priv.0+0x34c>
  chtest.global_fail     = true;
 800ac6a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ac6e:	4a11      	ldr	r2, [pc, #68]	; (800acb4 <oslib_test_002_002_execute.lto_priv.0+0x404>)
  chtest.global_fail     = true;
 800ac70:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800ac72:	60aa      	str	r2, [r5, #8]
 800ac74:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800ac78:	e7c0      	b.n	800abfc <oslib_test_002_002_execute.lto_priv.0+0x34c>
  chtest.global_fail     = true;
 800ac7a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ac7e:	4a0e      	ldr	r2, [pc, #56]	; (800acb8 <oslib_test_002_002_execute.lto_priv.0+0x408>)
  chtest.global_fail     = true;
 800ac80:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800ac82:	60aa      	str	r2, [r5, #8]
 800ac84:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800ac88:	e7b8      	b.n	800abfc <oslib_test_002_002_execute.lto_priv.0+0x34c>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 800ac90:	e7d5      	b.n	800ac3e <oslib_test_002_002_execute.lto_priv.0+0x38e>
 800ac92:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800ac96:	e7b1      	b.n	800abfc <oslib_test_002_002_execute.lto_priv.0+0x34c>
 800ac98:	08012938 	.word	0x08012938
 800ac9c:	0801295c 	.word	0x0801295c
 800aca0:	08012914 	.word	0x08012914
 800aca4:	08012920 	.word	0x08012920
 800aca8:	0801292c 	.word	0x0801292c
 800acac:	0801043c 	.word	0x0801043c
 800acb0:	08012994 	.word	0x08012994
 800acb4:	080129a0 	.word	0x080129a0
 800acb8:	080129ac 	.word	0x080129ac
 800acbc:	00000000 	.word	0x00000000

0800acc0 <oslib_test_002_003_execute.lto_priv.0>:
static void oslib_test_002_003_execute(void) {
  msg_t msg1, msg2;
  unsigned i;

  /* [2.3.1] Filling the mailbox.*/
  test_set_step(1);
 800acc0:	2301      	movs	r3, #1
static void oslib_test_002_003_execute(void) {
 800acc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800acc6:	2442      	movs	r4, #66	; 0x42
 800acc8:	4f7b      	ldr	r7, [pc, #492]	; (800aeb8 <oslib_test_002_003_execute.lto_priv.0+0x1f8>)
 800acca:	4e7c      	ldr	r6, [pc, #496]	; (800aebc <oslib_test_002_003_execute.lto_priv.0+0x1fc>)
static void oslib_test_002_003_execute(void) {
 800accc:	b082      	sub	sp, #8
  test_set_step(1);
 800acce:	603b      	str	r3, [r7, #0]
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800acd0:	4621      	mov	r1, r4
 800acd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acd6:	4630      	mov	r0, r6
 800acd8:	f7fa fae2 	bl	80052a0 <chMBPostTimeout>
    for (i = 0; i < MB_SIZE; i++) {
 800acdc:	3401      	adds	r4, #1
 800acde:	4605      	mov	r5, r0
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d13e      	bne.n	800ad62 <oslib_test_002_003_execute.lto_priv.0+0xa2>
 800ace4:	2c46      	cmp	r4, #70	; 0x46
 800ace6:	d1f3      	bne.n	800acd0 <oslib_test_002_003_execute.lto_priv.0+0x10>
  }
  test_end_step(1);

  /* [2.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 800ace8:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 800acea:	2201      	movs	r2, #1
 800acec:	2158      	movs	r1, #88	; 0x58
 800acee:	4873      	ldr	r0, [pc, #460]	; (800aebc <oslib_test_002_003_execute.lto_priv.0+0x1fc>)
  test_set_step(2);
 800acf0:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 800acf2:	f7fa fad5 	bl	80052a0 <chMBPostTimeout>
 800acf6:	3001      	adds	r0, #1
 800acf8:	d133      	bne.n	800ad62 <oslib_test_002_003_execute.lto_priv.0+0xa2>
 800acfa:	2420      	movs	r4, #32
 800acfc:	f384 8811 	msr	BASEPRI, r4
  if (mbp->reset) {
 800ad00:	f896 8014 	ldrb.w	r8, [r6, #20]
 800ad04:	f1b8 0f00 	cmp.w	r8, #0
 800ad08:	f040 80cf 	bne.w	800aeaa <oslib_test_002_003_execute.lto_priv.0+0x1ea>
  return (size_t)(mbp->top - mbp->buffer);
 800ad0c:	e9d6 5300 	ldrd	r5, r3, [r6]
  return mbp->cnt;
 800ad10:	6932      	ldr	r2, [r6, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800ad12:	1b59      	subs	r1, r3, r5
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800ad14:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
 800ad18:	d02b      	beq.n	800ad72 <oslib_test_002_003_execute.lto_priv.0+0xb2>
    *mbp->wrptr++ = msg;
 800ad1a:	2458      	movs	r4, #88	; 0x58
 800ad1c:	68b0      	ldr	r0, [r6, #8]
    mbp->cnt++;
 800ad1e:	3201      	adds	r2, #1
    *mbp->wrptr++ = msg;
 800ad20:	1d01      	adds	r1, r0, #4
    if (mbp->wrptr >= mbp->top) {
 800ad22:	428b      	cmp	r3, r1
    *mbp->wrptr++ = msg;
 800ad24:	60b1      	str	r1, [r6, #8]
  return (bool)(qp->next != qp);
 800ad26:	6a33      	ldr	r3, [r6, #32]
 800ad28:	4965      	ldr	r1, [pc, #404]	; (800aec0 <oslib_test_002_003_execute.lto_priv.0+0x200>)
 800ad2a:	6004      	str	r4, [r0, #0]
      mbp->wrptr = mbp->buffer;
 800ad2c:	bf98      	it	ls
 800ad2e:	60b5      	strls	r5, [r6, #8]
 800ad30:	428b      	cmp	r3, r1
    mbp->cnt++;
 800ad32:	6132      	str	r2, [r6, #16]
 800ad34:	f000 80b5 	beq.w	800aea2 <oslib_test_002_003_execute.lto_priv.0+0x1e2>
 800ad38:	2000      	movs	r0, #0
  qp->next       = p->next;
 800ad3a:	681a      	ldr	r2, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800ad3c:	689c      	ldr	r4, [r3, #8]
  qp->next       = p->next;
 800ad3e:	6232      	str	r2, [r6, #32]
  qp->next->prev = qp;
 800ad40:	6051      	str	r1, [r2, #4]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800ad42:	699a      	ldr	r2, [r3, #24]
 800ad44:	6298      	str	r0, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800ad46:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
    pqp = pqp->next;
 800ad4a:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800ad4c:	6891      	ldr	r1, [r2, #8]
 800ad4e:	42a1      	cmp	r1, r4
 800ad50:	d2fb      	bcs.n	800ad4a <oslib_test_002_003_execute.lto_priv.0+0x8a>
  p->prev       = pqp->prev;
 800ad52:	6851      	ldr	r1, [r2, #4]
 800ad54:	2000      	movs	r0, #0
 800ad56:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 800ad5a:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800ad5c:	6053      	str	r3, [r2, #4]
 800ad5e:	f380 8811 	msr	BASEPRI, r0
  chtest.global_fail     = true;
 800ad62:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ad66:	4a57      	ldr	r2, [pc, #348]	; (800aec4 <oslib_test_002_003_execute.lto_priv.0+0x204>)
  chtest.global_fail     = true;
 800ad68:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ad6a:	60ba      	str	r2, [r7, #8]
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
  test_end_step(4);
}
 800ad6c:	b002      	add	sp, #8
 800ad6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad72:	f388 8811 	msr	BASEPRI, r8
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 800ad76:	2101      	movs	r1, #1
 800ad78:	2058      	movs	r0, #88	; 0x58
 800ad7a:	f7ff f841 	bl	8009e00 <chMBPostAheadTimeout.constprop.0>
  if (!condition) {
 800ad7e:	3001      	adds	r0, #1
 800ad80:	d1ef      	bne.n	800ad62 <oslib_test_002_003_execute.lto_priv.0+0xa2>
 800ad82:	f384 8811 	msr	BASEPRI, r4
    msg1 = chMBPostAheadI(&mb1, 'X');
 800ad86:	2058      	movs	r0, #88	; 0x58
 800ad88:	f7fe fe92 	bl	8009ab0 <chMBPostAheadI.constprop.0>
 800ad8c:	f388 8811 	msr	BASEPRI, r8
 800ad90:	3001      	adds	r0, #1
 800ad92:	d1e6      	bne.n	800ad62 <oslib_test_002_003_execute.lto_priv.0+0xa2>
  test_set_step(3);
 800ad94:	2303      	movs	r3, #3
 800ad96:	603b      	str	r3, [r7, #0]
 800ad98:	f384 8811 	msr	BASEPRI, r4
  mbp->reset = true;
 800ad9c:	2201      	movs	r2, #1
  return (bool)(qp->next != qp);
 800ad9e:	69b1      	ldr	r1, [r6, #24]
  while (ch_queue_notempty(&tqp->queue)) {
 800ada0:	4c49      	ldr	r4, [pc, #292]	; (800aec8 <oslib_test_002_003_execute.lto_priv.0+0x208>)
  mbp->wrptr = mbp->buffer;
 800ada2:	6833      	ldr	r3, [r6, #0]
 800ada4:	42a1      	cmp	r1, r4
  mbp->rdptr = mbp->buffer;
 800ada6:	e9c6 3302 	strd	r3, r3, [r6, #8]
  mbp->cnt   = (size_t)0;
 800adaa:	f8c6 8010 	str.w	r8, [r6, #16]
  mbp->reset = true;
 800adae:	7532      	strb	r2, [r6, #20]
 800adb0:	d016      	beq.n	800ade0 <oslib_test_002_003_execute.lto_priv.0+0x120>
 800adb2:	f06f 0c01 	mvn.w	ip, #1
 800adb6:	460b      	mov	r3, r1
  qp->next       = p->next;
 800adb8:	6809      	ldr	r1, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800adba:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800adbc:	689d      	ldr	r5, [r3, #8]
  qp->next       = p->next;
 800adbe:	61b1      	str	r1, [r6, #24]
  qp->next->prev = qp;
 800adc0:	604c      	str	r4, [r1, #4]
 800adc2:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800adc6:	f883 8024 	strb.w	r8, [r3, #36]	; 0x24
    pqp = pqp->next;
 800adca:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800adcc:	6890      	ldr	r0, [r2, #8]
 800adce:	42a8      	cmp	r0, r5
 800add0:	d2fb      	bcs.n	800adca <oslib_test_002_003_execute.lto_priv.0+0x10a>
  p->prev       = pqp->prev;
 800add2:	6850      	ldr	r0, [r2, #4]
 800add4:	42a1      	cmp	r1, r4
  p->next       = pqp;
 800add6:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800add8:	6058      	str	r0, [r3, #4]
  p->prev->next = p;
 800adda:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800addc:	6053      	str	r3, [r2, #4]
 800adde:	d1ea      	bne.n	800adb6 <oslib_test_002_003_execute.lto_priv.0+0xf6>
  return (bool)(qp->next != qp);
 800ade0:	6a31      	ldr	r1, [r6, #32]
 800ade2:	4d37      	ldr	r5, [pc, #220]	; (800aec0 <oslib_test_002_003_execute.lto_priv.0+0x200>)
 800ade4:	42a9      	cmp	r1, r5
 800ade6:	d019      	beq.n	800ae1c <oslib_test_002_003_execute.lto_priv.0+0x15c>
 800ade8:	f06f 0801 	mvn.w	r8, #1
 800adec:	f04f 0e00 	mov.w	lr, #0
 800adf0:	460b      	mov	r3, r1
  qp->next       = p->next;
 800adf2:	6809      	ldr	r1, [r1, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800adf4:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800adf6:	6898      	ldr	r0, [r3, #8]
  qp->next       = p->next;
 800adf8:	6231      	str	r1, [r6, #32]
  qp->next->prev = qp;
 800adfa:	604d      	str	r5, [r1, #4]
 800adfc:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800ae00:	f883 e024 	strb.w	lr, [r3, #36]	; 0x24
    pqp = pqp->next;
 800ae04:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800ae06:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800ae0a:	4584      	cmp	ip, r0
 800ae0c:	d2fa      	bcs.n	800ae04 <oslib_test_002_003_execute.lto_priv.0+0x144>
  p->prev       = pqp->prev;
 800ae0e:	6850      	ldr	r0, [r2, #4]
 800ae10:	42a9      	cmp	r1, r5
  p->next       = pqp;
 800ae12:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800ae14:	6058      	str	r0, [r3, #4]
  p->prev->next = p;
 800ae16:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800ae18:	6053      	str	r3, [r2, #4]
 800ae1a:	d1e9      	bne.n	800adf0 <oslib_test_002_003_execute.lto_priv.0+0x130>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800ae1c:	4b2b      	ldr	r3, [pc, #172]	; (800aecc <oslib_test_002_003_execute.lto_priv.0+0x20c>)
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	6892      	ldr	r2, [r2, #8]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d901      	bls.n	800ae2e <oslib_test_002_003_execute.lto_priv.0+0x16e>
    __sch_reschedule_ahead();
 800ae2a:	f7f8 fec9 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800ae2e:	2500      	movs	r5, #0
 800ae30:	f385 8811 	msr	BASEPRI, r5
  test_set_step(4);
 800ae34:	2304      	movs	r3, #4
 800ae36:	f04f 0820 	mov.w	r8, #32
  mbp->reset = false;
 800ae3a:	7535      	strb	r5, [r6, #20]
 800ae3c:	603b      	str	r3, [r7, #0]
 800ae3e:	f388 8811 	msr	BASEPRI, r8
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 800ae42:	2201      	movs	r2, #1
 800ae44:	eb0d 0103 	add.w	r1, sp, r3
 800ae48:	481c      	ldr	r0, [pc, #112]	; (800aebc <oslib_test_002_003_execute.lto_priv.0+0x1fc>)
 800ae4a:	f7fa fa91 	bl	8005370 <chMBFetchTimeoutS>
 800ae4e:	f385 8811 	msr	BASEPRI, r5
 800ae52:	3001      	adds	r0, #1
 800ae54:	d185      	bne.n	800ad62 <oslib_test_002_003_execute.lto_priv.0+0xa2>
 800ae56:	f388 8811 	msr	BASEPRI, r8
  if (mbp->reset) {
 800ae5a:	7d33      	ldrb	r3, [r6, #20]
 800ae5c:	bb2b      	cbnz	r3, 800aeaa <oslib_test_002_003_execute.lto_priv.0+0x1ea>
  return mbp->cnt;
 800ae5e:	6932      	ldr	r2, [r6, #16]
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800ae60:	b332      	cbz	r2, 800aeb0 <oslib_test_002_003_execute.lto_priv.0+0x1f0>
    *msgp = *mbp->rdptr++;
 800ae62:	68f3      	ldr	r3, [r6, #12]
    if (mbp->rdptr >= mbp->top) {
 800ae64:	6871      	ldr	r1, [r6, #4]
    *msgp = *mbp->rdptr++;
 800ae66:	6818      	ldr	r0, [r3, #0]
 800ae68:	3304      	adds	r3, #4
    if (mbp->rdptr >= mbp->top) {
 800ae6a:	428b      	cmp	r3, r1
    *msgp = *mbp->rdptr++;
 800ae6c:	60f3      	str	r3, [r6, #12]
      mbp->rdptr = mbp->buffer;
 800ae6e:	bf28      	it	cs
 800ae70:	6833      	ldrcs	r3, [r6, #0]
    mbp->cnt--;
 800ae72:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
      mbp->rdptr = mbp->buffer;
 800ae76:	bf28      	it	cs
 800ae78:	60f3      	strcs	r3, [r6, #12]
  return (bool)(qp->next != qp);
 800ae7a:	69b3      	ldr	r3, [r6, #24]
    *msgp = *mbp->rdptr++;
 800ae7c:	9001      	str	r0, [sp, #4]
  if (ch_queue_notempty(&tqp->queue)) {
 800ae7e:	42a3      	cmp	r3, r4
    mbp->cnt--;
 800ae80:	6132      	str	r2, [r6, #16]
 800ae82:	d00e      	beq.n	800aea2 <oslib_test_002_003_execute.lto_priv.0+0x1e2>
 800ae84:	2100      	movs	r1, #0
  qp->next       = p->next;
 800ae86:	681a      	ldr	r2, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800ae88:	6898      	ldr	r0, [r3, #8]
  qp->next       = p->next;
 800ae8a:	61b2      	str	r2, [r6, #24]
  qp->next->prev = qp;
 800ae8c:	6054      	str	r4, [r2, #4]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800ae8e:	699a      	ldr	r2, [r3, #24]
 800ae90:	6299      	str	r1, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800ae92:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 800ae96:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800ae98:	6891      	ldr	r1, [r2, #8]
 800ae9a:	4281      	cmp	r1, r0
 800ae9c:	f4ff af59 	bcc.w	800ad52 <oslib_test_002_003_execute.lto_priv.0+0x92>
 800aea0:	e7f9      	b.n	800ae96 <oslib_test_002_003_execute.lto_priv.0+0x1d6>
 800aea2:	2300      	movs	r3, #0
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	e75b      	b.n	800ad62 <oslib_test_002_003_execute.lto_priv.0+0xa2>
 800aeaa:	f385 8811 	msr	BASEPRI, r5
 800aeae:	e758      	b.n	800ad62 <oslib_test_002_003_execute.lto_priv.0+0xa2>
 800aeb0:	f382 8811 	msr	BASEPRI, r2
 800aeb4:	e75a      	b.n	800ad6c <oslib_test_002_003_execute.lto_priv.0+0xac>
 800aeb6:	bf00      	nop
 800aeb8:	20001134 	.word	0x20001134
 800aebc:	20000854 	.word	0x20000854
 800aec0:	20000874 	.word	0x20000874
 800aec4:	0801043c 	.word	0x0801043c
 800aec8:	2000086c 	.word	0x2000086c
 800aecc:	20001050 	.word	0x20001050

0800aed0 <Thread1.lto_priv.0>:
  chThdSleepMilliseconds(10);
}

static THD_WORKING_AREA(wa1Thread1, 256);
static THD_WORKING_AREA(wa2Thread1, 256);
static THD_FUNCTION(Thread1, arg) {
 800aed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aed4:	2720      	movs	r7, #32
 800aed6:	4d23      	ldr	r5, [pc, #140]	; (800af64 <Thread1.lto_priv.0+0x94>)
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800aed8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800af68 <Thread1.lto_priv.0+0x98>
 800aedc:	b083      	sub	sp, #12
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 800aede:	f105 081c 	add.w	r8, r5, #28
 800aee2:	f387 8811 	msr	BASEPRI, r7
 800aee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aeea:	4640      	mov	r0, r8
 800aeec:	a901      	add	r1, sp, #4
 800aeee:	f7fa fa3f 	bl	8005370 <chMBFetchTimeoutS>
 800aef2:	2300      	movs	r3, #0
 800aef4:	4604      	mov	r4, r0
 800aef6:	f383 8811 	msr	BASEPRI, r3
static inline msg_t chJobDispatch(jobs_queue_t *jqp) {
  msg_t msg, jmsg;

  /* Waiting for a job.*/
  msg = chMBFetchTimeout(&jqp->mbx, &jmsg, TIME_INFINITE);
  if (msg == MSG_OK) {
 800aefa:	b110      	cbz	r0, 800af02 <Thread1.lto_priv.0+0x32>
  (void)arg;

  do {
    msg = chJobDispatch(&jq);
  } while (msg == MSG_OK);
}
 800aefc:	b003      	add	sp, #12
 800aefe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    job_descriptor_t *jp = (job_descriptor_t *)jmsg;
 800af02:	9e01      	ldr	r6, [sp, #4]

    chDbgAssert(jp != NULL, "is NULL");

    if (jp->jobfunc != NULL) {
 800af04:	6833      	ldr	r3, [r6, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d0f8      	beq.n	800aefc <Thread1.lto_priv.0+0x2c>

      /* Invoking the job function.*/
      jp->jobfunc(jp->jobarg);
 800af0a:	6870      	ldr	r0, [r6, #4]
 800af0c:	4798      	blx	r3
 800af0e:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 800af12:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
  if (++sp->cnt <= (cnt_t)0) {
 800af16:	3301      	adds	r3, #1
 800af18:	2b00      	cmp	r3, #0
 800af1a:	6032      	str	r2, [r6, #0]
 800af1c:	e9c5 3602 	strd	r3, r6, [r5, #8]
 800af20:	dd0d      	ble.n	800af3e <Thread1.lto_priv.0+0x6e>
 800af22:	f8d9 2000 	ldr.w	r2, [r9]
 800af26:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800af2a:	6892      	ldr	r2, [r2, #8]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d901      	bls.n	800af36 <Thread1.lto_priv.0+0x66>
    __sch_reschedule_ahead();
 800af32:	f7f8 fe45 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800af36:	2300      	movs	r3, #0
 800af38:	f383 8811 	msr	BASEPRI, r3
  } while (msg == MSG_OK);
 800af3c:	e7d1      	b.n	800aee2 <Thread1.lto_priv.0+0x12>
  ch_queue_t *p = qp->next;
 800af3e:	682b      	ldr	r3, [r5, #0]
  qp->next       = p->next;
 800af40:	681a      	ldr	r2, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800af42:	6898      	ldr	r0, [r3, #8]
  qp->next->prev = qp;
 800af44:	6055      	str	r5, [r2, #4]
  qp->next       = p->next;
 800af46:	602a      	str	r2, [r5, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800af48:	699a      	ldr	r2, [r3, #24]
    tp->u.rdymsg = MSG_OK;
 800af4a:	629c      	str	r4, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800af4c:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    pqp = pqp->next;
 800af50:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800af52:	6891      	ldr	r1, [r2, #8]
 800af54:	4281      	cmp	r1, r0
 800af56:	d2fb      	bcs.n	800af50 <Thread1.lto_priv.0+0x80>
  p->prev       = pqp->prev;
 800af58:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 800af5a:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800af5c:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 800af5e:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800af60:	6053      	str	r3, [r2, #4]
  return __sch_ready_behind(tp);
 800af62:	e7de      	b.n	800af22 <Thread1.lto_priv.0+0x52>
 800af64:	200024e0 	.word	0x200024e0
 800af68:	20001050 	.word	0x20001050
 800af6c:	00000000 	.word	0x00000000

0800af70 <oslib_test_007_002_execute.lto_priv.0>:
  test_set_step(1);
 800af70:	2301      	movs	r3, #1
static void oslib_test_007_002_execute(void) {
 800af72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 800af76:	4f51      	ldr	r7, [pc, #324]	; (800b0bc <oslib_test_007_002_execute.lto_priv.0+0x14c>)
 800af78:	f04f 0a04 	mov.w	sl, #4
 800af7c:	f04f 0820 	mov.w	r8, #32
 800af80:	2600      	movs	r6, #0
 800af82:	4d4f      	ldr	r5, [pc, #316]	; (800b0c0 <oslib_test_007_002_execute.lto_priv.0+0x150>)
 800af84:	4c4f      	ldr	r4, [pc, #316]	; (800b0c4 <oslib_test_007_002_execute.lto_priv.0+0x154>)
 800af86:	f8df 9140 	ldr.w	r9, [pc, #320]	; 800b0c8 <oslib_test_007_002_execute.lto_priv.0+0x158>
 800af8a:	603b      	str	r3, [r7, #0]
  while (n != 0U) {
 800af8c:	e010      	b.n	800afb0 <oslib_test_007_002_execute.lto_priv.0+0x40>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800af8e:	f8d9 2000 	ldr.w	r2, [r9]
 800af92:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800af96:	6892      	ldr	r2, [r2, #8]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d901      	bls.n	800afa2 <oslib_test_007_002_execute.lto_priv.0+0x32>
    __sch_reschedule_ahead();
 800af9e:	f7f8 fe0f 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800afa2:	f386 8811 	msr	BASEPRI, r6
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800afa6:	6923      	ldr	r3, [r4, #16]
  while (n != 0U) {
 800afa8:	f1ba 0a01 	subs.w	sl, sl, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800afac:	441d      	add	r5, r3
  while (n != 0U) {
 800afae:	d01c      	beq.n	800afea <oslib_test_007_002_execute.lto_priv.0+0x7a>
 800afb0:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 800afb4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
  if (++sp->cnt <= (cnt_t)0) {
 800afb8:	3301      	adds	r3, #1
 800afba:	2b00      	cmp	r3, #0
 800afbc:	e9c4 3502 	strd	r3, r5, [r4, #8]
 800afc0:	602a      	str	r2, [r5, #0]
 800afc2:	dce4      	bgt.n	800af8e <oslib_test_007_002_execute.lto_priv.0+0x1e>
  ch_queue_t *p = qp->next;
 800afc4:	6822      	ldr	r2, [r4, #0]
  qp->next       = p->next;
 800afc6:	6813      	ldr	r3, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800afc8:	6890      	ldr	r0, [r2, #8]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800afca:	6991      	ldr	r1, [r2, #24]
  qp->next       = p->next;
 800afcc:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 800afce:	605c      	str	r4, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 800afd0:	6296      	str	r6, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800afd2:	f882 6024 	strb.w	r6, [r2, #36]	; 0x24
    pqp = pqp->next;
 800afd6:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800afd8:	688b      	ldr	r3, [r1, #8]
 800afda:	4283      	cmp	r3, r0
 800afdc:	d2fb      	bcs.n	800afd6 <oslib_test_007_002_execute.lto_priv.0+0x66>
  p->prev       = pqp->prev;
 800afde:	684b      	ldr	r3, [r1, #4]
 800afe0:	e9c2 1300 	strd	r1, r3, [r2]
  p->prev->next = p;
 800afe4:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 800afe6:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 800afe8:	e7d1      	b.n	800af8e <oslib_test_007_002_execute.lto_priv.0+0x1e>
  test_set_step(2);
 800afea:	2302      	movs	r3, #2
 800afec:	2504      	movs	r5, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800afee:	4e35      	ldr	r6, [pc, #212]	; (800b0c4 <oslib_test_007_002_execute.lto_priv.0+0x154>)
  test_set_step(2);
 800aff0:	603b      	str	r3, [r7, #0]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800aff2:	2100      	movs	r1, #0
 800aff4:	4630      	mov	r0, r6
 800aff6:	f7fa ff63 	bl	8005ec0 <chGuardedPoolAllocTimeout>
 800affa:	2800      	cmp	r0, #0
 800affc:	d043      	beq.n	800b086 <oslib_test_007_002_execute.lto_priv.0+0x116>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800affe:	3d01      	subs	r5, #1
 800b000:	d1f7      	bne.n	800aff2 <oslib_test_007_002_execute.lto_priv.0+0x82>
  test_set_step(3);
 800b002:	2303      	movs	r3, #3
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800b004:	4629      	mov	r1, r5
 800b006:	482f      	ldr	r0, [pc, #188]	; (800b0c4 <oslib_test_007_002_execute.lto_priv.0+0x154>)
  test_set_step(3);
 800b008:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800b00a:	f7fa ff59 	bl	8005ec0 <chGuardedPoolAllocTimeout>
 800b00e:	bb98      	cbnz	r0, 800b078 <oslib_test_007_002_execute.lto_priv.0+0x108>
  test_set_step(4);
 800b010:	2304      	movs	r3, #4
 800b012:	f04f 0820 	mov.w	r8, #32
 800b016:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800b0c0 <oslib_test_007_002_execute.lto_priv.0+0x150>
 800b01a:	603b      	str	r3, [r7, #0]
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800b01c:	f10a 0610 	add.w	r6, sl, #16
      chGuardedPoolFree(&gmp1, &objects[i]);
 800b020:	4651      	mov	r1, sl
 800b022:	f388 8811 	msr	BASEPRI, r8
 800b026:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
  if (++sp->cnt <= (cnt_t)0) {
 800b02a:	3301      	adds	r3, #1
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	e9c4 3102 	strd	r3, r1, [r4, #8]
 800b032:	f84a 2b04 	str.w	r2, [sl], #4
 800b036:	dd2d      	ble.n	800b094 <oslib_test_007_002_execute.lto_priv.0+0x124>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800b038:	f8d9 2000 	ldr.w	r2, [r9]
 800b03c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b040:	6892      	ldr	r2, [r2, #8]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	429a      	cmp	r2, r3
 800b046:	d901      	bls.n	800b04c <oslib_test_007_002_execute.lto_priv.0+0xdc>
    __sch_reschedule_ahead();
 800b048:	f7f8 fdba 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800b04c:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800b050:	4556      	cmp	r6, sl
 800b052:	d1e5      	bne.n	800b020 <oslib_test_007_002_execute.lto_priv.0+0xb0>
  test_set_step(5);
 800b054:	2305      	movs	r3, #5
 800b056:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800b058:	4d1a      	ldr	r5, [pc, #104]	; (800b0c4 <oslib_test_007_002_execute.lto_priv.0+0x154>)
  test_set_step(5);
 800b05a:	603b      	str	r3, [r7, #0]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800b05c:	2100      	movs	r1, #0
 800b05e:	4628      	mov	r0, r5
 800b060:	f7fa ff2e 	bl	8005ec0 <chGuardedPoolAllocTimeout>
 800b064:	b178      	cbz	r0, 800b086 <oslib_test_007_002_execute.lto_priv.0+0x116>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800b066:	3c01      	subs	r4, #1
 800b068:	d1f8      	bne.n	800b05c <oslib_test_007_002_execute.lto_priv.0+0xec>
  test_set_step(6);
 800b06a:	2306      	movs	r3, #6
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800b06c:	4621      	mov	r1, r4
 800b06e:	4815      	ldr	r0, [pc, #84]	; (800b0c4 <oslib_test_007_002_execute.lto_priv.0+0x154>)
  test_set_step(6);
 800b070:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800b072:	f7fa ff25 	bl	8005ec0 <chGuardedPoolAllocTimeout>
 800b076:	b158      	cbz	r0, 800b090 <oslib_test_007_002_execute.lto_priv.0+0x120>
  chtest.global_fail     = true;
 800b078:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b07c:	4a13      	ldr	r2, [pc, #76]	; (800b0cc <oslib_test_007_002_execute.lto_priv.0+0x15c>)
  chtest.global_fail     = true;
 800b07e:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800b080:	60ba      	str	r2, [r7, #8]
}
 800b082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.global_fail     = true;
 800b086:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b08a:	4a11      	ldr	r2, [pc, #68]	; (800b0d0 <oslib_test_007_002_execute.lto_priv.0+0x160>)
  chtest.global_fail     = true;
 800b08c:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800b08e:	60ba      	str	r2, [r7, #8]
 800b090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  ch_queue_t *p = qp->next;
 800b094:	6822      	ldr	r2, [r4, #0]
  qp->next       = p->next;
 800b096:	6813      	ldr	r3, [r2, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800b098:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800b09a:	6890      	ldr	r0, [r2, #8]
  qp->next->prev = qp;
 800b09c:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800b09e:	6023      	str	r3, [r4, #0]
    tp->u.rdymsg = MSG_OK;
 800b0a0:	6295      	str	r5, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800b0a2:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
    pqp = pqp->next;
 800b0a6:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b0a8:	688b      	ldr	r3, [r1, #8]
 800b0aa:	4283      	cmp	r3, r0
 800b0ac:	d2fb      	bcs.n	800b0a6 <oslib_test_007_002_execute.lto_priv.0+0x136>
  p->prev       = pqp->prev;
 800b0ae:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 800b0b0:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 800b0b2:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 800b0b4:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 800b0b6:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 800b0b8:	e7be      	b.n	800b038 <oslib_test_007_002_execute.lto_priv.0+0xc8>
 800b0ba:	bf00      	nop
 800b0bc:	20001134 	.word	0x20001134
 800b0c0:	20002644 	.word	0x20002644
 800b0c4:	20000838 	.word	0x20000838
 800b0c8:	20001050 	.word	0x20001050
 800b0cc:	080124cc 	.word	0x080124cc
 800b0d0:	080124c0 	.word	0x080124c0
	...

0800b0e0 <oslib_test_007_003_execute.lto_priv.0>:

static void oslib_test_007_003_execute(void) {

  /* [7.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 800b0e0:	2301      	movs	r3, #1
static void oslib_test_007_003_execute(void) {
 800b0e2:	b510      	push	{r4, lr}
  test_set_step(1);
 800b0e4:	4c06      	ldr	r4, [pc, #24]	; (800b100 <oslib_test_007_003_execute.lto_priv.0+0x20>)
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 800b0e6:	21c8      	movs	r1, #200	; 0xc8
 800b0e8:	4806      	ldr	r0, [pc, #24]	; (800b104 <oslib_test_007_003_execute.lto_priv.0+0x24>)
  test_set_step(1);
 800b0ea:	6023      	str	r3, [r4, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 800b0ec:	f7fa fee8 	bl	8005ec0 <chGuardedPoolAllocTimeout>
  if (!condition) {
 800b0f0:	b900      	cbnz	r0, 800b0f4 <oslib_test_007_003_execute.lto_priv.0+0x14>
  }
  test_end_step(1);
}
 800b0f2:	bd10      	pop	{r4, pc}
  chtest.global_fail     = true;
 800b0f4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b0f8:	4a03      	ldr	r2, [pc, #12]	; (800b108 <oslib_test_007_003_execute.lto_priv.0+0x28>)
  chtest.global_fail     = true;
 800b0fa:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 800b0fc:	60a2      	str	r2, [r4, #8]
 800b0fe:	bd10      	pop	{r4, pc}
 800b100:	20001134 	.word	0x20001134
 800b104:	20000838 	.word	0x20000838
 800b108:	080124cc 	.word	0x080124cc
 800b10c:	00000000 	.word	0x00000000

0800b110 <oslib_test_004_001_execute.lto_priv.0>:
 * - [4.1.3] Sending jobs with various timings.
 * - [4.1.4] Sending two null jobs to make threads exit.
 * .
 */

static void oslib_test_004_001_execute(void) {
 800b110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  mp->align = align;
 800b114:	2304      	movs	r3, #4
  mp->next = NULL;
 800b116:	f04f 0900 	mov.w	r9, #0
  thread_t *tp1, *tp2;

  /* [4.1.1] Initializing the Jobs Queue object.*/
  test_set_step(1);
 800b11a:	2101      	movs	r1, #1
  mp->object_size = size;
 800b11c:	2208      	movs	r2, #8
  mp->next = NULL;
 800b11e:	4c63      	ldr	r4, [pc, #396]	; (800b2ac <oslib_test_004_001_execute.lto_priv.0+0x19c>)
 800b120:	4f63      	ldr	r7, [pc, #396]	; (800b2b0 <oslib_test_004_001_execute.lto_priv.0+0x1a0>)
  sp->cnt = n;
 800b122:	461e      	mov	r6, r3
 800b124:	f04f 0820 	mov.w	r8, #32
  qp->prev = qp;
 800b128:	e9c4 4400 	strd	r4, r4, [r4]
  mp->object_size = size;
 800b12c:	e9c4 9203 	strd	r9, r2, [r4, #12]
  mp->provider = provider;
 800b130:	e9c4 3905 	strd	r3, r9, [r4, #20]
 800b134:	4d5f      	ldr	r5, [pc, #380]	; (800b2b4 <oslib_test_004_001_execute.lto_priv.0+0x1a4>)
 800b136:	f8df a180 	ldr.w	sl, [pc, #384]	; 800b2b8 <oslib_test_004_001_execute.lto_priv.0+0x1a8>
static void oslib_test_004_001_execute(void) {
 800b13a:	b08d      	sub	sp, #52	; 0x34
  test_set_step(1);
 800b13c:	6039      	str	r1, [r7, #0]
 800b13e:	f8c4 9008 	str.w	r9, [r4, #8]
  while (n != 0U) {
 800b142:	e00f      	b.n	800b164 <oslib_test_004_001_execute.lto_priv.0+0x54>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800b144:	f8da 2000 	ldr.w	r2, [sl]
 800b148:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b14c:	6892      	ldr	r2, [r2, #8]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	429a      	cmp	r2, r3
 800b152:	d901      	bls.n	800b158 <oslib_test_004_001_execute.lto_priv.0+0x48>
    __sch_reschedule_ahead();
 800b154:	f7f8 fd34 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800b158:	f389 8811 	msr	BASEPRI, r9
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800b15c:	6923      	ldr	r3, [r4, #16]
  while (n != 0U) {
 800b15e:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800b160:	441d      	add	r5, r3
  while (n != 0U) {
 800b162:	d01d      	beq.n	800b1a0 <oslib_test_004_001_execute.lto_priv.0+0x90>
 800b164:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 800b168:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
  if (++sp->cnt <= (cnt_t)0) {
 800b16c:	3301      	adds	r3, #1
 800b16e:	2b00      	cmp	r3, #0
 800b170:	e9c4 3502 	strd	r3, r5, [r4, #8]
 800b174:	602a      	str	r2, [r5, #0]
 800b176:	dce5      	bgt.n	800b144 <oslib_test_004_001_execute.lto_priv.0+0x34>
  ch_queue_t *p = qp->next;
 800b178:	6822      	ldr	r2, [r4, #0]
  qp->next       = p->next;
 800b17a:	6813      	ldr	r3, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b17c:	6890      	ldr	r0, [r2, #8]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800b17e:	6991      	ldr	r1, [r2, #24]
  qp->next       = p->next;
 800b180:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 800b182:	605c      	str	r4, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 800b184:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800b188:	f882 9024 	strb.w	r9, [r2, #36]	; 0x24
    pqp = pqp->next;
 800b18c:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b18e:	688b      	ldr	r3, [r1, #8]
 800b190:	4283      	cmp	r3, r0
 800b192:	d2fb      	bcs.n	800b18c <oslib_test_004_001_execute.lto_priv.0+0x7c>
  p->prev       = pqp->prev;
 800b194:	684b      	ldr	r3, [r1, #4]
 800b196:	e9c2 1300 	strd	r1, r3, [r2]
  p->prev->next = p;
 800b19a:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 800b19c:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 800b19e:	e7d1      	b.n	800b144 <oslib_test_004_001_execute.lto_priv.0+0x34>
  mbp->buffer = buf;
 800b1a0:	4b46      	ldr	r3, [pc, #280]	; (800b2bc <oslib_test_004_001_execute.lto_priv.0+0x1ac>)
  qp->next = qp;
 800b1a2:	f8df b11c 	ldr.w	fp, [pc, #284]	; 800b2c0 <oslib_test_004_001_execute.lto_priv.0+0x1b0>
  mbp->wrptr  = buf;
 800b1a6:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  mbp->buffer = buf;
 800b1aa:	61e3      	str	r3, [r4, #28]
  mbp->top    = &buf[n];
 800b1ac:	3310      	adds	r3, #16
 800b1ae:	6223      	str	r3, [r4, #32]
    chJobObjectInit(&jq, JOBS_QUEUE_SIZE, jobs, msg_queue);
  }
  test_end_step(1);

  /* [4.1.2] Starting the dispatcher threads.*/
  test_set_step(2);
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	603b      	str	r3, [r7, #0]
  return chThdGetSelfX()->hdr.pqueue.prio;
 800b1b4:	f8da 300c 	ldr.w	r3, [sl, #12]
  {
    thread_descriptor_t td1 = {
 800b1b8:	4d42      	ldr	r5, [pc, #264]	; (800b2c4 <oslib_test_004_001_execute.lto_priv.0+0x1b4>)
      .name  = "dispatcher1",
      .wbase = wa1Thread1,
      .wend  = THD_WORKING_AREA_END(wa1Thread1),
      .prio  = chThdGetPriorityX() - 1,
 800b1ba:	689b      	ldr	r3, [r3, #8]
  qp->prev = qp;
 800b1bc:	e9c4 bb0d 	strd	fp, fp, [r4, #52]	; 0x34
 800b1c0:	3b01      	subs	r3, #1
    thread_descriptor_t td1 = {
 800b1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c4:	4b40      	ldr	r3, [pc, #256]	; (800b2c8 <oslib_test_004_001_execute.lto_priv.0+0x1b8>)
  mbp->cnt    = (size_t)0;
 800b1c6:	62e6      	str	r6, [r4, #44]	; 0x2c
 800b1c8:	9307      	str	r3, [sp, #28]
 800b1ca:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800b1ce:	9308      	str	r3, [sp, #32]
 800b1d0:	4b3e      	ldr	r3, [pc, #248]	; (800b2cc <oslib_test_004_001_execute.lto_priv.0+0x1bc>)
  mbp->reset  = false;
 800b1d2:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 800b1d6:	9306      	str	r3, [sp, #24]
  qp->next = qp;
 800b1d8:	f10b 0308 	add.w	r3, fp, #8
  qp->prev = qp;
 800b1dc:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 800b1e0:	960b      	str	r6, [sp, #44]	; 0x2c
 800b1e2:	950a      	str	r5, [sp, #40]	; 0x28
 800b1e4:	2420      	movs	r4, #32
 800b1e6:	f384 8811 	msr	BASEPRI, r4
  tp = chThdCreateSuspendedI(tdp);
 800b1ea:	a806      	add	r0, sp, #24
 800b1ec:	f7f9 f898 	bl	8004320 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800b1f0:	4631      	mov	r1, r6
  tp = chThdCreateSuspendedI(tdp);
 800b1f2:	4681      	mov	r9, r0
  chSchWakeupS(tp, MSG_OK);
 800b1f4:	f7f8 ff64 	bl	80040c0 <chSchWakeupS>
 800b1f8:	f386 8811 	msr	BASEPRI, r6
 800b1fc:	f8da 300c 	ldr.w	r3, [sl, #12]

    thread_descriptor_t td2 = {
      .name  = "dispatcher2",
      .wbase = wa2Thread1,
      .wend  = THD_WORKING_AREA_END(wa2Thread1),
      .prio  = chThdGetPriorityX() - 2,
 800b200:	689b      	ldr	r3, [r3, #8]
    thread_descriptor_t td2 = {
 800b202:	9504      	str	r5, [sp, #16]
      .prio  = chThdGetPriorityX() - 2,
 800b204:	3b02      	subs	r3, #2
    thread_descriptor_t td2 = {
 800b206:	9303      	str	r3, [sp, #12]
 800b208:	4b31      	ldr	r3, [pc, #196]	; (800b2d0 <oslib_test_004_001_execute.lto_priv.0+0x1c0>)
 800b20a:	9605      	str	r6, [sp, #20]
 800b20c:	9301      	str	r3, [sp, #4]
 800b20e:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800b212:	9302      	str	r3, [sp, #8]
 800b214:	4b2f      	ldr	r3, [pc, #188]	; (800b2d4 <oslib_test_004_001_execute.lto_priv.0+0x1c4>)
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	f384 8811 	msr	BASEPRI, r4
  tp = chThdCreateSuspendedI(tdp);
 800b21c:	4668      	mov	r0, sp
 800b21e:	f7f9 f87f 	bl	8004320 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800b222:	4631      	mov	r1, r6
  tp = chThdCreateSuspendedI(tdp);
 800b224:	4680      	mov	r8, r0
  chSchWakeupS(tp, MSG_OK);
 800b226:	f7f8 ff4b 	bl	80040c0 <chSchWakeupS>
 800b22a:	f386 8811 	msr	BASEPRI, r6
    tp2 = chThdCreate(&td2);
  }
  test_end_step(2);

  /* [4.1.3] Sending jobs with various timings.*/
  test_set_step(3);
 800b22e:	2303      	movs	r3, #3
 800b230:	2461      	movs	r4, #97	; 0x61
 800b232:	4e29      	ldr	r6, [pc, #164]	; (800b2d8 <oslib_test_004_001_execute.lto_priv.0+0x1c8>)
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800b234:	f1ab 0534 	sub.w	r5, fp, #52	; 0x34
 800b238:	603b      	str	r3, [r7, #0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800b23a:	f1ab 0b18 	sub.w	fp, fp, #24
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800b23e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b242:	4628      	mov	r0, r5
 800b244:	f7fa fe3c 	bl	8005ec0 <chGuardedPoolAllocTimeout>
 800b248:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800b24a:	2200      	movs	r2, #0
    unsigned i;
    job_descriptor_t *jdp;

    for (i = 0; i < 8; i++) {
      jdp = chJobGet(&jq);
      jdp->jobfunc = job_slow;
 800b24c:	e9c1 6400 	strd	r6, r4, [r1]
 800b250:	4658      	mov	r0, fp
    for (i = 0; i < 8; i++) {
 800b252:	3401      	adds	r4, #1
 800b254:	f7fa f824 	bl	80052a0 <chMBPostTimeout>
 800b258:	2c69      	cmp	r4, #105	; 0x69
 800b25a:	d1f0      	bne.n	800b23e <oslib_test_004_001_execute.lto_priv.0+0x12e>
    }
  }
  test_end_step(3);

  /* [4.1.4] Sending two null jobs to make threads exit.*/
  test_set_step(4);
 800b25c:	2304      	movs	r3, #4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800b25e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b262:	4812      	ldr	r0, [pc, #72]	; (800b2ac <oslib_test_004_001_execute.lto_priv.0+0x19c>)
 800b264:	603b      	str	r3, [r7, #0]
 800b266:	f7fa fe2b 	bl	8005ec0 <chGuardedPoolAllocTimeout>
  {
    job_descriptor_t *jdp;

    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
 800b26a:	2400      	movs	r4, #0
 800b26c:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800b26e:	4622      	mov	r2, r4
    jdp->jobarg  = NULL;
 800b270:	e9c1 4400 	strd	r4, r4, [r1]
 800b274:	4819      	ldr	r0, [pc, #100]	; (800b2dc <oslib_test_004_001_execute.lto_priv.0+0x1cc>)
 800b276:	f7fa f813 	bl	80052a0 <chMBPostTimeout>
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800b27a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b27e:	480b      	ldr	r0, [pc, #44]	; (800b2ac <oslib_test_004_001_execute.lto_priv.0+0x19c>)
 800b280:	f7fa fe1e 	bl	8005ec0 <chGuardedPoolAllocTimeout>
 800b284:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800b286:	4622      	mov	r2, r4
    chJobPost(&jq, jdp);
    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
    jdp->jobarg  = NULL;
 800b288:	e9c1 4400 	strd	r4, r4, [r1]
 800b28c:	4813      	ldr	r0, [pc, #76]	; (800b2dc <oslib_test_004_001_execute.lto_priv.0+0x1cc>)
 800b28e:	f7fa f807 	bl	80052a0 <chMBPostTimeout>
    chJobPost(&jq, jdp);
    (void) chThdWait(tp1);
 800b292:	4648      	mov	r0, r9
 800b294:	f7fa f9d4 	bl	8005640 <chThdWait>
    (void) chThdWait(tp2);
 800b298:	4640      	mov	r0, r8
 800b29a:	f7fa f9d1 	bl	8005640 <chThdWait>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 800b29e:	4910      	ldr	r1, [pc, #64]	; (800b2e0 <oslib_test_004_001_execute.lto_priv.0+0x1d0>)
 800b2a0:	4810      	ldr	r0, [pc, #64]	; (800b2e4 <oslib_test_004_001_execute.lto_priv.0+0x1d4>)
  }
  test_end_step(4);
}
 800b2a2:	b00d      	add	sp, #52	; 0x34
 800b2a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("abcdefgh", "unexpected tokens");
 800b2a8:	f7fb be9a 	b.w	8006fe0 <__test_assert_sequence>
 800b2ac:	200024e0 	.word	0x200024e0
 800b2b0:	20001134 	.word	0x20001134
 800b2b4:	200024c0 	.word	0x200024c0
 800b2b8:	20001050 	.word	0x20001050
 800b2bc:	20002534 	.word	0x20002534
 800b2c0:	20002514 	.word	0x20002514
 800b2c4:	0800aed1 	.word	0x0800aed1
 800b2c8:	20002740 	.word	0x20002740
 800b2cc:	080129d8 	.word	0x080129d8
 800b2d0:	20002930 	.word	0x20002930
 800b2d4:	080129e4 	.word	0x080129e4
 800b2d8:	0800eea1 	.word	0x0800eea1
 800b2dc:	200024fc 	.word	0x200024fc
 800b2e0:	080128d8 	.word	0x080128d8
 800b2e4:	08012908 	.word	0x08012908
	...

0800b2f0 <Thread1.lto_priv.1>:
static THD_WORKING_AREA(waThread1, 256);
static THD_FUNCTION(Thread1, arg) {

  (void)arg;

  exit_flag = false;
 800b2f0:	2300      	movs	r3, #0
static THD_FUNCTION(Thread1, arg) {
 800b2f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  exit_flag = false;
 800b2f6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800b380 <Thread1.lto_priv.1+0x90>
 800b2fa:	2620      	movs	r6, #32
  otp->state = newstate;
 800b2fc:	f04f 0a0e 	mov.w	sl, #14
  ntp->state = CH_STATE_CURRENT;
 800b300:	f04f 0901 	mov.w	r9, #1
 800b304:	4f1f      	ldr	r7, [pc, #124]	; (800b384 <Thread1.lto_priv.1+0x94>)
static THD_FUNCTION(Thread1, arg) {
 800b306:	b083      	sub	sp, #12
  exit_flag = false;
 800b308:	f888 3000 	strb.w	r3, [r8]
 800b30c:	e016      	b.n	800b33c <Thread1.lto_priv.1+0x4c>
 800b30e:	220d      	movs	r2, #13
  qp->next       = p->next;
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	630b      	str	r3, [r1, #48]	; 0x30
  qp->next->prev = qp;
 800b314:	605d      	str	r5, [r3, #4]
 800b316:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800b31a:	f38b 8811 	msr	BASEPRI, fp
  thread_t *tp;
  const call_message_t *cmp;
  msg_t ret;

  tp = chMsgWait();
  cmp = (const call_message_t *)chMsgGet(tp);
 800b31e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  ret = cmp->veneer(cmp->argsp);
 800b320:	e9d3 2000 	ldrd	r2, r0, [r3]
 800b324:	4790      	blx	r2
 800b326:	4601      	mov	r1, r0
 800b328:	f386 8811 	msr	BASEPRI, r6
 800b32c:	4620      	mov	r0, r4
 800b32e:	f7f8 fec7 	bl	80040c0 <chSchWakeupS>
 800b332:	f38b 8811 	msr	BASEPRI, fp
  do {
    chDelegateDispatch();
  } while (!exit_flag);
 800b336:	f898 3000 	ldrb.w	r3, [r8]
 800b33a:	b9c3      	cbnz	r3, 800b36e <Thread1.lto_priv.1+0x7e>
 800b33c:	f386 8811 	msr	BASEPRI, r6
  return __sch_get_currthread();
 800b340:	68f9      	ldr	r1, [r7, #12]
 800b342:	f04f 0b00 	mov.w	fp, #0
  return (bool)(tp->msgqueue.next != &tp->msgqueue);
 800b346:	460d      	mov	r5, r1
 800b348:	f855 4f30 	ldr.w	r4, [r5, #48]!
  if (!chMsgIsPendingI(currtp)) {
 800b34c:	42ac      	cmp	r4, r5
 800b34e:	d1de      	bne.n	800b30e <Thread1.lto_priv.1+0x1e>
  ch_priority_queue_t *p = pqp->next;
 800b350:	6838      	ldr	r0, [r7, #0]
  otp->state = newstate;
 800b352:	f881 a024 	strb.w	sl, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800b356:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(ntp, otp);
 800b358:	9101      	str	r1, [sp, #4]
  pqp->next->prev = pqp;
 800b35a:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800b35c:	f880 9024 	strb.w	r9, [r0, #36]	; 0x24
  pqp->next       = p->next;
 800b360:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 800b362:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 800b364:	f7f4 ff6c 	bl	8000240 <__port_switch>
  ch_queue_t *p = qp->next;
 800b368:	9901      	ldr	r1, [sp, #4]
 800b36a:	6b0c      	ldr	r4, [r1, #48]	; 0x30
}
 800b36c:	e7cf      	b.n	800b30e <Thread1.lto_priv.1+0x1e>
 800b36e:	f386 8811 	msr	BASEPRI, r6
  chThdExitS(msg);
 800b372:	f640 70a5 	movw	r0, #4005	; 0xfa5

  chThdExit(0x0FA5);
}
 800b376:	b003      	add	sp, #12
 800b378:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	f7f9 b860 	b.w	8004440 <chThdExitS>
 800b380:	20001f54 	.word	0x20001f54
 800b384:	20001050 	.word	0x20001050
	...

0800b390 <oslib_test_005_001_execute.lto_priv.0>:

static void oslib_test_005_001_execute(void) {
  thread_t *tp;

  /* [5.1.1] Starting the dispatcher thread.*/
  test_set_step(1);
 800b390:	2101      	movs	r1, #1
static void oslib_test_005_001_execute(void) {
 800b392:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    thread_descriptor_t td = {
 800b394:	2600      	movs	r6, #0
 800b396:	4a3d      	ldr	r2, [pc, #244]	; (800b48c <oslib_test_005_001_execute.lto_priv.0+0xfc>)
 800b398:	4b3d      	ldr	r3, [pc, #244]	; (800b490 <oslib_test_005_001_execute.lto_priv.0+0x100>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800b39a:	68d2      	ldr	r2, [r2, #12]
static void oslib_test_005_001_execute(void) {
 800b39c:	b08b      	sub	sp, #44	; 0x2c
      .name  = "dispatcher",
      .wbase = waThread1,
      .wend  = THD_WORKING_AREA_END(waThread1),
      .prio  = chThdGetPriorityX() + 1,
 800b39e:	6892      	ldr	r2, [r2, #8]
    thread_descriptor_t td = {
 800b3a0:	9305      	str	r3, [sp, #20]
      .prio  = chThdGetPriorityX() + 1,
 800b3a2:	440a      	add	r2, r1
    thread_descriptor_t td = {
 800b3a4:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800b3a8:	e9cd 3206 	strd	r3, r2, [sp, #24]
 800b3ac:	4a39      	ldr	r2, [pc, #228]	; (800b494 <oslib_test_005_001_execute.lto_priv.0+0x104>)
  test_set_step(1);
 800b3ae:	4d3a      	ldr	r5, [pc, #232]	; (800b498 <oslib_test_005_001_execute.lto_priv.0+0x108>)
    thread_descriptor_t td = {
 800b3b0:	9208      	str	r2, [sp, #32]
 800b3b2:	4a3a      	ldr	r2, [pc, #232]	; (800b49c <oslib_test_005_001_execute.lto_priv.0+0x10c>)
 800b3b4:	2320      	movs	r3, #32
  test_set_step(1);
 800b3b6:	6029      	str	r1, [r5, #0]
    thread_descriptor_t td = {
 800b3b8:	9609      	str	r6, [sp, #36]	; 0x24
 800b3ba:	9204      	str	r2, [sp, #16]
 800b3bc:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(tdp);
 800b3c0:	a804      	add	r0, sp, #16
 800b3c2:	f7f8 ffad 	bl	8004320 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800b3c6:	4631      	mov	r1, r6
  tp = chThdCreateSuspendedI(tdp);
 800b3c8:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800b3ca:	f7f8 fe79 	bl	80040c0 <chSchWakeupS>
 800b3ce:	f386 8811 	msr	BASEPRI, r6
  }
  test_end_step(1);

  /* [5.1.2] Calling the default veneers, checking the result and the
     emitted tokens.*/
  test_set_step(2);
 800b3d2:	2302      	movs	r3, #2
 * @param[in] func      pointer to the function to be called
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect0(thread_t *tp, delegate_fn0_t func) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	4a32      	ldr	r2, [pc, #200]	; (800b4a0 <oslib_test_005_001_execute.lto_priv.0+0x110>)
 800b3d8:	4932      	ldr	r1, [pc, #200]	; (800b4a4 <oslib_test_005_001_execute.lto_priv.0+0x114>)
 800b3da:	602b      	str	r3, [r5, #0]
 800b3dc:	f7fa fda8 	bl	8005f30 <chDelegateCallVeneer>
  if (!condition) {
 800b3e0:	f245 53aa 	movw	r3, #21930	; 0x55aa
 800b3e4:	4298      	cmp	r0, r3
 800b3e6:	d149      	bne.n	800b47c <oslib_test_005_001_execute.lto_priv.0+0xec>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect1(thread_t *tp, delegate_fn1_t func,
                                          msg_t p1) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn1, func, p1);
 800b3e8:	2341      	movs	r3, #65	; 0x41
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	4a2e      	ldr	r2, [pc, #184]	; (800b4a8 <oslib_test_005_001_execute.lto_priv.0+0x118>)
 800b3ee:	492f      	ldr	r1, [pc, #188]	; (800b4ac <oslib_test_005_001_execute.lto_priv.0+0x11c>)
 800b3f0:	f7fa fd9e 	bl	8005f30 <chDelegateCallVeneer>
 800b3f4:	2841      	cmp	r0, #65	; 0x41
 800b3f6:	d141      	bne.n	800b47c <oslib_test_005_001_execute.lto_priv.0+0xec>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect2(thread_t *tp, delegate_fn2_t func,
                                          msg_t p1, msg_t p2) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn2, func, p1, p2);
 800b3f8:	2643      	movs	r6, #67	; 0x43
 800b3fa:	2342      	movs	r3, #66	; 0x42
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	4a2c      	ldr	r2, [pc, #176]	; (800b4b0 <oslib_test_005_001_execute.lto_priv.0+0x120>)
 800b400:	492c      	ldr	r1, [pc, #176]	; (800b4b4 <oslib_test_005_001_execute.lto_priv.0+0x124>)
 800b402:	9600      	str	r6, [sp, #0]
 800b404:	f7fa fd94 	bl	8005f30 <chDelegateCallVeneer>
 800b408:	2842      	cmp	r0, #66	; 0x42
 800b40a:	d137      	bne.n	800b47c <oslib_test_005_001_execute.lto_priv.0+0xec>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect3(thread_t *tp, delegate_fn3_t func,
                                          msg_t p1, msg_t p2, msg_t p3) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn3, func, p1, p2, p3);
 800b40c:	2746      	movs	r7, #70	; 0x46
 800b40e:	2645      	movs	r6, #69	; 0x45
 800b410:	2344      	movs	r3, #68	; 0x44
 800b412:	4620      	mov	r0, r4
 800b414:	e9cd 6700 	strd	r6, r7, [sp]
 800b418:	4a27      	ldr	r2, [pc, #156]	; (800b4b8 <oslib_test_005_001_execute.lto_priv.0+0x128>)
 800b41a:	4928      	ldr	r1, [pc, #160]	; (800b4bc <oslib_test_005_001_execute.lto_priv.0+0x12c>)
 800b41c:	f7fa fd88 	bl	8005f30 <chDelegateCallVeneer>
 800b420:	2844      	cmp	r0, #68	; 0x44
 800b422:	d12b      	bne.n	800b47c <oslib_test_005_001_execute.lto_priv.0+0xec>
 */
static inline msg_t chDelegateCallDirect4(thread_t *tp, delegate_fn4_t func,
                                          msg_t p1, msg_t p2, msg_t p3,
                                          msg_t p4) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn4, func, p1, p2, p3, p4);
 800b424:	f04f 0c4a 	mov.w	ip, #74	; 0x4a
 800b428:	2749      	movs	r7, #73	; 0x49
 800b42a:	2648      	movs	r6, #72	; 0x48
 800b42c:	2347      	movs	r3, #71	; 0x47
 800b42e:	4620      	mov	r0, r4
 800b430:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 800b434:	4a22      	ldr	r2, [pc, #136]	; (800b4c0 <oslib_test_005_001_execute.lto_priv.0+0x130>)
 800b436:	4923      	ldr	r1, [pc, #140]	; (800b4c4 <oslib_test_005_001_execute.lto_priv.0+0x134>)
 800b438:	9600      	str	r6, [sp, #0]
 800b43a:	f7fa fd79 	bl	8005f30 <chDelegateCallVeneer>
 800b43e:	2847      	cmp	r0, #71	; 0x47
 800b440:	d11c      	bne.n	800b47c <oslib_test_005_001_execute.lto_priv.0+0xec>
  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 800b442:	4620      	mov	r0, r4
 800b444:	4a20      	ldr	r2, [pc, #128]	; (800b4c8 <oslib_test_005_001_execute.lto_priv.0+0x138>)
 800b446:	4917      	ldr	r1, [pc, #92]	; (800b4a4 <oslib_test_005_001_execute.lto_priv.0+0x114>)
 800b448:	f7fa fd72 	bl	8005f30 <chDelegateCallVeneer>
 800b44c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b450:	4298      	cmp	r0, r3
 800b452:	d113      	bne.n	800b47c <oslib_test_005_001_execute.lto_priv.0+0xec>
    test_assert(retval == (int)'G', "invalid return value");

    retval = chDelegateCallDirect0(tp, (delegate_fn0_t)dis_func_end);
    test_assert(retval == 0xAA55, "invalid return value");

    test_assert_sequence("0ABCDEFGHIJZ", "unexpected tokens");
 800b454:	491d      	ldr	r1, [pc, #116]	; (800b4cc <oslib_test_005_001_execute.lto_priv.0+0x13c>)
 800b456:	481e      	ldr	r0, [pc, #120]	; (800b4d0 <oslib_test_005_001_execute.lto_priv.0+0x140>)
 800b458:	f7fb fdc2 	bl	8006fe0 <__test_assert_sequence>
 800b45c:	b998      	cbnz	r0, 800b486 <oslib_test_005_001_execute.lto_priv.0+0xf6>
  }
  test_end_step(2);

  /* [5.1.3] Waiting for the thread to terminate-.*/
  test_set_step(3);
 800b45e:	2303      	movs	r3, #3
  {
    msg_t msg = chThdWait(tp);
 800b460:	4620      	mov	r0, r4
  test_set_step(3);
 800b462:	602b      	str	r3, [r5, #0]
    msg_t msg = chThdWait(tp);
 800b464:	f7fa f8ec 	bl	8005640 <chThdWait>
 800b468:	f640 73a5 	movw	r3, #4005	; 0xfa5
 800b46c:	4298      	cmp	r0, r3
 800b46e:	d00a      	beq.n	800b486 <oslib_test_005_001_execute.lto_priv.0+0xf6>
  chtest.global_fail     = true;
 800b470:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b474:	4a17      	ldr	r2, [pc, #92]	; (800b4d4 <oslib_test_005_001_execute.lto_priv.0+0x144>)
  chtest.global_fail     = true;
 800b476:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b478:	60aa      	str	r2, [r5, #8]
    return __test_fail(msg);
 800b47a:	e004      	b.n	800b486 <oslib_test_005_001_execute.lto_priv.0+0xf6>
  chtest.global_fail     = true;
 800b47c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b480:	4a15      	ldr	r2, [pc, #84]	; (800b4d8 <oslib_test_005_001_execute.lto_priv.0+0x148>)
  chtest.global_fail     = true;
 800b482:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b484:	60aa      	str	r2, [r5, #8]
    test_assert(msg == 0x0FA5, "invalid exit code");
  }
  test_end_step(3);
}
 800b486:	b00b      	add	sp, #44	; 0x2c
 800b488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b48a:	bf00      	nop
 800b48c:	20001050 	.word	0x20001050
 800b490:	20002b20 	.word	0x20002b20
 800b494:	0800b2f1 	.word	0x0800b2f1
 800b498:	20001134 	.word	0x20001134
 800b49c:	080129f0 	.word	0x080129f0
 800b4a0:	08008df1 	.word	0x08008df1
 800b4a4:	08000911 	.word	0x08000911
 800b4a8:	08008e11 	.word	0x08008e11
 800b4ac:	08000921 	.word	0x08000921
 800b4b0:	08008e31 	.word	0x08008e31
 800b4b4:	08000941 	.word	0x08000941
 800b4b8:	08008e61 	.word	0x08008e61
 800b4bc:	08000961 	.word	0x08000961
 800b4c0:	08008ea1 	.word	0x08008ea1
 800b4c4:	08000981 	.word	0x08000981
 800b4c8:	08008ef1 	.word	0x08008ef1
 800b4cc:	080128d8 	.word	0x080128d8
 800b4d0:	08012a14 	.word	0x08012a14
 800b4d4:	08012a24 	.word	0x08012a24
 800b4d8:	080129fc 	.word	0x080129fc
 800b4dc:	00000000 	.word	0x00000000

0800b4e0 <oslib_test_008_001_execute.lto_priv.0>:
  void *p1, *p2, *p3;
  size_t n, sz;

  /* [8.1.1] Testing initial conditions, the heap must not be
     fragmented and one free block present.*/
  test_set_step(1);
 800b4e0:	2201      	movs	r2, #1
static void oslib_test_008_001_execute(void) {
 800b4e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 800b4e6:	4fca      	ldr	r7, [pc, #808]	; (800b810 <oslib_test_008_001_execute.lto_priv.0+0x330>)
 800b4e8:	2320      	movs	r3, #32
static void oslib_test_008_001_execute(void) {
 800b4ea:	b082      	sub	sp, #8
  test_set_step(1);
 800b4ec:	603a      	str	r2, [r7, #0]
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f8df 8320 	ldr.w	r8, [pc, #800]	; 800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>
 800b4f6:	2500      	movs	r5, #0
 800b4f8:	f108 000c 	add.w	r0, r8, #12
 800b4fc:	f7f9 f958 	bl	80047b0 <chMtxLockS>
 800b500:	f385 8811 	msr	BASEPRI, r5
  while (H_NEXT(qp) != NULL) {
 800b504:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b508:	2c00      	cmp	r4, #0
 800b50a:	f000 81b4 	beq.w	800b876 <oslib_test_008_001_execute.lto_priv.0+0x396>
  n = 0U;
 800b50e:	462e      	mov	r6, r5
    tpages += pages;
 800b510:	6863      	ldr	r3, [r4, #4]
  while (H_NEXT(qp) != NULL) {
 800b512:	6824      	ldr	r4, [r4, #0]
    n++;
 800b514:	3601      	adds	r6, #1
    tpages += pages;
 800b516:	441d      	add	r5, r3
  while (H_NEXT(qp) != NULL) {
 800b518:	2c00      	cmp	r4, #0
 800b51a:	d1f9      	bne.n	800b510 <oslib_test_008_001_execute.lto_priv.0+0x30>
  H_UNLOCK(heapp);
 800b51c:	48be      	ldr	r0, [pc, #760]	; (800b818 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 800b51e:	f7f9 f9df 	bl	80048e0 <chMtxUnlock>
  if (!condition) {
 800b522:	2e01      	cmp	r6, #1
 800b524:	f040 81ab 	bne.w	800b87e <oslib_test_008_001_execute.lto_priv.0+0x39e>
  }
  test_end_step(1);

  /* [8.1.2] Trying to allocate an block bigger than available space,
     an error is expected.*/
  test_set_step(2);
 800b528:	2302      	movs	r3, #2
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 800b52a:	2208      	movs	r2, #8
 800b52c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b530:	48b8      	ldr	r0, [pc, #736]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b532:	603b      	str	r3, [r7, #0]
 800b534:	f7f9 ff74 	bl	8005420 <chHeapAllocAligned>
 800b538:	2800      	cmp	r0, #0
 800b53a:	f040 81a8 	bne.w	800b88e <oslib_test_008_001_execute.lto_priv.0+0x3ae>
  }
  test_end_step(2);

  /* [8.1.3] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(3);
 800b53e:	2303      	movs	r3, #3
 800b540:	2208      	movs	r2, #8
 800b542:	2110      	movs	r1, #16
 800b544:	48b3      	ldr	r0, [pc, #716]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b546:	603b      	str	r3, [r7, #0]
 800b548:	f7f9 ff6a 	bl	8005420 <chHeapAllocAligned>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	f000 81a6 	beq.w	800b89e <oslib_test_008_001_execute.lto_priv.0+0x3be>
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
    chHeapFree(p1);
 800b552:	f7fa f805 	bl	8005560 <chHeapFree>
  }
  test_end_step(3);

  /* [8.1.4] Using chHeapStatus() to assess the heap state. There must
     be at least one free block of sufficient size.*/
  test_set_step(4);
 800b556:	2204      	movs	r2, #4
 800b558:	2320      	movs	r3, #32
 800b55a:	603a      	str	r2, [r7, #0]
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	48ad      	ldr	r0, [pc, #692]	; (800b818 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 800b562:	f7f9 f925 	bl	80047b0 <chMtxLockS>
 800b566:	f384 8811 	msr	BASEPRI, r4
  while (H_NEXT(qp) != NULL) {
 800b56a:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800b56e:	2e00      	cmp	r6, #0
 800b570:	f000 819b 	beq.w	800b8aa <oslib_test_008_001_execute.lto_priv.0+0x3ca>
  tpages = 0U;
 800b574:	4622      	mov	r2, r4
  n = 0U;
 800b576:	46a2      	mov	sl, r4
    size_t pages = H_PAGES(H_NEXT(qp));
 800b578:	6873      	ldr	r3, [r6, #4]
  while (H_NEXT(qp) != NULL) {
 800b57a:	6836      	ldr	r6, [r6, #0]
 800b57c:	429c      	cmp	r4, r3
 800b57e:	bf38      	it	cc
 800b580:	461c      	movcc	r4, r3
    n++;
 800b582:	f10a 0a01 	add.w	sl, sl, #1
    tpages += pages;
 800b586:	441a      	add	r2, r3
  while (H_NEXT(qp) != NULL) {
 800b588:	2e00      	cmp	r6, #0
 800b58a:	d1f5      	bne.n	800b578 <oslib_test_008_001_execute.lto_priv.0+0x98>
  H_UNLOCK(heapp);
 800b58c:	48a2      	ldr	r0, [pc, #648]	; (800b818 <oslib_test_008_001_execute.lto_priv.0+0x338>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800b58e:	ea4f 09c2 	mov.w	r9, r2, lsl #3
  H_UNLOCK(heapp);
 800b592:	f7f9 f9a5 	bl	80048e0 <chMtxUnlock>
 800b596:	f1ba 0f01 	cmp.w	sl, #1
  {
    size_t total_size, largest_size;

    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800b59a:	f8cd a004 	str.w	sl, [sp, #4]
 800b59e:	f040 8187 	bne.w	800b8b0 <oslib_test_008_001_execute.lto_priv.0+0x3d0>
 800b5a2:	f1b9 0f0f 	cmp.w	r9, #15
 800b5a6:	f240 8189 	bls.w	800b8bc <oslib_test_008_001_execute.lto_priv.0+0x3dc>
 800b5aa:	ebb9 0fc4 	cmp.w	r9, r4, lsl #3
 800b5ae:	f040 8185 	bne.w	800b8bc <oslib_test_008_001_execute.lto_priv.0+0x3dc>
    test_assert(total_size == largest_size, "unexpected heap state");
  }
  test_end_step(4);

  /* [8.1.5] Allocating then freeing in the same order.*/
  test_set_step(5);
 800b5b2:	2305      	movs	r3, #5
 800b5b4:	2208      	movs	r2, #8
 800b5b6:	2110      	movs	r1, #16
 800b5b8:	4896      	ldr	r0, [pc, #600]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b5ba:	603b      	str	r3, [r7, #0]
 800b5bc:	f7f9 ff30 	bl	8005420 <chHeapAllocAligned>
 800b5c0:	2208      	movs	r2, #8
 800b5c2:	4682      	mov	sl, r0
 800b5c4:	2110      	movs	r1, #16
 800b5c6:	4893      	ldr	r0, [pc, #588]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b5c8:	f7f9 ff2a 	bl	8005420 <chHeapAllocAligned>
 800b5cc:	2208      	movs	r2, #8
 800b5ce:	2110      	movs	r1, #16
 800b5d0:	4681      	mov	r9, r0
 800b5d2:	4890      	ldr	r0, [pc, #576]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b5d4:	f7f9 ff24 	bl	8005420 <chHeapAllocAligned>
 800b5d8:	4604      	mov	r4, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);                                 /* Does not merge.*/
 800b5da:	4650      	mov	r0, sl
 800b5dc:	f7f9 ffc0 	bl	8005560 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 800b5e0:	4648      	mov	r0, r9
 800b5e2:	f7f9 ffbd 	bl	8005560 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f7f9 ffba 	bl	8005560 <chHeapFree>
 800b5ec:	2320      	movs	r3, #32
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	4889      	ldr	r0, [pc, #548]	; (800b818 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 800b5f4:	f7f9 f8dc 	bl	80047b0 <chMtxLockS>
 800b5f8:	f386 8811 	msr	BASEPRI, r6
  while (H_NEXT(qp) != NULL) {
 800b5fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b600:	2c00      	cmp	r4, #0
 800b602:	f000 8161 	beq.w	800b8c8 <oslib_test_008_001_execute.lto_priv.0+0x3e8>
  n = 0U;
 800b606:	46b1      	mov	r9, r6
    tpages += pages;
 800b608:	6863      	ldr	r3, [r4, #4]
  while (H_NEXT(qp) != NULL) {
 800b60a:	6824      	ldr	r4, [r4, #0]
    n++;
 800b60c:	f109 0901 	add.w	r9, r9, #1
    tpages += pages;
 800b610:	441e      	add	r6, r3
  while (H_NEXT(qp) != NULL) {
 800b612:	2c00      	cmp	r4, #0
 800b614:	d1f8      	bne.n	800b608 <oslib_test_008_001_execute.lto_priv.0+0x128>
  H_UNLOCK(heapp);
 800b616:	4880      	ldr	r0, [pc, #512]	; (800b818 <oslib_test_008_001_execute.lto_priv.0+0x338>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800b618:	00f6      	lsls	r6, r6, #3
 800b61a:	9601      	str	r6, [sp, #4]
  H_UNLOCK(heapp);
 800b61c:	f7f9 f960 	bl	80048e0 <chMtxUnlock>
 800b620:	f1b9 0f01 	cmp.w	r9, #1
 800b624:	f040 812b 	bne.w	800b87e <oslib_test_008_001_execute.lto_priv.0+0x39e>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
  }
  test_end_step(5);

  /* [8.1.6] Allocating then freeing in reverse order.*/
  test_set_step(6);
 800b628:	2306      	movs	r3, #6
 800b62a:	2208      	movs	r2, #8
 800b62c:	2110      	movs	r1, #16
 800b62e:	4879      	ldr	r0, [pc, #484]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b630:	603b      	str	r3, [r7, #0]
 800b632:	f7f9 fef5 	bl	8005420 <chHeapAllocAligned>
 800b636:	2208      	movs	r2, #8
 800b638:	4606      	mov	r6, r0
 800b63a:	2110      	movs	r1, #16
 800b63c:	4875      	ldr	r0, [pc, #468]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b63e:	f7f9 feef 	bl	8005420 <chHeapAllocAligned>
 800b642:	4681      	mov	r9, r0
 800b644:	2208      	movs	r2, #8
 800b646:	2110      	movs	r1, #16
 800b648:	4872      	ldr	r0, [pc, #456]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b64a:	f7f9 fee9 	bl	8005420 <chHeapAllocAligned>
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p3);                                 /* Merges forward.*/
 800b64e:	f7f9 ff87 	bl	8005560 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 800b652:	4648      	mov	r0, r9
 800b654:	f7f9 ff84 	bl	8005560 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 800b658:	4630      	mov	r0, r6
 800b65a:	f7f9 ff81 	bl	8005560 <chHeapFree>
 800b65e:	2320      	movs	r3, #32
 800b660:	f383 8811 	msr	BASEPRI, r3
 800b664:	486c      	ldr	r0, [pc, #432]	; (800b818 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 800b666:	f7f9 f8a3 	bl	80047b0 <chMtxLockS>
 800b66a:	f384 8811 	msr	BASEPRI, r4
  while (H_NEXT(qp) != NULL) {
 800b66e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800b672:	2e00      	cmp	r6, #0
 800b674:	f000 8128 	beq.w	800b8c8 <oslib_test_008_001_execute.lto_priv.0+0x3e8>
  n = 0U;
 800b678:	46a1      	mov	r9, r4
    tpages += pages;
 800b67a:	6873      	ldr	r3, [r6, #4]
  while (H_NEXT(qp) != NULL) {
 800b67c:	6836      	ldr	r6, [r6, #0]
    n++;
 800b67e:	f109 0901 	add.w	r9, r9, #1
    tpages += pages;
 800b682:	441c      	add	r4, r3
  while (H_NEXT(qp) != NULL) {
 800b684:	2e00      	cmp	r6, #0
 800b686:	d1f8      	bne.n	800b67a <oslib_test_008_001_execute.lto_priv.0+0x19a>
  H_UNLOCK(heapp);
 800b688:	4863      	ldr	r0, [pc, #396]	; (800b818 <oslib_test_008_001_execute.lto_priv.0+0x338>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800b68a:	00e4      	lsls	r4, r4, #3
 800b68c:	9401      	str	r4, [sp, #4]
  H_UNLOCK(heapp);
 800b68e:	f7f9 f927 	bl	80048e0 <chMtxUnlock>
 800b692:	f1b9 0f01 	cmp.w	r9, #1
 800b696:	f040 80f2 	bne.w	800b87e <oslib_test_008_001_execute.lto_priv.0+0x39e>
  }
  test_end_step(6);

  /* [8.1.7] Small fragments handling. Checking the behavior when
     allocating blocks with size not multiple of alignment unit.*/
  test_set_step(7);
 800b69a:	2307      	movs	r3, #7
 800b69c:	2208      	movs	r2, #8
 800b69e:	2111      	movs	r1, #17
 800b6a0:	485c      	ldr	r0, [pc, #368]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b6a2:	603b      	str	r3, [r7, #0]
 800b6a4:	f7f9 febc 	bl	8005420 <chHeapAllocAligned>
 800b6a8:	2208      	movs	r2, #8
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	2110      	movs	r1, #16
 800b6ae:	4859      	ldr	r0, [pc, #356]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b6b0:	f7f9 feb6 	bl	8005420 <chHeapAllocAligned>
 800b6b4:	4681      	mov	r9, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE + 1);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f7f9 ff52 	bl	8005560 <chHeapFree>
 800b6bc:	2320      	movs	r3, #32
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	4855      	ldr	r0, [pc, #340]	; (800b818 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 800b6c4:	f7f9 f874 	bl	80047b0 <chMtxLockS>
 800b6c8:	f386 8811 	msr	BASEPRI, r6
  while (H_NEXT(qp) != NULL) {
 800b6cc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b6d0:	2c00      	cmp	r4, #0
 800b6d2:	f000 80ff 	beq.w	800b8d4 <oslib_test_008_001_execute.lto_priv.0+0x3f4>
  n = 0U;
 800b6d6:	46b2      	mov	sl, r6
    tpages += pages;
 800b6d8:	6863      	ldr	r3, [r4, #4]
  while (H_NEXT(qp) != NULL) {
 800b6da:	6824      	ldr	r4, [r4, #0]
    n++;
 800b6dc:	f10a 0a01 	add.w	sl, sl, #1
    tpages += pages;
 800b6e0:	441e      	add	r6, r3
  while (H_NEXT(qp) != NULL) {
 800b6e2:	2c00      	cmp	r4, #0
 800b6e4:	d1f8      	bne.n	800b6d8 <oslib_test_008_001_execute.lto_priv.0+0x1f8>
  H_UNLOCK(heapp);
 800b6e6:	484c      	ldr	r0, [pc, #304]	; (800b818 <oslib_test_008_001_execute.lto_priv.0+0x338>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800b6e8:	00f6      	lsls	r6, r6, #3
 800b6ea:	9601      	str	r6, [sp, #4]
  H_UNLOCK(heapp);
 800b6ec:	f7f9 f8f8 	bl	80048e0 <chMtxUnlock>
 800b6f0:	f1ba 0f02 	cmp.w	sl, #2
 800b6f4:	f040 80f2 	bne.w	800b8dc <oslib_test_008_001_execute.lto_priv.0+0x3fc>
 800b6f8:	2208      	movs	r2, #8
 800b6fa:	2110      	movs	r1, #16
 800b6fc:	4845      	ldr	r0, [pc, #276]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b6fe:	f7f9 fe8f 	bl	8005420 <chHeapAllocAligned>
 800b702:	2320      	movs	r3, #32
 800b704:	4606      	mov	r6, r0
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	4843      	ldr	r0, [pc, #268]	; (800b818 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 800b70c:	f7f9 f850 	bl	80047b0 <chMtxLockS>
 800b710:	f384 8811 	msr	BASEPRI, r4
  while (H_NEXT(qp) != NULL) {
 800b714:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 80e5 	beq.w	800b8e8 <oslib_test_008_001_execute.lto_priv.0+0x408>
  n = 0U;
 800b71e:	46a0      	mov	r8, r4
    tpages += pages;
 800b720:	685a      	ldr	r2, [r3, #4]
  while (H_NEXT(qp) != NULL) {
 800b722:	681b      	ldr	r3, [r3, #0]
    n++;
 800b724:	f108 0801 	add.w	r8, r8, #1
    tpages += pages;
 800b728:	4414      	add	r4, r2
  while (H_NEXT(qp) != NULL) {
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d1f8      	bne.n	800b720 <oslib_test_008_001_execute.lto_priv.0+0x240>
  H_UNLOCK(heapp);
 800b72e:	483a      	ldr	r0, [pc, #232]	; (800b818 <oslib_test_008_001_execute.lto_priv.0+0x338>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800b730:	00e4      	lsls	r4, r4, #3
 800b732:	9401      	str	r4, [sp, #4]
  H_UNLOCK(heapp);
 800b734:	f7f9 f8d4 	bl	80048e0 <chMtxUnlock>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    /* Note, the first situation happens when the alignment size is smaller
       than the header size, the second in the other cases.*/
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800b738:	f1b8 0f01 	cmp.w	r8, #1
 800b73c:	f040 80d8 	bne.w	800b8f0 <oslib_test_008_001_execute.lto_priv.0+0x410>
 800b740:	ac01      	add	r4, sp, #4
                (chHeapStatus(&test_heap, &n, NULL) == 2), "heap fragmented");
    chHeapFree(p2);
 800b742:	4648      	mov	r0, r9
 800b744:	f7f9 ff0c 	bl	8005560 <chHeapFree>
    chHeapFree(p1);
 800b748:	4630      	mov	r0, r6
 800b74a:	f7f9 ff09 	bl	8005560 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800b74e:	2200      	movs	r2, #0
 800b750:	4621      	mov	r1, r4
 800b752:	4830      	ldr	r0, [pc, #192]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b754:	f7fa fb7c 	bl	8005e50 <chHeapStatus>
 800b758:	f1a0 0001 	sub.w	r0, r0, #1
 800b75c:	fab0 f080 	clz	r0, r0
 800b760:	492e      	ldr	r1, [pc, #184]	; (800b81c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800b762:	0940      	lsrs	r0, r0, #5
 800b764:	f7fb fc2c 	bl	8006fc0 <__test_assert>
 800b768:	4680      	mov	r8, r0
 800b76a:	2800      	cmp	r0, #0
 800b76c:	f040 808c 	bne.w	800b888 <oslib_test_008_001_execute.lto_priv.0+0x3a8>
  }
  test_end_step(7);

  /* [8.1.8] Skipping a fragment, the first fragment in the list is too
     small so the allocator must pick the second one.*/
  test_set_step(8);
 800b770:	2608      	movs	r6, #8
 800b772:	2110      	movs	r1, #16
 800b774:	4632      	mov	r2, r6
 800b776:	4827      	ldr	r0, [pc, #156]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b778:	603e      	str	r6, [r7, #0]
 800b77a:	f7f9 fe51 	bl	8005420 <chHeapAllocAligned>
 800b77e:	4632      	mov	r2, r6
 800b780:	2110      	movs	r1, #16
 800b782:	4682      	mov	sl, r0
 800b784:	4823      	ldr	r0, [pc, #140]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b786:	f7f9 fe4b 	bl	8005420 <chHeapAllocAligned>
 800b78a:	4681      	mov	r9, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);
 800b78c:	4650      	mov	r0, sl
 800b78e:	f7f9 fee7 	bl	8005560 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 800b792:	4642      	mov	r2, r8
 800b794:	4621      	mov	r1, r4
 800b796:	481f      	ldr	r0, [pc, #124]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b798:	f7fa fb5a 	bl	8005e50 <chHeapStatus>
 800b79c:	f1a0 0c02 	sub.w	ip, r0, #2
 800b7a0:	f1dc 0000 	rsbs	r0, ip, #0
 800b7a4:	491e      	ldr	r1, [pc, #120]	; (800b820 <oslib_test_008_001_execute.lto_priv.0+0x340>)
 800b7a6:	eb40 000c 	adc.w	r0, r0, ip
 800b7aa:	f7fb fc09 	bl	8006fc0 <__test_assert>
 800b7ae:	4680      	mov	r8, r0
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d169      	bne.n	800b888 <oslib_test_008_001_execute.lto_priv.0+0x3a8>
 800b7b4:	4632      	mov	r2, r6
 800b7b6:	2120      	movs	r1, #32
 800b7b8:	4816      	ldr	r0, [pc, #88]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b7ba:	f7f9 fe31 	bl	8005420 <chHeapAllocAligned>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE * 2); /* Skips first fragment.*/
    chHeapFree(p1);
 800b7be:	f7f9 fecf 	bl	8005560 <chHeapFree>
    chHeapFree(p2);
 800b7c2:	4648      	mov	r0, r9
 800b7c4:	f7f9 fecc 	bl	8005560 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800b7c8:	4642      	mov	r2, r8
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	4811      	ldr	r0, [pc, #68]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b7ce:	f7fa fb3f 	bl	8005e50 <chHeapStatus>
 800b7d2:	1e42      	subs	r2, r0, #1
 800b7d4:	4250      	negs	r0, r2
 800b7d6:	4150      	adcs	r0, r2
 800b7d8:	4910      	ldr	r1, [pc, #64]	; (800b81c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800b7da:	f7fb fbf1 	bl	8006fc0 <__test_assert>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d151      	bne.n	800b888 <oslib_test_008_001_execute.lto_priv.0+0x3a8>
  }
  test_end_step(8);

  /* [8.1.9] Allocating the whole available space.*/
  test_set_step(9);
 800b7e4:	2309      	movs	r3, #9
  {
    (void)chHeapStatus(&test_heap, &n, NULL);
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	480a      	ldr	r0, [pc, #40]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
  test_set_step(9);
 800b7ea:	603b      	str	r3, [r7, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 800b7ec:	f7fa fb30 	bl	8005e50 <chHeapStatus>
 800b7f0:	4632      	mov	r2, r6
 800b7f2:	9901      	ldr	r1, [sp, #4]
 800b7f4:	4807      	ldr	r0, [pc, #28]	; (800b814 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 800b7f6:	f7f9 fe13 	bl	8005420 <chHeapAllocAligned>
    p1 = chHeapAlloc(&test_heap, n);
    test_assert(p1 != NULL, "allocation failed");
 800b7fa:	4680      	mov	r8, r0
 800b7fc:	3800      	subs	r0, #0
 800b7fe:	bf18      	it	ne
 800b800:	2001      	movne	r0, #1
 800b802:	4908      	ldr	r1, [pc, #32]	; (800b824 <oslib_test_008_001_execute.lto_priv.0+0x344>)
 800b804:	f7fb fbdc 	bl	8006fc0 <__test_assert>
 800b808:	4602      	mov	r2, r0
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d13c      	bne.n	800b888 <oslib_test_008_001_execute.lto_priv.0+0x3a8>
 800b80e:	e00b      	b.n	800b828 <oslib_test_008_001_execute.lto_priv.0+0x348>
 800b810:	20001134 	.word	0x20001134
 800b814:	2000265c 	.word	0x2000265c
 800b818:	20002668 	.word	0x20002668
 800b81c:	08010478 	.word	0x08010478
 800b820:	08012a90 	.word	0x08012a90
 800b824:	08012a50 	.word	0x08012a50
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 800b828:	4601      	mov	r1, r0
 800b82a:	4836      	ldr	r0, [pc, #216]	; (800b904 <oslib_test_008_001_execute.lto_priv.0+0x424>)
 800b82c:	f7fa fb10 	bl	8005e50 <chHeapStatus>
 800b830:	fab0 f080 	clz	r0, r0
 800b834:	4934      	ldr	r1, [pc, #208]	; (800b908 <oslib_test_008_001_execute.lto_priv.0+0x428>)
 800b836:	0940      	lsrs	r0, r0, #5
 800b838:	f7fb fbc2 	bl	8006fc0 <__test_assert>
 800b83c:	4606      	mov	r6, r0
 800b83e:	bb18      	cbnz	r0, 800b888 <oslib_test_008_001_execute.lto_priv.0+0x3a8>
    chHeapFree(p1);
 800b840:	4640      	mov	r0, r8
 800b842:	f7f9 fe8d 	bl	8005560 <chHeapFree>
  }
  test_end_step(9);

  /* [8.1.10] Testing final conditions. The heap geometry must be the
     same than the one registered at beginning.*/
  test_set_step(10);
 800b846:	230a      	movs	r3, #10
  {
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800b848:	4621      	mov	r1, r4
 800b84a:	4632      	mov	r2, r6
 800b84c:	482d      	ldr	r0, [pc, #180]	; (800b904 <oslib_test_008_001_execute.lto_priv.0+0x424>)
  test_set_step(10);
 800b84e:	603b      	str	r3, [r7, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800b850:	f7fa fafe 	bl	8005e50 <chHeapStatus>
 800b854:	1e43      	subs	r3, r0, #1
 800b856:	4258      	negs	r0, r3
 800b858:	4158      	adcs	r0, r3
 800b85a:	492c      	ldr	r1, [pc, #176]	; (800b90c <oslib_test_008_001_execute.lto_priv.0+0x42c>)
 800b85c:	f7fb fbb0 	bl	8006fc0 <__test_assert>
 800b860:	b990      	cbnz	r0, 800b888 <oslib_test_008_001_execute.lto_priv.0+0x3a8>
    test_assert(n == sz, "size changed");
 800b862:	9b01      	ldr	r3, [sp, #4]
 800b864:	492a      	ldr	r1, [pc, #168]	; (800b910 <oslib_test_008_001_execute.lto_priv.0+0x430>)
 800b866:	ebb3 0fc5 	cmp.w	r3, r5, lsl #3
 800b86a:	bf0c      	ite	eq
 800b86c:	2001      	moveq	r0, #1
 800b86e:	2000      	movne	r0, #0
 800b870:	f7fb fba6 	bl	8006fc0 <__test_assert>
 800b874:	e008      	b.n	800b888 <oslib_test_008_001_execute.lto_priv.0+0x3a8>
 800b876:	f108 000c 	add.w	r0, r8, #12
 800b87a:	f7f9 f831 	bl	80048e0 <chMtxUnlock>
  chtest.global_fail     = true;
 800b87e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b882:	4a22      	ldr	r2, [pc, #136]	; (800b90c <oslib_test_008_001_execute.lto_priv.0+0x42c>)
  chtest.global_fail     = true;
 800b884:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800b886:	60ba      	str	r2, [r7, #8]
  }
  test_end_step(10);
}
 800b888:	b002      	add	sp, #8
 800b88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.global_fail     = true;
 800b88e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b892:	4a20      	ldr	r2, [pc, #128]	; (800b914 <oslib_test_008_001_execute.lto_priv.0+0x434>)
  chtest.global_fail     = true;
 800b894:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800b896:	60ba      	str	r2, [r7, #8]
 800b898:	b002      	add	sp, #8
 800b89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.global_fail     = true;
 800b89e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b8a2:	4a1d      	ldr	r2, [pc, #116]	; (800b918 <oslib_test_008_001_execute.lto_priv.0+0x438>)
  chtest.global_fail     = true;
 800b8a4:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800b8a6:	60ba      	str	r2, [r7, #8]
 800b8a8:	e7ee      	b.n	800b888 <oslib_test_008_001_execute.lto_priv.0+0x3a8>
 800b8aa:	481c      	ldr	r0, [pc, #112]	; (800b91c <oslib_test_008_001_execute.lto_priv.0+0x43c>)
 800b8ac:	f7f9 f818 	bl	80048e0 <chMtxUnlock>
  chtest.global_fail     = true;
 800b8b0:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b8b4:	4a1a      	ldr	r2, [pc, #104]	; (800b920 <oslib_test_008_001_execute.lto_priv.0+0x440>)
  chtest.global_fail     = true;
 800b8b6:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800b8b8:	60ba      	str	r2, [r7, #8]
 800b8ba:	e7e5      	b.n	800b888 <oslib_test_008_001_execute.lto_priv.0+0x3a8>
  chtest.global_fail     = true;
 800b8bc:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b8c0:	4a18      	ldr	r2, [pc, #96]	; (800b924 <oslib_test_008_001_execute.lto_priv.0+0x444>)
  chtest.global_fail     = true;
 800b8c2:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800b8c4:	60ba      	str	r2, [r7, #8]
 800b8c6:	e7df      	b.n	800b888 <oslib_test_008_001_execute.lto_priv.0+0x3a8>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800b8c8:	2300      	movs	r3, #0
  H_UNLOCK(heapp);
 800b8ca:	4814      	ldr	r0, [pc, #80]	; (800b91c <oslib_test_008_001_execute.lto_priv.0+0x43c>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800b8cc:	9301      	str	r3, [sp, #4]
  H_UNLOCK(heapp);
 800b8ce:	f7f9 f807 	bl	80048e0 <chMtxUnlock>
  if (!condition) {
 800b8d2:	e7d4      	b.n	800b87e <oslib_test_008_001_execute.lto_priv.0+0x39e>
 800b8d4:	4811      	ldr	r0, [pc, #68]	; (800b91c <oslib_test_008_001_execute.lto_priv.0+0x43c>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800b8d6:	9601      	str	r6, [sp, #4]
  H_UNLOCK(heapp);
 800b8d8:	f7f9 f802 	bl	80048e0 <chMtxUnlock>
  chtest.global_fail     = true;
 800b8dc:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b8e0:	4a11      	ldr	r2, [pc, #68]	; (800b928 <oslib_test_008_001_execute.lto_priv.0+0x448>)
  chtest.global_fail     = true;
 800b8e2:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800b8e4:	60ba      	str	r2, [r7, #8]
 800b8e6:	e7cf      	b.n	800b888 <oslib_test_008_001_execute.lto_priv.0+0x3a8>
 800b8e8:	480c      	ldr	r0, [pc, #48]	; (800b91c <oslib_test_008_001_execute.lto_priv.0+0x43c>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800b8ea:	9401      	str	r4, [sp, #4]
  H_UNLOCK(heapp);
 800b8ec:	f7f8 fff8 	bl	80048e0 <chMtxUnlock>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800b8f0:	ac01      	add	r4, sp, #4
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	4621      	mov	r1, r4
 800b8f6:	4803      	ldr	r0, [pc, #12]	; (800b904 <oslib_test_008_001_execute.lto_priv.0+0x424>)
 800b8f8:	f7fa faaa 	bl	8005e50 <chHeapStatus>
 800b8fc:	2802      	cmp	r0, #2
 800b8fe:	d1be      	bne.n	800b87e <oslib_test_008_001_execute.lto_priv.0+0x39e>
 800b900:	e71f      	b.n	800b742 <oslib_test_008_001_execute.lto_priv.0+0x262>
 800b902:	bf00      	nop
 800b904:	2000265c 	.word	0x2000265c
 800b908:	08012920 	.word	0x08012920
 800b90c:	08010478 	.word	0x08010478
 800b910:	08012aa0 	.word	0x08012aa0
 800b914:	08012a38 	.word	0x08012a38
 800b918:	08012a50 	.word	0x08012a50
 800b91c:	20002668 	.word	0x20002668
 800b920:	08012a64 	.word	0x08012a64
 800b924:	08012a78 	.word	0x08012a78
 800b928:	08012a90 	.word	0x08012a90
 800b92c:	00000000 	.word	0x00000000

0800b930 <oslib_test_008_002_execute.lto_priv.0>:
  void *p1;
  size_t total_size, largest_size;

  /* [8.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 800b930:	2201      	movs	r2, #1
static void oslib_test_008_002_execute(void) {
 800b932:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 800b934:	4d17      	ldr	r5, [pc, #92]	; (800b994 <oslib_test_008_002_execute.lto_priv.0+0x64>)
 800b936:	2320      	movs	r3, #32
 800b938:	602a      	str	r2, [r5, #0]
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	4816      	ldr	r0, [pc, #88]	; (800b998 <oslib_test_008_002_execute.lto_priv.0+0x68>)
 800b940:	f7f8 ff36 	bl	80047b0 <chMtxLockS>
 800b944:	2300      	movs	r3, #0
 800b946:	f383 8811 	msr	BASEPRI, r3
  qp = &heapp->header;
 800b94a:	4c14      	ldr	r4, [pc, #80]	; (800b99c <oslib_test_008_002_execute.lto_priv.0+0x6c>)
  while (H_NEXT(qp) != NULL) {
 800b94c:	6824      	ldr	r4, [r4, #0]
 800b94e:	2c00      	cmp	r4, #0
 800b950:	d1fc      	bne.n	800b94c <oslib_test_008_002_execute.lto_priv.0+0x1c>
  H_UNLOCK(heapp);
 800b952:	4811      	ldr	r0, [pc, #68]	; (800b998 <oslib_test_008_002_execute.lto_priv.0+0x68>)
 800b954:	f7f8 ffc4 	bl	80048e0 <chMtxUnlock>
 800b958:	2208      	movs	r2, #8
 800b95a:	2110      	movs	r1, #16
 800b95c:	4810      	ldr	r0, [pc, #64]	; (800b9a0 <oslib_test_008_002_execute.lto_priv.0+0x70>)
 800b95e:	f7f9 fd5f 	bl	8005420 <chHeapAllocAligned>
  if (!condition) {
 800b962:	b158      	cbz	r0, 800b97c <oslib_test_008_002_execute.lto_priv.0+0x4c>
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
    chHeapFree(p1);
 800b964:	f7f9 fdfc 	bl	8005560 <chHeapFree>
  }
  test_end_step(1);

  /* [8.2.2] Testing allocation failure.*/
  test_set_step(2);
 800b968:	2302      	movs	r3, #2
 800b96a:	2208      	movs	r2, #8
 800b96c:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800b970:	4620      	mov	r0, r4
 800b972:	602b      	str	r3, [r5, #0]
 800b974:	f7f9 fd54 	bl	8005420 <chHeapAllocAligned>
 800b978:	b930      	cbnz	r0, 800b988 <oslib_test_008_002_execute.lto_priv.0+0x58>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
  test_end_step(2);
}
 800b97a:	bd38      	pop	{r3, r4, r5, pc}
  chtest.global_fail     = true;
 800b97c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b980:	4a08      	ldr	r2, [pc, #32]	; (800b9a4 <oslib_test_008_002_execute.lto_priv.0+0x74>)
  chtest.global_fail     = true;
 800b982:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b984:	60aa      	str	r2, [r5, #8]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
  chtest.global_fail     = true;
 800b988:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b98c:	4a06      	ldr	r2, [pc, #24]	; (800b9a8 <oslib_test_008_002_execute.lto_priv.0+0x78>)
  chtest.global_fail     = true;
 800b98e:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b990:	60aa      	str	r2, [r5, #8]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	20001134 	.word	0x20001134
 800b998:	20001168 	.word	0x20001168
 800b99c:	20001160 	.word	0x20001160
 800b9a0:	2000265c 	.word	0x2000265c
 800b9a4:	08012a50 	.word	0x08012a50
 800b9a8:	08012a38 	.word	0x08012a38
 800b9ac:	00000000 	.word	0x00000000

0800b9b0 <chFactoryCreateSemaphore.constprop.0>:
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 800b9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b2:	2320      	movs	r3, #32
 800b9b4:	f383 8811 	msr	BASEPRI, r3
 800b9b8:	4f2a      	ldr	r7, [pc, #168]	; (800ba64 <chFactoryCreateSemaphore.constprop.0+0xb4>)
 800b9ba:	4638      	mov	r0, r7
 800b9bc:	f7f8 fef8 	bl	80047b0 <chMtxLockS>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800b9c6:	463d      	mov	r5, r7
 800b9c8:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800b9cc:	42ac      	cmp	r4, r5
 800b9ce:	d012      	beq.n	800b9f6 <chFactoryCreateSemaphore.constprop.0+0x46>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b9d0:	4e25      	ldr	r6, [pc, #148]	; (800ba68 <chFactoryCreateSemaphore.constprop.0+0xb8>)
 800b9d2:	e002      	b.n	800b9da <chFactoryCreateSemaphore.constprop.0+0x2a>
    p = p->next;
 800b9d4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800b9d6:	42ac      	cmp	r4, r5
 800b9d8:	d00d      	beq.n	800b9f6 <chFactoryCreateSemaphore.constprop.0+0x46>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b9da:	4631      	mov	r1, r6
 800b9dc:	f104 0008 	add.w	r0, r4, #8
 800b9e0:	f7f4 fcba 	bl	8000358 <strcmp>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	d1f5      	bne.n	800b9d4 <chFactoryCreateSemaphore.constprop.0+0x24>
  if (dep != NULL) {
 800b9e8:	b12c      	cbz	r4, 800b9f6 <chFactoryCreateSemaphore.constprop.0+0x46>
    return NULL;
 800b9ea:	2400      	movs	r4, #0
  F_UNLOCK();
 800b9ec:	481d      	ldr	r0, [pc, #116]	; (800ba64 <chFactoryCreateSemaphore.constprop.0+0xb4>)
 800b9ee:	f7f8 ff77 	bl	80048e0 <chMtxUnlock>
}
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9f6:	2320      	movs	r3, #32
 800b9f8:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800b9fc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
  if (objp != NULL) {
 800b9fe:	b33c      	cbz	r4, 800ba50 <chFactoryCreateSemaphore.constprop.0+0xa0>
    mp->next = mp->next->next;
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba04:	2300      	movs	r3, #0
 800ba06:	f383 8811 	msr	BASEPRI, r3
  if (dep == NULL) {
 800ba0a:	2c00      	cmp	r4, #0
 800ba0c:	d0ed      	beq.n	800b9ea <chFactoryCreateSemaphore.constprop.0+0x3a>
    *dp++ = c;
 800ba0e:	206d      	movs	r0, #109	; 0x6d
 800ba10:	2279      	movs	r2, #121	; 0x79
 800ba12:	f104 0309 	add.w	r3, r4, #9
 800ba16:	7220      	strb	r0, [r4, #8]
 800ba18:	4914      	ldr	r1, [pc, #80]	; (800ba6c <chFactoryCreateSemaphore.constprop.0+0xbc>)
 800ba1a:	f104 0010 	add.w	r0, r4, #16
 800ba1e:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 800ba22:	b13a      	cbz	r2, 800ba34 <chFactoryCreateSemaphore.constprop.0+0x84>
 800ba24:	4298      	cmp	r0, r3
 800ba26:	d005      	beq.n	800ba34 <chFactoryCreateSemaphore.constprop.0+0x84>
    c = *sp++;
 800ba28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    *dp++ = c;
 800ba2c:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 800ba30:	2a00      	cmp	r2, #0
 800ba32:	d1f7      	bne.n	800ba24 <chFactoryCreateSemaphore.constprop.0+0x74>
  dep->refs = (ucnt_t)1;
 800ba34:	2201      	movs	r2, #1
  sp->cnt = n;
 800ba36:	2300      	movs	r3, #0
  dep->next = dlp->next;
 800ba38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  dep->refs = (ucnt_t)1;
 800ba3a:	e9c4 1200 	strd	r1, r2, [r4]
  dlp->next = (dyn_element_t *)dep;
 800ba3e:	62bc      	str	r4, [r7, #40]	; 0x28
  qp->prev = qp;
 800ba40:	e9c4 0004 	strd	r0, r0, [r4, #16]
 800ba44:	61a3      	str	r3, [r4, #24]
  F_UNLOCK();
 800ba46:	4807      	ldr	r0, [pc, #28]	; (800ba64 <chFactoryCreateSemaphore.constprop.0+0xb4>)
 800ba48:	f7f8 ff4a 	bl	80048e0 <chMtxUnlock>
}
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (mp->provider != NULL) {
 800ba50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba52:	b123      	cbz	r3, 800ba5e <chFactoryCreateSemaphore.constprop.0+0xae>
    objp = mp->provider(mp->object_size, mp->align);
 800ba54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ba58:	4798      	blx	r3
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	e7d2      	b.n	800ba04 <chFactoryCreateSemaphore.constprop.0+0x54>
 800ba5e:	f384 8811 	msr	BASEPRI, r4
 800ba62:	e7c3      	b.n	800b9ec <chFactoryCreateSemaphore.constprop.0+0x3c>
 800ba64:	200010d8 	.word	0x200010d8
 800ba68:	08012ab0 	.word	0x08012ab0
 800ba6c:	08012ab1 	.word	0x08012ab1

0800ba70 <oslib_test_009_005_teardown.lto_priv.0>:
 800ba70:	2320      	movs	r3, #32
 * - [9.5.6] Retrieving the dynamic objects FIFO by name again, must
 *   not exist.
 * .
 */

static void oslib_test_009_005_teardown(void) {
 800ba72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	4d25      	ldr	r5, [pc, #148]	; (800bb10 <oslib_test_009_005_teardown.lto_priv.0+0xa0>)
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	f7f8 fe97 	bl	80047b0 <chMtxLockS>
 800ba82:	2300      	movs	r3, #0
 800ba84:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800ba88:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 800ba8c:	42ac      	cmp	r4, r5
 800ba8e:	d039      	beq.n	800bb04 <oslib_test_009_005_teardown.lto_priv.0+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800ba90:	4f20      	ldr	r7, [pc, #128]	; (800bb14 <oslib_test_009_005_teardown.lto_priv.0+0xa4>)
 800ba92:	e002      	b.n	800ba9a <oslib_test_009_005_teardown.lto_priv.0+0x2a>
    p = p->next;
 800ba94:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800ba96:	42ac      	cmp	r4, r5
 800ba98:	d034      	beq.n	800bb04 <oslib_test_009_005_teardown.lto_priv.0+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800ba9a:	4639      	mov	r1, r7
 800ba9c:	f104 0008 	add.w	r0, r4, #8
 800baa0:	f7f4 fc5a 	bl	8000358 <strcmp>
 800baa4:	4606      	mov	r6, r0
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d1f4      	bne.n	800ba94 <oslib_test_009_005_teardown.lto_priv.0+0x24>
  if (dep != NULL) {
 800baaa:	b35c      	cbz	r4, 800bb04 <oslib_test_009_005_teardown.lto_priv.0+0x94>
    dep->refs++;
 800baac:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800baae:	4818      	ldr	r0, [pc, #96]	; (800bb10 <oslib_test_009_005_teardown.lto_priv.0+0xa0>)
    dep->refs++;
 800bab0:	3301      	adds	r3, #1
 800bab2:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800bab4:	f7f8 ff14 	bl	80048e0 <chMtxUnlock>
  dyn_objects_fifo_t *dofp;

  dofp = chFactoryFindObjectsFIFO("myfifo");
  if (dofp != NULL) {
    while (dofp->element.refs > 0U) {
 800bab8:	6863      	ldr	r3, [r4, #4]
 800baba:	b1f3      	cbz	r3, 800bafa <oslib_test_009_005_teardown.lto_priv.0+0x8a>
 800babc:	f04f 0820 	mov.w	r8, #32
 800bac0:	4f13      	ldr	r7, [pc, #76]	; (800bb10 <oslib_test_009_005_teardown.lto_priv.0+0xa0>)
 800bac2:	f388 8811 	msr	BASEPRI, r8
 800bac6:	4638      	mov	r0, r7
 800bac8:	f7f8 fe72 	bl	80047b0 <chMtxLockS>
 800bacc:	f386 8811 	msr	BASEPRI, r6
  dep->refs--;
 800bad0:	6863      	ldr	r3, [r4, #4]
 800bad2:	3b01      	subs	r3, #1
 800bad4:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800bad6:	b953      	cbnz	r3, 800baee <oslib_test_009_005_teardown.lto_priv.0+0x7e>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800bad8:	480f      	ldr	r0, [pc, #60]	; (800bb18 <oslib_test_009_005_teardown.lto_priv.0+0xa8>)
 800bada:	e001      	b.n	800bae0 <oslib_test_009_005_teardown.lto_priv.0+0x70>
    if (prev->next == element) {
 800badc:	4284      	cmp	r4, r0
 800bade:	d00e      	beq.n	800bafe <oslib_test_009_005_teardown.lto_priv.0+0x8e>
  while (prev->next != (dyn_element_t *)dlp) {
 800bae0:	4603      	mov	r3, r0
 800bae2:	6800      	ldr	r0, [r0, #0]
 800bae4:	42a8      	cmp	r0, r5
 800bae6:	d1f9      	bne.n	800badc <oslib_test_009_005_teardown.lto_priv.0+0x6c>
  return NULL;
 800bae8:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800baea:	f7f9 fd39 	bl	8005560 <chHeapFree>
  F_UNLOCK();
 800baee:	4638      	mov	r0, r7
 800baf0:	f7f8 fef6 	bl	80048e0 <chMtxUnlock>
 800baf4:	6863      	ldr	r3, [r4, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1e3      	bne.n	800bac2 <oslib_test_009_005_teardown.lto_priv.0+0x52>
      chFactoryReleaseObjectsFIFO(dofp);
    }
  }
}
 800bafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      prev->next = element->next;
 800bafe:	6822      	ldr	r2, [r4, #0]
 800bb00:	601a      	str	r2, [r3, #0]
      return element;
 800bb02:	e7f2      	b.n	800baea <oslib_test_009_005_teardown.lto_priv.0+0x7a>
  F_UNLOCK();
 800bb04:	4802      	ldr	r0, [pc, #8]	; (800bb10 <oslib_test_009_005_teardown.lto_priv.0+0xa0>)
 800bb06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0a:	f7f8 bee9 	b.w	80048e0 <chMtxUnlock>
 800bb0e:	bf00      	nop
 800bb10:	200010d8 	.word	0x200010d8
 800bb14:	08012ab8 	.word	0x08012ab8
 800bb18:	20001118 	.word	0x20001118
 800bb1c:	00000000 	.word	0x00000000

0800bb20 <oslib_test_009_001_teardown.lto_priv.0>:
 800bb20:	2320      	movs	r3, #32
static void oslib_test_009_001_teardown(void) {
 800bb22:	b570      	push	{r4, r5, r6, lr}
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	4d15      	ldr	r5, [pc, #84]	; (800bb80 <oslib_test_009_001_teardown.lto_priv.0+0x60>)
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	f7f8 fe40 	bl	80047b0 <chMtxLockS>
 800bb30:	2300      	movs	r3, #0
 800bb32:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800bb36:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800bb3a:	42ac      	cmp	r4, r5
 800bb3c:	d01b      	beq.n	800bb76 <oslib_test_009_001_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bb3e:	4e11      	ldr	r6, [pc, #68]	; (800bb84 <oslib_test_009_001_teardown.lto_priv.0+0x64>)
 800bb40:	e002      	b.n	800bb48 <oslib_test_009_001_teardown.lto_priv.0+0x28>
    p = p->next;
 800bb42:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800bb44:	42ac      	cmp	r4, r5
 800bb46:	d016      	beq.n	800bb76 <oslib_test_009_001_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bb48:	4631      	mov	r1, r6
 800bb4a:	f104 0008 	add.w	r0, r4, #8
 800bb4e:	f7f4 fc03 	bl	8000358 <strcmp>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d1f5      	bne.n	800bb42 <oslib_test_009_001_teardown.lto_priv.0+0x22>
  if (dep != NULL) {
 800bb56:	b174      	cbz	r4, 800bb76 <oslib_test_009_001_teardown.lto_priv.0+0x56>
    dep->refs++;
 800bb58:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800bb5a:	4809      	ldr	r0, [pc, #36]	; (800bb80 <oslib_test_009_001_teardown.lto_priv.0+0x60>)
    dep->refs++;
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800bb60:	f7f8 febe 	bl	80048e0 <chMtxUnlock>
    while (rop->element.refs > 0U) {
 800bb64:	6863      	ldr	r3, [r4, #4]
 800bb66:	b12b      	cbz	r3, 800bb74 <oslib_test_009_001_teardown.lto_priv.0+0x54>
      chFactoryReleaseObject(rop);
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f7fa fa31 	bl	8005fd0 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 800bb6e:	6863      	ldr	r3, [r4, #4]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1f9      	bne.n	800bb68 <oslib_test_009_001_teardown.lto_priv.0+0x48>
}
 800bb74:	bd70      	pop	{r4, r5, r6, pc}
 800bb76:	4802      	ldr	r0, [pc, #8]	; (800bb80 <oslib_test_009_001_teardown.lto_priv.0+0x60>)
 800bb78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb7c:	f7f8 beb0 	b.w	80048e0 <chMtxUnlock>
 800bb80:	200010d8 	.word	0x200010d8
 800bb84:	08012ac0 	.word	0x08012ac0
	...

0800bb90 <oslib_test_009_002_teardown.lto_priv.0>:
 800bb90:	2320      	movs	r3, #32
static void oslib_test_009_002_teardown(void) {
 800bb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	4d25      	ldr	r5, [pc, #148]	; (800bc30 <oslib_test_009_002_teardown.lto_priv.0+0xa0>)
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	f7f8 fe07 	bl	80047b0 <chMtxLockS>
 800bba2:	2300      	movs	r3, #0
 800bba4:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800bba8:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 800bbac:	42ac      	cmp	r4, r5
 800bbae:	d039      	beq.n	800bc24 <oslib_test_009_002_teardown.lto_priv.0+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bbb0:	4f20      	ldr	r7, [pc, #128]	; (800bc34 <oslib_test_009_002_teardown.lto_priv.0+0xa4>)
 800bbb2:	e002      	b.n	800bbba <oslib_test_009_002_teardown.lto_priv.0+0x2a>
    p = p->next;
 800bbb4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800bbb6:	42ac      	cmp	r4, r5
 800bbb8:	d034      	beq.n	800bc24 <oslib_test_009_002_teardown.lto_priv.0+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bbba:	4639      	mov	r1, r7
 800bbbc:	f104 0008 	add.w	r0, r4, #8
 800bbc0:	f7f4 fbca 	bl	8000358 <strcmp>
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d1f4      	bne.n	800bbb4 <oslib_test_009_002_teardown.lto_priv.0+0x24>
  if (dep != NULL) {
 800bbca:	b35c      	cbz	r4, 800bc24 <oslib_test_009_002_teardown.lto_priv.0+0x94>
    dep->refs++;
 800bbcc:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800bbce:	4818      	ldr	r0, [pc, #96]	; (800bc30 <oslib_test_009_002_teardown.lto_priv.0+0xa0>)
    dep->refs++;
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800bbd4:	f7f8 fe84 	bl	80048e0 <chMtxUnlock>
    while (dbp->element.refs > 0U) {
 800bbd8:	6863      	ldr	r3, [r4, #4]
 800bbda:	b1f3      	cbz	r3, 800bc1a <oslib_test_009_002_teardown.lto_priv.0+0x8a>
 800bbdc:	f04f 0820 	mov.w	r8, #32
 800bbe0:	4f13      	ldr	r7, [pc, #76]	; (800bc30 <oslib_test_009_002_teardown.lto_priv.0+0xa0>)
 800bbe2:	f388 8811 	msr	BASEPRI, r8
 800bbe6:	4638      	mov	r0, r7
 800bbe8:	f7f8 fde2 	bl	80047b0 <chMtxLockS>
 800bbec:	f386 8811 	msr	BASEPRI, r6
  dep->refs--;
 800bbf0:	6863      	ldr	r3, [r4, #4]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800bbf6:	b953      	cbnz	r3, 800bc0e <oslib_test_009_002_teardown.lto_priv.0+0x7e>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800bbf8:	480f      	ldr	r0, [pc, #60]	; (800bc38 <oslib_test_009_002_teardown.lto_priv.0+0xa8>)
 800bbfa:	e001      	b.n	800bc00 <oslib_test_009_002_teardown.lto_priv.0+0x70>
    if (prev->next == element) {
 800bbfc:	4284      	cmp	r4, r0
 800bbfe:	d00e      	beq.n	800bc1e <oslib_test_009_002_teardown.lto_priv.0+0x8e>
  while (prev->next != (dyn_element_t *)dlp) {
 800bc00:	4603      	mov	r3, r0
 800bc02:	6800      	ldr	r0, [r0, #0]
 800bc04:	42a8      	cmp	r0, r5
 800bc06:	d1f9      	bne.n	800bbfc <oslib_test_009_002_teardown.lto_priv.0+0x6c>
  return NULL;
 800bc08:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800bc0a:	f7f9 fca9 	bl	8005560 <chHeapFree>
  F_UNLOCK();
 800bc0e:	4638      	mov	r0, r7
 800bc10:	f7f8 fe66 	bl	80048e0 <chMtxUnlock>
 800bc14:	6863      	ldr	r3, [r4, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1e3      	bne.n	800bbe2 <oslib_test_009_002_teardown.lto_priv.0+0x52>
}
 800bc1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      prev->next = element->next;
 800bc1e:	6822      	ldr	r2, [r4, #0]
 800bc20:	601a      	str	r2, [r3, #0]
      return element;
 800bc22:	e7f2      	b.n	800bc0a <oslib_test_009_002_teardown.lto_priv.0+0x7a>
  F_UNLOCK();
 800bc24:	4802      	ldr	r0, [pc, #8]	; (800bc30 <oslib_test_009_002_teardown.lto_priv.0+0xa0>)
 800bc26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2a:	f7f8 be59 	b.w	80048e0 <chMtxUnlock>
 800bc2e:	bf00      	nop
 800bc30:	200010d8 	.word	0x200010d8
 800bc34:	08012ac8 	.word	0x08012ac8
 800bc38:	200010fc 	.word	0x200010fc
 800bc3c:	00000000 	.word	0x00000000

0800bc40 <oslib_test_009_004_teardown.lto_priv.0>:
 800bc40:	2320      	movs	r3, #32
static void oslib_test_009_004_teardown(void) {
 800bc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	4d25      	ldr	r5, [pc, #148]	; (800bce0 <oslib_test_009_004_teardown.lto_priv.0+0xa0>)
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	f7f8 fdaf 	bl	80047b0 <chMtxLockS>
 800bc52:	2300      	movs	r3, #0
 800bc54:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800bc58:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 800bc5c:	42ac      	cmp	r4, r5
 800bc5e:	d039      	beq.n	800bcd4 <oslib_test_009_004_teardown.lto_priv.0+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bc60:	4f20      	ldr	r7, [pc, #128]	; (800bce4 <oslib_test_009_004_teardown.lto_priv.0+0xa4>)
 800bc62:	e002      	b.n	800bc6a <oslib_test_009_004_teardown.lto_priv.0+0x2a>
    p = p->next;
 800bc64:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800bc66:	42ac      	cmp	r4, r5
 800bc68:	d034      	beq.n	800bcd4 <oslib_test_009_004_teardown.lto_priv.0+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bc6a:	4639      	mov	r1, r7
 800bc6c:	f104 0008 	add.w	r0, r4, #8
 800bc70:	f7f4 fb72 	bl	8000358 <strcmp>
 800bc74:	4606      	mov	r6, r0
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d1f4      	bne.n	800bc64 <oslib_test_009_004_teardown.lto_priv.0+0x24>
  if (dep != NULL) {
 800bc7a:	b35c      	cbz	r4, 800bcd4 <oslib_test_009_004_teardown.lto_priv.0+0x94>
    dep->refs++;
 800bc7c:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800bc7e:	4818      	ldr	r0, [pc, #96]	; (800bce0 <oslib_test_009_004_teardown.lto_priv.0+0xa0>)
    dep->refs++;
 800bc80:	3301      	adds	r3, #1
 800bc82:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800bc84:	f7f8 fe2c 	bl	80048e0 <chMtxUnlock>
    while (dmp->element.refs > 0U) {
 800bc88:	6863      	ldr	r3, [r4, #4]
 800bc8a:	b1f3      	cbz	r3, 800bcca <oslib_test_009_004_teardown.lto_priv.0+0x8a>
 800bc8c:	f04f 0820 	mov.w	r8, #32
 800bc90:	4f13      	ldr	r7, [pc, #76]	; (800bce0 <oslib_test_009_004_teardown.lto_priv.0+0xa0>)
 800bc92:	f388 8811 	msr	BASEPRI, r8
 800bc96:	4638      	mov	r0, r7
 800bc98:	f7f8 fd8a 	bl	80047b0 <chMtxLockS>
 800bc9c:	f386 8811 	msr	BASEPRI, r6
  dep->refs--;
 800bca0:	6863      	ldr	r3, [r4, #4]
 800bca2:	3b01      	subs	r3, #1
 800bca4:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800bca6:	b953      	cbnz	r3, 800bcbe <oslib_test_009_004_teardown.lto_priv.0+0x7e>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800bca8:	480f      	ldr	r0, [pc, #60]	; (800bce8 <oslib_test_009_004_teardown.lto_priv.0+0xa8>)
 800bcaa:	e001      	b.n	800bcb0 <oslib_test_009_004_teardown.lto_priv.0+0x70>
    if (prev->next == element) {
 800bcac:	4284      	cmp	r4, r0
 800bcae:	d00e      	beq.n	800bcce <oslib_test_009_004_teardown.lto_priv.0+0x8e>
  while (prev->next != (dyn_element_t *)dlp) {
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	6800      	ldr	r0, [r0, #0]
 800bcb4:	42a8      	cmp	r0, r5
 800bcb6:	d1f9      	bne.n	800bcac <oslib_test_009_004_teardown.lto_priv.0+0x6c>
  return NULL;
 800bcb8:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800bcba:	f7f9 fc51 	bl	8005560 <chHeapFree>
  F_UNLOCK();
 800bcbe:	4638      	mov	r0, r7
 800bcc0:	f7f8 fe0e 	bl	80048e0 <chMtxUnlock>
 800bcc4:	6863      	ldr	r3, [r4, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1e3      	bne.n	800bc92 <oslib_test_009_004_teardown.lto_priv.0+0x52>
}
 800bcca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      prev->next = element->next;
 800bcce:	6822      	ldr	r2, [r4, #0]
 800bcd0:	601a      	str	r2, [r3, #0]
      return element;
 800bcd2:	e7f2      	b.n	800bcba <oslib_test_009_004_teardown.lto_priv.0+0x7a>
  F_UNLOCK();
 800bcd4:	4802      	ldr	r0, [pc, #8]	; (800bce0 <oslib_test_009_004_teardown.lto_priv.0+0xa0>)
 800bcd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcda:	f7f8 be01 	b.w	80048e0 <chMtxUnlock>
 800bcde:	bf00      	nop
 800bce0:	200010d8 	.word	0x200010d8
 800bce4:	08012ad0 	.word	0x08012ad0
 800bce8:	20001114 	.word	0x20001114
 800bcec:	00000000 	.word	0x00000000

0800bcf0 <oslib_test_009_006_teardown.lto_priv.0>:
 800bcf0:	2320      	movs	r3, #32
 *   trigger an assertion.
 * - [9.6.6] Retrieving the dynamic pipe by name again, must not exist.
 * .
 */

static void oslib_test_009_006_teardown(void) {
 800bcf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf6:	f383 8811 	msr	BASEPRI, r3
 800bcfa:	4d25      	ldr	r5, [pc, #148]	; (800bd90 <oslib_test_009_006_teardown.lto_priv.0+0xa0>)
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	f7f8 fd57 	bl	80047b0 <chMtxLockS>
 800bd02:	2300      	movs	r3, #0
 800bd04:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800bd08:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 800bd0c:	42ac      	cmp	r4, r5
 800bd0e:	d039      	beq.n	800bd84 <oslib_test_009_006_teardown.lto_priv.0+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bd10:	4f20      	ldr	r7, [pc, #128]	; (800bd94 <oslib_test_009_006_teardown.lto_priv.0+0xa4>)
 800bd12:	e002      	b.n	800bd1a <oslib_test_009_006_teardown.lto_priv.0+0x2a>
    p = p->next;
 800bd14:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800bd16:	42ac      	cmp	r4, r5
 800bd18:	d034      	beq.n	800bd84 <oslib_test_009_006_teardown.lto_priv.0+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bd1a:	4639      	mov	r1, r7
 800bd1c:	f104 0008 	add.w	r0, r4, #8
 800bd20:	f7f4 fb1a 	bl	8000358 <strcmp>
 800bd24:	4606      	mov	r6, r0
 800bd26:	2800      	cmp	r0, #0
 800bd28:	d1f4      	bne.n	800bd14 <oslib_test_009_006_teardown.lto_priv.0+0x24>
  if (dep != NULL) {
 800bd2a:	b35c      	cbz	r4, 800bd84 <oslib_test_009_006_teardown.lto_priv.0+0x94>
    dep->refs++;
 800bd2c:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800bd2e:	4818      	ldr	r0, [pc, #96]	; (800bd90 <oslib_test_009_006_teardown.lto_priv.0+0xa0>)
    dep->refs++;
 800bd30:	3301      	adds	r3, #1
 800bd32:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800bd34:	f7f8 fdd4 	bl	80048e0 <chMtxUnlock>
  dyn_pipe_t *dpp;

  dpp = chFactoryFindPipe("mypipe");
  if (dpp != NULL) {
    while (dpp->element.refs > 0U) {
 800bd38:	6863      	ldr	r3, [r4, #4]
 800bd3a:	b1f3      	cbz	r3, 800bd7a <oslib_test_009_006_teardown.lto_priv.0+0x8a>
 800bd3c:	f04f 0820 	mov.w	r8, #32
 800bd40:	4f13      	ldr	r7, [pc, #76]	; (800bd90 <oslib_test_009_006_teardown.lto_priv.0+0xa0>)
 800bd42:	f388 8811 	msr	BASEPRI, r8
 800bd46:	4638      	mov	r0, r7
 800bd48:	f7f8 fd32 	bl	80047b0 <chMtxLockS>
 800bd4c:	f386 8811 	msr	BASEPRI, r6
  dep->refs--;
 800bd50:	6863      	ldr	r3, [r4, #4]
 800bd52:	3b01      	subs	r3, #1
 800bd54:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800bd56:	b953      	cbnz	r3, 800bd6e <oslib_test_009_006_teardown.lto_priv.0+0x7e>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800bd58:	480f      	ldr	r0, [pc, #60]	; (800bd98 <oslib_test_009_006_teardown.lto_priv.0+0xa8>)
 800bd5a:	e001      	b.n	800bd60 <oslib_test_009_006_teardown.lto_priv.0+0x70>
    if (prev->next == element) {
 800bd5c:	4284      	cmp	r4, r0
 800bd5e:	d00e      	beq.n	800bd7e <oslib_test_009_006_teardown.lto_priv.0+0x8e>
  while (prev->next != (dyn_element_t *)dlp) {
 800bd60:	4603      	mov	r3, r0
 800bd62:	6800      	ldr	r0, [r0, #0]
 800bd64:	42a8      	cmp	r0, r5
 800bd66:	d1f9      	bne.n	800bd5c <oslib_test_009_006_teardown.lto_priv.0+0x6c>
  return NULL;
 800bd68:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800bd6a:	f7f9 fbf9 	bl	8005560 <chHeapFree>
  F_UNLOCK();
 800bd6e:	4638      	mov	r0, r7
 800bd70:	f7f8 fdb6 	bl	80048e0 <chMtxUnlock>
 800bd74:	6863      	ldr	r3, [r4, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1e3      	bne.n	800bd42 <oslib_test_009_006_teardown.lto_priv.0+0x52>
      chFactoryReleasePipe(dpp);
    }
  }
}
 800bd7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      prev->next = element->next;
 800bd7e:	6822      	ldr	r2, [r4, #0]
 800bd80:	601a      	str	r2, [r3, #0]
      return element;
 800bd82:	e7f2      	b.n	800bd6a <oslib_test_009_006_teardown.lto_priv.0+0x7a>
  F_UNLOCK();
 800bd84:	4802      	ldr	r0, [pc, #8]	; (800bd90 <oslib_test_009_006_teardown.lto_priv.0+0xa0>)
 800bd86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd8a:	f7f8 bda9 	b.w	80048e0 <chMtxUnlock>
 800bd8e:	bf00      	nop
 800bd90:	200010d8 	.word	0x200010d8
 800bd94:	08012ad8 	.word	0x08012ad8
 800bd98:	2000111c 	.word	0x2000111c
 800bd9c:	00000000 	.word	0x00000000

0800bda0 <chFactoryFindPipe.constprop.0>:
 800bda0:	2320      	movs	r3, #32
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 800bda2:	b570      	push	{r4, r5, r6, lr}
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	4d13      	ldr	r5, [pc, #76]	; (800bdf8 <chFactoryFindPipe.constprop.0+0x58>)
 800bdaa:	4628      	mov	r0, r5
 800bdac:	f7f8 fd00 	bl	80047b0 <chMtxLockS>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800bdb6:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 800bdba:	42ac      	cmp	r4, r5
 800bdbc:	d01a      	beq.n	800bdf4 <chFactoryFindPipe.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bdbe:	4e0f      	ldr	r6, [pc, #60]	; (800bdfc <chFactoryFindPipe.constprop.0+0x5c>)
 800bdc0:	e002      	b.n	800bdc8 <chFactoryFindPipe.constprop.0+0x28>
    p = p->next;
 800bdc2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800bdc4:	42ac      	cmp	r4, r5
 800bdc6:	d00f      	beq.n	800bde8 <chFactoryFindPipe.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bdc8:	4631      	mov	r1, r6
 800bdca:	f104 0008 	add.w	r0, r4, #8
 800bdce:	f7f4 fac3 	bl	8000358 <strcmp>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d1f5      	bne.n	800bdc2 <chFactoryFindPipe.constprop.0+0x22>
  if (dep != NULL) {
 800bdd6:	b114      	cbz	r4, 800bdde <chFactoryFindPipe.constprop.0+0x3e>
    dep->refs++;
 800bdd8:	6863      	ldr	r3, [r4, #4]
 800bdda:	3301      	adds	r3, #1
 800bddc:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800bdde:	4806      	ldr	r0, [pc, #24]	; (800bdf8 <chFactoryFindPipe.constprop.0+0x58>)
 800bde0:	f7f8 fd7e 	bl	80048e0 <chMtxUnlock>
}
 800bde4:	4620      	mov	r0, r4
 800bde6:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800bde8:	2400      	movs	r4, #0
  F_UNLOCK();
 800bdea:	4803      	ldr	r0, [pc, #12]	; (800bdf8 <chFactoryFindPipe.constprop.0+0x58>)
 800bdec:	f7f8 fd78 	bl	80048e0 <chMtxUnlock>
}
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800bdf4:	461c      	mov	r4, r3
 800bdf6:	e7f2      	b.n	800bdde <chFactoryFindPipe.constprop.0+0x3e>
 800bdf8:	200010d8 	.word	0x200010d8
 800bdfc:	08012ad8 	.word	0x08012ad8

0800be00 <chFactoryFindObjectsFIFO.constprop.0>:
 800be00:	2320      	movs	r3, #32
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 800be02:	b570      	push	{r4, r5, r6, lr}
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	4d13      	ldr	r5, [pc, #76]	; (800be58 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
 800be0a:	4628      	mov	r0, r5
 800be0c:	f7f8 fcd0 	bl	80047b0 <chMtxLockS>
 800be10:	2300      	movs	r3, #0
 800be12:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800be16:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 800be1a:	42ac      	cmp	r4, r5
 800be1c:	d01a      	beq.n	800be54 <chFactoryFindObjectsFIFO.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800be1e:	4e0f      	ldr	r6, [pc, #60]	; (800be5c <chFactoryFindObjectsFIFO.constprop.0+0x5c>)
 800be20:	e002      	b.n	800be28 <chFactoryFindObjectsFIFO.constprop.0+0x28>
    p = p->next;
 800be22:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800be24:	42ac      	cmp	r4, r5
 800be26:	d00f      	beq.n	800be48 <chFactoryFindObjectsFIFO.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800be28:	4631      	mov	r1, r6
 800be2a:	f104 0008 	add.w	r0, r4, #8
 800be2e:	f7f4 fa93 	bl	8000358 <strcmp>
 800be32:	2800      	cmp	r0, #0
 800be34:	d1f5      	bne.n	800be22 <chFactoryFindObjectsFIFO.constprop.0+0x22>
  if (dep != NULL) {
 800be36:	b114      	cbz	r4, 800be3e <chFactoryFindObjectsFIFO.constprop.0+0x3e>
    dep->refs++;
 800be38:	6863      	ldr	r3, [r4, #4]
 800be3a:	3301      	adds	r3, #1
 800be3c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800be3e:	4806      	ldr	r0, [pc, #24]	; (800be58 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
 800be40:	f7f8 fd4e 	bl	80048e0 <chMtxUnlock>
}
 800be44:	4620      	mov	r0, r4
 800be46:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800be48:	2400      	movs	r4, #0
  F_UNLOCK();
 800be4a:	4803      	ldr	r0, [pc, #12]	; (800be58 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
 800be4c:	f7f8 fd48 	bl	80048e0 <chMtxUnlock>
}
 800be50:	4620      	mov	r0, r4
 800be52:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800be54:	461c      	mov	r4, r3
 800be56:	e7f2      	b.n	800be3e <chFactoryFindObjectsFIFO.constprop.0+0x3e>
 800be58:	200010d8 	.word	0x200010d8
 800be5c:	08012ab8 	.word	0x08012ab8

0800be60 <chFactoryFindMailbox.constprop.0>:
 800be60:	2320      	movs	r3, #32
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 800be62:	b570      	push	{r4, r5, r6, lr}
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	4d13      	ldr	r5, [pc, #76]	; (800beb8 <chFactoryFindMailbox.constprop.0+0x58>)
 800be6a:	4628      	mov	r0, r5
 800be6c:	f7f8 fca0 	bl	80047b0 <chMtxLockS>
 800be70:	2300      	movs	r3, #0
 800be72:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800be76:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 800be7a:	42ac      	cmp	r4, r5
 800be7c:	d01a      	beq.n	800beb4 <chFactoryFindMailbox.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800be7e:	4e0f      	ldr	r6, [pc, #60]	; (800bebc <chFactoryFindMailbox.constprop.0+0x5c>)
 800be80:	e002      	b.n	800be88 <chFactoryFindMailbox.constprop.0+0x28>
    p = p->next;
 800be82:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800be84:	42ac      	cmp	r4, r5
 800be86:	d00f      	beq.n	800bea8 <chFactoryFindMailbox.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800be88:	4631      	mov	r1, r6
 800be8a:	f104 0008 	add.w	r0, r4, #8
 800be8e:	f7f4 fa63 	bl	8000358 <strcmp>
 800be92:	2800      	cmp	r0, #0
 800be94:	d1f5      	bne.n	800be82 <chFactoryFindMailbox.constprop.0+0x22>
  if (dep != NULL) {
 800be96:	b114      	cbz	r4, 800be9e <chFactoryFindMailbox.constprop.0+0x3e>
    dep->refs++;
 800be98:	6863      	ldr	r3, [r4, #4]
 800be9a:	3301      	adds	r3, #1
 800be9c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800be9e:	4806      	ldr	r0, [pc, #24]	; (800beb8 <chFactoryFindMailbox.constprop.0+0x58>)
 800bea0:	f7f8 fd1e 	bl	80048e0 <chMtxUnlock>
}
 800bea4:	4620      	mov	r0, r4
 800bea6:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800bea8:	2400      	movs	r4, #0
  F_UNLOCK();
 800beaa:	4803      	ldr	r0, [pc, #12]	; (800beb8 <chFactoryFindMailbox.constprop.0+0x58>)
 800beac:	f7f8 fd18 	bl	80048e0 <chMtxUnlock>
}
 800beb0:	4620      	mov	r0, r4
 800beb2:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800beb4:	461c      	mov	r4, r3
 800beb6:	e7f2      	b.n	800be9e <chFactoryFindMailbox.constprop.0+0x3e>
 800beb8:	200010d8 	.word	0x200010d8
 800bebc:	08012ad0 	.word	0x08012ad0

0800bec0 <chFactoryFindSemaphore.constprop.0>:
 800bec0:	2320      	movs	r3, #32
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 800bec2:	b570      	push	{r4, r5, r6, lr}
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	4d13      	ldr	r5, [pc, #76]	; (800bf18 <chFactoryFindSemaphore.constprop.0+0x58>)
 800beca:	4628      	mov	r0, r5
 800becc:	f7f8 fc70 	bl	80047b0 <chMtxLockS>
 800bed0:	2300      	movs	r3, #0
 800bed2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800bed6:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800beda:	42ac      	cmp	r4, r5
 800bedc:	d01a      	beq.n	800bf14 <chFactoryFindSemaphore.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bede:	4e0f      	ldr	r6, [pc, #60]	; (800bf1c <chFactoryFindSemaphore.constprop.0+0x5c>)
 800bee0:	e002      	b.n	800bee8 <chFactoryFindSemaphore.constprop.0+0x28>
    p = p->next;
 800bee2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800bee4:	42ac      	cmp	r4, r5
 800bee6:	d00f      	beq.n	800bf08 <chFactoryFindSemaphore.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bee8:	4631      	mov	r1, r6
 800beea:	f104 0008 	add.w	r0, r4, #8
 800beee:	f7f4 fa33 	bl	8000358 <strcmp>
 800bef2:	2800      	cmp	r0, #0
 800bef4:	d1f5      	bne.n	800bee2 <chFactoryFindSemaphore.constprop.0+0x22>
  if (dep != NULL) {
 800bef6:	b114      	cbz	r4, 800befe <chFactoryFindSemaphore.constprop.0+0x3e>
    dep->refs++;
 800bef8:	6863      	ldr	r3, [r4, #4]
 800befa:	3301      	adds	r3, #1
 800befc:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800befe:	4806      	ldr	r0, [pc, #24]	; (800bf18 <chFactoryFindSemaphore.constprop.0+0x58>)
 800bf00:	f7f8 fcee 	bl	80048e0 <chMtxUnlock>
}
 800bf04:	4620      	mov	r0, r4
 800bf06:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800bf08:	2400      	movs	r4, #0
  F_UNLOCK();
 800bf0a:	4803      	ldr	r0, [pc, #12]	; (800bf18 <chFactoryFindSemaphore.constprop.0+0x58>)
 800bf0c:	f7f8 fce8 	bl	80048e0 <chMtxUnlock>
}
 800bf10:	4620      	mov	r0, r4
 800bf12:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800bf14:	461c      	mov	r4, r3
 800bf16:	e7f2      	b.n	800befe <chFactoryFindSemaphore.constprop.0+0x3e>
 800bf18:	200010d8 	.word	0x200010d8
 800bf1c:	08012ab0 	.word	0x08012ab0

0800bf20 <chFactoryFindBuffer.constprop.0>:
 800bf20:	2320      	movs	r3, #32
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 800bf22:	b570      	push	{r4, r5, r6, lr}
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	4d13      	ldr	r5, [pc, #76]	; (800bf78 <chFactoryFindBuffer.constprop.0+0x58>)
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	f7f8 fc40 	bl	80047b0 <chMtxLockS>
 800bf30:	2300      	movs	r3, #0
 800bf32:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800bf36:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 800bf3a:	42ac      	cmp	r4, r5
 800bf3c:	d01a      	beq.n	800bf74 <chFactoryFindBuffer.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bf3e:	4e0f      	ldr	r6, [pc, #60]	; (800bf7c <chFactoryFindBuffer.constprop.0+0x5c>)
 800bf40:	e002      	b.n	800bf48 <chFactoryFindBuffer.constprop.0+0x28>
    p = p->next;
 800bf42:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800bf44:	42ac      	cmp	r4, r5
 800bf46:	d00f      	beq.n	800bf68 <chFactoryFindBuffer.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bf48:	4631      	mov	r1, r6
 800bf4a:	f104 0008 	add.w	r0, r4, #8
 800bf4e:	f7f4 fa03 	bl	8000358 <strcmp>
 800bf52:	2800      	cmp	r0, #0
 800bf54:	d1f5      	bne.n	800bf42 <chFactoryFindBuffer.constprop.0+0x22>
  if (dep != NULL) {
 800bf56:	b114      	cbz	r4, 800bf5e <chFactoryFindBuffer.constprop.0+0x3e>
    dep->refs++;
 800bf58:	6863      	ldr	r3, [r4, #4]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800bf5e:	4806      	ldr	r0, [pc, #24]	; (800bf78 <chFactoryFindBuffer.constprop.0+0x58>)
 800bf60:	f7f8 fcbe 	bl	80048e0 <chMtxUnlock>
}
 800bf64:	4620      	mov	r0, r4
 800bf66:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800bf68:	2400      	movs	r4, #0
  F_UNLOCK();
 800bf6a:	4803      	ldr	r0, [pc, #12]	; (800bf78 <chFactoryFindBuffer.constprop.0+0x58>)
 800bf6c:	f7f8 fcb8 	bl	80048e0 <chMtxUnlock>
}
 800bf70:	4620      	mov	r0, r4
 800bf72:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800bf74:	461c      	mov	r4, r3
 800bf76:	e7f2      	b.n	800bf5e <chFactoryFindBuffer.constprop.0+0x3e>
 800bf78:	200010d8 	.word	0x200010d8
 800bf7c:	08012ac8 	.word	0x08012ac8

0800bf80 <chFactoryFindObject.constprop.0>:
 800bf80:	2320      	movs	r3, #32
registered_object_t *chFactoryFindObject(const char *name) {
 800bf82:	b570      	push	{r4, r5, r6, lr}
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	4d13      	ldr	r5, [pc, #76]	; (800bfd8 <chFactoryFindObject.constprop.0+0x58>)
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f7f8 fc10 	bl	80047b0 <chMtxLockS>
 800bf90:	2300      	movs	r3, #0
 800bf92:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800bf96:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800bf9a:	42ac      	cmp	r4, r5
 800bf9c:	d01a      	beq.n	800bfd4 <chFactoryFindObject.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bf9e:	4e0f      	ldr	r6, [pc, #60]	; (800bfdc <chFactoryFindObject.constprop.0+0x5c>)
 800bfa0:	e002      	b.n	800bfa8 <chFactoryFindObject.constprop.0+0x28>
    p = p->next;
 800bfa2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800bfa4:	42ac      	cmp	r4, r5
 800bfa6:	d00f      	beq.n	800bfc8 <chFactoryFindObject.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bfa8:	4631      	mov	r1, r6
 800bfaa:	f104 0008 	add.w	r0, r4, #8
 800bfae:	f7f4 f9d3 	bl	8000358 <strcmp>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d1f5      	bne.n	800bfa2 <chFactoryFindObject.constprop.0+0x22>
  if (dep != NULL) {
 800bfb6:	b114      	cbz	r4, 800bfbe <chFactoryFindObject.constprop.0+0x3e>
    dep->refs++;
 800bfb8:	6863      	ldr	r3, [r4, #4]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800bfbe:	4806      	ldr	r0, [pc, #24]	; (800bfd8 <chFactoryFindObject.constprop.0+0x58>)
 800bfc0:	f7f8 fc8e 	bl	80048e0 <chMtxUnlock>
}
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800bfc8:	2400      	movs	r4, #0
  F_UNLOCK();
 800bfca:	4803      	ldr	r0, [pc, #12]	; (800bfd8 <chFactoryFindObject.constprop.0+0x58>)
 800bfcc:	f7f8 fc88 	bl	80048e0 <chMtxUnlock>
}
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800bfd4:	461c      	mov	r4, r3
 800bfd6:	e7f2      	b.n	800bfbe <chFactoryFindObject.constprop.0+0x3e>
 800bfd8:	200010d8 	.word	0x200010d8
 800bfdc:	08012ac0 	.word	0x08012ac0

0800bfe0 <chFactoryRegisterObject.constprop.0>:
registered_object_t *chFactoryRegisterObject(const char *name,
 800bfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe4:	2320      	movs	r3, #32
 800bfe6:	4680      	mov	r8, r0
 800bfe8:	f383 8811 	msr	BASEPRI, r3
 800bfec:	4f2a      	ldr	r7, [pc, #168]	; (800c098 <chFactoryRegisterObject.constprop.0+0xb8>)
 800bfee:	4638      	mov	r0, r7
 800bff0:	f7f8 fbde 	bl	80047b0 <chMtxLockS>
 800bff4:	2300      	movs	r3, #0
 800bff6:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800bffa:	463d      	mov	r5, r7
 800bffc:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800c000:	42ac      	cmp	r4, r5
 800c002:	d013      	beq.n	800c02c <chFactoryRegisterObject.constprop.0+0x4c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c004:	4e25      	ldr	r6, [pc, #148]	; (800c09c <chFactoryRegisterObject.constprop.0+0xbc>)
 800c006:	e002      	b.n	800c00e <chFactoryRegisterObject.constprop.0+0x2e>
    p = p->next;
 800c008:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c00a:	42ac      	cmp	r4, r5
 800c00c:	d00e      	beq.n	800c02c <chFactoryRegisterObject.constprop.0+0x4c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c00e:	4631      	mov	r1, r6
 800c010:	f104 0008 	add.w	r0, r4, #8
 800c014:	f7f4 f9a0 	bl	8000358 <strcmp>
 800c018:	2800      	cmp	r0, #0
 800c01a:	d1f5      	bne.n	800c008 <chFactoryRegisterObject.constprop.0+0x28>
  if (dep != NULL) {
 800c01c:	b134      	cbz	r4, 800c02c <chFactoryRegisterObject.constprop.0+0x4c>
    return NULL;
 800c01e:	2400      	movs	r4, #0
  F_UNLOCK();
 800c020:	481d      	ldr	r0, [pc, #116]	; (800c098 <chFactoryRegisterObject.constprop.0+0xb8>)
 800c022:	f7f8 fc5d 	bl	80048e0 <chMtxUnlock>
}
 800c026:	4620      	mov	r0, r4
 800c028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c02c:	2320      	movs	r3, #32
 800c02e:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800c032:	697c      	ldr	r4, [r7, #20]
  if (objp != NULL) {
 800c034:	b334      	cbz	r4, 800c084 <chFactoryRegisterObject.constprop.0+0xa4>
    mp->next = mp->next->next;
 800c036:	6823      	ldr	r3, [r4, #0]
 800c038:	617b      	str	r3, [r7, #20]
 800c03a:	2300      	movs	r3, #0
 800c03c:	f383 8811 	msr	BASEPRI, r3
  if (dep == NULL) {
 800c040:	2c00      	cmp	r4, #0
 800c042:	d0ec      	beq.n	800c01e <chFactoryRegisterObject.constprop.0+0x3e>
    *dp++ = c;
 800c044:	226d      	movs	r2, #109	; 0x6d
 800c046:	7222      	strb	r2, [r4, #8]
 800c048:	2279      	movs	r2, #121	; 0x79
 800c04a:	f104 0309 	add.w	r3, r4, #9
 800c04e:	4914      	ldr	r1, [pc, #80]	; (800c0a0 <chFactoryRegisterObject.constprop.0+0xc0>)
 800c050:	f104 0010 	add.w	r0, r4, #16
 800c054:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 800c058:	b13a      	cbz	r2, 800c06a <chFactoryRegisterObject.constprop.0+0x8a>
 800c05a:	4298      	cmp	r0, r3
 800c05c:	d005      	beq.n	800c06a <chFactoryRegisterObject.constprop.0+0x8a>
    c = *sp++;
 800c05e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    *dp++ = c;
 800c062:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 800c066:	2a00      	cmp	r2, #0
 800c068:	d1f7      	bne.n	800c05a <chFactoryRegisterObject.constprop.0+0x7a>
  dep->refs = (ucnt_t)1;
 800c06a:	2301      	movs	r3, #1
  dep->next = dlp->next;
 800c06c:	693a      	ldr	r2, [r7, #16]
  F_UNLOCK();
 800c06e:	480a      	ldr	r0, [pc, #40]	; (800c098 <chFactoryRegisterObject.constprop.0+0xb8>)
  dep->refs = (ucnt_t)1;
 800c070:	e9c4 2300 	strd	r2, r3, [r4]
  dlp->next = (dyn_element_t *)dep;
 800c074:	613c      	str	r4, [r7, #16]
    rop->objp = objp;
 800c076:	f8c4 8010 	str.w	r8, [r4, #16]
  F_UNLOCK();
 800c07a:	f7f8 fc31 	bl	80048e0 <chMtxUnlock>
}
 800c07e:	4620      	mov	r0, r4
 800c080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 800c084:	6a3b      	ldr	r3, [r7, #32]
 800c086:	b123      	cbz	r3, 800c092 <chFactoryRegisterObject.constprop.0+0xb2>
    objp = mp->provider(mp->object_size, mp->align);
 800c088:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c08c:	4798      	blx	r3
 800c08e:	4604      	mov	r4, r0
 800c090:	e7d3      	b.n	800c03a <chFactoryRegisterObject.constprop.0+0x5a>
 800c092:	f384 8811 	msr	BASEPRI, r4
 800c096:	e7c3      	b.n	800c020 <chFactoryRegisterObject.constprop.0+0x40>
 800c098:	200010d8 	.word	0x200010d8
 800c09c:	08012ac0 	.word	0x08012ac0
 800c0a0:	08012ac1 	.word	0x08012ac1
	...

0800c0b0 <oslib_test_009_001_execute.lto_priv.0>:
  test_set_step(1);
 800c0b0:	2201      	movs	r2, #1
static void oslib_test_009_001_execute(void) {
 800c0b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800c0b4:	4f4a      	ldr	r7, [pc, #296]	; (800c1e0 <oslib_test_009_001_execute.lto_priv.0+0x130>)
 800c0b6:	2320      	movs	r3, #32
 800c0b8:	603a      	str	r2, [r7, #0]
 800c0ba:	f383 8811 	msr	BASEPRI, r3
 800c0be:	4d49      	ldr	r5, [pc, #292]	; (800c1e4 <oslib_test_009_001_execute.lto_priv.0+0x134>)
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f7f8 fb75 	bl	80047b0 <chMtxLockS>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c0cc:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800c0d0:	42ac      	cmp	r4, r5
 800c0d2:	d018      	beq.n	800c106 <oslib_test_009_001_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c0d4:	4e44      	ldr	r6, [pc, #272]	; (800c1e8 <oslib_test_009_001_execute.lto_priv.0+0x138>)
 800c0d6:	e002      	b.n	800c0de <oslib_test_009_001_execute.lto_priv.0+0x2e>
    p = p->next;
 800c0d8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c0da:	42ac      	cmp	r4, r5
 800c0dc:	d013      	beq.n	800c106 <oslib_test_009_001_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c0de:	4631      	mov	r1, r6
 800c0e0:	f104 0008 	add.w	r0, r4, #8
 800c0e4:	f7f4 f938 	bl	8000358 <strcmp>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d1f5      	bne.n	800c0d8 <oslib_test_009_001_execute.lto_priv.0+0x28>
  if (dep != NULL) {
 800c0ec:	b15c      	cbz	r4, 800c106 <oslib_test_009_001_execute.lto_priv.0+0x56>
    dep->refs++;
 800c0ee:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800c0f0:	483c      	ldr	r0, [pc, #240]	; (800c1e4 <oslib_test_009_001_execute.lto_priv.0+0x134>)
    dep->refs++;
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800c0f6:	f7f8 fbf3 	bl	80048e0 <chMtxUnlock>
  chtest.global_fail     = true;
 800c0fa:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c0fe:	4a3b      	ldr	r2, [pc, #236]	; (800c1ec <oslib_test_009_001_execute.lto_priv.0+0x13c>)
  chtest.global_fail     = true;
 800c100:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c102:	60ba      	str	r2, [r7, #8]
}
 800c104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c106:	4837      	ldr	r0, [pc, #220]	; (800c1e4 <oslib_test_009_001_execute.lto_priv.0+0x134>)
 800c108:	f7f8 fbea 	bl	80048e0 <chMtxUnlock>
  test_set_step(2);
 800c10c:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 800c10e:	4838      	ldr	r0, [pc, #224]	; (800c1f0 <oslib_test_009_001_execute.lto_priv.0+0x140>)
  test_set_step(2);
 800c110:	603b      	str	r3, [r7, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 800c112:	f7ff ff65 	bl	800bfe0 <chFactoryRegisterObject.constprop.0>
  if (!condition) {
 800c116:	4604      	mov	r4, r0
 800c118:	2800      	cmp	r0, #0
 800c11a:	d03d      	beq.n	800c198 <oslib_test_009_001_execute.lto_priv.0+0xe8>
  test_set_step(3);
 800c11c:	2503      	movs	r5, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800c11e:	4835      	ldr	r0, [pc, #212]	; (800c1f4 <oslib_test_009_001_execute.lto_priv.0+0x144>)
  test_set_step(3);
 800c120:	603d      	str	r5, [r7, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800c122:	f7ff ff5d 	bl	800bfe0 <chFactoryRegisterObject.constprop.0>
 800c126:	2800      	cmp	r0, #0
 800c128:	d13c      	bne.n	800c1a4 <oslib_test_009_001_execute.lto_priv.0+0xf4>
  test_set_step(4);
 800c12a:	2304      	movs	r3, #4
 800c12c:	603b      	str	r3, [r7, #0]
    rop1 = chFactoryFindObject("myobj");
 800c12e:	f7ff ff27 	bl	800bf80 <chFactoryFindObject.constprop.0>
 800c132:	2800      	cmp	r0, #0
 800c134:	d03c      	beq.n	800c1b0 <oslib_test_009_001_execute.lto_priv.0+0x100>
 800c136:	f245 56aa 	movw	r6, #21930	; 0x55aa
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 800c13a:	6901      	ldr	r1, [r0, #16]
 800c13c:	680a      	ldr	r2, [r1, #0]
 800c13e:	42b2      	cmp	r2, r6
 800c140:	d142      	bne.n	800c1c8 <oslib_test_009_001_execute.lto_priv.0+0x118>
 800c142:	4284      	cmp	r4, r0
 800c144:	d13a      	bne.n	800c1bc <oslib_test_009_001_execute.lto_priv.0+0x10c>
 800c146:	6863      	ldr	r3, [r4, #4]
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d137      	bne.n	800c1bc <oslib_test_009_001_execute.lto_priv.0+0x10c>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 800c14c:	6065      	str	r5, [r4, #4]
 800c14e:	680b      	ldr	r3, [r1, #0]
 800c150:	4293      	cmp	r3, r2
 800c152:	d139      	bne.n	800c1c8 <oslib_test_009_001_execute.lto_priv.0+0x118>
    chFactoryReleaseObject(rop2);
 800c154:	f7f9 ff3c 	bl	8005fd0 <chFactoryReleaseObject>
 800c158:	6863      	ldr	r3, [r4, #4]
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	d13a      	bne.n	800c1d4 <oslib_test_009_001_execute.lto_priv.0+0x124>
    chFactoryReleaseObject(rop1);
 800c15e:	4620      	mov	r0, r4
 800c160:	f7f9 ff36 	bl	8005fd0 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 800c164:	6860      	ldr	r0, [r4, #4]
 800c166:	4924      	ldr	r1, [pc, #144]	; (800c1f8 <oslib_test_009_001_execute.lto_priv.0+0x148>)
 800c168:	1e43      	subs	r3, r0, #1
 800c16a:	4258      	negs	r0, r3
 800c16c:	4158      	adcs	r0, r3
 800c16e:	f7fa ff27 	bl	8006fc0 <__test_assert>
 800c172:	2800      	cmp	r0, #0
 800c174:	d1c6      	bne.n	800c104 <oslib_test_009_001_execute.lto_priv.0+0x54>
  test_set_step(5);
 800c176:	2305      	movs	r3, #5
    chFactoryReleaseObject(rop);
 800c178:	4620      	mov	r0, r4
  test_set_step(5);
 800c17a:	603b      	str	r3, [r7, #0]
    chFactoryReleaseObject(rop);
 800c17c:	f7f9 ff28 	bl	8005fd0 <chFactoryReleaseObject>
  test_set_step(6);
 800c180:	2306      	movs	r3, #6
 800c182:	603b      	str	r3, [r7, #0]
    rop = chFactoryFindObject("myobj");
 800c184:	f7ff fefc 	bl	800bf80 <chFactoryFindObject.constprop.0>
}
 800c188:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(rop == NULL, "found");
 800c18c:	fab0 f080 	clz	r0, r0
 800c190:	4916      	ldr	r1, [pc, #88]	; (800c1ec <oslib_test_009_001_execute.lto_priv.0+0x13c>)
 800c192:	0940      	lsrs	r0, r0, #5
 800c194:	f7fa bf14 	b.w	8006fc0 <__test_assert>
  chtest.global_fail     = true;
 800c198:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c19c:	4a17      	ldr	r2, [pc, #92]	; (800c1fc <oslib_test_009_001_execute.lto_priv.0+0x14c>)
  chtest.global_fail     = true;
 800c19e:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c1a0:	60ba      	str	r2, [r7, #8]
}
 800c1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c1a4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c1a8:	4a15      	ldr	r2, [pc, #84]	; (800c200 <oslib_test_009_001_execute.lto_priv.0+0x150>)
  chtest.global_fail     = true;
 800c1aa:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c1ac:	60ba      	str	r2, [r7, #8]
 800c1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c1b0:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c1b4:	4a13      	ldr	r2, [pc, #76]	; (800c204 <oslib_test_009_001_execute.lto_priv.0+0x154>)
  chtest.global_fail     = true;
 800c1b6:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c1b8:	60ba      	str	r2, [r7, #8]
 800c1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c1bc:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c1c0:	4a11      	ldr	r2, [pc, #68]	; (800c208 <oslib_test_009_001_execute.lto_priv.0+0x158>)
  chtest.global_fail     = true;
 800c1c2:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c1c4:	60ba      	str	r2, [r7, #8]
 800c1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c1c8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c1cc:	4a0f      	ldr	r2, [pc, #60]	; (800c20c <oslib_test_009_001_execute.lto_priv.0+0x15c>)
  chtest.global_fail     = true;
 800c1ce:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c1d0:	60ba      	str	r2, [r7, #8]
 800c1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c1d4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c1d8:	4a07      	ldr	r2, [pc, #28]	; (800c1f8 <oslib_test_009_001_execute.lto_priv.0+0x148>)
  chtest.global_fail     = true;
 800c1da:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c1dc:	60ba      	str	r2, [r7, #8]
 800c1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1e0:	20001134 	.word	0x20001134
 800c1e4:	200010d8 	.word	0x200010d8
 800c1e8:	08012ac0 	.word	0x08012ac0
 800c1ec:	08012b04 	.word	0x08012b04
 800c1f0:	20000890 	.word	0x20000890
 800c1f4:	2000088c 	.word	0x2000088c
 800c1f8:	08012b38 	.word	0x08012b38
 800c1fc:	08012ae0 	.word	0x08012ae0
 800c200:	08012af0 	.word	0x08012af0
 800c204:	08012b00 	.word	0x08012b00
 800c208:	08012b1c 	.word	0x08012b1c
 800c20c:	08012b0c 	.word	0x08012b0c

0800c210 <chFactoryCreatePipe.constprop.0>:
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	2320      	movs	r3, #32
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	4816      	ldr	r0, [pc, #88]	; (800c274 <chFactoryCreatePipe.constprop.0+0x64>)
 800c21a:	f7f8 fac9 	bl	80047b0 <chMtxLockS>
 800c21e:	2500      	movs	r5, #0
 800c220:	f385 8811 	msr	BASEPRI, r5
  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 800c224:	2308      	movs	r3, #8
 800c226:	2270      	movs	r2, #112	; 0x70
 800c228:	4913      	ldr	r1, [pc, #76]	; (800c278 <chFactoryCreatePipe.constprop.0+0x68>)
 800c22a:	4814      	ldr	r0, [pc, #80]	; (800c27c <chFactoryCreatePipe.constprop.0+0x6c>)
 800c22c:	f7f9 fe98 	bl	8005f60 <dyn_create_object_heap.lto_priv.0>
  if (dpp != NULL) {
 800c230:	4604      	mov	r4, r0
 800c232:	b1d0      	cbz	r0, 800c26a <chFactoryCreatePipe.constprop.0+0x5a>
    chPipeObjectInit(&dpp->pipe, (uint8_t *)(dpp + 1), size);
 800c234:	f100 0360 	add.w	r3, r0, #96	; 0x60
  PC_INIT(pp);
 800c238:	f100 0130 	add.w	r1, r0, #48	; 0x30
  PW_INIT(pp);
 800c23c:	f100 0240 	add.w	r2, r0, #64	; 0x40
  pp->top    = &buf[n];
 800c240:	3070      	adds	r0, #112	; 0x70
  pp->buffer = buf;
 800c242:	e9c4 3004 	strd	r3, r0, [r4, #16]
  pp->wrptr  = buf;
 800c246:	e9c4 3306 	strd	r3, r3, [r4, #24]
  PR_INIT(pp);
 800c24a:	f104 0350 	add.w	r3, r4, #80	; 0x50
  pp->rtr    = NULL;
 800c24e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 800c252:	e9c4 110c 	strd	r1, r1, [r4, #48]	; 0x30
 800c256:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
 800c25a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
  pp->cnt    = (size_t)0;
 800c25e:	6225      	str	r5, [r4, #32]
  pp->reset  = false;
 800c260:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  mp->owner = NULL;
 800c264:	63a5      	str	r5, [r4, #56]	; 0x38
 800c266:	64a5      	str	r5, [r4, #72]	; 0x48
 800c268:	65a5      	str	r5, [r4, #88]	; 0x58
  F_UNLOCK();
 800c26a:	4802      	ldr	r0, [pc, #8]	; (800c274 <chFactoryCreatePipe.constprop.0+0x64>)
 800c26c:	f7f8 fb38 	bl	80048e0 <chMtxUnlock>
}
 800c270:	4620      	mov	r0, r4
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	200010d8 	.word	0x200010d8
 800c278:	2000111c 	.word	0x2000111c
 800c27c:	08012ad8 	.word	0x08012ad8

0800c280 <oslib_test_009_006_execute.lto_priv.0>:

static void oslib_test_009_006_execute(void) {
  dyn_pipe_t *dpp;

  /* [9.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 800c280:	2201      	movs	r2, #1
static void oslib_test_009_006_execute(void) {
 800c282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800c284:	4f3d      	ldr	r7, [pc, #244]	; (800c37c <oslib_test_009_006_execute.lto_priv.0+0xfc>)
 800c286:	2320      	movs	r3, #32
 800c288:	603a      	str	r2, [r7, #0]
 800c28a:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800c28e:	4d3c      	ldr	r5, [pc, #240]	; (800c380 <oslib_test_009_006_execute.lto_priv.0+0x100>)
 800c290:	4628      	mov	r0, r5
 800c292:	f7f8 fa8d 	bl	80047b0 <chMtxLockS>
 800c296:	2300      	movs	r3, #0
 800c298:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c29c:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 800c2a0:	42ac      	cmp	r4, r5
 800c2a2:	d018      	beq.n	800c2d6 <oslib_test_009_006_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c2a4:	4e37      	ldr	r6, [pc, #220]	; (800c384 <oslib_test_009_006_execute.lto_priv.0+0x104>)
 800c2a6:	e002      	b.n	800c2ae <oslib_test_009_006_execute.lto_priv.0+0x2e>
    p = p->next;
 800c2a8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c2aa:	42ac      	cmp	r4, r5
 800c2ac:	d013      	beq.n	800c2d6 <oslib_test_009_006_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c2ae:	4631      	mov	r1, r6
 800c2b0:	f104 0008 	add.w	r0, r4, #8
 800c2b4:	f7f4 f850 	bl	8000358 <strcmp>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	d1f5      	bne.n	800c2a8 <oslib_test_009_006_execute.lto_priv.0+0x28>
  if (dep != NULL) {
 800c2bc:	b15c      	cbz	r4, 800c2d6 <oslib_test_009_006_execute.lto_priv.0+0x56>
    dep->refs++;
 800c2be:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800c2c0:	482f      	ldr	r0, [pc, #188]	; (800c380 <oslib_test_009_006_execute.lto_priv.0+0x100>)
    dep->refs++;
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800c2c6:	f7f8 fb0b 	bl	80048e0 <chMtxUnlock>
  chtest.global_fail     = true;
 800c2ca:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c2ce:	4a2e      	ldr	r2, [pc, #184]	; (800c388 <oslib_test_009_006_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800c2d0:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c2d2:	60ba      	str	r2, [r7, #8]
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
  test_end_step(6);
}
 800c2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d6:	482a      	ldr	r0, [pc, #168]	; (800c380 <oslib_test_009_006_execute.lto_priv.0+0x100>)
 800c2d8:	f7f8 fb02 	bl	80048e0 <chMtxUnlock>
  test_set_step(2);
 800c2dc:	2302      	movs	r3, #2
 800c2de:	603b      	str	r3, [r7, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 800c2e0:	f7ff ff96 	bl	800c210 <chFactoryCreatePipe.constprop.0>
  if (!condition) {
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	b358      	cbz	r0, 800c340 <oslib_test_009_006_execute.lto_priv.0+0xc0>
  test_set_step(3);
 800c2e8:	2503      	movs	r5, #3
 800c2ea:	603d      	str	r5, [r7, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 800c2ec:	f7ff ff90 	bl	800c210 <chFactoryCreatePipe.constprop.0>
 800c2f0:	bb60      	cbnz	r0, 800c34c <oslib_test_009_006_execute.lto_priv.0+0xcc>
  test_set_step(4);
 800c2f2:	2304      	movs	r3, #4
 800c2f4:	603b      	str	r3, [r7, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 800c2f6:	f7ff fd53 	bl	800bda0 <chFactoryFindPipe.constprop.0>
 800c2fa:	b368      	cbz	r0, 800c358 <oslib_test_009_006_execute.lto_priv.0+0xd8>
 800c2fc:	4284      	cmp	r4, r0
 800c2fe:	d131      	bne.n	800c364 <oslib_test_009_006_execute.lto_priv.0+0xe4>
 800c300:	6863      	ldr	r3, [r4, #4]
 800c302:	2b02      	cmp	r3, #2
 800c304:	d12e      	bne.n	800c364 <oslib_test_009_006_execute.lto_priv.0+0xe4>
 800c306:	6065      	str	r5, [r4, #4]
    chFactoryReleasePipe(dpp2);
 800c308:	f7f9 ff4a 	bl	80061a0 <chFactoryReleasePipe>
 800c30c:	6863      	ldr	r3, [r4, #4]
 800c30e:	2b02      	cmp	r3, #2
 800c310:	d12e      	bne.n	800c370 <oslib_test_009_006_execute.lto_priv.0+0xf0>
    chFactoryReleasePipe(dpp1);
 800c312:	4620      	mov	r0, r4
 800c314:	f7f9 ff44 	bl	80061a0 <chFactoryReleasePipe>
 800c318:	6863      	ldr	r3, [r4, #4]
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d128      	bne.n	800c370 <oslib_test_009_006_execute.lto_priv.0+0xf0>
  test_set_step(5);
 800c31e:	2305      	movs	r3, #5
    chFactoryReleasePipe(dpp);
 800c320:	4620      	mov	r0, r4
  test_set_step(5);
 800c322:	603b      	str	r3, [r7, #0]
    chFactoryReleasePipe(dpp);
 800c324:	f7f9 ff3c 	bl	80061a0 <chFactoryReleasePipe>
  test_set_step(6);
 800c328:	2306      	movs	r3, #6
 800c32a:	603b      	str	r3, [r7, #0]
    dpp = chFactoryFindPipe("mypipe");
 800c32c:	f7ff fd38 	bl	800bda0 <chFactoryFindPipe.constprop.0>
 800c330:	2800      	cmp	r0, #0
 800c332:	d0cf      	beq.n	800c2d4 <oslib_test_009_006_execute.lto_priv.0+0x54>
  chtest.global_fail     = true;
 800c334:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c338:	4a13      	ldr	r2, [pc, #76]	; (800c388 <oslib_test_009_006_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800c33a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c33c:	60ba      	str	r2, [r7, #8]
}
 800c33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c340:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c344:	4a11      	ldr	r2, [pc, #68]	; (800c38c <oslib_test_009_006_execute.lto_priv.0+0x10c>)
  chtest.global_fail     = true;
 800c346:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c348:	60ba      	str	r2, [r7, #8]
 800c34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c34c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c350:	4a0f      	ldr	r2, [pc, #60]	; (800c390 <oslib_test_009_006_execute.lto_priv.0+0x110>)
  chtest.global_fail     = true;
 800c352:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c354:	60ba      	str	r2, [r7, #8]
 800c356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c358:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c35c:	4a0d      	ldr	r2, [pc, #52]	; (800c394 <oslib_test_009_006_execute.lto_priv.0+0x114>)
  chtest.global_fail     = true;
 800c35e:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c360:	60ba      	str	r2, [r7, #8]
 800c362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c364:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c368:	4a0b      	ldr	r2, [pc, #44]	; (800c398 <oslib_test_009_006_execute.lto_priv.0+0x118>)
  chtest.global_fail     = true;
 800c36a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c36c:	60ba      	str	r2, [r7, #8]
 800c36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c370:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c374:	4a09      	ldr	r2, [pc, #36]	; (800c39c <oslib_test_009_006_execute.lto_priv.0+0x11c>)
  chtest.global_fail     = true;
 800c376:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c378:	60ba      	str	r2, [r7, #8]
 800c37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c37c:	20001134 	.word	0x20001134
 800c380:	200010d8 	.word	0x200010d8
 800c384:	08012ad8 	.word	0x08012ad8
 800c388:	08012b04 	.word	0x08012b04
 800c38c:	08012b4c 	.word	0x08012b4c
 800c390:	08012b5c 	.word	0x08012b5c
 800c394:	08012b00 	.word	0x08012b00
 800c398:	08012b1c 	.word	0x08012b1c
 800c39c:	08012b38 	.word	0x08012b38

0800c3a0 <chFactoryCreateObjectsFIFO.constprop.0>:
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 800c3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a4:	f04f 0820 	mov.w	r8, #32
 800c3a8:	b083      	sub	sp, #12
 800c3aa:	f388 8811 	msr	BASEPRI, r8
 800c3ae:	4835      	ldr	r0, [pc, #212]	; (800c484 <chFactoryCreateObjectsFIFO.constprop.0+0xe4>)
 800c3b0:	f7f8 f9fe 	bl	80047b0 <chMtxLockS>
 800c3b4:	2700      	movs	r7, #0
 800c3b6:	f387 8811 	msr	BASEPRI, r7
  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 800c3ba:	2304      	movs	r3, #4
 800c3bc:	f44f 72ca 	mov.w	r2, #404	; 0x194
 800c3c0:	4931      	ldr	r1, [pc, #196]	; (800c488 <chFactoryCreateObjectsFIFO.constprop.0+0xe8>)
 800c3c2:	4832      	ldr	r0, [pc, #200]	; (800c48c <chFactoryCreateObjectsFIFO.constprop.0+0xec>)
 800c3c4:	f7f9 fdcc 	bl	8005f60 <dyn_create_object_heap.lto_priv.0>
  if (dofp != NULL) {
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d052      	beq.n	800c474 <chFactoryCreateObjectsFIFO.constprop.0+0xd4>
    uint8_t *objbuf = (uint8_t *)dofp + size1;
 800c3ce:	f100 0394 	add.w	r3, r0, #148	; 0x94
  mp->object_size = size;
 800c3d2:	2610      	movs	r6, #16
 800c3d4:	461d      	mov	r5, r3
 800c3d6:	9301      	str	r3, [sp, #4]
  mp->align = align;
 800c3d8:	2304      	movs	r3, #4
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 800c3da:	eb00 0906 	add.w	r9, r0, r6
  mp->object_size = size;
 800c3de:	e9c0 6308 	strd	r6, r3, [r0, #32]
 800c3e2:	e9c0 9904 	strd	r9, r9, [r0, #16]
 800c3e6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800c490 <chFactoryCreateObjectsFIFO.constprop.0+0xf0>
    msg_t *msgbuf = (msg_t *)(dofp + 1);
 800c3ea:	f100 0b54 	add.w	fp, r0, #84	; 0x54
  mp->next = NULL;
 800c3ee:	61c7      	str	r7, [r0, #28]
  mp->provider = provider;
 800c3f0:	6287      	str	r7, [r0, #40]	; 0x28
 800c3f2:	6187      	str	r7, [r0, #24]
 800c3f4:	e00f      	b.n	800c416 <chFactoryCreateObjectsFIFO.constprop.0+0x76>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800c3f6:	f8da 2000 	ldr.w	r2, [sl]
 800c3fa:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c3fe:	6892      	ldr	r2, [r2, #8]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	429a      	cmp	r2, r3
 800c404:	d901      	bls.n	800c40a <chFactoryCreateObjectsFIFO.constprop.0+0x6a>
    __sch_reschedule_ahead();
 800c406:	f7f7 fbdb 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800c40a:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800c40e:	6a23      	ldr	r3, [r4, #32]
  while (n != 0U) {
 800c410:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800c412:	441d      	add	r5, r3
  while (n != 0U) {
 800c414:	d01d      	beq.n	800c452 <chFactoryCreateObjectsFIFO.constprop.0+0xb2>
 800c416:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 800c41a:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
  if (++sp->cnt <= (cnt_t)0) {
 800c41e:	3301      	adds	r3, #1
 800c420:	2b00      	cmp	r3, #0
 800c422:	602a      	str	r2, [r5, #0]
 800c424:	e9c4 3506 	strd	r3, r5, [r4, #24]
 800c428:	dce5      	bgt.n	800c3f6 <chFactoryCreateObjectsFIFO.constprop.0+0x56>
  ch_queue_t *p = qp->next;
 800c42a:	6922      	ldr	r2, [r4, #16]
  qp->next       = p->next;
 800c42c:	6813      	ldr	r3, [r2, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800c42e:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800c430:	6890      	ldr	r0, [r2, #8]
  qp->next       = p->next;
 800c432:	6123      	str	r3, [r4, #16]
  qp->next->prev = qp;
 800c434:	f8c3 9004 	str.w	r9, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 800c438:	6297      	str	r7, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800c43a:	f882 7024 	strb.w	r7, [r2, #36]	; 0x24
    pqp = pqp->next;
 800c43e:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800c440:	688b      	ldr	r3, [r1, #8]
 800c442:	4283      	cmp	r3, r0
 800c444:	d2fb      	bcs.n	800c43e <chFactoryCreateObjectsFIFO.constprop.0+0x9e>
  p->prev       = pqp->prev;
 800c446:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 800c448:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 800c44a:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 800c44c:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 800c44e:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 800c450:	e7d1      	b.n	800c3f6 <chFactoryCreateObjectsFIFO.constprop.0+0x56>
  mbp->top    = &buf[n];
 800c452:	9b01      	ldr	r3, [sp, #4]
  ch_queue_init(&tqp->queue);
 800c454:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800c458:	6323      	str	r3, [r4, #48]	; 0x30
 800c45a:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 800c45e:	e9c4 bb0d 	strd	fp, fp, [r4, #52]	; 0x34
  qp->prev = qp;
 800c462:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
 800c466:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  mbp->buffer = buf;
 800c46a:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
  mbp->cnt    = (size_t)0;
 800c46e:	63e6      	str	r6, [r4, #60]	; 0x3c
  mbp->reset  = false;
 800c470:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  F_UNLOCK();
 800c474:	4803      	ldr	r0, [pc, #12]	; (800c484 <chFactoryCreateObjectsFIFO.constprop.0+0xe4>)
 800c476:	f7f8 fa33 	bl	80048e0 <chMtxUnlock>
}
 800c47a:	4620      	mov	r0, r4
 800c47c:	b003      	add	sp, #12
 800c47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c482:	bf00      	nop
 800c484:	200010d8 	.word	0x200010d8
 800c488:	20001118 	.word	0x20001118
 800c48c:	08012ab8 	.word	0x08012ab8
 800c490:	20001050 	.word	0x20001050
	...

0800c4a0 <oslib_test_009_005_execute.lto_priv.0>:
  test_set_step(1);
 800c4a0:	2201      	movs	r2, #1
static void oslib_test_009_005_execute(void) {
 800c4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800c4a4:	4f3d      	ldr	r7, [pc, #244]	; (800c59c <oslib_test_009_005_execute.lto_priv.0+0xfc>)
 800c4a6:	2320      	movs	r3, #32
 800c4a8:	603a      	str	r2, [r7, #0]
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	4d3c      	ldr	r5, [pc, #240]	; (800c5a0 <oslib_test_009_005_execute.lto_priv.0+0x100>)
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	f7f8 f97d 	bl	80047b0 <chMtxLockS>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c4bc:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 800c4c0:	42ac      	cmp	r4, r5
 800c4c2:	d018      	beq.n	800c4f6 <oslib_test_009_005_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c4c4:	4e37      	ldr	r6, [pc, #220]	; (800c5a4 <oslib_test_009_005_execute.lto_priv.0+0x104>)
 800c4c6:	e002      	b.n	800c4ce <oslib_test_009_005_execute.lto_priv.0+0x2e>
    p = p->next;
 800c4c8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c4ca:	42ac      	cmp	r4, r5
 800c4cc:	d013      	beq.n	800c4f6 <oslib_test_009_005_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c4ce:	4631      	mov	r1, r6
 800c4d0:	f104 0008 	add.w	r0, r4, #8
 800c4d4:	f7f3 ff40 	bl	8000358 <strcmp>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d1f5      	bne.n	800c4c8 <oslib_test_009_005_execute.lto_priv.0+0x28>
  if (dep != NULL) {
 800c4dc:	b15c      	cbz	r4, 800c4f6 <oslib_test_009_005_execute.lto_priv.0+0x56>
    dep->refs++;
 800c4de:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800c4e0:	482f      	ldr	r0, [pc, #188]	; (800c5a0 <oslib_test_009_005_execute.lto_priv.0+0x100>)
    dep->refs++;
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800c4e6:	f7f8 f9fb 	bl	80048e0 <chMtxUnlock>
  chtest.global_fail     = true;
 800c4ea:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c4ee:	4a2e      	ldr	r2, [pc, #184]	; (800c5a8 <oslib_test_009_005_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800c4f0:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c4f2:	60ba      	str	r2, [r7, #8]
}
 800c4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4f6:	482a      	ldr	r0, [pc, #168]	; (800c5a0 <oslib_test_009_005_execute.lto_priv.0+0x100>)
 800c4f8:	f7f8 f9f2 	bl	80048e0 <chMtxUnlock>
  test_set_step(2);
 800c4fc:	2302      	movs	r3, #2
 800c4fe:	603b      	str	r3, [r7, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800c500:	f7ff ff4e 	bl	800c3a0 <chFactoryCreateObjectsFIFO.constprop.0>
  if (!condition) {
 800c504:	4604      	mov	r4, r0
 800c506:	b358      	cbz	r0, 800c560 <oslib_test_009_005_execute.lto_priv.0+0xc0>
  test_set_step(3);
 800c508:	2503      	movs	r5, #3
 800c50a:	603d      	str	r5, [r7, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800c50c:	f7ff ff48 	bl	800c3a0 <chFactoryCreateObjectsFIFO.constprop.0>
 800c510:	bb60      	cbnz	r0, 800c56c <oslib_test_009_005_execute.lto_priv.0+0xcc>
  test_set_step(4);
 800c512:	2304      	movs	r3, #4
 800c514:	603b      	str	r3, [r7, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 800c516:	f7ff fc73 	bl	800be00 <chFactoryFindObjectsFIFO.constprop.0>
 800c51a:	b368      	cbz	r0, 800c578 <oslib_test_009_005_execute.lto_priv.0+0xd8>
 800c51c:	4284      	cmp	r4, r0
 800c51e:	d131      	bne.n	800c584 <oslib_test_009_005_execute.lto_priv.0+0xe4>
 800c520:	6863      	ldr	r3, [r4, #4]
 800c522:	2b02      	cmp	r3, #2
 800c524:	d12e      	bne.n	800c584 <oslib_test_009_005_execute.lto_priv.0+0xe4>
 800c526:	6065      	str	r5, [r4, #4]
    chFactoryReleaseObjectsFIFO(dofp2);
 800c528:	f7f9 fe12 	bl	8006150 <chFactoryReleaseObjectsFIFO>
 800c52c:	6863      	ldr	r3, [r4, #4]
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d12e      	bne.n	800c590 <oslib_test_009_005_execute.lto_priv.0+0xf0>
    chFactoryReleaseObjectsFIFO(dofp1);
 800c532:	4620      	mov	r0, r4
 800c534:	f7f9 fe0c 	bl	8006150 <chFactoryReleaseObjectsFIFO>
 800c538:	6863      	ldr	r3, [r4, #4]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d128      	bne.n	800c590 <oslib_test_009_005_execute.lto_priv.0+0xf0>
  test_set_step(5);
 800c53e:	2305      	movs	r3, #5
    chFactoryReleaseObjectsFIFO(dofp);
 800c540:	4620      	mov	r0, r4
  test_set_step(5);
 800c542:	603b      	str	r3, [r7, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 800c544:	f7f9 fe04 	bl	8006150 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 800c548:	2306      	movs	r3, #6
 800c54a:	603b      	str	r3, [r7, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 800c54c:	f7ff fc58 	bl	800be00 <chFactoryFindObjectsFIFO.constprop.0>
 800c550:	2800      	cmp	r0, #0
 800c552:	d0cf      	beq.n	800c4f4 <oslib_test_009_005_execute.lto_priv.0+0x54>
  chtest.global_fail     = true;
 800c554:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c558:	4a13      	ldr	r2, [pc, #76]	; (800c5a8 <oslib_test_009_005_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800c55a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c55c:	60ba      	str	r2, [r7, #8]
}
 800c55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c560:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c564:	4a11      	ldr	r2, [pc, #68]	; (800c5ac <oslib_test_009_005_execute.lto_priv.0+0x10c>)
  chtest.global_fail     = true;
 800c566:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c568:	60ba      	str	r2, [r7, #8]
 800c56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c56c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c570:	4a0f      	ldr	r2, [pc, #60]	; (800c5b0 <oslib_test_009_005_execute.lto_priv.0+0x110>)
  chtest.global_fail     = true;
 800c572:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c574:	60ba      	str	r2, [r7, #8]
 800c576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c578:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c57c:	4a0d      	ldr	r2, [pc, #52]	; (800c5b4 <oslib_test_009_005_execute.lto_priv.0+0x114>)
  chtest.global_fail     = true;
 800c57e:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c580:	60ba      	str	r2, [r7, #8]
 800c582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c584:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c588:	4a0b      	ldr	r2, [pc, #44]	; (800c5b8 <oslib_test_009_005_execute.lto_priv.0+0x118>)
  chtest.global_fail     = true;
 800c58a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c58c:	60ba      	str	r2, [r7, #8]
 800c58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c590:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c594:	4a09      	ldr	r2, [pc, #36]	; (800c5bc <oslib_test_009_005_execute.lto_priv.0+0x11c>)
  chtest.global_fail     = true;
 800c596:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c598:	60ba      	str	r2, [r7, #8]
 800c59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c59c:	20001134 	.word	0x20001134
 800c5a0:	200010d8 	.word	0x200010d8
 800c5a4:	08012ab8 	.word	0x08012ab8
 800c5a8:	08012b04 	.word	0x08012b04
 800c5ac:	08012b4c 	.word	0x08012b4c
 800c5b0:	08012b5c 	.word	0x08012b5c
 800c5b4:	08012b00 	.word	0x08012b00
 800c5b8:	08012b1c 	.word	0x08012b1c
 800c5bc:	08012b38 	.word	0x08012b38

0800c5c0 <chFactoryCreateMailbox.constprop.0>:
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 800c5c0:	b538      	push	{r3, r4, r5, lr}
 800c5c2:	2320      	movs	r3, #32
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	4812      	ldr	r0, [pc, #72]	; (800c614 <chFactoryCreateMailbox.constprop.0+0x54>)
 800c5ca:	f7f8 f8f1 	bl	80047b0 <chMtxLockS>
 800c5ce:	2500      	movs	r5, #0
 800c5d0:	f385 8811 	msr	BASEPRI, r5
  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 800c5d4:	2308      	movs	r3, #8
 800c5d6:	2278      	movs	r2, #120	; 0x78
 800c5d8:	490f      	ldr	r1, [pc, #60]	; (800c618 <chFactoryCreateMailbox.constprop.0+0x58>)
 800c5da:	4810      	ldr	r0, [pc, #64]	; (800c61c <chFactoryCreateMailbox.constprop.0+0x5c>)
 800c5dc:	f7f9 fcc0 	bl	8005f60 <dyn_create_object_heap.lto_priv.0>
  if (dmp != NULL) {
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	b188      	cbz	r0, 800c608 <chFactoryCreateMailbox.constprop.0+0x48>
    chMBObjectInit(&dmp->mbx, (msg_t *)(dmp + 1), n);
 800c5e4:	f100 0338 	add.w	r3, r0, #56	; 0x38
 800c5e8:	f100 0128 	add.w	r1, r0, #40	; 0x28
 800c5ec:	f100 0230 	add.w	r2, r0, #48	; 0x30
  mbp->top    = &buf[n];
 800c5f0:	3078      	adds	r0, #120	; 0x78
  mbp->buffer = buf;
 800c5f2:	e9c4 3004 	strd	r3, r0, [r4, #16]
  mbp->wrptr  = buf;
 800c5f6:	e9c4 3306 	strd	r3, r3, [r4, #24]
 800c5fa:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 800c5fe:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 800c602:	6225      	str	r5, [r4, #32]
  mbp->reset  = false;
 800c604:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  F_UNLOCK();
 800c608:	4802      	ldr	r0, [pc, #8]	; (800c614 <chFactoryCreateMailbox.constprop.0+0x54>)
 800c60a:	f7f8 f969 	bl	80048e0 <chMtxUnlock>
}
 800c60e:	4620      	mov	r0, r4
 800c610:	bd38      	pop	{r3, r4, r5, pc}
 800c612:	bf00      	nop
 800c614:	200010d8 	.word	0x200010d8
 800c618:	20001114 	.word	0x20001114
 800c61c:	08012ad0 	.word	0x08012ad0

0800c620 <oslib_test_009_004_execute.lto_priv.0>:
  test_set_step(1);
 800c620:	2201      	movs	r2, #1
static void oslib_test_009_004_execute(void) {
 800c622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800c624:	4f3d      	ldr	r7, [pc, #244]	; (800c71c <oslib_test_009_004_execute.lto_priv.0+0xfc>)
 800c626:	2320      	movs	r3, #32
 800c628:	603a      	str	r2, [r7, #0]
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	4d3c      	ldr	r5, [pc, #240]	; (800c720 <oslib_test_009_004_execute.lto_priv.0+0x100>)
 800c630:	4628      	mov	r0, r5
 800c632:	f7f8 f8bd 	bl	80047b0 <chMtxLockS>
 800c636:	2300      	movs	r3, #0
 800c638:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c63c:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 800c640:	42ac      	cmp	r4, r5
 800c642:	d018      	beq.n	800c676 <oslib_test_009_004_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c644:	4e37      	ldr	r6, [pc, #220]	; (800c724 <oslib_test_009_004_execute.lto_priv.0+0x104>)
 800c646:	e002      	b.n	800c64e <oslib_test_009_004_execute.lto_priv.0+0x2e>
    p = p->next;
 800c648:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c64a:	42ac      	cmp	r4, r5
 800c64c:	d013      	beq.n	800c676 <oslib_test_009_004_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c64e:	4631      	mov	r1, r6
 800c650:	f104 0008 	add.w	r0, r4, #8
 800c654:	f7f3 fe80 	bl	8000358 <strcmp>
 800c658:	2800      	cmp	r0, #0
 800c65a:	d1f5      	bne.n	800c648 <oslib_test_009_004_execute.lto_priv.0+0x28>
  if (dep != NULL) {
 800c65c:	b15c      	cbz	r4, 800c676 <oslib_test_009_004_execute.lto_priv.0+0x56>
    dep->refs++;
 800c65e:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800c660:	482f      	ldr	r0, [pc, #188]	; (800c720 <oslib_test_009_004_execute.lto_priv.0+0x100>)
    dep->refs++;
 800c662:	3301      	adds	r3, #1
 800c664:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800c666:	f7f8 f93b 	bl	80048e0 <chMtxUnlock>
  chtest.global_fail     = true;
 800c66a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c66e:	4a2e      	ldr	r2, [pc, #184]	; (800c728 <oslib_test_009_004_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800c670:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c672:	60ba      	str	r2, [r7, #8]
}
 800c674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c676:	482a      	ldr	r0, [pc, #168]	; (800c720 <oslib_test_009_004_execute.lto_priv.0+0x100>)
 800c678:	f7f8 f932 	bl	80048e0 <chMtxUnlock>
  test_set_step(2);
 800c67c:	2302      	movs	r3, #2
 800c67e:	603b      	str	r3, [r7, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 800c680:	f7ff ff9e 	bl	800c5c0 <chFactoryCreateMailbox.constprop.0>
  if (!condition) {
 800c684:	4604      	mov	r4, r0
 800c686:	b358      	cbz	r0, 800c6e0 <oslib_test_009_004_execute.lto_priv.0+0xc0>
  test_set_step(3);
 800c688:	2503      	movs	r5, #3
 800c68a:	603d      	str	r5, [r7, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 800c68c:	f7ff ff98 	bl	800c5c0 <chFactoryCreateMailbox.constprop.0>
 800c690:	bb60      	cbnz	r0, 800c6ec <oslib_test_009_004_execute.lto_priv.0+0xcc>
  test_set_step(4);
 800c692:	2304      	movs	r3, #4
 800c694:	603b      	str	r3, [r7, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 800c696:	f7ff fbe3 	bl	800be60 <chFactoryFindMailbox.constprop.0>
 800c69a:	b368      	cbz	r0, 800c6f8 <oslib_test_009_004_execute.lto_priv.0+0xd8>
 800c69c:	4284      	cmp	r4, r0
 800c69e:	d131      	bne.n	800c704 <oslib_test_009_004_execute.lto_priv.0+0xe4>
 800c6a0:	6863      	ldr	r3, [r4, #4]
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d12e      	bne.n	800c704 <oslib_test_009_004_execute.lto_priv.0+0xe4>
 800c6a6:	6065      	str	r5, [r4, #4]
    chFactoryReleaseMailbox(dmp2);
 800c6a8:	f7f9 fd2a 	bl	8006100 <chFactoryReleaseMailbox>
 800c6ac:	6863      	ldr	r3, [r4, #4]
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	d12e      	bne.n	800c710 <oslib_test_009_004_execute.lto_priv.0+0xf0>
    chFactoryReleaseMailbox(dmp1);
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7f9 fd24 	bl	8006100 <chFactoryReleaseMailbox>
 800c6b8:	6863      	ldr	r3, [r4, #4]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d128      	bne.n	800c710 <oslib_test_009_004_execute.lto_priv.0+0xf0>
  test_set_step(5);
 800c6be:	2305      	movs	r3, #5
    chFactoryReleaseMailbox(dmp);
 800c6c0:	4620      	mov	r0, r4
  test_set_step(5);
 800c6c2:	603b      	str	r3, [r7, #0]
    chFactoryReleaseMailbox(dmp);
 800c6c4:	f7f9 fd1c 	bl	8006100 <chFactoryReleaseMailbox>
  test_set_step(6);
 800c6c8:	2306      	movs	r3, #6
 800c6ca:	603b      	str	r3, [r7, #0]
    dmp = chFactoryFindMailbox("mymbx");
 800c6cc:	f7ff fbc8 	bl	800be60 <chFactoryFindMailbox.constprop.0>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	d0cf      	beq.n	800c674 <oslib_test_009_004_execute.lto_priv.0+0x54>
  chtest.global_fail     = true;
 800c6d4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c6d8:	4a13      	ldr	r2, [pc, #76]	; (800c728 <oslib_test_009_004_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800c6da:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c6dc:	60ba      	str	r2, [r7, #8]
}
 800c6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c6e0:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c6e4:	4a11      	ldr	r2, [pc, #68]	; (800c72c <oslib_test_009_004_execute.lto_priv.0+0x10c>)
  chtest.global_fail     = true;
 800c6e6:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c6e8:	60ba      	str	r2, [r7, #8]
 800c6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c6ec:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c6f0:	4a0f      	ldr	r2, [pc, #60]	; (800c730 <oslib_test_009_004_execute.lto_priv.0+0x110>)
  chtest.global_fail     = true;
 800c6f2:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c6f4:	60ba      	str	r2, [r7, #8]
 800c6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c6f8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c6fc:	4a0d      	ldr	r2, [pc, #52]	; (800c734 <oslib_test_009_004_execute.lto_priv.0+0x114>)
  chtest.global_fail     = true;
 800c6fe:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c700:	60ba      	str	r2, [r7, #8]
 800c702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c704:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c708:	4a0b      	ldr	r2, [pc, #44]	; (800c738 <oslib_test_009_004_execute.lto_priv.0+0x118>)
  chtest.global_fail     = true;
 800c70a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c70c:	60ba      	str	r2, [r7, #8]
 800c70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800c710:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c714:	4a09      	ldr	r2, [pc, #36]	; (800c73c <oslib_test_009_004_execute.lto_priv.0+0x11c>)
  chtest.global_fail     = true;
 800c716:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c718:	60ba      	str	r2, [r7, #8]
 800c71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c71c:	20001134 	.word	0x20001134
 800c720:	200010d8 	.word	0x200010d8
 800c724:	08012ad0 	.word	0x08012ad0
 800c728:	08012b04 	.word	0x08012b04
 800c72c:	08012b4c 	.word	0x08012b4c
 800c730:	08012b5c 	.word	0x08012b5c
 800c734:	08012b00 	.word	0x08012b00
 800c738:	08012b1c 	.word	0x08012b1c
 800c73c:	08012b38 	.word	0x08012b38

0800c740 <oslib_test_009_002_execute.lto_priv.0>:
  test_set_step(1);
 800c740:	2201      	movs	r2, #1
static void oslib_test_009_002_execute(void) {
 800c742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800c746:	4f59      	ldr	r7, [pc, #356]	; (800c8ac <oslib_test_009_002_execute.lto_priv.0+0x16c>)
 800c748:	2320      	movs	r3, #32
 800c74a:	603a      	str	r2, [r7, #0]
 800c74c:	f383 8811 	msr	BASEPRI, r3
 800c750:	4d57      	ldr	r5, [pc, #348]	; (800c8b0 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800c752:	4628      	mov	r0, r5
 800c754:	f7f8 f82c 	bl	80047b0 <chMtxLockS>
 800c758:	2300      	movs	r3, #0
 800c75a:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c75e:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 800c762:	42ac      	cmp	r4, r5
 800c764:	d019      	beq.n	800c79a <oslib_test_009_002_execute.lto_priv.0+0x5a>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c766:	4e53      	ldr	r6, [pc, #332]	; (800c8b4 <oslib_test_009_002_execute.lto_priv.0+0x174>)
 800c768:	e002      	b.n	800c770 <oslib_test_009_002_execute.lto_priv.0+0x30>
    p = p->next;
 800c76a:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c76c:	42ac      	cmp	r4, r5
 800c76e:	d014      	beq.n	800c79a <oslib_test_009_002_execute.lto_priv.0+0x5a>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c770:	4631      	mov	r1, r6
 800c772:	f104 0008 	add.w	r0, r4, #8
 800c776:	f7f3 fdef 	bl	8000358 <strcmp>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d1f5      	bne.n	800c76a <oslib_test_009_002_execute.lto_priv.0+0x2a>
  if (dep != NULL) {
 800c77e:	b164      	cbz	r4, 800c79a <oslib_test_009_002_execute.lto_priv.0+0x5a>
    dep->refs++;
 800c780:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800c782:	484b      	ldr	r0, [pc, #300]	; (800c8b0 <oslib_test_009_002_execute.lto_priv.0+0x170>)
    dep->refs++;
 800c784:	3301      	adds	r3, #1
 800c786:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800c788:	f7f8 f8aa 	bl	80048e0 <chMtxUnlock>
  chtest.global_fail     = true;
 800c78c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c790:	4a49      	ldr	r2, [pc, #292]	; (800c8b8 <oslib_test_009_002_execute.lto_priv.0+0x178>)
  chtest.global_fail     = true;
 800c792:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c794:	60ba      	str	r2, [r7, #8]
}
 800c796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c79a:	4845      	ldr	r0, [pc, #276]	; (800c8b0 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800c79c:	f7f8 f8a0 	bl	80048e0 <chMtxUnlock>
  test_set_step(2);
 800c7a0:	2302      	movs	r3, #2
 800c7a2:	2620      	movs	r6, #32
 800c7a4:	603b      	str	r3, [r7, #0]
 800c7a6:	f386 8811 	msr	BASEPRI, r6
 800c7aa:	4841      	ldr	r0, [pc, #260]	; (800c8b0 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800c7ac:	f7f8 f800 	bl	80047b0 <chMtxLockS>
 800c7b0:	2500      	movs	r5, #0
 800c7b2:	f385 8811 	msr	BASEPRI, r5
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800c7b6:	2308      	movs	r3, #8
 800c7b8:	2290      	movs	r2, #144	; 0x90
 800c7ba:	4940      	ldr	r1, [pc, #256]	; (800c8bc <oslib_test_009_002_execute.lto_priv.0+0x17c>)
 800c7bc:	483d      	ldr	r0, [pc, #244]	; (800c8b4 <oslib_test_009_002_execute.lto_priv.0+0x174>)
 800c7be:	f7f9 fbcf 	bl	8005f60 <dyn_create_object_heap.lto_priv.0>
  if (dbp != NULL) {
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	b348      	cbz	r0, 800c81a <oslib_test_009_002_execute.lto_priv.0+0xda>
  test_set_step(3);
 800c7c6:	f04f 0803 	mov.w	r8, #3
    memset((void *)(dbp + 1), 0, size);
 800c7ca:	2280      	movs	r2, #128	; 0x80
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	f104 0010 	add.w	r0, r4, #16
 800c7d2:	f003 f9a5 	bl	800fb20 <memset>
  F_UNLOCK();
 800c7d6:	4836      	ldr	r0, [pc, #216]	; (800c8b0 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800c7d8:	f7f8 f882 	bl	80048e0 <chMtxUnlock>
 800c7dc:	f8c7 8000 	str.w	r8, [r7]
 800c7e0:	f386 8811 	msr	BASEPRI, r6
 800c7e4:	4832      	ldr	r0, [pc, #200]	; (800c8b0 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800c7e6:	f7f7 ffe3 	bl	80047b0 <chMtxLockS>
 800c7ea:	f385 8811 	msr	BASEPRI, r5
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800c7ee:	2308      	movs	r3, #8
 800c7f0:	2290      	movs	r2, #144	; 0x90
 800c7f2:	4932      	ldr	r1, [pc, #200]	; (800c8bc <oslib_test_009_002_execute.lto_priv.0+0x17c>)
 800c7f4:	482f      	ldr	r0, [pc, #188]	; (800c8b4 <oslib_test_009_002_execute.lto_priv.0+0x174>)
 800c7f6:	f7f9 fbb3 	bl	8005f60 <dyn_create_object_heap.lto_priv.0>
  if (dbp != NULL) {
 800c7fa:	b1c0      	cbz	r0, 800c82e <oslib_test_009_002_execute.lto_priv.0+0xee>
    memset((void *)(dbp + 1), 0, size);
 800c7fc:	2280      	movs	r2, #128	; 0x80
 800c7fe:	4629      	mov	r1, r5
 800c800:	3010      	adds	r0, #16
 800c802:	f003 f98d 	bl	800fb20 <memset>
  F_UNLOCK();
 800c806:	482a      	ldr	r0, [pc, #168]	; (800c8b0 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800c808:	f7f8 f86a 	bl	80048e0 <chMtxUnlock>
  chtest.global_fail     = true;
 800c80c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c810:	4a2b      	ldr	r2, [pc, #172]	; (800c8c0 <oslib_test_009_002_execute.lto_priv.0+0x180>)
  chtest.global_fail     = true;
 800c812:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c814:	60ba      	str	r2, [r7, #8]
}
 800c816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c81a:	4825      	ldr	r0, [pc, #148]	; (800c8b0 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800c81c:	f7f8 f860 	bl	80048e0 <chMtxUnlock>
  chtest.global_fail     = true;
 800c820:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c824:	4a27      	ldr	r2, [pc, #156]	; (800c8c4 <oslib_test_009_002_execute.lto_priv.0+0x184>)
  chtest.global_fail     = true;
 800c826:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c828:	60ba      	str	r2, [r7, #8]
 800c82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c82e:	4820      	ldr	r0, [pc, #128]	; (800c8b0 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800c830:	f7f8 f856 	bl	80048e0 <chMtxUnlock>
  test_set_step(4);
 800c834:	2304      	movs	r3, #4
 800c836:	603b      	str	r3, [r7, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 800c838:	f7ff fb72 	bl	800bf20 <chFactoryFindBuffer.constprop.0>
  if (!condition) {
 800c83c:	4605      	mov	r5, r0
 800c83e:	b340      	cbz	r0, 800c892 <oslib_test_009_002_execute.lto_priv.0+0x152>
 800c840:	42a5      	cmp	r5, r4
 800c842:	d120      	bne.n	800c886 <oslib_test_009_002_execute.lto_priv.0+0x146>
 800c844:	686b      	ldr	r3, [r5, #4]
 800c846:	2b02      	cmp	r3, #2
 800c848:	d11d      	bne.n	800c886 <oslib_test_009_002_execute.lto_priv.0+0x146>
 800c84a:	f8c5 8004 	str.w	r8, [r5, #4]
    chFactoryReleaseBuffer(dbp2);
 800c84e:	f7f9 fbf7 	bl	8006040 <chFactoryReleaseBuffer>
 800c852:	686b      	ldr	r3, [r5, #4]
 800c854:	2b02      	cmp	r3, #2
 800c856:	d122      	bne.n	800c89e <oslib_test_009_002_execute.lto_priv.0+0x15e>
    chFactoryReleaseBuffer(dbp1);
 800c858:	4628      	mov	r0, r5
 800c85a:	f7f9 fbf1 	bl	8006040 <chFactoryReleaseBuffer>
 800c85e:	686b      	ldr	r3, [r5, #4]
 800c860:	2b01      	cmp	r3, #1
 800c862:	d11c      	bne.n	800c89e <oslib_test_009_002_execute.lto_priv.0+0x15e>
  test_set_step(5);
 800c864:	2305      	movs	r3, #5
    chFactoryReleaseBuffer(dbp);
 800c866:	4628      	mov	r0, r5
  test_set_step(5);
 800c868:	603b      	str	r3, [r7, #0]
    chFactoryReleaseBuffer(dbp);
 800c86a:	f7f9 fbe9 	bl	8006040 <chFactoryReleaseBuffer>
  test_set_step(6);
 800c86e:	2306      	movs	r3, #6
 800c870:	603b      	str	r3, [r7, #0]
    dbp = chFactoryFindBuffer("mybuf");
 800c872:	f7ff fb55 	bl	800bf20 <chFactoryFindBuffer.constprop.0>
 800c876:	2800      	cmp	r0, #0
 800c878:	d08d      	beq.n	800c796 <oslib_test_009_002_execute.lto_priv.0+0x56>
  chtest.global_fail     = true;
 800c87a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c87e:	4a0e      	ldr	r2, [pc, #56]	; (800c8b8 <oslib_test_009_002_execute.lto_priv.0+0x178>)
  chtest.global_fail     = true;
 800c880:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c882:	60ba      	str	r2, [r7, #8]
    return __test_fail(msg);
 800c884:	e787      	b.n	800c796 <oslib_test_009_002_execute.lto_priv.0+0x56>
  chtest.global_fail     = true;
 800c886:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c88a:	4a0f      	ldr	r2, [pc, #60]	; (800c8c8 <oslib_test_009_002_execute.lto_priv.0+0x188>)
  chtest.global_fail     = true;
 800c88c:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c88e:	60ba      	str	r2, [r7, #8]
 800c890:	e781      	b.n	800c796 <oslib_test_009_002_execute.lto_priv.0+0x56>
  chtest.global_fail     = true;
 800c892:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c896:	4a0d      	ldr	r2, [pc, #52]	; (800c8cc <oslib_test_009_002_execute.lto_priv.0+0x18c>)
  chtest.global_fail     = true;
 800c898:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c89a:	60ba      	str	r2, [r7, #8]
 800c89c:	e77b      	b.n	800c796 <oslib_test_009_002_execute.lto_priv.0+0x56>
  chtest.global_fail     = true;
 800c89e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c8a2:	4a0b      	ldr	r2, [pc, #44]	; (800c8d0 <oslib_test_009_002_execute.lto_priv.0+0x190>)
  chtest.global_fail     = true;
 800c8a4:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c8a6:	60ba      	str	r2, [r7, #8]
 800c8a8:	e775      	b.n	800c796 <oslib_test_009_002_execute.lto_priv.0+0x56>
 800c8aa:	bf00      	nop
 800c8ac:	20001134 	.word	0x20001134
 800c8b0:	200010d8 	.word	0x200010d8
 800c8b4:	08012ac8 	.word	0x08012ac8
 800c8b8:	08012b04 	.word	0x08012b04
 800c8bc:	200010fc 	.word	0x200010fc
 800c8c0:	08012b5c 	.word	0x08012b5c
 800c8c4:	08012b4c 	.word	0x08012b4c
 800c8c8:	08012b1c 	.word	0x08012b1c
 800c8cc:	08012b00 	.word	0x08012b00
 800c8d0:	08012b38 	.word	0x08012b38
	...

0800c8e0 <oslib_test_009_003_teardown.lto_priv.0>:
 800c8e0:	2320      	movs	r3, #32
static void oslib_test_009_003_teardown(void) {
 800c8e2:	b570      	push	{r4, r5, r6, lr}
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	4d15      	ldr	r5, [pc, #84]	; (800c940 <oslib_test_009_003_teardown.lto_priv.0+0x60>)
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f7f7 ff60 	bl	80047b0 <chMtxLockS>
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c8f6:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800c8fa:	42ac      	cmp	r4, r5
 800c8fc:	d01b      	beq.n	800c936 <oslib_test_009_003_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c8fe:	4e11      	ldr	r6, [pc, #68]	; (800c944 <oslib_test_009_003_teardown.lto_priv.0+0x64>)
 800c900:	e002      	b.n	800c908 <oslib_test_009_003_teardown.lto_priv.0+0x28>
    p = p->next;
 800c902:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c904:	42ac      	cmp	r4, r5
 800c906:	d016      	beq.n	800c936 <oslib_test_009_003_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c908:	4631      	mov	r1, r6
 800c90a:	f104 0008 	add.w	r0, r4, #8
 800c90e:	f7f3 fd23 	bl	8000358 <strcmp>
 800c912:	2800      	cmp	r0, #0
 800c914:	d1f5      	bne.n	800c902 <oslib_test_009_003_teardown.lto_priv.0+0x22>
  if (dep != NULL) {
 800c916:	b174      	cbz	r4, 800c936 <oslib_test_009_003_teardown.lto_priv.0+0x56>
    dep->refs++;
 800c918:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800c91a:	4809      	ldr	r0, [pc, #36]	; (800c940 <oslib_test_009_003_teardown.lto_priv.0+0x60>)
    dep->refs++;
 800c91c:	3301      	adds	r3, #1
 800c91e:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800c920:	f7f7 ffde 	bl	80048e0 <chMtxUnlock>
    while (dsp->element.refs > 0U) {
 800c924:	6863      	ldr	r3, [r4, #4]
 800c926:	b12b      	cbz	r3, 800c934 <oslib_test_009_003_teardown.lto_priv.0+0x54>
      chFactoryReleaseSemaphore(dsp);
 800c928:	4620      	mov	r0, r4
 800c92a:	f7f9 fbb1 	bl	8006090 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 800c92e:	6863      	ldr	r3, [r4, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1f9      	bne.n	800c928 <oslib_test_009_003_teardown.lto_priv.0+0x48>
}
 800c934:	bd70      	pop	{r4, r5, r6, pc}
 800c936:	4802      	ldr	r0, [pc, #8]	; (800c940 <oslib_test_009_003_teardown.lto_priv.0+0x60>)
 800c938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c93c:	f7f7 bfd0 	b.w	80048e0 <chMtxUnlock>
 800c940:	200010d8 	.word	0x200010d8
 800c944:	08012ab0 	.word	0x08012ab0
	...

0800c950 <oslib_test_009_003_execute.lto_priv.0>:
  test_set_step(1);
 800c950:	2201      	movs	r2, #1
static void oslib_test_009_003_execute(void) {
 800c952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800c954:	4f3d      	ldr	r7, [pc, #244]	; (800ca4c <oslib_test_009_003_execute.lto_priv.0+0xfc>)
 800c956:	2320      	movs	r3, #32
 800c958:	603a      	str	r2, [r7, #0]
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	4d3c      	ldr	r5, [pc, #240]	; (800ca50 <oslib_test_009_003_execute.lto_priv.0+0x100>)
 800c960:	4628      	mov	r0, r5
 800c962:	f7f7 ff25 	bl	80047b0 <chMtxLockS>
 800c966:	2300      	movs	r3, #0
 800c968:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c96c:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800c970:	42ac      	cmp	r4, r5
 800c972:	d018      	beq.n	800c9a6 <oslib_test_009_003_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c974:	4e37      	ldr	r6, [pc, #220]	; (800ca54 <oslib_test_009_003_execute.lto_priv.0+0x104>)
 800c976:	e002      	b.n	800c97e <oslib_test_009_003_execute.lto_priv.0+0x2e>
    p = p->next;
 800c978:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c97a:	42ac      	cmp	r4, r5
 800c97c:	d013      	beq.n	800c9a6 <oslib_test_009_003_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c97e:	4631      	mov	r1, r6
 800c980:	f104 0008 	add.w	r0, r4, #8
 800c984:	f7f3 fce8 	bl	8000358 <strcmp>
 800c988:	2800      	cmp	r0, #0
 800c98a:	d1f5      	bne.n	800c978 <oslib_test_009_003_execute.lto_priv.0+0x28>
  if (dep != NULL) {
 800c98c:	b15c      	cbz	r4, 800c9a6 <oslib_test_009_003_execute.lto_priv.0+0x56>
    dep->refs++;
 800c98e:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800c990:	482f      	ldr	r0, [pc, #188]	; (800ca50 <oslib_test_009_003_execute.lto_priv.0+0x100>)
    dep->refs++;
 800c992:	3301      	adds	r3, #1
 800c994:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800c996:	f7f7 ffa3 	bl	80048e0 <chMtxUnlock>
  chtest.global_fail     = true;
 800c99a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c99e:	4a2e      	ldr	r2, [pc, #184]	; (800ca58 <oslib_test_009_003_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800c9a0:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c9a2:	60ba      	str	r2, [r7, #8]
}
 800c9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9a6:	482a      	ldr	r0, [pc, #168]	; (800ca50 <oslib_test_009_003_execute.lto_priv.0+0x100>)
 800c9a8:	f7f7 ff9a 	bl	80048e0 <chMtxUnlock>
  test_set_step(2);
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	603b      	str	r3, [r7, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 800c9b0:	f7fe fffe 	bl	800b9b0 <chFactoryCreateSemaphore.constprop.0>
  if (!condition) {
 800c9b4:	4604      	mov	r4, r0
 800c9b6:	b358      	cbz	r0, 800ca10 <oslib_test_009_003_execute.lto_priv.0+0xc0>
  test_set_step(3);
 800c9b8:	2503      	movs	r5, #3
 800c9ba:	603d      	str	r5, [r7, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 800c9bc:	f7fe fff8 	bl	800b9b0 <chFactoryCreateSemaphore.constprop.0>
 800c9c0:	bb60      	cbnz	r0, 800ca1c <oslib_test_009_003_execute.lto_priv.0+0xcc>
  test_set_step(4);
 800c9c2:	2304      	movs	r3, #4
 800c9c4:	603b      	str	r3, [r7, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 800c9c6:	f7ff fa7b 	bl	800bec0 <chFactoryFindSemaphore.constprop.0>
 800c9ca:	b368      	cbz	r0, 800ca28 <oslib_test_009_003_execute.lto_priv.0+0xd8>
 800c9cc:	4284      	cmp	r4, r0
 800c9ce:	d131      	bne.n	800ca34 <oslib_test_009_003_execute.lto_priv.0+0xe4>
 800c9d0:	6863      	ldr	r3, [r4, #4]
 800c9d2:	2b02      	cmp	r3, #2
 800c9d4:	d12e      	bne.n	800ca34 <oslib_test_009_003_execute.lto_priv.0+0xe4>
 800c9d6:	6065      	str	r5, [r4, #4]
    chFactoryReleaseSemaphore(dsp2);
 800c9d8:	f7f9 fb5a 	bl	8006090 <chFactoryReleaseSemaphore>
 800c9dc:	6863      	ldr	r3, [r4, #4]
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d12e      	bne.n	800ca40 <oslib_test_009_003_execute.lto_priv.0+0xf0>
    chFactoryReleaseSemaphore(dsp1);
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	f7f9 fb54 	bl	8006090 <chFactoryReleaseSemaphore>
 800c9e8:	6863      	ldr	r3, [r4, #4]
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d128      	bne.n	800ca40 <oslib_test_009_003_execute.lto_priv.0+0xf0>
  test_set_step(5);
 800c9ee:	2305      	movs	r3, #5
    chFactoryReleaseSemaphore(dsp);
 800c9f0:	4620      	mov	r0, r4
  test_set_step(5);
 800c9f2:	603b      	str	r3, [r7, #0]
    chFactoryReleaseSemaphore(dsp);
 800c9f4:	f7f9 fb4c 	bl	8006090 <chFactoryReleaseSemaphore>
  test_set_step(6);
 800c9f8:	2306      	movs	r3, #6
 800c9fa:	603b      	str	r3, [r7, #0]
    dsp = chFactoryFindSemaphore("mysem");
 800c9fc:	f7ff fa60 	bl	800bec0 <chFactoryFindSemaphore.constprop.0>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d0cf      	beq.n	800c9a4 <oslib_test_009_003_execute.lto_priv.0+0x54>
  chtest.global_fail     = true;
 800ca04:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ca08:	4a13      	ldr	r2, [pc, #76]	; (800ca58 <oslib_test_009_003_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800ca0a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ca0c:	60ba      	str	r2, [r7, #8]
}
 800ca0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800ca10:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ca14:	4a11      	ldr	r2, [pc, #68]	; (800ca5c <oslib_test_009_003_execute.lto_priv.0+0x10c>)
  chtest.global_fail     = true;
 800ca16:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ca18:	60ba      	str	r2, [r7, #8]
 800ca1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800ca1c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ca20:	4a0f      	ldr	r2, [pc, #60]	; (800ca60 <oslib_test_009_003_execute.lto_priv.0+0x110>)
  chtest.global_fail     = true;
 800ca22:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ca24:	60ba      	str	r2, [r7, #8]
 800ca26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800ca28:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ca2c:	4a0d      	ldr	r2, [pc, #52]	; (800ca64 <oslib_test_009_003_execute.lto_priv.0+0x114>)
  chtest.global_fail     = true;
 800ca2e:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ca30:	60ba      	str	r2, [r7, #8]
 800ca32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800ca34:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ca38:	4a0b      	ldr	r2, [pc, #44]	; (800ca68 <oslib_test_009_003_execute.lto_priv.0+0x118>)
  chtest.global_fail     = true;
 800ca3a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ca3c:	60ba      	str	r2, [r7, #8]
 800ca3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800ca40:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ca44:	4a09      	ldr	r2, [pc, #36]	; (800ca6c <oslib_test_009_003_execute.lto_priv.0+0x11c>)
  chtest.global_fail     = true;
 800ca46:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ca48:	60ba      	str	r2, [r7, #8]
 800ca4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca4c:	20001134 	.word	0x20001134
 800ca50:	200010d8 	.word	0x200010d8
 800ca54:	08012ab0 	.word	0x08012ab0
 800ca58:	08012b04 	.word	0x08012b04
 800ca5c:	08012b4c 	.word	0x08012b4c
 800ca60:	08012b5c 	.word	0x08012b5c
 800ca64:	08012b00 	.word	0x08012b00
 800ca68:	08012b1c 	.word	0x08012b1c
 800ca6c:	08012b38 	.word	0x08012b38

0800ca70 <dir_next.constprop.0>:
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800ca70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800ca74:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ca76:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800ca78:	7833      	ldrb	r3, [r6, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ca7a:	3520      	adds	r5, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800ca7c:	2b04      	cmp	r3, #4
 800ca7e:	bf0c      	ite	eq
 800ca80:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 800ca84:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 800ca88:	429d      	cmp	r5, r3
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800ca8a:	4604      	mov	r4, r0
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800ca8c:	d304      	bcc.n	800ca98 <dir_next.constprop.0+0x28>
 800ca8e:	2300      	movs	r3, #0
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800ca90:	2004      	movs	r0, #4
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800ca92:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800ca94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800ca98:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ca9a:	b383      	cbz	r3, 800cafe <dir_next.constprop.0+0x8e>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ca9c:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800caa0:	b9ef      	cbnz	r7, 800cade <dir_next.constprop.0+0x6e>
		if (dp->clust == 0) {	/* Static table */
 800caa2:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800caa4:	3301      	adds	r3, #1
 800caa6:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800caa8:	b301      	cbz	r1, 800caec <dir_next.constprop.0+0x7c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800caaa:	8973      	ldrh	r3, [r6, #10]
 800caac:	3b01      	subs	r3, #1
 800caae:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 800cab2:	d114      	bne.n	800cade <dir_next.constprop.0+0x6e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800cab4:	f7fa f924 	bl	8006d00 <get_fat.lto_priv.0>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800cab8:	2801      	cmp	r0, #1
 800caba:	d91e      	bls.n	800cafa <dir_next.constprop.0+0x8a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	d01a      	beq.n	800caf6 <dir_next.constprop.0+0x86>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800cac0:	69f3      	ldr	r3, [r6, #28]
 800cac2:	4298      	cmp	r0, r3
 800cac4:	d2e3      	bcs.n	800ca8e <dir_next.constprop.0+0x1e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800cac6:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800cac8:	6360      	str	r0, [r4, #52]	; 0x34
	clst -= 2;		/* Cluster number is origin from 2 */
 800caca:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800cacc:	4298      	cmp	r0, r3
 800cace:	d204      	bcs.n	800cada <dir_next.constprop.0+0x6a>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800cad0:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 800cad4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800cad6:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clst2sect(fs, clst);
 800cada:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cade:	363c      	adds	r6, #60	; 0x3c
 800cae0:	443e      	add	r6, r7
	return FR_OK;
 800cae2:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800cae4:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cae6:	63e6      	str	r6, [r4, #60]	; 0x3c
}
 800cae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800caec:	8933      	ldrh	r3, [r6, #8]
 800caee:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800caf2:	d8f4      	bhi.n	800cade <dir_next.constprop.0+0x6e>
 800caf4:	e7cb      	b.n	800ca8e <dir_next.constprop.0+0x1e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800caf6:	2001      	movs	r0, #1
 800caf8:	e7cc      	b.n	800ca94 <dir_next.constprop.0+0x24>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800cafa:	2002      	movs	r0, #2
 800cafc:	e7ca      	b.n	800ca94 <dir_next.constprop.0+0x24>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800cafe:	2004      	movs	r0, #4
 800cb00:	e7c8      	b.n	800ca94 <dir_next.constprop.0+0x24>
 800cb02:	bf00      	nop
	...

0800cb10 <dir_sdi.constprop.0>:
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800cb10:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 800cb12:	2300      	movs	r3, #0
	FATFS *fs = dp->obj.fs;
 800cb14:	6805      	ldr	r5, [r0, #0]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cb16:	6881      	ldr	r1, [r0, #8]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cb18:	782a      	ldrb	r2, [r5, #0]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800cb1a:	4604      	mov	r4, r0
	dp->dptr = ofs;				/* Set current offset */
 800cb1c:	6303      	str	r3, [r0, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cb1e:	b981      	cbnz	r1, 800cb42 <dir_sdi.constprop.0+0x32>
 800cb20:	2a02      	cmp	r2, #2
 800cb22:	d809      	bhi.n	800cb38 <dir_sdi.constprop.0+0x28>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800cb24:	892b      	ldrh	r3, [r5, #8]
 800cb26:	b1fb      	cbz	r3, 800cb68 <dir_sdi.constprop.0+0x58>
		dp->sect = fs->dirbase;
 800cb28:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800cb2a:	63a3      	str	r3, [r4, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 800cb2c:	6361      	str	r1, [r4, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 800cb2e:	b1db      	cbz	r3, 800cb68 <dir_sdi.constprop.0+0x58>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cb30:	353c      	adds	r5, #60	; 0x3c
	return FR_OK;
 800cb32:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cb34:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800cb36:	bd38      	pop	{r3, r4, r5, pc}
		clst = (DWORD)fs->dirbase;
 800cb38:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800cb3a:	71c1      	strb	r1, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d0f1      	beq.n	800cb24 <dir_sdi.constprop.0+0x14>
 800cb40:	4619      	mov	r1, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cb42:	896a      	ldrh	r2, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb44:	b12a      	cbz	r2, 800cb52 <dir_sdi.constprop.0+0x42>
 800cb46:	e011      	b.n	800cb6c <dir_sdi.constprop.0+0x5c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cb48:	2801      	cmp	r0, #1
 800cb4a:	d90d      	bls.n	800cb68 <dir_sdi.constprop.0+0x58>
 800cb4c:	69eb      	ldr	r3, [r5, #28]
 800cb4e:	4298      	cmp	r0, r3
 800cb50:	d20a      	bcs.n	800cb68 <dir_sdi.constprop.0+0x58>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cb52:	4620      	mov	r0, r4
 800cb54:	f7fa f8d4 	bl	8006d00 <get_fat.lto_priv.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb58:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cb5a:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb5c:	d1f4      	bne.n	800cb48 <dir_sdi.constprop.0+0x38>
 800cb5e:	2001      	movs	r0, #1
}
 800cb60:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = clst2sect(fs, clst);
 800cb62:	2300      	movs	r3, #0
 800cb64:	e9c4 130d 	strd	r1, r3, [r4, #52]	; 0x34
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800cb68:	2002      	movs	r0, #2
}
 800cb6a:	bd38      	pop	{r3, r4, r5, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800cb6c:	69e8      	ldr	r0, [r5, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
 800cb6e:	f1a1 0c02 	sub.w	ip, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800cb72:	3802      	subs	r0, #2
 800cb74:	4584      	cmp	ip, r0
 800cb76:	d2f4      	bcs.n	800cb62 <dir_sdi.constprop.0+0x52>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800cb78:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800cb7a:	fb0c 3302 	mla	r3, ip, r2, r3
		dp->sect = clst2sect(fs, clst);
 800cb7e:	63a3      	str	r3, [r4, #56]	; 0x38
 800cb80:	e7d4      	b.n	800cb2c <dir_sdi.constprop.0+0x1c>
 800cb82:	bf00      	nop
	...

0800cb90 <dir_read.constprop.0>:
static FRESULT dir_read (
 800cb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 800cb94:	27ff      	movs	r7, #255	; 0xff
	FRESULT res = FR_NO_FILE;
 800cb96:	2404      	movs	r4, #4
static FRESULT dir_read (
 800cb98:	4605      	mov	r5, r0
	BYTE ord = 0xFF, sum = 0xFF;
 800cb9a:	463e      	mov	r6, r7
	FATFS *fs = dp->obj.fs;
 800cb9c:	f8d0 8000 	ldr.w	r8, [r0]
	while (dp->sect) {
 800cba0:	e011      	b.n	800cbc6 <dir_read.constprop.0+0x36>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cba2:	7ae2      	ldrb	r2, [r4, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cba4:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cba6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800cbaa:	71aa      	strb	r2, [r5, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cbac:	d005      	beq.n	800cbba <dir_read.constprop.0+0x2a>
 800cbae:	2b2e      	cmp	r3, #46	; 0x2e
 800cbb0:	d003      	beq.n	800cbba <dir_read.constprop.0+0x2a>
 800cbb2:	f022 0120 	bic.w	r1, r2, #32
 800cbb6:	2908      	cmp	r1, #8
 800cbb8:	d131      	bne.n	800cc1e <dir_read.constprop.0+0x8e>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cbba:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	f7ff ff57 	bl	800ca70 <dir_next.constprop.0>
		if (res != FR_OK) break;
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	bb30      	cbnz	r0, 800cc14 <dir_read.constprop.0+0x84>
	while (dp->sect) {
 800cbc6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800cbc8:	2900      	cmp	r1, #0
 800cbca:	d05f      	beq.n	800cc8c <dir_read.constprop.0+0xfc>
	if (sect != fs->winsect) {	/* Window offset changed? */
 800cbcc:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800cbd0:	428b      	cmp	r3, r1
 800cbd2:	d004      	beq.n	800cbde <dir_read.constprop.0+0x4e>
 800cbd4:	4640      	mov	r0, r8
 800cbd6:	f7fa f84b 	bl	8006c70 <move_window.part.0.lto_priv.0>
		if (res != FR_OK) break;
 800cbda:	4604      	mov	r4, r0
 800cbdc:	b9d0      	cbnz	r0, 800cc14 <dir_read.constprop.0+0x84>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 800cbde:	6bec      	ldr	r4, [r5, #60]	; 0x3c
 800cbe0:	7823      	ldrb	r3, [r4, #0]
		if (b == 0) {
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d058      	beq.n	800cc98 <dir_read.constprop.0+0x108>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cbe6:	f898 2000 	ldrb.w	r2, [r8]
 800cbea:	2a04      	cmp	r2, #4
 800cbec:	d1d9      	bne.n	800cba2 <dir_read.constprop.0+0x12>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 800cbee:	2b85      	cmp	r3, #133	; 0x85
 800cbf0:	d1e4      	bne.n	800cbbc <dir_read.constprop.0+0x2c>
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800cbf2:	6828      	ldr	r0, [r5, #0]
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800cbf4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	res = move_window(dp->obj.fs, dp->sect);
 800cbf6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800cbf8:	64eb      	str	r3, [r5, #76]	; 0x4c
	if (sect != fs->winsect) {	/* Window offset changed? */
 800cbfa:	6b83      	ldr	r3, [r0, #56]	; 0x38
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800cbfc:	6907      	ldr	r7, [r0, #16]
	if (sect != fs->winsect) {	/* Window offset changed? */
 800cbfe:	4299      	cmp	r1, r3
 800cc00:	d004      	beq.n	800cc0c <dir_read.constprop.0+0x7c>
 800cc02:	f7fa f835 	bl	8006c70 <move_window.part.0.lto_priv.0>
	if (res != FR_OK) return res;
 800cc06:	4604      	mov	r4, r0
 800cc08:	b920      	cbnz	r0, 800cc14 <dir_read.constprop.0+0x84>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 800cc0a:	6bec      	ldr	r4, [r5, #60]	; 0x3c
 800cc0c:	7822      	ldrb	r2, [r4, #0]
 800cc0e:	2a85      	cmp	r2, #133	; 0x85
 800cc10:	d044      	beq.n	800cc9c <dir_read.constprop.0+0x10c>
 800cc12:	2402      	movs	r4, #2
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cc14:	2300      	movs	r3, #0
 800cc16:	63ab      	str	r3, [r5, #56]	; 0x38
}
 800cc18:	4620      	mov	r0, r4
 800cc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (attr == AM_LFN) {			/* An LFN entry is found */
 800cc1e:	2a0f      	cmp	r2, #15
 800cc20:	f040 80b7 	bne.w	800cd92 <dir_read.constprop.0+0x202>
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
 800cc24:	0659      	lsls	r1, r3, #25
 800cc26:	d52e      	bpl.n	800cc86 <dir_read.constprop.0+0xf6>
						b &= (BYTE)~LLEF; ord = b;
 800cc28:	f003 06bf 	and.w	r6, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800cc2c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
 800cc2e:	7b67      	ldrb	r7, [r4, #13]
						dp->blk_ofs = dp->dptr;
 800cc30:	64eb      	str	r3, [r5, #76]	; 0x4c
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cc32:	7b63      	ldrb	r3, [r4, #13]
 800cc34:	42bb      	cmp	r3, r7
 800cc36:	d1c0      	bne.n	800cbba <dir_read.constprop.0+0x2a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800cc38:	8b63      	ldrh	r3, [r4, #26]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1bd      	bne.n	800cbba <dir_read.constprop.0+0x2a>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800cc3e:	2201      	movs	r2, #1
 800cc40:	7823      	ldrb	r3, [r4, #0]
 800cc42:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800ce1c <dir_read.constprop.0+0x28c>
 800cc46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800cc50:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cc54:	f64f 7eff 	movw	lr, #65535	; 0xffff
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cc58:	4611      	mov	r1, r2
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cc5a:	f8d8 900c 	ldr.w	r9, [r8, #12]
 800cc5e:	f10c 000c 	add.w	r0, ip, #12
 800cc62:	e00a      	b.n	800cc7a <dir_read.constprop.0+0xea>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800cc64:	2bff      	cmp	r3, #255	; 0xff
 800cc66:	d8a8      	bhi.n	800cbba <dir_read.constprop.0+0x2a>
 800cc68:	4611      	mov	r1, r2
			lfnbuf[i++] = wc = uc;			/* Store it */
 800cc6a:	f829 2013 	strh.w	r2, [r9, r3, lsl #1]
 800cc6e:	3301      	adds	r3, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cc70:	4560      	cmp	r0, ip
 800cc72:	f000 8081 	beq.w	800cd78 <dir_read.constprop.0+0x1e8>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cc76:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 800cc7a:	5aa2      	ldrh	r2, [r4, r2]
		if (wc != 0) {
 800cc7c:	2900      	cmp	r1, #0
 800cc7e:	d1f1      	bne.n	800cc64 <dir_read.constprop.0+0xd4>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cc80:	4572      	cmp	r2, lr
 800cc82:	d0f5      	beq.n	800cc70 <dir_read.constprop.0+0xe0>
 800cc84:	e799      	b.n	800cbba <dir_read.constprop.0+0x2a>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cc86:	42b3      	cmp	r3, r6
 800cc88:	d197      	bne.n	800cbba <dir_read.constprop.0+0x2a>
 800cc8a:	e7d2      	b.n	800cc32 <dir_read.constprop.0+0xa2>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cc8c:	2c00      	cmp	r4, #0
 800cc8e:	d1c1      	bne.n	800cc14 <dir_read.constprop.0+0x84>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cc90:	2400      	movs	r4, #0
}
 800cc92:	4620      	mov	r0, r4
 800cc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cc98:	2404      	movs	r4, #4
 800cc9a:	e7bb      	b.n	800cc14 <dir_read.constprop.0+0x84>
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800cc9c:	463b      	mov	r3, r7
 800cc9e:	f107 0620 	add.w	r6, r7, #32
 800cca2:	e001      	b.n	800cca8 <dir_read.constprop.0+0x118>
			*d++ = *s++;
 800cca4:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800cca8:	f803 2b01 	strb.w	r2, [r3], #1
		} while (--cnt);
 800ccac:	42b3      	cmp	r3, r6
 800ccae:	d1f9      	bne.n	800cca4 <dir_read.constprop.0+0x114>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800ccb0:	f897 9001 	ldrb.w	r9, [r7, #1]
 800ccb4:	f109 0901 	add.w	r9, r9, #1
 800ccb8:	ea4f 1949 	mov.w	r9, r9, lsl #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800ccbc:	f1a9 0360 	sub.w	r3, r9, #96	; 0x60
 800ccc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccc4:	d8a5      	bhi.n	800cc12 <dir_read.constprop.0+0x82>
	res = dir_next(dp, 0);
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	f7ff fed2 	bl	800ca70 <dir_next.constprop.0>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800cccc:	2804      	cmp	r0, #4
	res = dir_next(dp, 0);
 800ccce:	4604      	mov	r4, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800ccd0:	d09f      	beq.n	800cc12 <dir_read.constprop.0+0x82>
	if (res != FR_OK) return res;
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	d19e      	bne.n	800cc14 <dir_read.constprop.0+0x84>
	res = move_window(dp->obj.fs, dp->sect);
 800ccd6:	6828      	ldr	r0, [r5, #0]
 800ccd8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	if (sect != fs->winsect) {	/* Window offset changed? */
 800ccda:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ccdc:	4299      	cmp	r1, r3
 800ccde:	d004      	beq.n	800ccea <dir_read.constprop.0+0x15a>
 800cce0:	f7f9 ffc6 	bl	8006c70 <move_window.part.0.lto_priv.0>
	if (res != FR_OK) return res;
 800cce4:	4604      	mov	r4, r0
 800cce6:	2800      	cmp	r0, #0
 800cce8:	d194      	bne.n	800cc14 <dir_read.constprop.0+0x84>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 800ccea:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800ccec:	781a      	ldrb	r2, [r3, #0]
 800ccee:	2ac0      	cmp	r2, #192	; 0xc0
 800ccf0:	d18f      	bne.n	800cc12 <dir_read.constprop.0+0x82>
 800ccf2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ccf6:	e001      	b.n	800ccfc <dir_read.constprop.0+0x16c>
			*d++ = *s++;
 800ccf8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800ccfc:	f806 2b01 	strb.w	r2, [r6], #1
		} while (--cnt);
 800cd00:	428e      	cmp	r6, r1
 800cd02:	d1f9      	bne.n	800ccf8 <dir_read.constprop.0+0x168>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800cd04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd08:	4a45      	ldr	r2, [pc, #276]	; (800ce20 <dir_read.constprop.0+0x290>)
 800cd0a:	332c      	adds	r3, #44	; 0x2c
 800cd0c:	fba2 2303 	umull	r2, r3, r2, r3
 800cd10:	08db      	lsrs	r3, r3, #3
 800cd12:	ebb9 1f43 	cmp.w	r9, r3, lsl #5
 800cd16:	f4ff af7c 	bcc.w	800cc12 <dir_read.constprop.0+0x82>
	i = 2 * SZDIRE;	/* Name offset to load */
 800cd1a:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800cd1e:	f107 0660 	add.w	r6, r7, #96	; 0x60
 800cd22:	e005      	b.n	800cd30 <dir_read.constprop.0+0x1a0>
	} while ((i += SZDIRE) < sz_ent);
 800cd24:	f10a 0a20 	add.w	sl, sl, #32
 800cd28:	45d1      	cmp	r9, sl
 800cd2a:	f106 0620 	add.w	r6, r6, #32
 800cd2e:	d947      	bls.n	800cdc0 <dir_read.constprop.0+0x230>
		res = dir_next(dp, 0);
 800cd30:	4628      	mov	r0, r5
 800cd32:	f7ff fe9d 	bl	800ca70 <dir_next.constprop.0>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800cd36:	2804      	cmp	r0, #4
		res = dir_next(dp, 0);
 800cd38:	4604      	mov	r4, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800cd3a:	f43f af6a 	beq.w	800cc12 <dir_read.constprop.0+0x82>
		if (res != FR_OK) return res;
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	f47f af68 	bne.w	800cc14 <dir_read.constprop.0+0x84>
		res = move_window(dp->obj.fs, dp->sect);
 800cd44:	6828      	ldr	r0, [r5, #0]
 800cd46:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	if (sect != fs->winsect) {	/* Window offset changed? */
 800cd48:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cd4a:	4299      	cmp	r1, r3
 800cd4c:	d002      	beq.n	800cd54 <dir_read.constprop.0+0x1c4>
 800cd4e:	f7f9 ff8f 	bl	8006c70 <move_window.part.0.lto_priv.0>
		if (res != FR_OK) return res;
 800cd52:	bb98      	cbnz	r0, 800cdbc <dir_read.constprop.0+0x22c>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 800cd54:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800cd56:	7811      	ldrb	r1, [r2, #0]
 800cd58:	29c1      	cmp	r1, #193	; 0xc1
 800cd5a:	f47f af5a 	bne.w	800cc12 <dir_read.constprop.0+0x82>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800cd5e:	f5ba 7f18 	cmp.w	sl, #608	; 0x260
 800cd62:	d2df      	bcs.n	800cd24 <dir_read.constprop.0+0x194>
 800cd64:	f1a6 0320 	sub.w	r3, r6, #32
 800cd68:	e001      	b.n	800cd6e <dir_read.constprop.0+0x1de>
			*d++ = *s++;
 800cd6a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800cd6e:	f803 1b01 	strb.w	r1, [r3], #1
		} while (--cnt);
 800cd72:	42b3      	cmp	r3, r6
 800cd74:	d1f9      	bne.n	800cd6a <dir_read.constprop.0+0x1da>
 800cd76:	e7d5      	b.n	800cd24 <dir_read.constprop.0+0x194>
	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 800cd78:	7822      	ldrb	r2, [r4, #0]
 800cd7a:	0652      	lsls	r2, r2, #25
 800cd7c:	d506      	bpl.n	800cd8c <dir_read.constprop.0+0x1fc>
 800cd7e:	b129      	cbz	r1, 800cd8c <dir_read.constprop.0+0x1fc>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800cd80:	2bff      	cmp	r3, #255	; 0xff
 800cd82:	f63f af1a 	bhi.w	800cbba <dir_read.constprop.0+0x2a>
		lfnbuf[i] = 0;
 800cd86:	2200      	movs	r2, #0
 800cd88:	f829 2013 	strh.w	r2, [r9, r3, lsl #1]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cd8c:	3e01      	subs	r6, #1
 800cd8e:	b2f6      	uxtb	r6, r6
 800cd90:	e714      	b.n	800cbbc <dir_read.constprop.0+0x2c>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cd92:	b976      	cbnz	r6, 800cdb2 <dir_read.constprop.0+0x222>
 800cd94:	f104 020b 	add.w	r2, r4, #11
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cd98:	01f3      	lsls	r3, r6, #7
 800cd9a:	ea43 0656 	orr.w	r6, r3, r6, lsr #1
 800cd9e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cda2:	441e      	add	r6, r3
	} while (--n);
 800cda4:	4294      	cmp	r4, r2
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cda6:	f006 06ff 	and.w	r6, r6, #255	; 0xff
	} while (--n);
 800cdaa:	d1f5      	bne.n	800cd98 <dir_read.constprop.0+0x208>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cdac:	42be      	cmp	r6, r7
 800cdae:	f43f af6f 	beq.w	800cc90 <dir_read.constprop.0+0x100>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cdb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cdb6:	2400      	movs	r4, #0
 800cdb8:	64eb      	str	r3, [r5, #76]	; 0x4c
 800cdba:	e72d      	b.n	800cc18 <dir_read.constprop.0+0x88>
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	e729      	b.n	800cc14 <dir_read.constprop.0+0x84>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 800cdc0:	f5ba 7f18 	cmp.w	sl, #608	; 0x260
 800cdc4:	d906      	bls.n	800cdd4 <dir_read.constprop.0+0x244>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800cdc6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cdca:	791b      	ldrb	r3, [r3, #4]
 800cdcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdd0:	71ab      	strb	r3, [r5, #6]
 800cdd2:	e721      	b.n	800cc18 <dir_read.constprop.0+0x88>
	for (i = sum = 0; i < szblk; i++) {
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	4619      	mov	r1, r3
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800cdd8:	7878      	ldrb	r0, [r7, #1]
 800cdda:	3001      	adds	r0, #1
 800cddc:	0140      	lsls	r0, r0, #5
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 800cdde:	2902      	cmp	r1, #2
 800cde0:	d10d      	bne.n	800cdfe <dir_read.constprop.0+0x26e>
	for (i = sum = 0; i < szblk; i++) {
 800cde2:	2106      	movs	r1, #6
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800cde4:	793a      	ldrb	r2, [r7, #4]
 800cde6:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 800cdea:	b292      	uxth	r2, r2
 800cdec:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800cdf0:	797b      	ldrb	r3, [r7, #5]
 800cdf2:	f3c2 064e 	ubfx	r6, r2, #1, #15
 800cdf6:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 800cdfa:	4433      	add	r3, r6
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	5c7a      	ldrb	r2, [r7, r1]
	for (i = sum = 0; i < szblk; i++) {
 800ce00:	3101      	adds	r1, #1
 800ce02:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 800ce06:	b292      	uxth	r2, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ce08:	eb02 0353 	add.w	r3, r2, r3, lsr #1
	for (i = sum = 0; i < szblk; i++) {
 800ce0c:	4288      	cmp	r0, r1
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ce0e:	b29b      	uxth	r3, r3
	for (i = sum = 0; i < szblk; i++) {
 800ce10:	d8e5      	bhi.n	800cdde <dir_read.constprop.0+0x24e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800ce12:	887a      	ldrh	r2, [r7, #2]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d0d6      	beq.n	800cdc6 <dir_read.constprop.0+0x236>
 800ce18:	e6fb      	b.n	800cc12 <dir_read.constprop.0+0x82>
 800ce1a:	bf00      	nop
 800ce1c:	08012edc 	.word	0x08012edc
 800ce20:	88888889 	.word	0x88888889
	...

0800ce30 <RemoveHandler>:
static void RemoveHandler(eventid_t id) {
 800ce30:	b538      	push	{r3, r4, r5, lr}
 800ce32:	2320      	movs	r3, #32
 800ce34:	f383 8811 	msr	BASEPRI, r3
  if (sdcp->state == BLK_ACTIVE) {
 800ce38:	4c11      	ldr	r4, [pc, #68]	; (800ce80 <RemoveHandler+0x50>)
 800ce3a:	7923      	ldrb	r3, [r4, #4]
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	d018      	beq.n	800ce72 <RemoveHandler+0x42>
  sdcp->state = BLK_DISCONNECTING;
 800ce40:	2304      	movs	r3, #4
 800ce42:	2500      	movs	r5, #0
 800ce44:	7123      	strb	r3, [r4, #4]
 800ce46:	f385 8811 	msr	BASEPRI, r5
  if (_sdc_wait_for_transfer_state(sdcp)) {
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f7f6 f8f8 	bl	8003040 <_sdc_wait_for_transfer_state>
    sdcp->state = BLK_ACTIVE;
 800ce50:	2202      	movs	r2, #2
 800ce52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (_sdc_wait_for_transfer_state(sdcp)) {
 800ce54:	b930      	cbnz	r0, 800ce64 <RemoveHandler+0x34>
  sdcp->sdio->CLKCR = 0;
 800ce56:	6058      	str	r0, [r3, #4]
  sdcp->sdio->POWER = 0;
 800ce58:	6018      	str	r0, [r3, #0]
  sdcp->state = BLK_ACTIVE;
 800ce5a:	7122      	strb	r2, [r4, #4]
  fs_ready = FALSE;
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	4b09      	ldr	r3, [pc, #36]	; (800ce84 <RemoveHandler+0x54>)
 800ce60:	701a      	strb	r2, [r3, #0]
}
 800ce62:	bd38      	pop	{r3, r4, r5, pc}
  sdcp->sdio->CLKCR = 0;
 800ce64:	605d      	str	r5, [r3, #4]
  sdcp->sdio->POWER = 0;
 800ce66:	601d      	str	r5, [r3, #0]
    sdcp->state = BLK_ACTIVE;
 800ce68:	7122      	strb	r2, [r4, #4]
  fs_ready = FALSE;
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	4b05      	ldr	r3, [pc, #20]	; (800ce84 <RemoveHandler+0x54>)
 800ce6e:	701a      	strb	r2, [r3, #0]
}
 800ce70:	bd38      	pop	{r3, r4, r5, pc}
 800ce72:	2300      	movs	r3, #0
 800ce74:	f383 8811 	msr	BASEPRI, r3
  fs_ready = FALSE;
 800ce78:	2200      	movs	r2, #0
 800ce7a:	4b02      	ldr	r3, [pc, #8]	; (800ce84 <RemoveHandler+0x54>)
 800ce7c:	701a      	strb	r2, [r3, #0]
}
 800ce7e:	bd38      	pop	{r3, r4, r5, pc}
 800ce80:	200008e8 	.word	0x200008e8
 800ce84:	20002478 	.word	0x20002478
	...

0800ce90 <mount_volume.constprop.0>:
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800ce90:	2300      	movs	r3, #0
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
 800ce92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 800ce96:	600b      	str	r3, [r1, #0]
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
 800ce98:	b084      	sub	sp, #16
 800ce9a:	460d      	mov	r5, r1
	vol = get_ldnumber(path);
 800ce9c:	f7f9 fec8 	bl	8006c30 <get_ldnumber.lto_priv.0>
	if (vol < 0) return FR_INVALID_DRIVE;
 800cea0:	2800      	cmp	r0, #0
 800cea2:	f2c0 80ad 	blt.w	800d000 <mount_volume.constprop.0+0x170>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800cea6:	4baf      	ldr	r3, [pc, #700]	; (800d164 <mount_volume.constprop.0+0x2d4>)
 800cea8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800ceac:	2c00      	cmp	r4, #0
 800ceae:	f000 80c8 	beq.w	800d042 <mount_volume.constprop.0+0x1b2>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800ceb2:	602c      	str	r4, [r5, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800ceb4:	7823      	ldrb	r3, [r4, #0]
 800ceb6:	b96b      	cbnz	r3, 800ced4 <mount_volume.constprop.0+0x44>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find a FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 800ceb8:	2300      	movs	r3, #0
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 800ceba:	b2c6      	uxtb	r6, r0
 800cebc:	7066      	strb	r6, [r4, #1]
	fs->fs_type = 0;					/* Clear the filesystem object */
 800cebe:	7023      	strb	r3, [r4, #0]
  switch (pdrv) {
 800cec0:	b91e      	cbnz	r6, 800ceca <mount_volume.constprop.0+0x3a>
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800cec2:	4ba9      	ldr	r3, [pc, #676]	; (800d168 <mount_volume.constprop.0+0x2d8>)
 800cec4:	791b      	ldrb	r3, [r3, #4]
 800cec6:	2b05      	cmp	r3, #5
 800cec8:	d00e      	beq.n	800cee8 <mount_volume.constprop.0+0x58>
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ceca:	2603      	movs	r6, #3
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800cecc:	4630      	mov	r0, r6
 800cece:	b004      	add	sp, #16
 800ced0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		stat = disk_status(fs->pdrv);
 800ced4:	7866      	ldrb	r6, [r4, #1]
  switch (pdrv) {
 800ced6:	2e00      	cmp	r6, #0
 800ced8:	d1ee      	bne.n	800ceb8 <mount_volume.constprop.0+0x28>
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800ceda:	4ba3      	ldr	r3, [pc, #652]	; (800d168 <mount_volume.constprop.0+0x2d8>)
 800cedc:	791b      	ldrb	r3, [r3, #4]
 800cede:	2b05      	cmp	r3, #5
 800cee0:	d0f4      	beq.n	800cecc <mount_volume.constprop.0+0x3c>
	fs->fs_type = 0;					/* Clear the filesystem object */
 800cee2:	7026      	strb	r6, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 800cee4:	7060      	strb	r0, [r4, #1]
 800cee6:	e7f0      	b.n	800ceca <mount_volume.constprop.0+0x3a>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
 800cee8:	4631      	mov	r1, r6
 800ceea:	4620      	mov	r0, r4
 800ceec:	f7f9 ffa8 	bl	8006e40 <check_fs.lto_priv.0>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, not a BS or disk error */
 800cef0:	2802      	cmp	r0, #2
 800cef2:	f000 808a 	beq.w	800d00a <mount_volume.constprop.0+0x17a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cef6:	2804      	cmp	r0, #4
 800cef8:	d070      	beq.n	800cfdc <mount_volume.constprop.0+0x14c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cefa:	2801      	cmp	r0, #1
 800cefc:	d87b      	bhi.n	800cff6 <mount_volume.constprop.0+0x166>
	if (fmt == 1) {
 800cefe:	2801      	cmp	r0, #1
	bsect = fs->winsect;					/* Volume location */
 800cf00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (fmt == 1) {
 800cf02:	d06d      	beq.n	800cfe0 <mount_volume.constprop.0+0x150>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cf04:	f8b4 3047 	ldrh.w	r3, [r4, #71]	; 0x47
 800cf08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf0c:	d173      	bne.n	800cff6 <mount_volume.constprop.0+0x166>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cf0e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	f000 8097 	beq.w	800d046 <mount_volume.constprop.0+0x1b6>
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cf18:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
		fs->fsize = fasize;
 800cf1c:	6223      	str	r3, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cf1e:	1e50      	subs	r0, r2, #1
 800cf20:	2801      	cmp	r0, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cf22:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cf24:	d867      	bhi.n	800cff6 <mount_volume.constprop.0+0x166>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cf26:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800cf2a:	b285      	uxth	r5, r0
 800cf2c:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cf2e:	2d00      	cmp	r5, #0
 800cf30:	d061      	beq.n	800cff6 <mount_volume.constprop.0+0x166>
 800cf32:	1e45      	subs	r5, r0, #1
 800cf34:	4205      	tst	r5, r0
 800cf36:	d15e      	bne.n	800cff6 <mount_volume.constprop.0+0x166>
 800cf38:	f8b4 704d 	ldrh.w	r7, [r4, #77]	; 0x4d
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cf3c:	073d      	lsls	r5, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cf3e:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cf40:	d159      	bne.n	800cff6 <mount_volume.constprop.0+0x166>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cf42:	f8b4 504f 	ldrh.w	r5, [r4, #79]	; 0x4f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cf46:	b905      	cbnz	r5, 800cf4a <mount_volume.constprop.0+0xba>
	rv = rv << 8 | ptr[0];
 800cf48:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 800cf4a:	f8b4 e04a 	ldrh.w	lr, [r4, #74]	; 0x4a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cf4e:	f1be 0f00 	cmp.w	lr, #0
 800cf52:	d050      	beq.n	800cff6 <mount_volume.constprop.0+0x166>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cf54:	fb03 f202 	mul.w	r2, r3, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cf58:	eb0e 1c17 	add.w	ip, lr, r7, lsr #4
 800cf5c:	4494      	add	ip, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cf5e:	45ac      	cmp	ip, r5
 800cf60:	d849      	bhi.n	800cff6 <mount_volume.constprop.0+0x166>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cf62:	eba5 050c 	sub.w	r5, r5, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cf66:	4285      	cmp	r5, r0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cf68:	fbb5 f8f0 	udiv	r8, r5, r0
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cf6c:	d343      	bcc.n	800cff6 <mount_volume.constprop.0+0x166>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800cf6e:	487f      	ldr	r0, [pc, #508]	; (800d16c <mount_volume.constprop.0+0x2dc>)
 800cf70:	4580      	cmp	r8, r0
 800cf72:	d840      	bhi.n	800cff6 <mount_volume.constprop.0+0x166>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cf74:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800cf78:	4580      	cmp	r8, r0
 800cf7a:	f200 80ce 	bhi.w	800d11a <mount_volume.constprop.0+0x28a>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cf7e:	f640 70f5 	movw	r0, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cf82:	eb01 050e 	add.w	r5, r1, lr
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cf86:	4580      	cmp	r8, r0
		fs->database = bsect + sysect;					/* Data start sector */
 800cf88:	448c      	add	ip, r1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cf8a:	f108 0002 	add.w	r0, r8, #2
		fs->volbase = bsect;							/* Volume start sector */
 800cf8e:	6261      	str	r1, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cf90:	f8c4 c030 	str.w	ip, [r4, #48]	; 0x30
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cf94:	61e0      	str	r0, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cf96:	62a5      	str	r5, [r4, #40]	; 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cf98:	f200 811a 	bhi.w	800d1d0 <mount_volume.constprop.0+0x340>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800cf9c:	b35f      	cbz	r7, 800cff6 <mount_volume.constprop.0+0x166>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cf9e:	442a      	add	r2, r5
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cfa0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cfa4:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cfa6:	f000 0201 	and.w	r2, r0, #1
 800cfaa:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800cfae:	2101      	movs	r1, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cfb0:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 800cfb4:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
 800cfb8:	d31d      	bcc.n	800cff6 <mount_volume.constprop.0+0x166>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cfba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800cfbe:	2080      	movs	r0, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cfc0:	e9c4 3305 	strd	r3, r3, [r4, #20]
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 800cfc4:	b2ca      	uxtb	r2, r1
		fs->fsi_flag = 0x80;
 800cfc6:	7120      	strb	r0, [r4, #4]
	fs->id = ++Fsid;		/* Volume mount ID */
 800cfc8:	4969      	ldr	r1, [pc, #420]	; (800d170 <mount_volume.constprop.0+0x2e0>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 800cfca:	7022      	strb	r2, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800cfcc:	880b      	ldrh	r3, [r1, #0]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	800b      	strh	r3, [r1, #0]
 800cfd4:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 800cfd6:	e779      	b.n	800cecc <mount_volume.constprop.0+0x3c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cfd8:	2804      	cmp	r0, #4
 800cfda:	d10c      	bne.n	800cff6 <mount_volume.constprop.0+0x166>
 800cfdc:	2601      	movs	r6, #1
 800cfde:	e775      	b.n	800cecc <mount_volume.constprop.0+0x3c>
 800cfe0:	f104 0346 	add.w	r3, r4, #70	; 0x46
 800cfe4:	f104 007b 	add.w	r0, r4, #123	; 0x7b
 800cfe8:	e001      	b.n	800cfee <mount_volume.constprop.0+0x15e>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800cfea:	4298      	cmp	r0, r3
 800cfec:	d02d      	beq.n	800d04a <mount_volume.constprop.0+0x1ba>
 800cfee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800cff2:	2a00      	cmp	r2, #0
 800cff4:	d0f9      	beq.n	800cfea <mount_volume.constprop.0+0x15a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cff6:	260d      	movs	r6, #13
}
 800cff8:	4630      	mov	r0, r6
 800cffa:	b004      	add	sp, #16
 800cffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800d000:	260b      	movs	r6, #11
}
 800d002:	4630      	mov	r0, r6
 800d004:	b004      	add	sp, #16
 800d006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rv = rv << 8 | ptr[0];
 800d00a:	f8d4 2202 	ldr.w	r2, [r4, #514]	; 0x202
 800d00e:	f8d4 3212 	ldr.w	r3, [r4, #530]	; 0x212
 800d012:	466d      	mov	r5, sp
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800d014:	e9cd 2300 	strd	r2, r3, [sp]
	rv = rv << 8 | ptr[0];
 800d018:	f8d4 2222 	ldr.w	r2, [r4, #546]	; 0x222
 800d01c:	f8d4 3232 	ldr.w	r3, [r4, #562]	; 0x232
 800d020:	af04      	add	r7, sp, #16
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800d022:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d026:	e002      	b.n	800d02e <mount_volume.constprop.0+0x19e>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800d028:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800d02a:	42bd      	cmp	r5, r7
 800d02c:	d0d4      	beq.n	800cfd8 <mount_volume.constprop.0+0x148>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800d02e:	f855 1b04 	ldr.w	r1, [r5], #4
 800d032:	2900      	cmp	r1, #0
 800d034:	d0f8      	beq.n	800d028 <mount_volume.constprop.0+0x198>
 800d036:	4620      	mov	r0, r4
 800d038:	f7f9 ff02 	bl	8006e40 <check_fs.lto_priv.0>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800d03c:	2801      	cmp	r0, #1
 800d03e:	d8f4      	bhi.n	800d02a <mount_volume.constprop.0+0x19a>
 800d040:	e75d      	b.n	800cefe <mount_volume.constprop.0+0x6e>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800d042:	260c      	movs	r6, #12
 800d044:	e742      	b.n	800cecc <mount_volume.constprop.0+0x3c>
	rv = rv << 8 | ptr[0];
 800d046:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d048:	e766      	b.n	800cf18 <mount_volume.constprop.0+0x88>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800d04a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800d04e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d052:	d1d0      	bne.n	800cff6 <mount_volume.constprop.0+0x166>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800d054:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800d058:	2b09      	cmp	r3, #9
 800d05a:	d1cc      	bne.n	800cff6 <mount_volume.constprop.0+0x166>
	rv = rv << 8 | ptr[0];
 800d05c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d060:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800d064:	185d      	adds	r5, r3, r1
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800d06a:	f140 0000 	adc.w	r0, r0, #0
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d06e:	42ab      	cmp	r3, r5
 800d070:	eb72 0300 	sbcs.w	r3, r2, r0
 800d074:	d3bf      	bcc.n	800cff6 <mount_volume.constprop.0+0x166>
	rv = rv << 8 | ptr[0];
 800d076:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800d07a:	6223      	str	r3, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800d07c:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d080:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800d082:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d084:	d1b7      	bne.n	800cff6 <mount_volume.constprop.0+0x166>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800d086:	f894 70a9 	ldrb.w	r7, [r4, #169]	; 0xa9
 800d08a:	40bb      	lsls	r3, r7
 800d08c:	b29f      	uxth	r7, r3
 800d08e:	8167      	strh	r7, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d090:	2f00      	cmp	r7, #0
 800d092:	d0b0      	beq.n	800cff6 <mount_volume.constprop.0+0x166>
	rv = rv << 8 | ptr[0];
 800d094:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d098:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 800d174 <mount_volume.constprop.0+0x2e4>
 800d09c:	4567      	cmp	r7, ip
 800d09e:	d8aa      	bhi.n	800cff6 <mount_volume.constprop.0+0x166>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	fb07 f303 	mul.w	r3, r7, r3
		fs->n_fatent = nclst + 2;
 800d0a6:	3702      	adds	r7, #2
 800d0a8:	61e7      	str	r7, [r4, #28]
	rv = rv << 8 | ptr[0];
 800d0aa:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
		fs->volbase = bsect;
 800d0ae:	6261      	str	r1, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800d0b0:	440f      	add	r7, r1
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d0b2:	19db      	adds	r3, r3, r7
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800d0b4:	6327      	str	r7, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 800d0b6:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800d0ba:	4439      	add	r1, r7
 800d0bc:	62a1      	str	r1, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d0be:	eb42 0102 	adc.w	r1, r2, r2
 800d0c2:	429d      	cmp	r5, r3
 800d0c4:	eb70 0301 	sbcs.w	r3, r0, r1
 800d0c8:	d395      	bcc.n	800cff6 <mount_volume.constprop.0+0x166>
		so = i = 0;
 800d0ca:	4615      	mov	r5, r2
 800d0cc:	4617      	mov	r7, r2
	rv = rv << 8 | ptr[0];
 800d0ce:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800d0d2:	62e3      	str	r3, [r4, #44]	; 0x2c
			if (i == 0) {
 800d0d4:	b9bd      	cbnz	r5, 800d106 <mount_volume.constprop.0+0x276>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 800d0d6:	8960      	ldrh	r0, [r4, #10]
 800d0d8:	42b8      	cmp	r0, r7
 800d0da:	d98c      	bls.n	800cff6 <mount_volume.constprop.0+0x166>
	clst -= 2;		/* Cluster number is origin from 2 */
 800d0dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800d0de:	69e2      	ldr	r2, [r4, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
 800d0e0:	1e99      	subs	r1, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800d0e2:	3a02      	subs	r2, #2
 800d0e4:	4291      	cmp	r1, r2
 800d0e6:	bf2f      	iteee	cs
 800d0e8:	4639      	movcs	r1, r7
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800d0ea:	6b23      	ldrcc	r3, [r4, #48]	; 0x30
 800d0ec:	fb01 3300 	mlacc	r3, r1, r0, r3
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800d0f0:	19d9      	addcc	r1, r3, r7
	if (sect != fs->winsect) {	/* Window offset changed? */
 800d0f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				so++;
 800d0f4:	3701      	adds	r7, #1
	if (sect != fs->winsect) {	/* Window offset changed? */
 800d0f6:	4299      	cmp	r1, r3
 800d0f8:	d005      	beq.n	800d106 <mount_volume.constprop.0+0x276>
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	f7f9 fdb8 	bl	8006c70 <move_window.part.0.lto_priv.0>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800d100:	2800      	cmp	r0, #0
 800d102:	f47f af6b 	bne.w	800cfdc <mount_volume.constprop.0+0x14c>
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 800d106:	1963      	adds	r3, r4, r5
 800d108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800d10c:	f105 0220 	add.w	r2, r5, #32
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 800d110:	2b81      	cmp	r3, #129	; 0x81
 800d112:	d031      	beq.n	800d178 <mount_volume.constprop.0+0x2e8>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800d114:	f3c2 0508 	ubfx	r5, r2, #0, #9
			if (i == 0) {
 800d118:	e7dc      	b.n	800d0d4 <mount_volume.constprop.0+0x244>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d11a:	eb01 000e 	add.w	r0, r1, lr
 800d11e:	62a0      	str	r0, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d120:	eb01 000c 	add.w	r0, r1, ip
 800d124:	6320      	str	r0, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 800d126:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d12a:	f108 0202 	add.w	r2, r8, #2
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d12e:	4338      	orrs	r0, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d130:	61e2      	str	r2, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d132:	6261      	str	r1, [r4, #36]	; 0x24
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d134:	f47f af5f 	bne.w	800cff6 <mount_volume.constprop.0+0x166>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d138:	0092      	lsls	r2, r2, #2
	rv = rv << 8 | ptr[0];
 800d13a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d13c:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 800d140:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d144:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d146:	f4ff af56 	bcc.w	800cff6 <mount_volume.constprop.0+0x166>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d14a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800d14e:	2080      	movs	r0, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d150:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d154:	e9c4 3305 	strd	r3, r3, [r4, #20]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d158:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800d15a:	7120      	strb	r0, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d15c:	d040      	beq.n	800d1e0 <mount_volume.constprop.0+0x350>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d15e:	2203      	movs	r2, #3
 800d160:	e732      	b.n	800cfc8 <mount_volume.constprop.0+0x138>
 800d162:	bf00      	nop
 800d164:	20001bb8 	.word	0x20001bb8
 800d168:	200008e8 	.word	0x200008e8
 800d16c:	0ffffff5 	.word	0x0ffffff5
 800d170:	20001bbc 	.word	0x20001bbc
 800d174:	7ffffffd 	.word	0x7ffffffd
		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
 800d178:	f104 073c 	add.w	r7, r4, #60	; 0x3c
	rv = rv << 8 | ptr[0];
 800d17c:	197a      	adds	r2, r7, r5
 800d17e:	6955      	ldr	r5, [r2, #20]
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
 800d180:	2d01      	cmp	r5, #1
 800d182:	f67f af38 	bls.w	800cff6 <mount_volume.constprop.0+0x166>
 800d186:	69e3      	ldr	r3, [r4, #28]
 800d188:	429d      	cmp	r5, r3
 800d18a:	f4bf af34 	bcs.w	800cff6 <mount_volume.constprop.0+0x166>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 800d18e:	8962      	ldrh	r2, [r4, #10]
 800d190:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d192:	1ea9      	subs	r1, r5, #2
 800d194:	fb01 3302 	mla	r3, r1, r2, r3
 800d198:	6363      	str	r3, [r4, #52]	; 0x34
 800d19a:	e002      	b.n	800d1a2 <mount_volume.constprop.0+0x312>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
 800d19c:	42ab      	cmp	r3, r5
 800d19e:	f47f af2a 	bne.w	800cff6 <mount_volume.constprop.0+0x166>
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 800d1a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (sect != fs->winsect) {	/* Window offset changed? */
 800d1a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 800d1a6:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sect != fs->winsect) {	/* Window offset changed? */
 800d1aa:	4299      	cmp	r1, r3
 800d1ac:	d005      	beq.n	800d1ba <mount_volume.constprop.0+0x32a>
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f7f9 fd5e 	bl	8006c70 <move_window.part.0.lto_priv.0>
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	f47f af11 	bne.w	800cfdc <mount_volume.constprop.0+0x14c>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 800d1ba:	f005 037f 	and.w	r3, r5, #127	; 0x7f
	rv = rv << 8 | ptr[0];
 800d1be:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
 800d1c2:	3501      	adds	r5, #1
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800d1c4:	1c5a      	adds	r2, r3, #1
 800d1c6:	d1e9      	bne.n	800d19c <mount_volume.constprop.0+0x30c>
 800d1c8:	2204      	movs	r2, #4
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d1ca:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800d1ce:	e6fb      	b.n	800cfc8 <mount_volume.constprop.0+0x138>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d1d0:	2f00      	cmp	r7, #0
 800d1d2:	f43f af10 	beq.w	800cff6 <mount_volume.constprop.0+0x166>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d1d6:	442a      	add	r2, r5
 800d1d8:	62e2      	str	r2, [r4, #44]	; 0x2c
 800d1da:	2102      	movs	r1, #2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d1dc:	0042      	lsls	r2, r0, #1
 800d1de:	e6e7      	b.n	800cfb0 <mount_volume.constprop.0+0x120>
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	3101      	adds	r1, #1
 800d1e4:	f7f9 fd44 	bl	8006c70 <move_window.part.0.lto_priv.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	d1b8      	bne.n	800d15e <mount_volume.constprop.0+0x2ce>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800d1ec:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800d1f0:	f8b4 123a 	ldrh.w	r1, [r4, #570]	; 0x23a
			fs->fsi_flag = 0;
 800d1f4:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800d1f6:	4291      	cmp	r1, r2
 800d1f8:	d1b1      	bne.n	800d15e <mount_volume.constprop.0+0x2ce>
	rv = rv << 8 | ptr[0];
 800d1fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d1fc:	4b09      	ldr	r3, [pc, #36]	; (800d224 <mount_volume.constprop.0+0x394>)
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d1ad      	bne.n	800d15e <mount_volume.constprop.0+0x2ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d202:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 800d206:	f8d4 2220 	ldr.w	r2, [r4, #544]	; 0x220
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d20a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d20e:	3320      	adds	r3, #32
 800d210:	429a      	cmp	r2, r3
 800d212:	d1a4      	bne.n	800d15e <mount_volume.constprop.0+0x2ce>
	rv = rv << 8 | ptr[0];
 800d214:	f8d4 1224 	ldr.w	r1, [r4, #548]	; 0x224
 800d218:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d21c:	2203      	movs	r2, #3
 800d21e:	e9c4 3105 	strd	r3, r1, [r4, #20]
 800d222:	e6d1      	b.n	800cfc8 <mount_volume.constprop.0+0x138>
 800d224:	41615252 	.word	0x41615252
	...

0800d230 <InsertHandler>:
static void InsertHandler(eventid_t id) {
 800d230:	b530      	push	{r4, r5, lr}
  if (sdcConnect(&SDCD1))
 800d232:	4815      	ldr	r0, [pc, #84]	; (800d288 <InsertHandler+0x58>)
static void InsertHandler(eventid_t id) {
 800d234:	b085      	sub	sp, #20
  if (sdcConnect(&SDCD1))
 800d236:	f7f6 fa1b 	bl	8003670 <sdcConnect>
 800d23a:	b108      	cbz	r0, 800d240 <InsertHandler+0x10>
}
 800d23c:	b005      	add	sp, #20
 800d23e:	bd30      	pop	{r4, r5, pc}

/*-----------------------------------------------------------------------*/
/* Mount/Unmount a Logical Drive                                         */
/*-----------------------------------------------------------------------*/

FRESULT f_mount (
 800d240:	4b12      	ldr	r3, [pc, #72]	; (800d28c <InsertHandler+0x5c>)
 800d242:	4a13      	ldr	r2, [pc, #76]	; (800d290 <InsertHandler+0x60>)
 800d244:	4604      	mov	r4, r0
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d246:	a801      	add	r0, sp, #4
 800d248:	e9cd 3202 	strd	r3, r2, [sp, #8]
	const TCHAR *rp = path;
 800d24c:	9301      	str	r3, [sp, #4]
	vol = get_ldnumber(&rp);
 800d24e:	f7f9 fcef 	bl	8006c30 <get_ldnumber.lto_priv.0>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d252:	1e03      	subs	r3, r0, #0
 800d254:	db14      	blt.n	800d280 <InsertHandler+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d256:	4d0f      	ldr	r5, [pc, #60]	; (800d294 <InsertHandler+0x64>)
 800d258:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]

	if (cfs) {
 800d25c:	b102      	cbz	r2, 800d260 <InsertHandler+0x30>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d25e:	7014      	strb	r4, [r2, #0]
	}

	if (fs) {
 800d260:	9a03      	ldr	r2, [sp, #12]
 800d262:	b10a      	cbz	r2, 800d268 <InsertHandler+0x38>
		fs->fs_type = 0;				/* Clear new fs object */
 800d264:	2100      	movs	r1, #0
 800d266:	7011      	strb	r1, [r2, #0]
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d268:	a903      	add	r1, sp, #12
 800d26a:	a802      	add	r0, sp, #8
	FatFs[vol] = fs;					/* Register new fs object */
 800d26c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d270:	f7ff fe0e 	bl	800ce90 <mount_volume.constprop.0>
  if (err != FR_OK) {
 800d274:	b920      	cbnz	r0, 800d280 <InsertHandler+0x50>
  fs_ready = TRUE;
 800d276:	2201      	movs	r2, #1
 800d278:	4b07      	ldr	r3, [pc, #28]	; (800d298 <InsertHandler+0x68>)
 800d27a:	701a      	strb	r2, [r3, #0]
}
 800d27c:	b005      	add	sp, #20
 800d27e:	bd30      	pop	{r4, r5, pc}
    sdcDisconnect(&SDCD1);
 800d280:	4801      	ldr	r0, [pc, #4]	; (800d288 <InsertHandler+0x58>)
 800d282:	f7f5 ff15 	bl	80030b0 <sdcDisconnect>
    return;
 800d286:	e7d9      	b.n	800d23c <InsertHandler+0xc>
 800d288:	200008e8 	.word	0x200008e8
 800d28c:	08012b68 	.word	0x08012b68
 800d290:	20001bc0 	.word	0x20001bc0
 800d294:	20001bb8 	.word	0x20001bb8
 800d298:	20002478 	.word	0x20002478
 800d29c:	00000000 	.word	0x00000000

0800d2a0 <scan_files.constprop.0>:
static FRESULT scan_files(BaseSequentialStream *chp, char *path) {
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a6:	4ab0      	ldr	r2, [pc, #704]	; (800d568 <scan_files.constprop.0+0x2c8>)
 800d2a8:	b0a1      	sub	sp, #132	; 0x84


	if (!dp) return FR_INVALID_OBJECT;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 800d2aa:	a90a      	add	r1, sp, #40	; 0x28
 800d2ac:	a80b      	add	r0, sp, #44	; 0x2c
 800d2ae:	920b      	str	r2, [sp, #44]	; 0x2c
 800d2b0:	9303      	str	r3, [sp, #12]
 800d2b2:	f7ff fded 	bl	800ce90 <mount_volume.constprop.0>
	if (res == FR_OK) {
 800d2b6:	4607      	mov	r7, r0
 800d2b8:	b118      	cbz	r0, 800d2c2 <scan_files.constprop.0+0x22>
}
 800d2ba:	4638      	mov	r0, r7
 800d2bc:	b021      	add	sp, #132	; 0x84
 800d2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->obj.fs = fs;
 800d2c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2c4:	2208      	movs	r2, #8
 800d2c6:	f44f 618c 	mov.w	r1, #1120	; 0x460
 800d2ca:	930c      	str	r3, [sp, #48]	; 0x30
 800d2cc:	f7f8 f8a8 	bl	8005420 <chHeapAllocAligned>
		INIT_NAMBUF(fs);
 800d2d0:	9004      	str	r0, [sp, #16]
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	d037      	beq.n	800d346 <scan_files.constprop.0+0xa6>
 800d2d6:	9904      	ldr	r1, [sp, #16]
 800d2d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2da:	f501 7300 	add.w	r3, r1, #512	; 0x200
 800d2de:	e9c2 1303 	strd	r1, r3, [r2, #12]
	FATFS *fs = dp->obj.fs;
 800d2e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2e4:	9301      	str	r3, [sp, #4]
 800d2e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2e8:	4698      	mov	r8, r3
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d2ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2ee:	2a2f      	cmp	r2, #47	; 0x2f
 800d2f0:	d0fa      	beq.n	800d2e8 <scan_files.constprop.0+0x48>
 800d2f2:	2a5c      	cmp	r2, #92	; 0x5c
 800d2f4:	d0f8      	beq.n	800d2e8 <scan_files.constprop.0+0x48>
		dp->obj.sclust = 0;					/* Start from root directory */
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	930e      	str	r3, [sp, #56]	; 0x38
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 800d2fa:	9313      	str	r3, [sp, #76]	; 0x4c
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d2fc:	f898 1000 	ldrb.w	r1, [r8]
 800d300:	291f      	cmp	r1, #31
 800d302:	d925      	bls.n	800d350 <scan_files.constprop.0+0xb0>
	FATFS *fs = dp->obj.fs;
 800d304:	9b01      	ldr	r3, [sp, #4]
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800d306:	2000      	movs	r0, #0
 800d308:	68dc      	ldr	r4, [r3, #12]
 800d30a:	f108 0501 	add.w	r5, r8, #1
 800d30e:	1ea6      	subs	r6, r4, #2
	wc = (BYTE)*p++;			/* Get a byte */
 800d310:	46a8      	mov	r8, r5
 800d312:	b28b      	uxth	r3, r1
	if (wc != 0) {
 800d314:	2900      	cmp	r1, #0
 800d316:	d16d      	bne.n	800d3f4 <scan_files.constprop.0+0x154>
		cf = NS_LAST;			/* Set last segment flag */
 800d318:	2104      	movs	r1, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d31a:	b150      	cbz	r0, 800d332 <scan_files.constprop.0+0x92>
 800d31c:	eb04 0240 	add.w	r2, r4, r0, lsl #1
		wc = lfn[di - 1];
 800d320:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (wc != ' ' && wc != '.') break;
 800d324:	2b20      	cmp	r3, #32
 800d326:	d002      	beq.n	800d32e <scan_files.constprop.0+0x8e>
 800d328:	2b2e      	cmp	r3, #46	; 0x2e
 800d32a:	f040 8094 	bne.w	800d456 <scan_files.constprop.0+0x1b6>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d32e:	3801      	subs	r0, #1
 800d330:	d1f6      	bne.n	800d320 <scan_files.constprop.0+0x80>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800d332:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 800d334:	2706      	movs	r7, #6
/*------------------------------------------------------------------------*/
/* Free a memory block                                                    */
/*------------------------------------------------------------------------*/
void ff_memfree(void *mblock) {

  chHeapFree(mblock);
 800d336:	9804      	ldr	r0, [sp, #16]
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800d338:	8023      	strh	r3, [r4, #0]
 800d33a:	f7f8 f911 	bl	8005560 <chHeapFree>
 800d33e:	4638      	mov	r0, r7
 800d340:	b021      	add	sp, #132	; 0x84
 800d342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
 800d346:	2711      	movs	r7, #17
 800d348:	4638      	mov	r0, r7
 800d34a:	b021      	add	sp, #132	; 0x84
 800d34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NONAME;
 800d350:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800d352:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d356:	4658      	mov	r0, fp
		dp->fn[NSFLAG] = NS_NONAME;
 800d358:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
		res = dir_sdi(dp, 0);
 800d35c:	f7ff fbd8 	bl	800cb10 <dir_sdi.constprop.0>
		if (res == FR_OK) {						/* Follow completed */
 800d360:	4607      	mov	r7, r0
 800d362:	2800      	cmp	r0, #0
 800d364:	f040 8467 	bne.w	800dc36 <scan_files.constprop.0+0x996>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d368:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
 800d36c:	060f      	lsls	r7, r1, #24
 800d36e:	f100 8419 	bmi.w	800dba4 <scan_files.constprop.0+0x904>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 800d372:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800d376:	06de      	lsls	r6, r3, #27
 800d378:	d537      	bpl.n	800d3ea <scan_files.constprop.0+0x14a>
					if (fs->fs_type == FS_EXFAT) {
 800d37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d37c:	7818      	ldrb	r0, [r3, #0]
 800d37e:	2804      	cmp	r0, #4
 800d380:	f000 8401 	beq.w	800db86 <scan_files.constprop.0+0x8e6>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d384:	991b      	ldr	r1, [sp, #108]	; 0x6c
	if (fs->fs_type == FS_FAT32) {
 800d386:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800d388:	8b4a      	ldrh	r2, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d38a:	bf04      	itt	eq
 800d38c:	8a89      	ldrheq	r1, [r1, #20]
 800d38e:	ea42 4201 	orreq.w	r2, r2, r1, lsl #16
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d392:	920e      	str	r2, [sp, #56]	; 0x38
				dp->obj.id = fs->id;
 800d394:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d396:	4658      	mov	r0, fp
				dp->obj.id = fs->id;
 800d398:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d39c:	f7ff fbb8 	bl	800cb10 <dir_sdi.constprop.0>
 800d3a0:	4604      	mov	r4, r0
 800d3a2:	9804      	ldr	r0, [sp, #16]
 800d3a4:	f7f8 f8dc 	bl	8005560 <chHeapFree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d3a8:	2c04      	cmp	r4, #4
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d3aa:	46a1      	mov	r9, r4
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d3ac:	f000 8387 	beq.w	800dabe <scan_files.constprop.0+0x81e>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 800d3b0:	2c00      	cmp	r4, #0
 800d3b2:	f040 815b 	bne.w	800d66c <scan_files.constprop.0+0x3cc>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d3b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d3b8:	b197      	cbz	r7, 800d3e0 <scan_files.constprop.0+0x140>
    i = strlen(path);
 800d3ba:	486b      	ldr	r0, [pc, #428]	; (800d568 <scan_files.constprop.0+0x2c8>)
 800d3bc:	f002 fcc6 	bl	800fd4c <strlen>
 800d3c0:	4682      	mov	sl, r0
	fno->fname[0] = 0;			/* Invaidate file info */
 800d3c2:	4c6a      	ldr	r4, [pc, #424]	; (800d56c <scan_files.constprop.0+0x2cc>)
 800d3c4:	f8cd b004 	str.w	fp, [sp, #4]
 800d3c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
        chprintf(chp, "%s/%s\r\n", path, fn);
 800d3cc:	f104 061a 	add.w	r6, r4, #26
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d3d0:	783b      	ldrb	r3, [r7, #0]
 800d3d2:	b12b      	cbz	r3, 800d3e0 <scan_files.constprop.0+0x140>
 800d3d4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d3d8:	88fb      	ldrh	r3, [r7, #6]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	f000 824a 	beq.w	800d874 <scan_files.constprop.0+0x5d4>
	FRESULT res = FR_INVALID_OBJECT;
 800d3e0:	2709      	movs	r7, #9
}
 800d3e2:	4638      	mov	r0, r7
 800d3e4:	b021      	add	sp, #132	; 0x84
 800d3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ea:	9804      	ldr	r0, [sp, #16]
 800d3ec:	f7f8 f8b8 	bl	8005560 <chHeapFree>
					res = FR_NO_PATH;
 800d3f0:	2705      	movs	r7, #5
 800d3f2:	e762      	b.n	800d2ba <scan_files.constprop.0+0x1a>
	if (oem < 0x80) {	/* ASCII? */
 800d3f4:	2b7f      	cmp	r3, #127	; 0x7f
 800d3f6:	d906      	bls.n	800d406 <scan_files.constprop.0+0x166>
			if (oem < 0x100) c = p[oem - 0x80];
 800d3f8:	4b5d      	ldr	r3, [pc, #372]	; (800d570 <scan_files.constprop.0+0x2d0>)
 800d3fa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d3fe:	3980      	subs	r1, #128	; 0x80
 800d400:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 800d404:	b313      	cbz	r3, 800d44c <scan_files.constprop.0+0x1ac>
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 800d406:	2b1f      	cmp	r3, #31
 800d408:	d986      	bls.n	800d318 <scan_files.constprop.0+0x78>
 800d40a:	2b2f      	cmp	r3, #47	; 0x2f
 800d40c:	d00b      	beq.n	800d426 <scan_files.constprop.0+0x186>
 800d40e:	2b5c      	cmp	r3, #92	; 0x5c
 800d410:	d009      	beq.n	800d426 <scan_files.constprop.0+0x186>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d412:	2b7f      	cmp	r3, #127	; 0x7f
 800d414:	d911      	bls.n	800d43a <scan_files.constprop.0+0x19a>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d416:	28ff      	cmp	r0, #255	; 0xff
 800d418:	d018      	beq.n	800d44c <scan_files.constprop.0+0x1ac>
		lfn[di++] = wc;					/* Store the Unicode character */
 800d41a:	f826 3f02 	strh.w	r3, [r6, #2]!
	wc = (BYTE)*p++;			/* Get a byte */
 800d41e:	f815 1b01 	ldrb.w	r1, [r5], #1
		lfn[di++] = wc;					/* Store the Unicode character */
 800d422:	3001      	adds	r0, #1
		uc = tchar2uni(&p);			/* Get a character */
 800d424:	e774      	b.n	800d310 <scan_files.constprop.0+0x70>
		while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 800d426:	782b      	ldrb	r3, [r5, #0]
 800d428:	46a8      	mov	r8, r5
 800d42a:	2b2f      	cmp	r3, #47	; 0x2f
 800d42c:	f105 0501 	add.w	r5, r5, #1
 800d430:	d0f9      	beq.n	800d426 <scan_files.constprop.0+0x186>
 800d432:	2b5c      	cmp	r3, #92	; 0x5c
 800d434:	d0f7      	beq.n	800d426 <scan_files.constprop.0+0x186>
		cf = 0;					/* Next segment follows */
 800d436:	2100      	movs	r1, #0
 800d438:	e76f      	b.n	800d31a <scan_files.constprop.0+0x7a>
	while (*str && *str != chr) str++;
 800d43a:	2222      	movs	r2, #34	; 0x22
 800d43c:	494d      	ldr	r1, [pc, #308]	; (800d574 <scan_files.constprop.0+0x2d4>)
 800d43e:	e003      	b.n	800d448 <scan_files.constprop.0+0x1a8>
 800d440:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d444:	2a00      	cmp	r2, #0
 800d446:	d0e6      	beq.n	800d416 <scan_files.constprop.0+0x176>
 800d448:	429a      	cmp	r2, r3
 800d44a:	d1f9      	bne.n	800d440 <scan_files.constprop.0+0x1a0>
 800d44c:	2706      	movs	r7, #6
 800d44e:	9804      	ldr	r0, [sp, #16]
 800d450:	f7f8 f886 	bl	8005560 <chHeapFree>
 800d454:	e731      	b.n	800d2ba <scan_files.constprop.0+0x1a>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800d456:	2200      	movs	r2, #0
 800d458:	f824 2010 	strh.w	r2, [r4, r0, lsl #1]
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 800d45c:	8823      	ldrh	r3, [r4, #0]
 800d45e:	2b20      	cmp	r3, #32
 800d460:	bf08      	it	eq
 800d462:	1ca3      	addeq	r3, r4, #2
 800d464:	f040 8135 	bne.w	800d6d2 <scan_files.constprop.0+0x432>
 800d468:	461d      	mov	r5, r3
 800d46a:	f833 6b02 	ldrh.w	r6, [r3], #2
 800d46e:	4617      	mov	r7, r2
 800d470:	2e20      	cmp	r6, #32
 800d472:	f102 0201 	add.w	r2, r2, #1
 800d476:	d0f7      	beq.n	800d468 <scan_files.constprop.0+0x1c8>
		wc = lfn[si++];					/* Get an LFN character */
 800d478:	3702      	adds	r7, #2
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800d47a:	f041 0103 	orr.w	r1, r1, #3
 800d47e:	eb04 0340 	add.w	r3, r4, r0, lsl #1
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 800d482:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800d486:	2a2e      	cmp	r2, #46	; 0x2e
 800d488:	d001      	beq.n	800d48e <scan_files.constprop.0+0x1ee>
 800d48a:	3801      	subs	r0, #1
 800d48c:	d1f9      	bne.n	800d482 <scan_files.constprop.0+0x1e2>
		*d++ = (BYTE)val;
 800d48e:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
 800d492:	931d      	str	r3, [sp, #116]	; 0x74
 800d494:	931c      	str	r3, [sp, #112]	; 0x70
 800d496:	f8cd 3077 	str.w	r3, [sp, #119]	; 0x77
		wc = lfn[si++];					/* Get an LFN character */
 800d49a:	882b      	ldrh	r3, [r5, #0]
		if (wc == 0) break;				/* Break on end of the LFN */
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d04c      	beq.n	800d53a <scan_files.constprop.0+0x29a>
	i = b = 0; ni = 8;
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	2508      	movs	r5, #8
 800d4a4:	4616      	mov	r6, r2
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 800d4a6:	2b20      	cmp	r3, #32
 800d4a8:	f000 80f8 	beq.w	800d69c <scan_files.constprop.0+0x3fc>
 800d4ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d4ae:	f000 80f8 	beq.w	800d6a2 <scan_files.constprop.0+0x402>
		if (i >= ni || si == di) {		/* End of field? */
 800d4b2:	42ae      	cmp	r6, r5
 800d4b4:	f080 8100 	bcs.w	800d6b8 <scan_files.constprop.0+0x418>
 800d4b8:	42b8      	cmp	r0, r7
 800d4ba:	f000 80f4 	beq.w	800d6a6 <scan_files.constprop.0+0x406>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 800d4be:	2b7f      	cmp	r3, #127	; 0x7f
 800d4c0:	f200 8129 	bhi.w	800d716 <scan_files.constprop.0+0x476>
	while (*str && *str != chr) str++;
 800d4c4:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 800d4c8:	46e1      	mov	r9, ip
 800d4ca:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800d578 <scan_files.constprop.0+0x2d8>
 800d4ce:	469c      	mov	ip, r3
 800d4d0:	464b      	mov	r3, r9
 800d4d2:	e004      	b.n	800d4de <scan_files.constprop.0+0x23e>
 800d4d4:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f000 8386 	beq.w	800dbea <scan_files.constprop.0+0x94a>
 800d4de:	4563      	cmp	r3, ip
 800d4e0:	d1f8      	bne.n	800d4d4 <scan_files.constprop.0+0x234>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d4e2:	235f      	movs	r3, #95	; 0x5f
 800d4e4:	f041 0103 	orr.w	r1, r1, #3
		dp->fn[i++] = (BYTE)wc;
 800d4e8:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 800d4ec:	44b4      	add	ip, r6
 800d4ee:	f80c 3c10 	strb.w	r3, [ip, #-16]
 800d4f2:	3601      	adds	r6, #1
		wc = lfn[si++];					/* Get an LFN character */
 800d4f4:	f834 3017 	ldrh.w	r3, [r4, r7, lsl #1]
 800d4f8:	3701      	adds	r7, #1
		if (wc == 0) break;				/* Break on end of the LFN */
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1d3      	bne.n	800d4a6 <scan_files.constprop.0+0x206>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d4fe:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800d502:	2be5      	cmp	r3, #229	; 0xe5
 800d504:	bf04      	itt	eq
 800d506:	2305      	moveq	r3, #5
 800d508:	f88d 3070 	strbeq.w	r3, [sp, #112]	; 0x70
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800d50c:	2d08      	cmp	r5, #8
 800d50e:	f000 80f8 	beq.w	800d702 <scan_files.constprop.0+0x462>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800d512:	f002 030c 	and.w	r3, r2, #12
 800d516:	2b0c      	cmp	r3, #12
 800d518:	f000 80d8 	beq.w	800d6cc <scan_files.constprop.0+0x42c>
 800d51c:	f002 0303 	and.w	r3, r2, #3
 800d520:	2b03      	cmp	r3, #3
 800d522:	f000 80d3 	beq.w	800d6cc <scan_files.constprop.0+0x42c>
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d526:	078c      	lsls	r4, r1, #30
 800d528:	d407      	bmi.n	800d53a <scan_files.constprop.0+0x29a>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 800d52a:	07d0      	lsls	r0, r2, #31
 800d52c:	bf48      	it	mi
 800d52e:	f041 0110 	orrmi.w	r1, r1, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 800d532:	0752      	lsls	r2, r2, #29
 800d534:	bf48      	it	mi
 800d536:	f041 0108 	orrmi.w	r1, r1, #8
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d53a:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d53e:	4658      	mov	r0, fp
	FATFS *fs = dp->obj.fs;
 800d540:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 800d542:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d546:	f7ff fae3 	bl	800cb10 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800d54a:	2800      	cmp	r0, #0
 800d54c:	f040 8087 	bne.w	800d65e <scan_files.constprop.0+0x3be>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d550:	7833      	ldrb	r3, [r6, #0]
 800d552:	2b04      	cmp	r3, #4
 800d554:	f000 80f9 	beq.w	800d74a <scan_files.constprop.0+0x4aa>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d558:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800d55c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d560:	4654      	mov	r4, sl
 800d562:	971f      	str	r7, [sp, #124]	; 0x7c
 800d564:	e013      	b.n	800d58e <scan_files.constprop.0+0x2ee>
 800d566:	bf00      	nop
 800d568:	20001f58 	.word	0x20001f58
 800d56c:	20002358 	.word	0x20002358
 800d570:	08012f80 	.word	0x08012f80
 800d574:	08012b6c 	.word	0x08012b6c
 800d578:	08012b78 	.word	0x08012b78
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d57c:	2a0f      	cmp	r2, #15
 800d57e:	d058      	beq.n	800d632 <scan_files.constprop.0+0x392>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d580:	24ff      	movs	r4, #255	; 0xff
 800d582:	971f      	str	r7, [sp, #124]	; 0x7c
		res = dir_next(dp, 0);	/* Next entry */
 800d584:	4658      	mov	r0, fp
 800d586:	f7ff fa73 	bl	800ca70 <dir_next.constprop.0>
	} while (res == FR_OK);
 800d58a:	2800      	cmp	r0, #0
 800d58c:	d167      	bne.n	800d65e <scan_files.constprop.0+0x3be>
		res = move_window(fs, dp->sect);
 800d58e:	991a      	ldr	r1, [sp, #104]	; 0x68
	if (sect != fs->winsect) {	/* Window offset changed? */
 800d590:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800d592:	4299      	cmp	r1, r3
 800d594:	d004      	beq.n	800d5a0 <scan_files.constprop.0+0x300>
 800d596:	4630      	mov	r0, r6
 800d598:	f7f9 fb6a 	bl	8006c70 <move_window.part.0.lto_priv.0>
		if (res != FR_OK) break;
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d15e      	bne.n	800d65e <scan_files.constprop.0+0x3be>
		c = dp->dir[DIR_Name];
 800d5a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d5a2:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f000 8282 	beq.w	800daae <scan_files.constprop.0+0x80e>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d5aa:	7ae9      	ldrb	r1, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d5ac:	2be5      	cmp	r3, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d5ae:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800d5b2:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d5b6:	d0e3      	beq.n	800d580 <scan_files.constprop.0+0x2e0>
 800d5b8:	0708      	lsls	r0, r1, #28
 800d5ba:	d4df      	bmi.n	800d57c <scan_files.constprop.0+0x2dc>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d5bc:	2a0f      	cmp	r2, #15
 800d5be:	d038      	beq.n	800d632 <scan_files.constprop.0+0x392>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d5c0:	2c00      	cmp	r4, #0
 800d5c2:	d055      	beq.n	800d670 <scan_files.constprop.0+0x3d0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d5c4:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
 800d5c8:	07c8      	lsls	r0, r1, #31
 800d5ca:	d4d9      	bmi.n	800d580 <scan_files.constprop.0+0x2e0>
		r = *d++ - *s++;
 800d5cc:	462c      	mov	r4, r5
 800d5ce:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
 800d5d2:	f814 3b0b 	ldrb.w	r3, [r4], #11
 800d5d6:	3501      	adds	r5, #1
 800d5d8:	f10d 0271 	add.w	r2, sp, #113	; 0x71
 800d5dc:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d1ce      	bne.n	800d580 <scan_files.constprop.0+0x2e0>
		r = *d++ - *s++;
 800d5e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d5e6:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 800d5ea:	42a5      	cmp	r5, r4
		r = *d++ - *s++;
 800d5ec:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 800d5f0:	d1f5      	bne.n	800d5de <scan_files.constprop.0+0x33e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1c4      	bne.n	800d580 <scan_files.constprop.0+0x2e0>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d5f6:	074b      	lsls	r3, r1, #29
 800d5f8:	f53f aeb8 	bmi.w	800d36c <scan_files.constprop.0+0xcc>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d5fc:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800d600:	06db      	lsls	r3, r3, #27
 800d602:	f140 82d2 	bpl.w	800dbaa <scan_files.constprop.0+0x90a>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800d606:	9b01      	ldr	r3, [sp, #4]
 800d608:	7819      	ldrb	r1, [r3, #0]
 800d60a:	2904      	cmp	r1, #4
 800d60c:	d068      	beq.n	800d6e0 <scan_files.constprop.0+0x440>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d60e:	9b18      	ldr	r3, [sp, #96]	; 0x60
	if (fs->fs_type == FS_FAT32) {
 800d610:	2903      	cmp	r1, #3
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d616:	9b01      	ldr	r3, [sp, #4]
 800d618:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800d61c:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800d61e:	8b5a      	ldrh	r2, [r3, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d620:	bf04      	itt	eq
 800d622:	8a9b      	ldrheq	r3, [r3, #20]
 800d624:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d628:	920e      	str	r2, [sp, #56]	; 0x38
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800d62a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	wc = (BYTE)*p++;			/* Get a byte */
 800d62c:	f898 1000 	ldrb.w	r1, [r8]
 800d630:	e669      	b.n	800d306 <scan_files.constprop.0+0x66>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d632:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800d636:	0651      	lsls	r1, r2, #25
 800d638:	d4a4      	bmi.n	800d584 <scan_files.constprop.0+0x2e4>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d63a:	065a      	lsls	r2, r3, #25
 800d63c:	d52b      	bpl.n	800d696 <scan_files.constprop.0+0x3f6>
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d63e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d642:	9b18      	ldr	r3, [sp, #96]	; 0x60
						sum = dp->dir[LDIR_Chksum];
 800d644:	f895 a00d 	ldrb.w	sl, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d648:	931f      	str	r3, [sp, #124]	; 0x7c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d64a:	7b6b      	ldrb	r3, [r5, #13]
 800d64c:	4553      	cmp	r3, sl
 800d64e:	f000 80cd 	beq.w	800d7ec <scan_files.constprop.0+0x54c>
		res = dir_next(dp, 0);	/* Next entry */
 800d652:	4658      	mov	r0, fp
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d654:	24ff      	movs	r4, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800d656:	f7ff fa0b 	bl	800ca70 <dir_next.constprop.0>
	} while (res == FR_OK);
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d097      	beq.n	800d58e <scan_files.constprop.0+0x2ee>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d65e:	2804      	cmp	r0, #4
 800d660:	4681      	mov	r9, r0
 800d662:	f000 8224 	beq.w	800daae <scan_files.constprop.0+0x80e>
 800d666:	9804      	ldr	r0, [sp, #16]
 800d668:	f7f7 ff7a 	bl	8005560 <chHeapFree>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d66c:	464f      	mov	r7, r9
 800d66e:	e624      	b.n	800d2ba <scan_files.constprop.0+0x1a>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d670:	462a      	mov	r2, r5
 800d672:	4623      	mov	r3, r4
 800d674:	f105 010b 	add.w	r1, r5, #11
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d678:	01dc      	lsls	r4, r3, #7
 800d67a:	ea44 0453 	orr.w	r4, r4, r3, lsr #1
 800d67e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d682:	441c      	add	r4, r3
	} while (--n);
 800d684:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d686:	f004 03ff 	and.w	r3, r4, #255	; 0xff
	} while (--n);
 800d68a:	d1f5      	bne.n	800d678 <scan_files.constprop.0+0x3d8>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d68c:	4553      	cmp	r3, sl
 800d68e:	d199      	bne.n	800d5c4 <scan_files.constprop.0+0x324>
			ns = dp->fn[NSFLAG];
 800d690:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
 800d694:	e7af      	b.n	800d5f6 <scan_files.constprop.0+0x356>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d696:	42a3      	cmp	r3, r4
 800d698:	d1db      	bne.n	800d652 <scan_files.constprop.0+0x3b2>
 800d69a:	e7d6      	b.n	800d64a <scan_files.constprop.0+0x3aa>
			cf |= NS_LOSS | NS_LFN;
 800d69c:	f041 0103 	orr.w	r1, r1, #3
			continue;
 800d6a0:	e728      	b.n	800d4f4 <scan_files.constprop.0+0x254>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 800d6a2:	42b8      	cmp	r0, r7
 800d6a4:	d1fa      	bne.n	800d69c <scan_files.constprop.0+0x3fc>
			if (ni == 11) {				/* Name extension overflow? */
 800d6a6:	2d0b      	cmp	r5, #11
 800d6a8:	f000 8294 	beq.w	800dbd4 <scan_files.constprop.0+0x934>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800d6ac:	0092      	lsls	r2, r2, #2
			continue;
 800d6ae:	4607      	mov	r7, r0
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800d6b0:	250b      	movs	r5, #11
 800d6b2:	2608      	movs	r6, #8
 800d6b4:	b2d2      	uxtb	r2, r2
			continue;
 800d6b6:	e71d      	b.n	800d4f4 <scan_files.constprop.0+0x254>
			if (ni == 11) {				/* Name extension overflow? */
 800d6b8:	2d0b      	cmp	r5, #11
 800d6ba:	f000 828b 	beq.w	800dbd4 <scan_files.constprop.0+0x934>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800d6be:	42b8      	cmp	r0, r7
 800d6c0:	d0f4      	beq.n	800d6ac <scan_files.constprop.0+0x40c>
 800d6c2:	f041 0103 	orr.w	r1, r1, #3
			if (si > di) break;						/* No name extension? */
 800d6c6:	f4ff af1a 	bcc.w	800d4fe <scan_files.constprop.0+0x25e>
 800d6ca:	e7ef      	b.n	800d6ac <scan_files.constprop.0+0x40c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800d6cc:	f041 0102 	orr.w	r1, r1, #2
 800d6d0:	e733      	b.n	800d53a <scan_files.constprop.0+0x29a>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800d6d2:	2b2e      	cmp	r3, #46	; 0x2e
 800d6d4:	4625      	mov	r5, r4
 800d6d6:	f04f 0701 	mov.w	r7, #1
 800d6da:	f47f aed0 	bne.w	800d47e <scan_files.constprop.0+0x1de>
 800d6de:	e6cc      	b.n	800d47a <scan_files.constprop.0+0x1da>
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800d6e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6e2:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800d6e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	9315      	str	r3, [sp, #84]	; 0x54
				dp->obj.c_scl = dp->obj.sclust;
 800d6ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800d6f0:	4659      	mov	r1, fp
				dp->obj.c_scl = dp->obj.sclust;
 800d6f2:	9314      	str	r3, [sp, #80]	; 0x50
				dp->obj.c_ofs = dp->blk_ofs;
 800d6f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d6f6:	9316      	str	r3, [sp, #88]	; 0x58
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800d6f8:	9b01      	ldr	r3, [sp, #4]
 800d6fa:	6918      	ldr	r0, [r3, #16]
 800d6fc:	f7fb fd70 	bl	80091e0 <init_alloc_info.isra.0>
 800d700:	e793      	b.n	800d62a <scan_files.constprop.0+0x38a>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800d702:	0092      	lsls	r2, r2, #2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800d704:	f002 030c 	and.w	r3, r2, #12
 800d708:	2b0c      	cmp	r3, #12
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800d70a:	b2d2      	uxtb	r2, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800d70c:	d0de      	beq.n	800d6cc <scan_files.constprop.0+0x42c>
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d70e:	078d      	lsls	r5, r1, #30
 800d710:	f57f af0f 	bpl.w	800d532 <scan_files.constprop.0+0x292>
 800d714:	e711      	b.n	800d53a <scan_files.constprop.0+0x29a>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800d716:	f04f 0c00 	mov.w	ip, #0
 800d71a:	f04f 0ec7 	mov.w	lr, #199	; 0xc7
 800d71e:	f8df 9300 	ldr.w	r9, [pc, #768]	; 800da20 <scan_files.constprop.0+0x780>
 800d722:	f041 0102 	orr.w	r1, r1, #2
 800d726:	e007      	b.n	800d738 <scan_files.constprop.0+0x498>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 800d728:	f10c 0c01 	add.w	ip, ip, #1
 800d72c:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 800d730:	f43f aed7 	beq.w	800d4e2 <scan_files.constprop.0+0x242>
 800d734:	f839 ef02 	ldrh.w	lr, [r9, #2]!
 800d738:	4573      	cmp	r3, lr
 800d73a:	d1f5      	bne.n	800d728 <scan_files.constprop.0+0x488>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 800d73c:	4bb9      	ldr	r3, [pc, #740]	; (800da24 <scan_files.constprop.0+0x784>)
 800d73e:	f813 300c 	ldrb.w	r3, [r3, ip]
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 800d742:	2b00      	cmp	r3, #0
 800d744:	f43f aecd 	beq.w	800d4e2 <scan_files.constprop.0+0x242>
 800d748:	e6bc      	b.n	800d4c4 <scan_files.constprop.0+0x224>
	while ((chr = *name++) != 0) {
 800d74a:	68f5      	ldr	r5, [r6, #12]
 800d74c:	f835 1b02 	ldrh.w	r1, [r5], #2
 800d750:	2900      	cmp	r1, #0
 800d752:	f000 8256 	beq.w	800dc02 <scan_files.constprop.0+0x962>
	WORD sum = 0;
 800d756:	4604      	mov	r4, r0
 800d758:	4608      	mov	r0, r1
 800d75a:	f7f9 fbd1 	bl	8006f00 <ff_wtoupper.part.0>
 800d75e:	4603      	mov	r3, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800d760:	b2da      	uxtb	r2, r3
 800d762:	eb02 0254 	add.w	r2, r2, r4, lsr #1
 800d766:	eb02 32c4 	add.w	r2, r2, r4, lsl #15
 800d76a:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800d76c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800d770:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	while ((chr = *name++) != 0) {
 800d774:	f835 0b02 	ldrh.w	r0, [r5], #2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800d778:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 800d77c:	b29c      	uxth	r4, r3
	while ((chr = *name++) != 0) {
 800d77e:	2800      	cmp	r0, #0
 800d780:	d1eb      	bne.n	800d75a <scan_files.constprop.0+0x4ba>
 800d782:	9402      	str	r4, [sp, #8]
 800d784:	f8cd 8014 	str.w	r8, [sp, #20]
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800d788:	4658      	mov	r0, fp
 800d78a:	f7ff fa01 	bl	800cb90 <dir_read.constprop.0>
 800d78e:	2800      	cmp	r0, #0
 800d790:	f47f af65 	bne.w	800d65e <scan_files.constprop.0+0x3be>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800d794:	6937      	ldr	r7, [r6, #16]
 800d796:	9a02      	ldr	r2, [sp, #8]
 800d798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d1f4      	bne.n	800d788 <scan_files.constprop.0+0x4e8>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d79e:	f897 9023 	ldrb.w	r9, [r7, #35]	; 0x23
 800d7a2:	f1b9 0f00 	cmp.w	r9, #0
 800d7a6:	f000 822a 	beq.w	800dbfe <scan_files.constprop.0+0x95e>
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	2540      	movs	r5, #64	; 0x40
				if ((di % SZDIRE) == 0) di += 2;
 800d7ae:	06eb      	lsls	r3, r5, #27
 800d7b0:	bf08      	it	eq
 800d7b2:	3502      	addeq	r5, #2
 800d7b4:	5b78      	ldrh	r0, [r7, r5]
 800d7b6:	f7f9 fba3 	bl	8006f00 <ff_wtoupper.part.0>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d7ba:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800d7be:	4682      	mov	sl, r0
 800d7c0:	f838 0014 	ldrh.w	r0, [r8, r4, lsl #1]
 800d7c4:	f7f9 fb9c 	bl	8006f00 <ff_wtoupper.part.0>
 800d7c8:	4550      	cmp	r0, sl
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d7ca:	f105 0502 	add.w	r5, r5, #2
 800d7ce:	f104 0401 	add.w	r4, r4, #1
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d7d2:	d1d9      	bne.n	800d788 <scan_files.constprop.0+0x4e8>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d7d4:	454c      	cmp	r4, r9
 800d7d6:	d1ea      	bne.n	800d7ae <scan_files.constprop.0+0x50e>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d7d8:	eb08 0344 	add.w	r3, r8, r4, lsl #1
 800d7dc:	881b      	ldrh	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d1d2      	bne.n	800d788 <scan_files.constprop.0+0x4e8>
			ns = dp->fn[NSFLAG];
 800d7e2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d7e6:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
 800d7ea:	e704      	b.n	800d5f6 <scan_files.constprop.0+0x356>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d7ec:	8b6b      	ldrh	r3, [r5, #26]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f47f af2f 	bne.w	800d652 <scan_files.constprop.0+0x3b2>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d7f4:	782b      	ldrb	r3, [r5, #0]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	f001 093f 	and.w	r9, r1, #63	; 0x3f
 800d7fe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d802:	eb09 0149 	add.w	r1, r9, r9, lsl #1
 800d806:	9308      	str	r3, [sp, #32]
 800d808:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 800d80c:	4b86      	ldr	r3, [pc, #536]	; (800da28 <scan_files.constprop.0+0x788>)
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d80e:	68f1      	ldr	r1, [r6, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d810:	9605      	str	r6, [sp, #20]
 800d812:	9409      	str	r4, [sp, #36]	; 0x24
 800d814:	4610      	mov	r0, r2
 800d816:	461c      	mov	r4, r3
 800d818:	460e      	mov	r6, r1
 800d81a:	4613      	mov	r3, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d81c:	9107      	str	r1, [sp, #28]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d81e:	f8cd 8008 	str.w	r8, [sp, #8]
 800d822:	f8cd a018 	str.w	sl, [sp, #24]
 800d826:	e015      	b.n	800d854 <scan_files.constprop.0+0x5b4>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d828:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d82c:	d81c      	bhi.n	800d868 <scan_files.constprop.0+0x5c8>
 800d82e:	4640      	mov	r0, r8
 800d830:	f7f9 fb66 	bl	8006f00 <ff_wtoupper.part.0>
 800d834:	4684      	mov	ip, r0
 800d836:	f836 0019 	ldrh.w	r0, [r6, r9, lsl #1]
 800d83a:	46e1      	mov	r9, ip
 800d83c:	f7f9 fb60 	bl	8006f00 <ff_wtoupper.part.0>
 800d840:	4548      	cmp	r0, r9
 800d842:	d111      	bne.n	800d868 <scan_files.constprop.0+0x5c8>
 800d844:	4640      	mov	r0, r8
 800d846:	46d1      	mov	r9, sl
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d848:	4b78      	ldr	r3, [pc, #480]	; (800da2c <scan_files.constprop.0+0x78c>)
 800d84a:	429c      	cmp	r4, r3
 800d84c:	f000 81af 	beq.w	800dbae <scan_files.constprop.0+0x90e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d850:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d854:	f835 8003 	ldrh.w	r8, [r5, r3]
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d858:	f109 0a01 	add.w	sl, r9, #1
		if (wc != 0) {
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d1e3      	bne.n	800d828 <scan_files.constprop.0+0x588>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d864:	4598      	cmp	r8, r3
 800d866:	d0ef      	beq.n	800d848 <scan_files.constprop.0+0x5a8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d868:	24ff      	movs	r4, #255	; 0xff
 800d86a:	e9dd 6a05 	ldrd	r6, sl, [sp, #20]
 800d86e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d872:	e687      	b.n	800d584 <scan_files.constprop.0+0x2e4>
  switch (pdrv) {
 800d874:	7878      	ldrb	r0, [r7, #1]
 800d876:	2800      	cmp	r0, #0
 800d878:	f47f adb2 	bne.w	800d3e0 <scan_files.constprop.0+0x140>
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800d87c:	4b6c      	ldr	r3, [pc, #432]	; (800da30 <scan_files.constprop.0+0x790>)
 800d87e:	791b      	ldrb	r3, [r3, #4]
 800d880:	2b05      	cmp	r3, #5
 800d882:	f47f adad 	bne.w	800d3e0 <scan_files.constprop.0+0x140>
 800d886:	2208      	movs	r2, #8
 800d888:	f44f 618c 	mov.w	r1, #1120	; 0x460
 800d88c:	f7f7 fdc8 	bl	8005420 <chHeapAllocAligned>
			INIT_NAMBUF(fs);
 800d890:	4605      	mov	r5, r0
 800d892:	2800      	cmp	r0, #0
 800d894:	f43f ad57 	beq.w	800d346 <scan_files.constprop.0+0xa6>
 800d898:	f500 7300 	add.w	r3, r0, #512	; 0x200
 800d89c:	60f8      	str	r0, [r7, #12]
 800d89e:	613b      	str	r3, [r7, #16]
			res = DIR_READ_FILE(dp);		/* Read an item */
 800d8a0:	9801      	ldr	r0, [sp, #4]
 800d8a2:	f7ff f975 	bl	800cb90 <dir_read.constprop.0>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
 800d8a6:	f010 03fb 	ands.w	r3, r0, #251	; 0xfb
			res = DIR_READ_FILE(dp);		/* Read an item */
 800d8aa:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
 800d8ac:	d003      	beq.n	800d8b6 <scan_files.constprop.0+0x616>
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	f7f7 fe56 	bl	8005560 <chHeapFree>
 800d8b4:	e501      	b.n	800d2ba <scan_files.constprop.0+0x1a>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800d8b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
	FATFS *fs = dp->obj.fs;
 800d8b8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	fno->fname[0] = 0;			/* Invaidate file info */
 800d8bc:	76a3      	strb	r3, [r4, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800d8be:	2a00      	cmp	r2, #0
 800d8c0:	d078      	beq.n	800d9b4 <scan_files.constprop.0+0x714>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d8c2:	f899 2000 	ldrb.w	r2, [r9]
 800d8c6:	2a04      	cmp	r2, #4
 800d8c8:	f000 80fc 	beq.w	800dac4 <scan_files.constprop.0+0x824>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d8cc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d8ce:	3201      	adds	r2, #1
 800d8d0:	d02e      	beq.n	800d930 <scan_files.constprop.0+0x690>
			while (fs->lfnbuf[si] != 0) {
 800d8d2:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800d8d6:	880a      	ldrh	r2, [r1, #0]
 800d8d8:	2a00      	cmp	r2, #0
 800d8da:	d050      	beq.n	800d97e <scan_files.constprop.0+0x6de>
			si = di = hs = 0;
 800d8dc:	f04f 0c00 	mov.w	ip, #0
 800d8e0:	46a8      	mov	r8, r5
			while (fs->lfnbuf[si] != 0) {
 800d8e2:	f04f 0e02 	mov.w	lr, #2
			si = di = hs = 0;
 800d8e6:	4665      	mov	r5, ip
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800d8e8:	2d00      	cmp	r5, #0
 800d8ea:	d147      	bne.n	800d97c <scan_files.constprop.0+0x6dc>
 800d8ec:	f502 5320 	add.w	r3, r2, #10240	; 0x2800
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8f6:	f0c0 8090 	bcc.w	800da1a <scan_files.constprop.0+0x77a>
	if (uni < 0x80) {	/* ASCII? */
 800d8fa:	2a7f      	cmp	r2, #127	; 0x7f
 800d8fc:	f200 809e 	bhi.w	800da3c <scan_files.constprop.0+0x79c>
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 800d900:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 800d904:	d03a      	beq.n	800d97c <scan_files.constprop.0+0x6dc>
	*buf++ = (TCHAR)wc;					/* Store the character */
 800d906:	eb04 030c 	add.w	r3, r4, ip
 800d90a:	769a      	strb	r2, [r3, #26]
 800d90c:	f8d9 100c 	ldr.w	r1, [r9, #12]
				di += wc;
 800d910:	f10c 0c01 	add.w	ip, ip, #1
			while (fs->lfnbuf[si] != 0) {
 800d914:	f831 200e 	ldrh.w	r2, [r1, lr]
 800d918:	f10e 0e02 	add.w	lr, lr, #2
 800d91c:	2a00      	cmp	r2, #0
 800d91e:	d1e3      	bne.n	800d8e8 <scan_files.constprop.0+0x648>
 800d920:	462b      	mov	r3, r5
 800d922:	4645      	mov	r5, r8
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 800d924:	bb5b      	cbnz	r3, 800d97e <scan_files.constprop.0+0x6de>
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 800d926:	2300      	movs	r3, #0
 800d928:	44a4      	add	ip, r4
 800d92a:	f88c 301a 	strb.w	r3, [ip, #26]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 800d92e:	7ea3      	ldrb	r3, [r4, #26]
		wc = dp->dir[si++];			/* Get a char */
 800d930:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800d934:	2700      	movs	r7, #0
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 800d936:	f04f 092e 	mov.w	r9, #46	; 0x2e
 800d93a:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800d93e:	f10e 080a 	add.w	r8, lr, #10
 800d942:	e005      	b.n	800d950 <scan_files.constprop.0+0x6b0>
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 800d944:	19e0      	adds	r0, r4, r7
 800d946:	7342      	strb	r2, [r0, #13]
 800d948:	3701      	adds	r7, #1
	while (si < 11) {		/* Get SFN from SFN entry */
 800d94a:	4588      	cmp	r8, r1
 800d94c:	f000 8087 	beq.w	800da5e <scan_files.constprop.0+0x7be>
 800d950:	4608      	mov	r0, r1
		wc = dp->dir[si++];			/* Get a char */
 800d952:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		if (wc == ' ') continue;	/* Skip padding spaces */
 800d956:	2a20      	cmp	r2, #32
		wc = dp->dir[si++];			/* Get a char */
 800d958:	fa1f fc82 	uxth.w	ip, r2
		if (wc == ' ') continue;	/* Skip padding spaces */
 800d95c:	d0f5      	beq.n	800d94a <scan_files.constprop.0+0x6aa>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 800d95e:	f1bc 0f05 	cmp.w	ip, #5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 800d962:	f1a0 0007 	sub.w	r0, r0, #7
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 800d966:	bf08      	it	eq
 800d968:	22e5      	moveq	r2, #229	; 0xe5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 800d96a:	4570      	cmp	r0, lr
 800d96c:	d1ea      	bne.n	800d944 <scan_files.constprop.0+0x6a4>
 800d96e:	2f0b      	cmp	r7, #11
 800d970:	d8e8      	bhi.n	800d944 <scan_files.constprop.0+0x6a4>
 800d972:	19e0      	adds	r0, r4, r7
 800d974:	f880 900d 	strb.w	r9, [r0, #13]
 800d978:	3701      	adds	r7, #1
 800d97a:	e7e3      	b.n	800d944 <scan_files.constprop.0+0x6a4>
 800d97c:	4645      	mov	r5, r8
			si = di = hs = 0;
 800d97e:	f04f 0c00 	mov.w	ip, #0
 800d982:	e7d0      	b.n	800d926 <scan_files.constprop.0+0x686>
			fno->fname[di++] = '?';
 800d984:	233f      	movs	r3, #63	; 0x3f
 800d986:	76a3      	strb	r3, [r4, #26]
 800d988:	2301      	movs	r3, #1
		fno->fname[di] = 0;	/* Terminate the LFN */
 800d98a:	2200      	movs	r2, #0
 800d98c:	4423      	add	r3, r4
 800d98e:	769a      	strb	r2, [r3, #26]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 800d990:	f89e 300c 	ldrb.w	r3, [lr, #12]
 800d994:	b903      	cbnz	r3, 800d998 <scan_files.constprop.0+0x6f8>
 800d996:	7363      	strb	r3, [r4, #13]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800d998:	2300      	movs	r3, #0
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 800d99a:	f89e 200b 	ldrb.w	r2, [lr, #11]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800d99e:	6063      	str	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 800d9a0:	f8de 301c 	ldr.w	r3, [lr, #28]
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 800d9a4:	7322      	strb	r2, [r4, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800d9a6:	6023      	str	r3, [r4, #0]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 800d9a8:	f8be 3016 	ldrh.w	r3, [lr, #22]
 800d9ac:	8163      	strh	r3, [r4, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 800d9ae:	f8be 3018 	ldrh.w	r3, [lr, #24]
 800d9b2:	8123      	strh	r3, [r4, #8]
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
 800d9b4:	9801      	ldr	r0, [sp, #4]
 800d9b6:	f7ff f85b 	bl	800ca70 <dir_next.constprop.0>
 800d9ba:	4607      	mov	r7, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d9bc:	2f04      	cmp	r7, #4
 800d9be:	4628      	mov	r0, r5
 800d9c0:	d072      	beq.n	800daa8 <scan_files.constprop.0+0x808>
 800d9c2:	f7f7 fdcd 	bl	8005560 <chHeapFree>
    while (((res = f_readdir(&dir, &fno)) == FR_OK) && fno.fname[0]) {
 800d9c6:	2f00      	cmp	r7, #0
 800d9c8:	f47f ac77 	bne.w	800d2ba <scan_files.constprop.0+0x1a>
 800d9cc:	7ea7      	ldrb	r7, [r4, #26]
 800d9ce:	2f00      	cmp	r7, #0
 800d9d0:	f43f ac73 	beq.w	800d2ba <scan_files.constprop.0+0x1a>
      if (fno.fattrib & AM_DIR) {
 800d9d4:	7b23      	ldrb	r3, [r4, #12]
 800d9d6:	06dd      	lsls	r5, r3, #27
 800d9d8:	d518      	bpl.n	800da0c <scan_files.constprop.0+0x76c>
        *(path + i) = '/';
 800d9da:	232f      	movs	r3, #47	; 0x2f
 800d9dc:	4d15      	ldr	r5, [pc, #84]	; (800da34 <scan_files.constprop.0+0x794>)
        strcpy(path + i + 1, fn);
 800d9de:	f10a 0001 	add.w	r0, sl, #1
        *(path + i) = '/';
 800d9e2:	f805 300a 	strb.w	r3, [r5, sl]
        strcpy(path + i + 1, fn);
 800d9e6:	4631      	mov	r1, r6
 800d9e8:	4428      	add	r0, r5
 800d9ea:	f002 f951 	bl	800fc90 <strcpy>
        res = scan_files(chp, path);
 800d9ee:	4658      	mov	r0, fp
 800d9f0:	f7ff fc56 	bl	800d2a0 <scan_files.constprop.0>
        *(path + i) = '\0';
 800d9f4:	2300      	movs	r3, #0
        if (res != FR_OK)
 800d9f6:	4607      	mov	r7, r0
        *(path + i) = '\0';
 800d9f8:	f805 300a 	strb.w	r3, [r5, sl]
        if (res != FR_OK)
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	f47f ac5c 	bne.w	800d2ba <scan_files.constprop.0+0x1a>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800da02:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800da04:	2f00      	cmp	r7, #0
 800da06:	f47f ace3 	bne.w	800d3d0 <scan_files.constprop.0+0x130>
 800da0a:	e4e9      	b.n	800d3e0 <scan_files.constprop.0+0x140>
        chprintf(chp, "%s/%s\r\n", path, fn);
 800da0c:	4633      	mov	r3, r6
 800da0e:	4658      	mov	r0, fp
 800da10:	4a08      	ldr	r2, [pc, #32]	; (800da34 <scan_files.constprop.0+0x794>)
 800da12:	4909      	ldr	r1, [pc, #36]	; (800da38 <scan_files.constprop.0+0x798>)
 800da14:	f7f8 fbfc 	bl	8006210 <chprintf>
 800da18:	e7f3      	b.n	800da02 <scan_files.constprop.0+0x762>
 800da1a:	4615      	mov	r5, r2
 800da1c:	e77a      	b.n	800d914 <scan_files.constprop.0+0x674>
 800da1e:	bf00      	nop
 800da20:	08012f80 	.word	0x08012f80
 800da24:	08012e5c 	.word	0x08012e5c
 800da28:	08012edc 	.word	0x08012edc
 800da2c:	08012ee8 	.word	0x08012ee8
 800da30:	200008e8 	.word	0x200008e8
 800da34:	20001f58 	.word	0x20001f58
 800da38:	08012b80 	.word	0x08012b80
 800da3c:	462b      	mov	r3, r5
 800da3e:	21c7      	movs	r1, #199	; 0xc7
 800da40:	4880      	ldr	r0, [pc, #512]	; (800dc44 <scan_files.constprop.0+0x9a4>)
 800da42:	e003      	b.n	800da4c <scan_files.constprop.0+0x7ac>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 800da44:	2b80      	cmp	r3, #128	; 0x80
 800da46:	d099      	beq.n	800d97c <scan_files.constprop.0+0x6dc>
 800da48:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 800da4c:	428a      	cmp	r2, r1
 800da4e:	b29f      	uxth	r7, r3
 800da50:	f103 0301 	add.w	r3, r3, #1
 800da54:	d1f6      	bne.n	800da44 <scan_files.constprop.0+0x7a4>
			c = (c + 0x80) & 0xFF;
 800da56:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800da5a:	b292      	uxth	r2, r2
 800da5c:	e750      	b.n	800d900 <scan_files.constprop.0+0x660>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 800da5e:	2100      	movs	r1, #0
 800da60:	19e2      	adds	r2, r4, r7
 800da62:	7351      	strb	r1, [r2, #13]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 800da64:	2b00      	cmp	r3, #0
 800da66:	d197      	bne.n	800d998 <scan_files.constprop.0+0x6f8>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
 800da68:	2f00      	cmp	r7, #0
 800da6a:	d08b      	beq.n	800d984 <scan_files.constprop.0+0x6e4>
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800da6c:	7b62      	ldrb	r2, [r4, #13]
 800da6e:	2a00      	cmp	r2, #0
 800da70:	d08b      	beq.n	800d98a <scan_files.constprop.0+0x6ea>
 800da72:	2708      	movs	r7, #8
 800da74:	4874      	ldr	r0, [pc, #464]	; (800dc48 <scan_files.constprop.0+0x9a8>)
 800da76:	e010      	b.n	800da9a <scan_files.constprop.0+0x7fa>
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 800da78:	2919      	cmp	r1, #25
 800da7a:	d807      	bhi.n	800da8c <scan_files.constprop.0+0x7ec>
 800da7c:	f89e 100c 	ldrb.w	r1, [lr, #12]
				fno->fname[di] = (TCHAR)wc;
 800da80:	f102 0c20 	add.w	ip, r2, #32
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 800da84:	420f      	tst	r7, r1
 800da86:	d001      	beq.n	800da8c <scan_files.constprop.0+0x7ec>
				fno->fname[di] = (TCHAR)wc;
 800da88:	fa5f f28c 	uxtb.w	r2, ip
 800da8c:	7342      	strb	r2, [r0, #13]
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800da8e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800da92:	3301      	adds	r3, #1
 800da94:	2a00      	cmp	r2, #0
 800da96:	f43f af78 	beq.w	800d98a <scan_files.constprop.0+0x6ea>
				wc = (WCHAR)fno->altname[si];
 800da9a:	b291      	uxth	r1, r2
				if (wc == '.') lcf = NS_EXT;
 800da9c:	2a2e      	cmp	r2, #46	; 0x2e
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 800da9e:	f1a1 0141 	sub.w	r1, r1, #65	; 0x41
				if (wc == '.') lcf = NS_EXT;
 800daa2:	d1e9      	bne.n	800da78 <scan_files.constprop.0+0x7d8>
 800daa4:	2710      	movs	r7, #16
 800daa6:	e7f1      	b.n	800da8c <scan_files.constprop.0+0x7ec>
 800daa8:	f7f7 fd5a 	bl	8005560 <chHeapFree>
 800daac:	e78e      	b.n	800d9cc <scan_files.constprop.0+0x72c>
			ns = dp->fn[NSFLAG];
 800daae:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dab2:	075a      	lsls	r2, r3, #29
 800dab4:	f57f ac99 	bpl.w	800d3ea <scan_files.constprop.0+0x14a>
 800dab8:	9804      	ldr	r0, [sp, #16]
 800daba:	f7f7 fd51 	bl	8005560 <chHeapFree>
 800dabe:	2705      	movs	r7, #5
 800dac0:	f7ff bbfb 	b.w	800d2ba <scan_files.constprop.0+0x1a>
		get_xfileinfo(fs->dirbuf, fno);
 800dac4:	f8d9 9010 	ldr.w	r9, [r9, #16]
	while (nc < dirb[XDIR_NumName]) {
 800dac8:	f899 2023 	ldrb.w	r2, [r9, #35]	; 0x23
 800dacc:	b372      	cbz	r2, 800db2c <scan_files.constprop.0+0x88c>
	nc = 0; hs = 0; di = 0;
 800dace:	f8cd a008 	str.w	sl, [sp, #8]
	si = SZDIRE * 2;	/* 1st C1 entry */
 800dad2:	2740      	movs	r7, #64	; 0x40
	nc = 0; hs = 0; di = 0;
 800dad4:	46aa      	mov	sl, r5
 800dad6:	4698      	mov	r8, r3
 800dad8:	469e      	mov	lr, r3
 800dada:	461d      	mov	r5, r3
 800dadc:	e012      	b.n	800db04 <scan_files.constprop.0+0x864>
	if (uni < 0x80) {	/* ASCII? */
 800dade:	297f      	cmp	r1, #127	; 0x7f
 800dae0:	d83f      	bhi.n	800db62 <scan_files.constprop.0+0x8c2>
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 800dae2:	b301      	cbz	r1, 800db26 <scan_files.constprop.0+0x886>
 800dae4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800dae8:	d01d      	beq.n	800db26 <scan_files.constprop.0+0x886>
	*buf++ = (TCHAR)wc;					/* Store the character */
 800daea:	eb04 030e 	add.w	r3, r4, lr
 800daee:	7699      	strb	r1, [r3, #26]
 800daf0:	f899 2023 	ldrb.w	r2, [r9, #35]	; 0x23
		di += wc;
 800daf4:	f10e 0e01 	add.w	lr, lr, #1
	while (nc < dirb[XDIR_NumName]) {
 800daf8:	4590      	cmp	r8, r2
 800dafa:	f080 8090 	bcs.w	800dc1e <scan_files.constprop.0+0x97e>
		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
 800dafe:	f5b7 7f18 	cmp.w	r7, #608	; 0x260
 800db02:	d210      	bcs.n	800db26 <scan_files.constprop.0+0x886>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800db04:	06f8      	lsls	r0, r7, #27
 800db06:	d100      	bne.n	800db0a <scan_files.constprop.0+0x86a>
 800db08:	3702      	adds	r7, #2
 800db0a:	f839 1007 	ldrh.w	r1, [r9, r7]
		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
 800db0e:	f108 0801 	add.w	r8, r8, #1
 800db12:	3702      	adds	r7, #2
		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800db14:	b93d      	cbnz	r5, 800db26 <scan_files.constprop.0+0x886>
 800db16:	f501 5320 	add.w	r3, r1, #10240	; 0x2800
 800db1a:	b29b      	uxth	r3, r3
 800db1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db20:	d2dd      	bcs.n	800dade <scan_files.constprop.0+0x83e>
 800db22:	460d      	mov	r5, r1
 800db24:	e7e8      	b.n	800daf8 <scan_files.constprop.0+0x858>
 800db26:	4655      	mov	r5, sl
 800db28:	f8dd a008 	ldr.w	sl, [sp, #8]
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800db2c:	233f      	movs	r3, #63	; 0x3f
 800db2e:	76a3      	strb	r3, [r4, #26]
 800db30:	2301      	movs	r3, #1
	fno->fname[di] = 0;						/* Terminate the name */
 800db32:	2200      	movs	r2, #0
 800db34:	4423      	add	r3, r4
 800db36:	769a      	strb	r2, [r3, #26]
	fno->altname[0] = 0;					/* exFAT does not support SFN */
 800db38:	7362      	strb	r2, [r4, #13]
	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
 800db3a:	f899 3004 	ldrb.w	r3, [r9, #4]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800db3e:	06d9      	lsls	r1, r3, #27
	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
 800db40:	7323      	strb	r3, [r4, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800db42:	bf47      	ittee	mi
 800db44:	4613      	movmi	r3, r2
 800db46:	461a      	movmi	r2, r3
	rv = rv << 8 | ptr[0];
 800db48:	f8d9 3038 	ldrpl.w	r3, [r9, #56]	; 0x38
 800db4c:	f8d9 203c 	ldrpl.w	r2, [r9, #60]	; 0x3c
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800db50:	e9c4 3200 	strd	r3, r2, [r4]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800db54:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800db58:	8163      	strh	r3, [r4, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800db5a:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800db5e:	8123      	strh	r3, [r4, #8]
}
 800db60:	e728      	b.n	800d9b4 <scan_files.constprop.0+0x714>
 800db62:	462a      	mov	r2, r5
 800db64:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
 800db68:	4b36      	ldr	r3, [pc, #216]	; (800dc44 <scan_files.constprop.0+0x9a4>)
 800db6a:	e003      	b.n	800db74 <scan_files.constprop.0+0x8d4>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 800db6c:	2a80      	cmp	r2, #128	; 0x80
 800db6e:	d0da      	beq.n	800db26 <scan_files.constprop.0+0x886>
 800db70:	f833 cf02 	ldrh.w	ip, [r3, #2]!
 800db74:	4561      	cmp	r1, ip
 800db76:	b290      	uxth	r0, r2
 800db78:	f102 0201 	add.w	r2, r2, #1
 800db7c:	d1f6      	bne.n	800db6c <scan_files.constprop.0+0x8cc>
			c = (c + 0x80) & 0xFF;
 800db7e:	f100 0180 	add.w	r1, r0, #128	; 0x80
 800db82:	b289      	uxth	r1, r1
 800db84:	e7ae      	b.n	800dae4 <scan_files.constprop.0+0x844>
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 800db86:	6918      	ldr	r0, [r3, #16]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800db88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db8a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800db8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db92:	4313      	orrs	r3, r2
 800db94:	9315      	str	r3, [sp, #84]	; 0x54
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
 800db96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 800db98:	4659      	mov	r1, fp
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
 800db9a:	9314      	str	r3, [sp, #80]	; 0x50
						dp->obj.c_ofs = dp->blk_ofs;
 800db9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800db9e:	9316      	str	r3, [sp, #88]	; 0x58
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 800dba0:	f7fb fb1e 	bl	80091e0 <init_alloc_info.isra.0>
				dp->obj.id = fs->id;
 800dba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dba6:	f7ff bbf5 	b.w	800d394 <scan_files.constprop.0+0xf4>
				res = FR_NO_PATH; break;
 800dbaa:	2705      	movs	r7, #5
 800dbac:	e44f      	b.n	800d44e <scan_files.constprop.0+0x1ae>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dbae:	9b08      	ldr	r3, [sp, #32]
 800dbb0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dbb4:	065d      	lsls	r5, r3, #25
 800dbb6:	9e05      	ldr	r6, [sp, #20]
 800dbb8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dbba:	f8dd a018 	ldr.w	sl, [sp, #24]
 800dbbe:	d506      	bpl.n	800dbce <scan_files.constprop.0+0x92e>
 800dbc0:	b128      	cbz	r0, 800dbce <scan_files.constprop.0+0x92e>
 800dbc2:	9b07      	ldr	r3, [sp, #28]
 800dbc4:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f47f ad42 	bne.w	800d652 <scan_files.constprop.0+0x3b2>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dbce:	3c01      	subs	r4, #1
 800dbd0:	b2e4      	uxtb	r4, r4
 800dbd2:	e4d7      	b.n	800d584 <scan_files.constprop.0+0x2e4>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dbd4:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
				cf |= NS_LOSS | NS_LFN;
 800dbd8:	f041 0103 	orr.w	r1, r1, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dbdc:	2be5      	cmp	r3, #229	; 0xe5
 800dbde:	f47f ac98 	bne.w	800d512 <scan_files.constprop.0+0x272>
 800dbe2:	2305      	movs	r3, #5
 800dbe4:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800dbe8:	e493      	b.n	800d512 <scan_files.constprop.0+0x272>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800dbea:	4663      	mov	r3, ip
 800dbec:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800dbf0:	f1bc 0f19 	cmp.w	ip, #25
 800dbf4:	d809      	bhi.n	800dc0a <scan_files.constprop.0+0x96a>
					b |= 2;
 800dbf6:	f042 0202 	orr.w	r2, r2, #2
		dp->fn[i++] = (BYTE)wc;
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	e474      	b.n	800d4e8 <scan_files.constprop.0+0x248>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800dbfe:	68f3      	ldr	r3, [r6, #12]
 800dc00:	e5ec      	b.n	800d7dc <scan_files.constprop.0+0x53c>
	WORD sum = 0;
 800dc02:	9102      	str	r1, [sp, #8]
 800dc04:	f8cd 8014 	str.w	r8, [sp, #20]
 800dc08:	e5be      	b.n	800d788 <scan_files.constprop.0+0x4e8>
				if (IsLower(wc)) {		/* ASCII lower case? */
 800dc0a:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 800dc0e:	f1bc 0f19 	cmp.w	ip, #25
					b |= 1; wc -= 0x20;
 800dc12:	bf9c      	itt	ls
 800dc14:	3b20      	subls	r3, #32
 800dc16:	f042 0201 	orrls.w	r2, r2, #1
		dp->fn[i++] = (BYTE)wc;
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	e464      	b.n	800d4e8 <scan_files.constprop.0+0x248>
	if (hs != 0) di = 0;					/* Broken surrogate pair? */
 800dc1e:	462a      	mov	r2, r5
 800dc20:	4673      	mov	r3, lr
 800dc22:	4655      	mov	r5, sl
 800dc24:	f8dd a008 	ldr.w	sl, [sp, #8]
 800dc28:	2a00      	cmp	r2, #0
 800dc2a:	f47f af7f 	bne.w	800db2c <scan_files.constprop.0+0x88c>
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f47f af7f 	bne.w	800db32 <scan_files.constprop.0+0x892>
 800dc34:	e77a      	b.n	800db2c <scan_files.constprop.0+0x88c>
 800dc36:	9804      	ldr	r0, [sp, #16]
 800dc38:	f7f7 fc92 	bl	8005560 <chHeapFree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800dc3c:	2f04      	cmp	r7, #4
 800dc3e:	f47f ab3c 	bne.w	800d2ba <scan_files.constprop.0+0x1a>
 800dc42:	e73c      	b.n	800dabe <scan_files.constprop.0+0x81e>
 800dc44:	08012f80 	.word	0x08012f80
 800dc48:	20002365 	.word	0x20002365
 800dc4c:	00000000 	.word	0x00000000

0800dc50 <cmd_tree>:
  if (argc > 0) {
 800dc50:	2900      	cmp	r1, #0
 800dc52:	dc17      	bgt.n	800dc84 <cmd_tree+0x34>
  if (!fs_ready) {
 800dc54:	4b59      	ldr	r3, [pc, #356]	; (800ddbc <cmd_tree+0x16c>)
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	b18b      	cbz	r3, 800dc7e <cmd_tree+0x2e>
static void cmd_tree(BaseSequentialStream *chp, int argc, char *argv[]) {
 800dc5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc5e:	4b58      	ldr	r3, [pc, #352]	; (800ddc0 <cmd_tree+0x170>)
 800dc60:	b091      	sub	sp, #68	; 0x44
 800dc62:	4606      	mov	r6, r0
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 800dc64:	a902      	add	r1, sp, #8
 800dc66:	a803      	add	r0, sp, #12
 800dc68:	9303      	str	r3, [sp, #12]
 800dc6a:	f7ff f911 	bl	800ce90 <mount_volume.constprop.0>
	if (res == FR_OK) {
 800dc6e:	b160      	cbz	r0, 800dc8a <cmd_tree+0x3a>
    chprintf(chp, "FS: f_getfree() failed\r\n");
 800dc70:	4630      	mov	r0, r6
 800dc72:	4954      	ldr	r1, [pc, #336]	; (800ddc4 <cmd_tree+0x174>)
 800dc74:	f7f8 facc 	bl	8006210 <chprintf>
}
 800dc78:	b011      	add	sp, #68	; 0x44
 800dc7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    chprintf(chp, "File System not mounted\r\n");
 800dc7e:	4952      	ldr	r1, [pc, #328]	; (800ddc8 <cmd_tree+0x178>)
 800dc80:	f7f8 bac6 	b.w	8006210 <chprintf>
    chprintf(chp, "Usage: tree\r\n");
 800dc84:	4951      	ldr	r1, [pc, #324]	; (800ddcc <cmd_tree+0x17c>)
 800dc86:	f7f8 bac3 	b.w	8006210 <chprintf>
		*fatfs = fs;				/* Return ptr to the fs object */
 800dc8a:	f8dd 8008 	ldr.w	r8, [sp, #8]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800dc8e:	e9d8 7506 	ldrd	r7, r5, [r8, #24]
 800dc92:	1eac      	subs	r4, r5, #2
 800dc94:	42a7      	cmp	r7, r4
 800dc96:	d92a      	bls.n	800dcee <cmd_tree+0x9e>
			*nclst = fs->free_clst;
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 800dc98:	f898 3000 	ldrb.w	r3, [r8]
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d046      	beq.n	800dd2e <cmd_tree+0xde>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) nfree++;
				} while (++clst < fs->n_fatent);
			} else {
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
 800dca0:	2b04      	cmp	r3, #4
 800dca2:	d060      	beq.n	800dd66 <cmd_tree+0x116>
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
					i = 0;					/* Offset in the sector */
 800dca4:	4604      	mov	r4, r0
					sect = fs->fatbase;		/* Top of the FAT */
 800dca6:	4640      	mov	r0, r8
			nfree = 0;
 800dca8:	4627      	mov	r7, r4
					sect = fs->fatbase;		/* Top of the FAT */
 800dcaa:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
 800dcae:	b954      	cbnz	r4, 800dcc6 <cmd_tree+0x76>
	if (sect != fs->winsect) {	/* Window offset changed? */
 800dcb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
							res = move_window(fs, sect++);
 800dcb2:	f101 0901 	add.w	r9, r1, #1
	if (sect != fs->winsect) {	/* Window offset changed? */
 800dcb6:	4299      	cmp	r1, r3
 800dcb8:	d037      	beq.n	800dd2a <cmd_tree+0xda>
 800dcba:	f7f8 ffd9 	bl	8006c70 <move_window.part.0.lto_priv.0>
							if (res != FR_OK) break;
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d14a      	bne.n	800dd58 <cmd_tree+0x108>
							res = move_window(fs, sect++);
 800dcc2:	4649      	mov	r1, r9
						}
						if (fs->fs_type == FS_FAT16) {
 800dcc4:	9802      	ldr	r0, [sp, #8]
 800dcc6:	7803      	ldrb	r3, [r0, #0]
 800dcc8:	2b02      	cmp	r3, #2
							if (ld_word(fs->win + i) == 0) nfree++;
 800dcca:	eb00 0304 	add.w	r3, r0, r4
						if (fs->fs_type == FS_FAT16) {
 800dcce:	d027      	beq.n	800dd20 <cmd_tree+0xd0>
	rv = rv << 8 | ptr[0];
 800dcd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
							i += 2;
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
							i += 4;
 800dcd2:	3404      	adds	r4, #4
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 800dcd4:	f033 4370 	bics.w	r3, r3, #4026531840	; 0xf0000000
 800dcd8:	bf08      	it	eq
 800dcda:	3701      	addeq	r7, #1
						}
						i %= SS(fs);
					} while (--clst);
 800dcdc:	3d01      	subs	r5, #1
						i %= SS(fs);
 800dcde:	f3c4 0408 	ubfx	r4, r4, #0, #9
					} while (--clst);
 800dce2:	d1e4      	bne.n	800dcae <cmd_tree+0x5e>
				}
			}
			*nclst = nfree;			/* Return the free clusters */
			fs->free_clst = nfree;	/* Now free_clst is valid */
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 800dce4:	7903      	ldrb	r3, [r0, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800dce6:	6187      	str	r7, [r0, #24]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 800dce8:	f043 0301 	orr.w	r3, r3, #1
 800dcec:	7103      	strb	r3, [r0, #4]
  chprintf(chp,
 800dcee:	2400      	movs	r4, #0
  chprintf(chp,
 800dcf0:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800dcf4:	463a      	mov	r2, r7
 800dcf6:	0258      	lsls	r0, r3, #9
 800dcf8:	9000      	str	r0, [sp, #0]
 800dcfa:	4935      	ldr	r1, [pc, #212]	; (800ddd0 <cmd_tree+0x180>)
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	f7f8 fa87 	bl	8006210 <chprintf>
  chprintf(chp,
 800dd02:	4623      	mov	r3, r4
 800dd04:	4622      	mov	r2, r4
 800dd06:	4933      	ldr	r1, [pc, #204]	; (800ddd4 <cmd_tree+0x184>)
 800dd08:	4630      	mov	r0, r6
 800dd0a:	9400      	str	r4, [sp, #0]
 800dd0c:	f7f8 fa80 	bl	8006210 <chprintf>
  fbuff[0] = 0;
 800dd10:	4b31      	ldr	r3, [pc, #196]	; (800ddd8 <cmd_tree+0x188>)
  scan_files(chp, (char *)fbuff);
 800dd12:	4630      	mov	r0, r6
  fbuff[0] = 0;
 800dd14:	701c      	strb	r4, [r3, #0]
  scan_files(chp, (char *)fbuff);
 800dd16:	f7ff fac3 	bl	800d2a0 <scan_files.constprop.0>
}
 800dd1a:	b011      	add	sp, #68	; 0x44
 800dd1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
							if (ld_word(fs->win + i) == 0) nfree++;
 800dd20:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dd22:	b903      	cbnz	r3, 800dd26 <cmd_tree+0xd6>
 800dd24:	3701      	adds	r7, #1
							i += 2;
 800dd26:	3402      	adds	r4, #2
 800dd28:	e7d8      	b.n	800dcdc <cmd_tree+0x8c>
							res = move_window(fs, sect++);
 800dd2a:	4649      	mov	r1, r9
 800dd2c:	e7cb      	b.n	800dcc6 <cmd_tree+0x76>
				clst = 2; obj.fs = fs;
 800dd2e:	2402      	movs	r4, #2
			nfree = 0;
 800dd30:	4607      	mov	r7, r0
				clst = 2; obj.fs = fs;
 800dd32:	f8cd 8010 	str.w	r8, [sp, #16]
 800dd36:	e007      	b.n	800dd48 <cmd_tree+0xf8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800dd38:	2801      	cmp	r0, #1
 800dd3a:	d00d      	beq.n	800dd58 <cmd_tree+0x108>
					if (stat == 0) nfree++;
 800dd3c:	b900      	cbnz	r0, 800dd40 <cmd_tree+0xf0>
 800dd3e:	3701      	adds	r7, #1
				} while (++clst < fs->n_fatent);
 800dd40:	9802      	ldr	r0, [sp, #8]
 800dd42:	69c3      	ldr	r3, [r0, #28]
 800dd44:	429c      	cmp	r4, r3
 800dd46:	d2cd      	bcs.n	800dce4 <cmd_tree+0x94>
					stat = get_fat(&obj, clst);
 800dd48:	4621      	mov	r1, r4
 800dd4a:	a804      	add	r0, sp, #16
 800dd4c:	f7f8 ffd8 	bl	8006d00 <get_fat.lto_priv.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800dd50:	1c43      	adds	r3, r0, #1
				} while (++clst < fs->n_fatent);
 800dd52:	f104 0401 	add.w	r4, r4, #1
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800dd56:	d1ef      	bne.n	800dd38 <cmd_tree+0xe8>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800dd58:	9b02      	ldr	r3, [sp, #8]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 800dd5a:	791a      	ldrb	r2, [r3, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800dd5c:	619f      	str	r7, [r3, #24]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 800dd5e:	f042 0201 	orr.w	r2, r2, #1
 800dd62:	711a      	strb	r2, [r3, #4]
  if (err != FR_OK) {
 800dd64:	e784      	b.n	800dc70 <cmd_tree+0x20>
					i = 0;						/* Offset in the sector */
 800dd66:	4605      	mov	r5, r0
					sect = fs->bitbase;			/* Bitmap sector */
 800dd68:	4640      	mov	r0, r8
			nfree = 0;
 800dd6a:	462f      	mov	r7, r5
					sect = fs->bitbase;			/* Bitmap sector */
 800dd6c:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
						if (i == 0) {
 800dd70:	b955      	cbnz	r5, 800dd88 <cmd_tree+0x138>
	if (sect != fs->winsect) {	/* Window offset changed? */
 800dd72:	6b83      	ldr	r3, [r0, #56]	; 0x38
							res = move_window(fs, sect++);
 800dd74:	f101 0901 	add.w	r9, r1, #1
	if (sect != fs->winsect) {	/* Window offset changed? */
 800dd78:	4299      	cmp	r1, r3
 800dd7a:	d01c      	beq.n	800ddb6 <cmd_tree+0x166>
 800dd7c:	f7f8 ff78 	bl	8006c70 <move_window.part.0.lto_priv.0>
							if (res != FR_OK) break;
 800dd80:	2800      	cmp	r0, #0
 800dd82:	d1e9      	bne.n	800dd58 <cmd_tree+0x108>
							res = move_window(fs, sect++);
 800dd84:	4649      	mov	r1, r9
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800dd86:	9802      	ldr	r0, [sp, #8]
 800dd88:	1943      	adds	r3, r0, r5
 800dd8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd8e:	f1a4 0208 	sub.w	r2, r4, #8
 800dd92:	2c00      	cmp	r4, #0
 800dd94:	d0a6      	beq.n	800dce4 <cmd_tree+0x94>
							if (!(bm & 1)) nfree++;
 800dd96:	f013 0f01 	tst.w	r3, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800dd9a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
							if (!(bm & 1)) nfree++;
 800dd9e:	bf08      	it	eq
 800dda0:	3701      	addeq	r7, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800dda2:	4294      	cmp	r4, r2
							bm >>= 1;
 800dda4:	ea4f 0353 	mov.w	r3, r3, lsr #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800dda8:	d1f3      	bne.n	800dd92 <cmd_tree+0x142>
						i = (i + 1) % SS(fs);
 800ddaa:	3501      	adds	r5, #1
 800ddac:	f3c5 0508 	ubfx	r5, r5, #0, #9
					} while (clst);
 800ddb0:	2c00      	cmp	r4, #0
 800ddb2:	d1dd      	bne.n	800dd70 <cmd_tree+0x120>
 800ddb4:	e796      	b.n	800dce4 <cmd_tree+0x94>
							res = move_window(fs, sect++);
 800ddb6:	4649      	mov	r1, r9
 800ddb8:	e7e6      	b.n	800dd88 <cmd_tree+0x138>
 800ddba:	bf00      	nop
 800ddbc:	20002478 	.word	0x20002478
 800ddc0:	08012b68 	.word	0x08012b68
 800ddc4:	08012bb4 	.word	0x08012bb4
 800ddc8:	08012b98 	.word	0x08012b98
 800ddcc:	08012b88 	.word	0x08012b88
 800ddd0:	08012bd0 	.word	0x08012bd0
 800ddd4:	08012c14 	.word	0x08012c14
 800ddd8:	20001f58 	.word	0x20001f58
 800dddc:	00000000 	.word	0x00000000

0800dde0 <chThdCreateFromMemoryPool.constprop.0>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 800dde0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dde4:	2320      	movs	r3, #32
 800dde6:	4607      	mov	r7, r0
 800dde8:	460e      	mov	r6, r1
 800ddea:	4615      	mov	r5, r2
 800ddec:	b087      	sub	sp, #28
 800ddee:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800ddf2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800de60 <chThdCreateFromMemoryPool.constprop.0+0x80>
 800ddf6:	f8d8 4000 	ldr.w	r4, [r8]
  if (objp != NULL) {
 800ddfa:	b334      	cbz	r4, 800de4a <chThdCreateFromMemoryPool.constprop.0+0x6a>
    mp->next = mp->next->next;
 800ddfc:	6823      	ldr	r3, [r4, #0]
 800ddfe:	f8c8 3000 	str.w	r3, [r8]
 800de02:	f04f 0900 	mov.w	r9, #0
 800de06:	f389 8811 	msr	BASEPRI, r9
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
  if (wsp == NULL) {
 800de0a:	b1d4      	cbz	r4, 800de42 <chThdCreateFromMemoryPool.constprop.0+0x62>
    return NULL;
  }

  thread_descriptor_t td = THD_DESCRIPTOR(name, wsp,
 800de0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800de10:	4b14      	ldr	r3, [pc, #80]	; (800de64 <chThdCreateFromMemoryPool.constprop.0+0x84>)
 800de12:	4420      	add	r0, r4
 800de14:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800de18:	9700      	str	r7, [sp, #0]
 800de1a:	9603      	str	r6, [sp, #12]
 800de1c:	9401      	str	r4, [sp, #4]
 800de1e:	2320      	movs	r3, #32
 800de20:	9002      	str	r0, [sp, #8]
 800de22:	f383 8811 	msr	BASEPRI, r3
                (uint8_t *)wsp + mp->object_size,
                CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800de26:	4668      	mov	r0, sp
 800de28:	f7f6 fa7a 	bl	8004320 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 800de2c:	2302      	movs	r3, #2
  tp->mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 800de2e:	4649      	mov	r1, r9
  tp->flags = CH_FLAG_MODE_MPOOL;
 800de30:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tp->mpool = mp;
 800de34:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
  tp = chThdCreateSuspendedI(&td);
 800de38:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800de3a:	f7f6 f941 	bl	80040c0 <chSchWakeupS>
 800de3e:	f389 8811 	msr	BASEPRI, r9
  chSysUnlock();

  return tp;
}
 800de42:	4620      	mov	r0, r4
 800de44:	b007      	add	sp, #28
 800de46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (mp->provider != NULL) {
 800de4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de4e:	b123      	cbz	r3, 800de5a <chThdCreateFromMemoryPool.constprop.0+0x7a>
    objp = mp->provider(mp->object_size, mp->align);
 800de50:	e9d8 0101 	ldrd	r0, r1, [r8, #4]
 800de54:	4798      	blx	r3
 800de56:	4604      	mov	r4, r0
 800de58:	e7d3      	b.n	800de02 <chThdCreateFromMemoryPool.constprop.0+0x22>
 800de5a:	f384 8811 	msr	BASEPRI, r4
 800de5e:	e7f0      	b.n	800de42 <chThdCreateFromMemoryPool.constprop.0+0x62>
 800de60:	20001244 	.word	0x20001244
 800de64:	08000fb1 	.word	0x08000fb1
	...

0800de70 <chEvtWaitOneTimeout.constprop.0>:
  return __sch_get_currthread();
 800de70:	4a11      	ldr	r2, [pc, #68]	; (800deb8 <chEvtWaitOneTimeout.constprop.0+0x48>)
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 800de72:	b538      	push	{r3, r4, r5, lr}
 800de74:	2320      	movs	r3, #32
 800de76:	68d5      	ldr	r5, [r2, #12]
 800de78:	f383 8811 	msr	BASEPRI, r3
  m = currtp->epending & events;
 800de7c:	6bac      	ldr	r4, [r5, #56]	; 0x38
  if (m == (eventmask_t)0) {
 800de7e:	b96c      	cbnz	r4, 800de9c <chEvtWaitOneTimeout.constprop.0+0x2c>
    if (TIME_IMMEDIATE == timeout) {
 800de80:	b910      	cbnz	r0, 800de88 <chEvtWaitOneTimeout.constprop.0+0x18>
 800de82:	f380 8811 	msr	BASEPRI, r0
}
 800de86:	bd38      	pop	{r3, r4, r5, pc}
    currtp->u.ewmask = events;
 800de88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 800de8c:	4601      	mov	r1, r0
    currtp->u.ewmask = events;
 800de8e:	62ab      	str	r3, [r5, #40]	; 0x28
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 800de90:	200a      	movs	r0, #10
 800de92:	f7f4 fe7d 	bl	8002b90 <chSchGoSleepTimeoutS>
 800de96:	2800      	cmp	r0, #0
 800de98:	db09      	blt.n	800deae <chEvtWaitOneTimeout.constprop.0+0x3e>
    m = currtp->epending & events;
 800de9a:	6bac      	ldr	r4, [r5, #56]	; 0x38
  m ^= m & (m - (eventmask_t)1);
 800de9c:	4260      	negs	r0, r4
  currtp->epending &= ~m;
 800de9e:	ea24 0300 	bic.w	r3, r4, r0
 800dea2:	63ab      	str	r3, [r5, #56]	; 0x38
  m ^= m & (m - (eventmask_t)1);
 800dea4:	4020      	ands	r0, r4
 800dea6:	2300      	movs	r3, #0
 800dea8:	f383 8811 	msr	BASEPRI, r3
}
 800deac:	bd38      	pop	{r3, r4, r5, pc}
 800deae:	f384 8811 	msr	BASEPRI, r4
      return (eventmask_t)0;
 800deb2:	4620      	mov	r0, r4
}
 800deb4:	bd38      	pop	{r3, r4, r5, pc}
 800deb6:	bf00      	nop
 800deb8:	20001050 	.word	0x20001050
 800debc:	00000000 	.word	0x00000000

0800dec0 <chEvtWaitOne.constprop.0>:
eventmask_t chEvtWaitOne(eventmask_t events) {
 800dec0:	b538      	push	{r3, r4, r5, lr}
 800dec2:	4b12      	ldr	r3, [pc, #72]	; (800df0c <chEvtWaitOne.constprop.0+0x4c>)
 800dec4:	2220      	movs	r2, #32
 800dec6:	68dc      	ldr	r4, [r3, #12]
 800dec8:	f382 8811 	msr	BASEPRI, r2
  m = currtp->epending & events;
 800decc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if (m == (eventmask_t)0) {
 800dece:	b140      	cbz	r0, 800dee2 <chEvtWaitOne.constprop.0+0x22>
  m ^= m & (m - (eventmask_t)1);
 800ded0:	4243      	negs	r3, r0
  currtp->epending &= ~m;
 800ded2:	ea20 0203 	bic.w	r2, r0, r3
 800ded6:	63a2      	str	r2, [r4, #56]	; 0x38
  m ^= m & (m - (eventmask_t)1);
 800ded8:	4018      	ands	r0, r3
 800deda:	2300      	movs	r3, #0
 800dedc:	f383 8811 	msr	BASEPRI, r3
}
 800dee0:	bd38      	pop	{r3, r4, r5, pc}
  otp->state = newstate;
 800dee2:	220a      	movs	r2, #10
    currtp->u.ewmask = events;
 800dee4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  ntp->state = CH_STATE_CURRENT;
 800dee8:	f04f 0c01 	mov.w	ip, #1
  thread_t *otp = __instance_get_currthread(oip);
 800deec:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 800deee:	6818      	ldr	r0, [r3, #0]
 800def0:	62a5      	str	r5, [r4, #40]	; 0x28
  otp->state = newstate;
 800def2:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800def6:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 800def8:	6053      	str	r3, [r2, #4]
  pqp->next       = p->next;
 800defa:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 800defc:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 800df00:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 800df02:	f7f2 f99d 	bl	8000240 <__port_switch>
    m = currtp->epending & events;
 800df06:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800df08:	e7e2      	b.n	800ded0 <chEvtWaitOne.constprop.0+0x10>
 800df0a:	bf00      	nop
 800df0c:	20001050 	.word	0x20001050

0800df10 <chSemResetWithMessage.constprop.0>:
void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg) {
 800df10:	b538      	push	{r3, r4, r5, lr}
 800df12:	2320      	movs	r3, #32
 800df14:	f383 8811 	msr	BASEPRI, r3
  while (ch_queue_notempty(&sp->queue)) {
 800df18:	6803      	ldr	r3, [r0, #0]
  sp->cnt = n;
 800df1a:	6081      	str	r1, [r0, #8]
  while (ch_queue_notempty(&sp->queue)) {
 800df1c:	4298      	cmp	r0, r3
 800df1e:	d018      	beq.n	800df52 <chSemResetWithMessage.constprop.0+0x42>
  tp->state = CH_STATE_READY;
 800df20:	f04f 0c00 	mov.w	ip, #0
    chSchReadyI((thread_t *)ch_queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 800df24:	f06f 0501 	mvn.w	r5, #1
  ch_queue_t *p = qp->prev;
 800df28:	6843      	ldr	r3, [r0, #4]
  qp->prev       = p->prev;
 800df2a:	6859      	ldr	r1, [r3, #4]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800df2c:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800df2e:	689c      	ldr	r4, [r3, #8]
  qp->prev       = p->prev;
 800df30:	6041      	str	r1, [r0, #4]
  qp->prev->next = qp;
 800df32:	6008      	str	r0, [r1, #0]
  tp->state = CH_STATE_READY;
 800df34:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
    pqp = pqp->next;
 800df38:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800df3a:	6891      	ldr	r1, [r2, #8]
 800df3c:	42a1      	cmp	r1, r4
 800df3e:	d2fb      	bcs.n	800df38 <chSemResetWithMessage.constprop.0+0x28>
  while (ch_queue_notempty(&sp->queue)) {
 800df40:	6804      	ldr	r4, [r0, #0]
  p->prev       = pqp->prev;
 800df42:	6851      	ldr	r1, [r2, #4]
 800df44:	42a0      	cmp	r0, r4
 800df46:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 800df4a:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800df4c:	6053      	str	r3, [r2, #4]
    chSchReadyI((thread_t *)ch_queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 800df4e:	629d      	str	r5, [r3, #40]	; 0x28
  while (ch_queue_notempty(&sp->queue)) {
 800df50:	d1ea      	bne.n	800df28 <chSemResetWithMessage.constprop.0+0x18>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800df52:	4b06      	ldr	r3, [pc, #24]	; (800df6c <chSemResetWithMessage.constprop.0+0x5c>)
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	6892      	ldr	r2, [r2, #8]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d901      	bls.n	800df64 <chSemResetWithMessage.constprop.0+0x54>
    __sch_reschedule_ahead();
 800df60:	f7f5 fe2e 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800df64:	2300      	movs	r3, #0
 800df66:	f383 8811 	msr	BASEPRI, r3
}
 800df6a:	bd38      	pop	{r3, r4, r5, pc}
 800df6c:	20001050 	.word	0x20001050

0800df70 <chThdCreateStatic.constprop.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 800df70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df72:	2520      	movs	r5, #32
 800df74:	4604      	mov	r4, r0
 800df76:	f385 8811 	msr	BASEPRI, r5
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800df7a:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
 800df7e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  tp->state             = CH_STATE_WTSTART;
 800df82:	2002      	movs	r0, #2
  tp->refs              = (trefs_t)1;
 800df84:	2301      	movs	r3, #1
  tp->mtxlist           = NULL;
 800df86:	2500      	movs	r5, #0
  tp->owner             = oip;
 800df88:	4a1a      	ldr	r2, [pc, #104]	; (800dff4 <chThdCreateStatic.constprop.0+0x84>)
  tp->refs              = (trefs_t)1;
 800df8a:	f884 314e 	strb.w	r3, [r4, #334]	; 0x14e
  tp->state             = CH_STATE_WTSTART;
 800df8e:	f8a4 014c 	strh.w	r0, [r4, #332]	; 0x14c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800df92:	f504 7782 	add.w	r7, r4, #260	; 0x104
  p->prev       = qp->prev;
 800df96:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800df98:	4e17      	ldr	r6, [pc, #92]	; (800dff8 <chThdCreateStatic.constprop.0+0x88>)
  tp->name              = name;
 800df9a:	4b18      	ldr	r3, [pc, #96]	; (800dffc <chThdCreateStatic.constprop.0+0x8c>)
  tp->hdr.pqueue.prio   = prio;
 800df9c:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
  tp->realprio          = prio;
 800dfa0:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800dfa4:	f8c4 7134 	str.w	r7, [r4, #308]	; 0x134
  REG_INSERT(oip, tp);
 800dfa8:	f504 719c 	add.w	r1, r4, #312	; 0x138
  p->next       = qp;
 800dfac:	f102 0728 	add.w	r7, r2, #40	; 0x28
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800dfb0:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
  tp->owner             = oip;
 800dfb4:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
  p->prev       = qp->prev;
 800dfb8:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
  tp->name              = name;
 800dfbc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  tp->epending          = (eventmask_t)0;
 800dfc0:	e9c4 5558 	strd	r5, r5, [r4, #352]	; 0x160
  tp->wabase = (stkalign_t *)wsp;
 800dfc4:	f8c4 4148 	str.w	r4, [r4, #328]	; 0x148
  ch_queue_init(&tp->msgqueue);
 800dfc8:	f504 73ac 	add.w	r3, r4, #344	; 0x158
  p->next       = qp;
 800dfcc:	f8c4 7138 	str.w	r7, [r4, #312]	; 0x138
  tp = (thread_t *)((uint8_t *)wsp + size -
 800dfd0:	f504 7694 	add.w	r6, r4, #296	; 0x128
  p->prev->next = p;
 800dfd4:	6001      	str	r1, [r0, #0]
  qp->prev      = p;
 800dfd6:	62d1      	str	r1, [r2, #44]	; 0x2c
  ch_list_init(&tp->waiting);
 800dfd8:	f504 72aa 	add.w	r2, r4, #340	; 0x154
  chSchWakeupS(tp, MSG_OK);
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4630      	mov	r0, r6
  qp->prev = qp;
 800dfe0:	e9c4 3356 	strd	r3, r3, [r4, #344]	; 0x158
  lp->next = lp;
 800dfe4:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
 800dfe8:	f7f6 f86a 	bl	80040c0 <chSchWakeupS>
 800dfec:	f385 8811 	msr	BASEPRI, r5
}
 800dff0:	4630      	mov	r0, r6
 800dff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dff4:	20001050 	.word	0x20001050
 800dff8:	08000251 	.word	0x08000251
 800dffc:	08012c3c 	.word	0x08012c3c

0800e000 <rt_test_012_004_execute.lto_priv.0>:
static void rt_test_012_004_execute(void) {
 800e000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 800e004:	2501      	movs	r5, #1
 800e006:	4b36      	ldr	r3, [pc, #216]	; (800e0e0 <rt_test_012_004_execute.lto_priv.0+0xe0>)
 800e008:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e0e4 <rt_test_012_004_execute.lto_priv.0+0xe4>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800e00c:	68da      	ldr	r2, [r3, #12]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800e00e:	4836      	ldr	r0, [pc, #216]	; (800e0e8 <rt_test_012_004_execute.lto_priv.0+0xe8>)
 800e010:	6891      	ldr	r1, [r2, #8]
 800e012:	2300      	movs	r3, #0
 800e014:	4a35      	ldr	r2, [pc, #212]	; (800e0ec <rt_test_012_004_execute.lto_priv.0+0xec>)
 800e016:	4429      	add	r1, r5
  test_set_step(1);
 800e018:	f8ca 5000 	str.w	r5, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800e01c:	f7ff ffa8 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800e020:	2202      	movs	r2, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800e022:	4b33      	ldr	r3, [pc, #204]	; (800e0f0 <rt_test_012_004_execute.lto_priv.0+0xf0>)
 800e024:	2620      	movs	r6, #32
  test_set_step(2);
 800e026:	f8ca 2000 	str.w	r2, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800e02a:	4604      	mov	r4, r0
 800e02c:	6018      	str	r0, [r3, #0]
 800e02e:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800e032:	2008      	movs	r0, #8
 800e034:	4629      	mov	r1, r5
 800e036:	f7f4 fdab 	bl	8002b90 <chSchGoSleepTimeoutS>
 800e03a:	2500      	movs	r5, #0
 800e03c:	f385 8811 	msr	BASEPRI, r5
 800e040:	f386 8811 	msr	BASEPRI, r6
 800e044:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 800e048:	f8d9 7024 	ldr.w	r7, [r9, #36]	; 0x24
 800e04c:	b2bf      	uxth	r7, r7
 800e04e:	f385 8811 	msr	BASEPRI, r5
      chSchWakeupS(tp, MSG_OK);
 800e052:	46a8      	mov	r8, r5
 800e054:	f386 8811 	msr	BASEPRI, r6
 800e058:	2100      	movs	r1, #0
 800e05a:	4620      	mov	r0, r4
 800e05c:	f7f6 f830 	bl	80040c0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800e060:	4620      	mov	r0, r4
 800e062:	2100      	movs	r1, #0
 800e064:	f7f6 f82c 	bl	80040c0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800e068:	4620      	mov	r0, r4
 800e06a:	2100      	movs	r1, #0
 800e06c:	f7f6 f828 	bl	80040c0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800e070:	2100      	movs	r1, #0
 800e072:	4620      	mov	r0, r4
 800e074:	f7f6 f824 	bl	80040c0 <chSchWakeupS>
 800e078:	f388 8811 	msr	BASEPRI, r8
 800e07c:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
      n += 4;
 800e080:	3504      	adds	r5, #4
 800e082:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
 800e084:	b29b      	uxth	r3, r3
 800e086:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800e08a:	d3e3      	bcc.n	800e054 <rt_test_012_004_execute.lto_priv.0+0x54>
  test_set_step(3);
 800e08c:	2303      	movs	r3, #3
 800e08e:	f8ca 3000 	str.w	r3, [sl]
 800e092:	f386 8811 	msr	BASEPRI, r6
    chSchWakeupS(tp, MSG_TIMEOUT);
 800e096:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e09a:	4620      	mov	r0, r4
 800e09c:	f7f6 f810 	bl	80040c0 <chSchWakeupS>
 800e0a0:	f388 8811 	msr	BASEPRI, r8
      threads[i] = NULL;
 800e0a4:	2700      	movs	r7, #0
 800e0a6:	4c12      	ldr	r4, [pc, #72]	; (800e0f0 <rt_test_012_004_execute.lto_priv.0+0xf0>)
 800e0a8:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 800e0ac:	f854 0b04 	ldr.w	r0, [r4], #4
 800e0b0:	b118      	cbz	r0, 800e0ba <rt_test_012_004_execute.lto_priv.0+0xba>
      chThdWait(threads[i]);
 800e0b2:	f7f7 fac5 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 800e0b6:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800e0ba:	42a6      	cmp	r6, r4
 800e0bc:	d1f6      	bne.n	800e0ac <rt_test_012_004_execute.lto_priv.0+0xac>
  test_set_step(4);
 800e0be:	2304      	movs	r3, #4
  test_printf("%s", msgp);
 800e0c0:	490c      	ldr	r1, [pc, #48]	; (800e0f4 <rt_test_012_004_execute.lto_priv.0+0xf4>)
 800e0c2:	480d      	ldr	r0, [pc, #52]	; (800e0f8 <rt_test_012_004_execute.lto_priv.0+0xf8>)
 800e0c4:	f8ca 3000 	str.w	r3, [sl]
 800e0c8:	f7f9 ffd2 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800e0cc:	0069      	lsls	r1, r5, #1
 800e0ce:	480b      	ldr	r0, [pc, #44]	; (800e0fc <rt_test_012_004_execute.lto_priv.0+0xfc>)
 800e0d0:	f7f9 ffce 	bl	8008070 <test_printf>
}
 800e0d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800e0d8:	4909      	ldr	r1, [pc, #36]	; (800e100 <rt_test_012_004_execute.lto_priv.0+0x100>)
 800e0da:	480a      	ldr	r0, [pc, #40]	; (800e104 <rt_test_012_004_execute.lto_priv.0+0x104>)
 800e0dc:	f7f9 bfc8 	b.w	8008070 <test_printf>
 800e0e0:	20001050 	.word	0x20001050
 800e0e4:	20001134 	.word	0x20001134
 800e0e8:	20001270 	.word	0x20001270
 800e0ec:	08001551 	.word	0x08001551
 800e0f0:	200019a0 	.word	0x200019a0
 800e0f4:	08010d20 	.word	0x08010d20
 800e0f8:	08010188 	.word	0x08010188
 800e0fc:	08010634 	.word	0x08010634
 800e100:	08010d3c 	.word	0x08010d3c
 800e104:	08012cc0 	.word	0x08012cc0
	...

0800e110 <rt_test_012_005_execute.lto_priv.0>:
  test_set_step(1);
 800e110:	2101      	movs	r1, #1
static void rt_test_012_005_execute(void) {
 800e112:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 800e116:	4b1f      	ldr	r3, [pc, #124]	; (800e194 <rt_test_012_005_execute.lto_priv.0+0x84>)
  test_set_step(1);
 800e118:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800e198 <rt_test_012_005_execute.lto_priv.0+0x88>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	2520      	movs	r5, #32
  tprio_t prio = chThdGetPriorityX() - 1;
 800e120:	689e      	ldr	r6, [r3, #8]
  test_set_step(1);
 800e122:	f8c8 1000 	str.w	r1, [r8]
  tprio_t prio = chThdGetPriorityX() - 1;
 800e126:	3e01      	subs	r6, #1
 800e128:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800e12c:	2008      	movs	r0, #8
 800e12e:	f7f4 fd2f 	bl	8002b90 <chSchGoSleepTimeoutS>
 800e132:	2400      	movs	r4, #0
 800e134:	f384 8811 	msr	BASEPRI, r4
 800e138:	f385 8811 	msr	BASEPRI, r5
 800e13c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e140:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e142:	b2ad      	uxth	r5, r5
 800e144:	f384 8811 	msr	BASEPRI, r4
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800e148:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800e19c <rt_test_012_005_execute.lto_priv.0+0x8c>
 800e14c:	4f14      	ldr	r7, [pc, #80]	; (800e1a0 <rt_test_012_005_execute.lto_priv.0+0x90>)
 800e14e:	2300      	movs	r3, #0
 800e150:	464a      	mov	r2, r9
 800e152:	4631      	mov	r1, r6
 800e154:	4638      	mov	r0, r7
 800e156:	f7ff ff0b 	bl	800df70 <chThdCreateStatic.constprop.0>
 800e15a:	f7f7 fa71 	bl	8005640 <chThdWait>
 800e15e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 800e164:	3401      	adds	r4, #1
 800e166:	1b5b      	subs	r3, r3, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 800e168:	b29b      	uxth	r3, r3
 800e16a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800e16e:	d3ee      	bcc.n	800e14e <rt_test_012_005_execute.lto_priv.0+0x3e>
  test_set_step(2);
 800e170:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 800e172:	490c      	ldr	r1, [pc, #48]	; (800e1a4 <rt_test_012_005_execute.lto_priv.0+0x94>)
 800e174:	480c      	ldr	r0, [pc, #48]	; (800e1a8 <rt_test_012_005_execute.lto_priv.0+0x98>)
 800e176:	f8c8 3000 	str.w	r3, [r8]
 800e17a:	f7f9 ff79 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800e17e:	4621      	mov	r1, r4
 800e180:	480a      	ldr	r0, [pc, #40]	; (800e1ac <rt_test_012_005_execute.lto_priv.0+0x9c>)
 800e182:	f7f9 ff75 	bl	8008070 <test_printf>
}
 800e186:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800e18a:	4909      	ldr	r1, [pc, #36]	; (800e1b0 <rt_test_012_005_execute.lto_priv.0+0xa0>)
 800e18c:	4809      	ldr	r0, [pc, #36]	; (800e1b4 <rt_test_012_005_execute.lto_priv.0+0xa4>)
 800e18e:	f7f9 bf6f 	b.w	8008070 <test_printf>
 800e192:	bf00      	nop
 800e194:	20001050 	.word	0x20001050
 800e198:	20001134 	.word	0x20001134
 800e19c:	080014c1 	.word	0x080014c1
 800e1a0:	20001270 	.word	0x20001270
 800e1a4:	08010d20 	.word	0x08010d20
 800e1a8:	08010188 	.word	0x08010188
 800e1ac:	08010634 	.word	0x08010634
 800e1b0:	08012c44 	.word	0x08012c44
 800e1b4:	08012cc0 	.word	0x08012cc0
	...

0800e1c0 <rt_test_012_006_execute.lto_priv.0>:
  test_set_step(1);
 800e1c0:	2101      	movs	r1, #1
  return __sch_get_currthread();
 800e1c2:	4b29      	ldr	r3, [pc, #164]	; (800e268 <rt_test_012_006_execute.lto_priv.0+0xa8>)
static void rt_test_012_006_execute(void) {
 800e1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 800e1c8:	68db      	ldr	r3, [r3, #12]
  test_set_step(1);
 800e1ca:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 800e26c <rt_test_012_006_execute.lto_priv.0+0xac>
  tprio_t prio = chThdGetPriorityX() + 1;
 800e1ce:	689e      	ldr	r6, [r3, #8]
 800e1d0:	2520      	movs	r5, #32
 800e1d2:	440e      	add	r6, r1
  test_set_step(1);
 800e1d4:	f8ca 1000 	str.w	r1, [sl]
 800e1d8:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800e1dc:	2008      	movs	r0, #8
 800e1de:	f7f4 fcd7 	bl	8002b90 <chSchGoSleepTimeoutS>
 800e1e2:	2400      	movs	r4, #0
 800e1e4:	f384 8811 	msr	BASEPRI, r4
 800e1e8:	f385 8811 	msr	BASEPRI, r5
 800e1ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e1f0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e1f2:	b2ad      	uxth	r5, r5
 800e1f4:	f384 8811 	msr	BASEPRI, r4
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800e1f8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800e270 <rt_test_012_006_execute.lto_priv.0+0xb0>
 800e1fc:	46a1      	mov	r9, r4
 800e1fe:	4f1d      	ldr	r7, [pc, #116]	; (800e274 <rt_test_012_006_execute.lto_priv.0+0xb4>)
 800e200:	e00a      	b.n	800e218 <rt_test_012_006_execute.lto_priv.0+0x58>
 800e202:	f389 8811 	msr	BASEPRI, r9
 800e206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 800e20c:	3401      	adds	r4, #1
 800e20e:	1b5b      	subs	r3, r3, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 800e210:	b29b      	uxth	r3, r3
 800e212:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800e216:	d215      	bcs.n	800e244 <rt_test_012_006_execute.lto_priv.0+0x84>
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800e218:	4642      	mov	r2, r8
 800e21a:	2300      	movs	r3, #0
 800e21c:	4631      	mov	r1, r6
 800e21e:	4638      	mov	r0, r7
 800e220:	f7ff fea6 	bl	800df70 <chThdCreateStatic.constprop.0>
 800e224:	2220      	movs	r2, #32
 800e226:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 800e22a:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800e22e:	3a01      	subs	r2, #1
 800e230:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 800e234:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e236:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800e23a:	2b0f      	cmp	r3, #15
 800e23c:	d1e1      	bne.n	800e202 <rt_test_012_006_execute.lto_priv.0+0x42>
 800e23e:	f7f7 f9df 	bl	8005600 <chThdRelease.part.0>
 800e242:	e7e0      	b.n	800e206 <rt_test_012_006_execute.lto_priv.0+0x46>
  test_set_step(2);
 800e244:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 800e246:	490c      	ldr	r1, [pc, #48]	; (800e278 <rt_test_012_006_execute.lto_priv.0+0xb8>)
 800e248:	480c      	ldr	r0, [pc, #48]	; (800e27c <rt_test_012_006_execute.lto_priv.0+0xbc>)
 800e24a:	f8ca 3000 	str.w	r3, [sl]
 800e24e:	f7f9 ff0f 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800e252:	4621      	mov	r1, r4
 800e254:	480a      	ldr	r0, [pc, #40]	; (800e280 <rt_test_012_006_execute.lto_priv.0+0xc0>)
 800e256:	f7f9 ff0b 	bl	8008070 <test_printf>
}
 800e25a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800e25e:	4909      	ldr	r1, [pc, #36]	; (800e284 <rt_test_012_006_execute.lto_priv.0+0xc4>)
 800e260:	4809      	ldr	r0, [pc, #36]	; (800e288 <rt_test_012_006_execute.lto_priv.0+0xc8>)
 800e262:	f7f9 bf05 	b.w	8008070 <test_printf>
 800e266:	bf00      	nop
 800e268:	20001050 	.word	0x20001050
 800e26c:	20001134 	.word	0x20001134
 800e270:	080014c1 	.word	0x080014c1
 800e274:	20001270 	.word	0x20001270
 800e278:	08010d20 	.word	0x08010d20
 800e27c:	08010188 	.word	0x08010188
 800e280:	08010634 	.word	0x08010634
 800e284:	08012c44 	.word	0x08012c44
 800e288:	08012cc0 	.word	0x08012cc0
 800e28c:	00000000 	.word	0x00000000

0800e290 <rt_test_012_007_execute.lto_priv.0>:
static void rt_test_012_007_execute(void) {
 800e290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800e294:	f04f 0801 	mov.w	r8, #1
  return __sch_get_currthread();
 800e298:	4d49      	ldr	r5, [pc, #292]	; (800e3c0 <rt_test_012_007_execute.lto_priv.0+0x130>)
 800e29a:	4e4a      	ldr	r6, [pc, #296]	; (800e3c4 <rt_test_012_007_execute.lto_priv.0+0x134>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800e29c:	68ea      	ldr	r2, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800e29e:	2300      	movs	r3, #0
 800e2a0:	6891      	ldr	r1, [r2, #8]
 800e2a2:	4849      	ldr	r0, [pc, #292]	; (800e3c8 <rt_test_012_007_execute.lto_priv.0+0x138>)
 800e2a4:	4a49      	ldr	r2, [pc, #292]	; (800e3cc <rt_test_012_007_execute.lto_priv.0+0x13c>)
 800e2a6:	3105      	adds	r1, #5
  test_set_step(1);
 800e2a8:	f8c6 8000 	str.w	r8, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800e2ac:	f7ff fe60 	bl	800df70 <chThdCreateStatic.constprop.0>
 800e2b0:	68eb      	ldr	r3, [r5, #12]
 800e2b2:	4c47      	ldr	r4, [pc, #284]	; (800e3d0 <rt_test_012_007_execute.lto_priv.0+0x140>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800e2b4:	6899      	ldr	r1, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800e2b6:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	4a44      	ldr	r2, [pc, #272]	; (800e3cc <rt_test_012_007_execute.lto_priv.0+0x13c>)
 800e2bc:	3104      	adds	r1, #4
 800e2be:	4845      	ldr	r0, [pc, #276]	; (800e3d4 <rt_test_012_007_execute.lto_priv.0+0x144>)
 800e2c0:	f7ff fe56 	bl	800df70 <chThdCreateStatic.constprop.0>
 800e2c4:	68eb      	ldr	r3, [r5, #12]
 800e2c6:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 800e2c8:	6899      	ldr	r1, [r3, #8]
 800e2ca:	4a40      	ldr	r2, [pc, #256]	; (800e3cc <rt_test_012_007_execute.lto_priv.0+0x13c>)
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	3103      	adds	r1, #3
 800e2d0:	4841      	ldr	r0, [pc, #260]	; (800e3d8 <rt_test_012_007_execute.lto_priv.0+0x148>)
 800e2d2:	f7ff fe4d 	bl	800df70 <chThdCreateStatic.constprop.0>
 800e2d6:	68eb      	ldr	r3, [r5, #12]
 800e2d8:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800e2da:	6899      	ldr	r1, [r3, #8]
 800e2dc:	4a3b      	ldr	r2, [pc, #236]	; (800e3cc <rt_test_012_007_execute.lto_priv.0+0x13c>)
 800e2de:	2300      	movs	r3, #0
 800e2e0:	3102      	adds	r1, #2
 800e2e2:	483e      	ldr	r0, [pc, #248]	; (800e3dc <rt_test_012_007_execute.lto_priv.0+0x14c>)
 800e2e4:	f7ff fe44 	bl	800df70 <chThdCreateStatic.constprop.0>
 800e2e8:	68eb      	ldr	r3, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800e2ea:	4a38      	ldr	r2, [pc, #224]	; (800e3cc <rt_test_012_007_execute.lto_priv.0+0x13c>)
 800e2ec:	6899      	ldr	r1, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800e2ee:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	4441      	add	r1, r8
 800e2f4:	483a      	ldr	r0, [pc, #232]	; (800e3e0 <rt_test_012_007_execute.lto_priv.0+0x150>)
 800e2f6:	f7ff fe3b 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800e2fa:	2302      	movs	r3, #2
 800e2fc:	2720      	movs	r7, #32
 800e2fe:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800e300:	6120      	str	r0, [r4, #16]
 800e302:	f387 8811 	msr	BASEPRI, r7
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800e306:	2008      	movs	r0, #8
 800e308:	4641      	mov	r1, r8
 800e30a:	f7f4 fc41 	bl	8002b90 <chSchGoSleepTimeoutS>
 800e30e:	2400      	movs	r4, #0
 800e310:	f384 8811 	msr	BASEPRI, r4
 800e314:	f387 8811 	msr	BASEPRI, r7
 800e318:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 800e31c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800e31e:	b2ad      	uxth	r5, r5
 800e320:	f384 8811 	msr	BASEPRI, r4
  chSemResetWithMessage(sp, n, MSG_RESET);
 800e324:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800e3e4 <rt_test_012_007_execute.lto_priv.0+0x154>
 800e328:	2100      	movs	r1, #0
 800e32a:	4640      	mov	r0, r8
 800e32c:	f7ff fdf0 	bl	800df10 <chSemResetWithMessage.constprop.0>
 800e330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      n++;
 800e332:	3401      	adds	r4, #1
 800e334:	1b5b      	subs	r3, r3, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 800e336:	b29b      	uxth	r3, r3
 800e338:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800e33c:	d3f4      	bcc.n	800e328 <rt_test_012_007_execute.lto_priv.0+0x98>
  test_set_step(3);
 800e33e:	4d24      	ldr	r5, [pc, #144]	; (800e3d0 <rt_test_012_007_execute.lto_priv.0+0x140>)
 800e340:	2203      	movs	r2, #3
 800e342:	462b      	mov	r3, r5
 800e344:	f04f 0c20 	mov.w	ip, #32
 800e348:	2000      	movs	r0, #0
 800e34a:	f105 0714 	add.w	r7, r5, #20
 800e34e:	6032      	str	r2, [r6, #0]
    if (threads[i])
 800e350:	f853 2b04 	ldr.w	r2, [r3], #4
 800e354:	b14a      	cbz	r2, 800e36a <rt_test_012_007_execute.lto_priv.0+0xda>
 800e356:	f38c 8811 	msr	BASEPRI, ip
  tp->flags |= CH_FLAG_TERMINATE;
 800e35a:	f892 1025 	ldrb.w	r1, [r2, #37]	; 0x25
 800e35e:	f041 0104 	orr.w	r1, r1, #4
 800e362:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
 800e366:	f380 8811 	msr	BASEPRI, r0
  for (i = 0; i < MAX_THREADS; i++)
 800e36a:	42bb      	cmp	r3, r7
 800e36c:	d1f0      	bne.n	800e350 <rt_test_012_007_execute.lto_priv.0+0xc0>
 800e36e:	2100      	movs	r1, #0
 800e370:	481c      	ldr	r0, [pc, #112]	; (800e3e4 <rt_test_012_007_execute.lto_priv.0+0x154>)
 800e372:	f7ff fdcd 	bl	800df10 <chSemResetWithMessage.constprop.0>
      threads[i] = NULL;
 800e376:	f04f 0800 	mov.w	r8, #0
    if (threads[i] != NULL) {
 800e37a:	f855 0b04 	ldr.w	r0, [r5], #4
 800e37e:	b118      	cbz	r0, 800e388 <rt_test_012_007_execute.lto_priv.0+0xf8>
      chThdWait(threads[i]);
 800e380:	f7f7 f95e 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 800e384:	f845 8c04 	str.w	r8, [r5, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800e388:	42bd      	cmp	r5, r7
 800e38a:	d1f6      	bne.n	800e37a <rt_test_012_007_execute.lto_priv.0+0xea>
  test_set_step(4);
 800e38c:	2304      	movs	r3, #4
  test_printf("%s", msgp);
 800e38e:	4916      	ldr	r1, [pc, #88]	; (800e3e8 <rt_test_012_007_execute.lto_priv.0+0x158>)
 800e390:	4816      	ldr	r0, [pc, #88]	; (800e3ec <rt_test_012_007_execute.lto_priv.0+0x15c>)
 800e392:	6033      	str	r3, [r6, #0]
 800e394:	f7f9 fe6c 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800e398:	4621      	mov	r1, r4
 800e39a:	4815      	ldr	r0, [pc, #84]	; (800e3f0 <rt_test_012_007_execute.lto_priv.0+0x160>)
 800e39c:	f7f9 fe68 	bl	8008070 <test_printf>
    test_printn(n * 6);
 800e3a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  test_printf("%s", msgp);
 800e3a4:	4913      	ldr	r1, [pc, #76]	; (800e3f4 <rt_test_012_007_execute.lto_priv.0+0x164>)
 800e3a6:	4811      	ldr	r0, [pc, #68]	; (800e3ec <rt_test_012_007_execute.lto_priv.0+0x15c>)
 800e3a8:	f7f9 fe62 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800e3ac:	0061      	lsls	r1, r4, #1
 800e3ae:	4810      	ldr	r0, [pc, #64]	; (800e3f0 <rt_test_012_007_execute.lto_priv.0+0x160>)
 800e3b0:	f7f9 fe5e 	bl	8008070 <test_printf>
}
 800e3b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800e3b8:	490f      	ldr	r1, [pc, #60]	; (800e3f8 <rt_test_012_007_execute.lto_priv.0+0x168>)
 800e3ba:	4810      	ldr	r0, [pc, #64]	; (800e3fc <rt_test_012_007_execute.lto_priv.0+0x16c>)
 800e3bc:	f7f9 be58 	b.w	8008070 <test_printf>
 800e3c0:	20001050 	.word	0x20001050
 800e3c4:	20001134 	.word	0x20001134
 800e3c8:	20001270 	.word	0x20001270
 800e3cc:	08001591 	.word	0x08001591
 800e3d0:	200019a0 	.word	0x200019a0
 800e3d4:	200013e0 	.word	0x200013e0
 800e3d8:	20001550 	.word	0x20001550
 800e3dc:	200016c0 	.word	0x200016c0
 800e3e0:	20001830 	.word	0x20001830
 800e3e4:	20001260 	.word	0x20001260
 800e3e8:	08010d20 	.word	0x08010d20
 800e3ec:	08010188 	.word	0x08010188
 800e3f0:	08010634 	.word	0x08010634
 800e3f4:	08012c50 	.word	0x08012c50
 800e3f8:	08010d3c 	.word	0x08010d3c
 800e3fc:	08012cc0 	.word	0x08012cc0

0800e400 <rt_test_012_008_execute.lto_priv.0>:
static void rt_test_012_008_execute(void) {
 800e400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800e404:	2101      	movs	r1, #1
    n = 0;
 800e406:	2600      	movs	r6, #0
  test_set_step(1);
 800e408:	4f3d      	ldr	r7, [pc, #244]	; (800e500 <rt_test_012_008_execute.lto_priv.0+0x100>)
static void rt_test_012_008_execute(void) {
 800e40a:	b082      	sub	sp, #8
 800e40c:	f04f 0820 	mov.w	r8, #32
  test_set_step(1);
 800e410:	6039      	str	r1, [r7, #0]
    n = 0;
 800e412:	9601      	str	r6, [sp, #4]
 800e414:	f388 8811 	msr	BASEPRI, r8
 800e418:	2008      	movs	r0, #8
 800e41a:	f7f4 fbb9 	bl	8002b90 <chSchGoSleepTimeoutS>
 800e41e:	f386 8811 	msr	BASEPRI, r6
 800e422:	f388 8811 	msr	BASEPRI, r8
 800e426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e42c:	f386 8811 	msr	BASEPRI, r6
  return __sch_get_currthread();
 800e430:	4d34      	ldr	r5, [pc, #208]	; (800e504 <rt_test_012_008_execute.lto_priv.0+0x104>)
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800e432:	4a35      	ldr	r2, [pc, #212]	; (800e508 <rt_test_012_008_execute.lto_priv.0+0x108>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800e434:	68eb      	ldr	r3, [r5, #12]
 800e436:	4835      	ldr	r0, [pc, #212]	; (800e50c <rt_test_012_008_execute.lto_priv.0+0x10c>)
 800e438:	6899      	ldr	r1, [r3, #8]
 800e43a:	ab01      	add	r3, sp, #4
 800e43c:	3901      	subs	r1, #1
 800e43e:	f7ff fd97 	bl	800df70 <chThdCreateStatic.constprop.0>
 800e442:	68eb      	ldr	r3, [r5, #12]
 800e444:	4c32      	ldr	r4, [pc, #200]	; (800e510 <rt_test_012_008_execute.lto_priv.0+0x110>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800e446:	6899      	ldr	r1, [r3, #8]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800e448:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800e44a:	ab01      	add	r3, sp, #4
 800e44c:	4a2e      	ldr	r2, [pc, #184]	; (800e508 <rt_test_012_008_execute.lto_priv.0+0x108>)
 800e44e:	3901      	subs	r1, #1
 800e450:	4830      	ldr	r0, [pc, #192]	; (800e514 <rt_test_012_008_execute.lto_priv.0+0x114>)
 800e452:	f7ff fd8d 	bl	800df70 <chThdCreateStatic.constprop.0>
 800e456:	68eb      	ldr	r3, [r5, #12]
 800e458:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800e45a:	6899      	ldr	r1, [r3, #8]
 800e45c:	4a2a      	ldr	r2, [pc, #168]	; (800e508 <rt_test_012_008_execute.lto_priv.0+0x108>)
 800e45e:	ab01      	add	r3, sp, #4
 800e460:	3901      	subs	r1, #1
 800e462:	482d      	ldr	r0, [pc, #180]	; (800e518 <rt_test_012_008_execute.lto_priv.0+0x118>)
 800e464:	f7ff fd84 	bl	800df70 <chThdCreateStatic.constprop.0>
 800e468:	68eb      	ldr	r3, [r5, #12]
 800e46a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800e46c:	6899      	ldr	r1, [r3, #8]
 800e46e:	4a26      	ldr	r2, [pc, #152]	; (800e508 <rt_test_012_008_execute.lto_priv.0+0x108>)
 800e470:	ab01      	add	r3, sp, #4
 800e472:	3901      	subs	r1, #1
 800e474:	4829      	ldr	r0, [pc, #164]	; (800e51c <rt_test_012_008_execute.lto_priv.0+0x11c>)
 800e476:	f7ff fd7b 	bl	800df70 <chThdCreateStatic.constprop.0>
 800e47a:	68ea      	ldr	r2, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800e47c:	ab01      	add	r3, sp, #4
 800e47e:	6891      	ldr	r1, [r2, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800e480:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800e482:	4a21      	ldr	r2, [pc, #132]	; (800e508 <rt_test_012_008_execute.lto_priv.0+0x108>)
 800e484:	3901      	subs	r1, #1
 800e486:	4826      	ldr	r0, [pc, #152]	; (800e520 <rt_test_012_008_execute.lto_priv.0+0x120>)
 800e488:	f7ff fd72 	bl	800df70 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800e48c:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800e48e:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 800e490:	603b      	str	r3, [r7, #0]
 800e492:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800e496:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800e49a:	2008      	movs	r0, #8
 800e49c:	f7f4 fb78 	bl	8002b90 <chSchGoSleepTimeoutS>
 800e4a0:	f386 8811 	msr	BASEPRI, r6
 800e4a4:	4623      	mov	r3, r4
 800e4a6:	f104 0514 	add.w	r5, r4, #20
    if (threads[i])
 800e4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4ae:	b14a      	cbz	r2, 800e4c4 <rt_test_012_008_execute.lto_priv.0+0xc4>
 800e4b0:	f388 8811 	msr	BASEPRI, r8
 800e4b4:	f892 1025 	ldrb.w	r1, [r2, #37]	; 0x25
 800e4b8:	f041 0104 	orr.w	r1, r1, #4
 800e4bc:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
 800e4c0:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MAX_THREADS; i++)
 800e4c4:	42ab      	cmp	r3, r5
 800e4c6:	d1f0      	bne.n	800e4aa <rt_test_012_008_execute.lto_priv.0+0xaa>
      threads[i] = NULL;
 800e4c8:	2600      	movs	r6, #0
    if (threads[i] != NULL) {
 800e4ca:	f854 0b04 	ldr.w	r0, [r4], #4
 800e4ce:	b118      	cbz	r0, 800e4d8 <rt_test_012_008_execute.lto_priv.0+0xd8>
      chThdWait(threads[i]);
 800e4d0:	f7f7 f8b6 	bl	8005640 <chThdWait>
      threads[i] = NULL;
 800e4d4:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800e4d8:	42ac      	cmp	r4, r5
 800e4da:	d1f6      	bne.n	800e4ca <rt_test_012_008_execute.lto_priv.0+0xca>
  test_set_step(3);
 800e4dc:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 800e4de:	4911      	ldr	r1, [pc, #68]	; (800e524 <rt_test_012_008_execute.lto_priv.0+0x124>)
 800e4e0:	4811      	ldr	r0, [pc, #68]	; (800e528 <rt_test_012_008_execute.lto_priv.0+0x128>)
 800e4e2:	603b      	str	r3, [r7, #0]
 800e4e4:	f7f9 fdc4 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800e4e8:	9901      	ldr	r1, [sp, #4]
 800e4ea:	4810      	ldr	r0, [pc, #64]	; (800e52c <rt_test_012_008_execute.lto_priv.0+0x12c>)
 800e4ec:	f7f9 fdc0 	bl	8008070 <test_printf>
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800e4f0:	490f      	ldr	r1, [pc, #60]	; (800e530 <rt_test_012_008_execute.lto_priv.0+0x130>)
 800e4f2:	4810      	ldr	r0, [pc, #64]	; (800e534 <rt_test_012_008_execute.lto_priv.0+0x134>)
 800e4f4:	f7f9 fdbc 	bl	8008070 <test_printf>
}
 800e4f8:	b002      	add	sp, #8
 800e4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4fe:	bf00      	nop
 800e500:	20001134 	.word	0x20001134
 800e504:	20001050 	.word	0x20001050
 800e508:	08001601 	.word	0x08001601
 800e50c:	20001270 	.word	0x20001270
 800e510:	200019a0 	.word	0x200019a0
 800e514:	200013e0 	.word	0x200013e0
 800e518:	20001550 	.word	0x20001550
 800e51c:	200016c0 	.word	0x200016c0
 800e520:	20001830 	.word	0x20001830
 800e524:	08010d20 	.word	0x08010d20
 800e528:	08010188 	.word	0x08010188
 800e52c:	08010634 	.word	0x08010634
 800e530:	08010d3c 	.word	0x08010d3c
 800e534:	08012cc0 	.word	0x08012cc0
	...

0800e540 <vt_enqueue.constprop.0>:
static void vt_enqueue(virtual_timers_list_t *vtlp,
 800e540:	b530      	push	{r4, r5, lr}
  return (bool)(dlhp == dlhp->next);
 800e542:	4d26      	ldr	r5, [pc, #152]	; (800e5dc <vt_enqueue.constprop.0+0x9c>)
 800e544:	462b      	mov	r3, r5
 800e546:	f853 4f10 	ldr.w	r4, [r3, #16]!
    if (ch_dlist_isempty(&vtlp->dlist)) {
 800e54a:	429c      	cmp	r4, r3
 800e54c:	d02e      	beq.n	800e5ac <vt_enqueue.constprop.0+0x6c>
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 800e54e:	f8b5 c01c 	ldrh.w	ip, [r5, #28]
  return (sysinterval_t)((systime_t)(end - start));
 800e552:	eba1 010c 	sub.w	r1, r1, ip
 800e556:	b28b      	uxth	r3, r1
      delta = delay;
 800e558:	18d3      	adds	r3, r2, r3
 800e55a:	bf38      	it	cc
 800e55c:	461a      	movcc	r2, r3
    if (delta < vtlp->dlist.next->delta) {
 800e55e:	68a3      	ldr	r3, [r4, #8]
 800e560:	4293      	cmp	r3, r2
 800e562:	d903      	bls.n	800e56c <vt_enqueue.constprop.0+0x2c>
 800e564:	e011      	b.n	800e58a <vt_enqueue.constprop.0+0x4a>
    dlp = dlp->next;
 800e566:	6824      	ldr	r4, [r4, #0]
    delta -= dlp->delta;
 800e568:	1ad2      	subs	r2, r2, r3
  while (likely(dlp->delta < delta)) {
 800e56a:	68a3      	ldr	r3, [r4, #8]
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d3fa      	bcc.n	800e566 <vt_enqueue.constprop.0+0x26>
  dlp->prev       = dlp->next->prev;
 800e570:	6863      	ldr	r3, [r4, #4]
  dlp->delta      = delta;
 800e572:	6082      	str	r2, [r0, #8]
  dlp->prev       = dlp->next->prev;
 800e574:	e9c0 4300 	strd	r4, r3, [r0]
  dlp->prev->next = dlp;
 800e578:	6018      	str	r0, [r3, #0]
  dlp->delta -= delta;
 800e57a:	68a3      	ldr	r3, [r4, #8]
  dlhp->prev      = dlp;
 800e57c:	6060      	str	r0, [r4, #4]
  dlp->delta -= delta;
 800e57e:	1a9a      	subs	r2, r3, r2
  dlhp->delta = (sysinterval_t)-1;
 800e580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  dlp->delta -= delta;
 800e584:	60a2      	str	r2, [r4, #8]
  dlhp->delta = (sysinterval_t)-1;
 800e586:	61ab      	str	r3, [r5, #24]
}
 800e588:	bd30      	pop	{r4, r5, pc}
  return systime + (systime_t)interval;
 800e58a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e58e:	4291      	cmp	r1, r2
 800e590:	bf28      	it	cs
 800e592:	4611      	movcs	r1, r2
 800e594:	2902      	cmp	r1, #2
 800e596:	bf2c      	ite	cs
 800e598:	448c      	addcs	ip, r1
 800e59a:	f10c 0c02 	addcc.w	ip, ip, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800e59e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 800e5a2:	fa1f f18c 	uxth.w	r1, ip
 800e5a6:	f8ce 1034 	str.w	r1, [lr, #52]	; 0x34
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
}
 800e5aa:	e7df      	b.n	800e56c <vt_enqueue.constprop.0+0x2c>
 800e5ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5b0:	429a      	cmp	r2, r3
  vtlp->lasttime = now;
 800e5b2:	83a9      	strh	r1, [r5, #28]
  dlp->prev       = dlhp;
 800e5b4:	e9c0 4201 	strd	r4, r2, [r0, #4]
  dlp->next       = dlp->prev->next;
 800e5b8:	6004      	str	r4, [r0, #0]
 800e5ba:	bf28      	it	cs
 800e5bc:	461a      	movcs	r2, r3
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800e5be:	2402      	movs	r4, #2
 800e5c0:	42a2      	cmp	r2, r4
 800e5c2:	bf2c      	ite	cs
 800e5c4:	1889      	addcs	r1, r1, r2
 800e5c6:	1909      	addcc	r1, r1, r4
  dlhp->next      = dlp;
 800e5c8:	e9c5 0004 	strd	r0, r0, [r5, #16]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800e5cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 800e5d0:	2500      	movs	r5, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800e5d2:	b289      	uxth	r1, r1
 800e5d4:	6341      	str	r1, [r0, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800e5d6:	6105      	str	r5, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800e5d8:	60c4      	str	r4, [r0, #12]
}
 800e5da:	bd30      	pop	{r4, r5, pc}
 800e5dc:	20001050 	.word	0x20001050

0800e5e0 <main>:
  rccResetAPB1(0xFFFFFFFF);
 800e5e0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e5e4:	2400      	movs	r4, #0
 800e5e6:	4816      	ldr	r0, [pc, #88]	; (800e640 <main+0x60>)
}

/*
 * Application entry point.
 */
int main(void) {
 800e5e8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800e5ec:	6903      	ldr	r3, [r0, #16]
 800e5ee:	6106      	str	r6, [r0, #16]
 800e5f0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800e5f4:	6104      	str	r4, [r0, #16]
 800e5f6:	f8d0 c010 	ldr.w	ip, [r0, #16]
  dma.allocated_mask = 0U;
 800e5fa:	f8df a048 	ldr.w	sl, [pc, #72]	; 800e644 <main+0x64>
  rccResetAPB2(0xFFFFFFFF);
 800e5fe:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800e602:	60c6      	str	r6, [r0, #12]
 800e604:	68c6      	ldr	r6, [r0, #12]
 800e606:	60c4      	str	r4, [r0, #12]
 800e608:	68c6      	ldr	r6, [r0, #12]
  dma.isr_mask       = 0U;
 800e60a:	f8ca 4004 	str.w	r4, [sl, #4]
  rccEnablePWRInterface(true);
 800e60e:	69c6      	ldr	r6, [r0, #28]
  PWR->CR |= PWR_CR_DBP;
 800e610:	4f0d      	ldr	r7, [pc, #52]	; (800e648 <main+0x68>)
  rccEnablePWRInterface(true);
 800e612:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
 800e616:	61c6      	str	r6, [r0, #28]
 800e618:	69c6      	ldr	r6, [r0, #28]
  rccEnableBKPInterface(true);
 800e61a:	69c6      	ldr	r6, [r0, #28]
 800e61c:	4653      	mov	r3, sl
 800e61e:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
 800e622:	61c6      	str	r6, [r0, #28]
 800e624:	69c0      	ldr	r0, [r0, #28]
  PWR->CR |= PWR_CR_DBP;
 800e626:	6838      	ldr	r0, [r7, #0]
 800e628:	4a08      	ldr	r2, [pc, #32]	; (800e64c <main+0x6c>)
 800e62a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800e62e:	6038      	str	r0, [r7, #0]
 800e630:	4907      	ldr	r1, [pc, #28]	; (800e650 <main+0x70>)
 800e632:	b095      	sub	sp, #84	; 0x54
 800e634:	f10a 0560 	add.w	r5, sl, #96	; 0x60
  dma.allocated_mask = 0U;
 800e638:	f8ca 4000 	str.w	r4, [sl]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800e63c:	e00b      	b.n	800e656 <main+0x76>
 800e63e:	bf00      	nop
 800e640:	40021000 	.word	0x40021000
 800e644:	20001178 	.word	0x20001178
 800e648:	40007000 	.word	0x40007000
 800e64c:	080117e4 	.word	0x080117e4
 800e650:	40020008 	.word	0x40020008
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800e654:	6851      	ldr	r1, [r2, #4]
 800e656:	600c      	str	r4, [r1, #0]
    dma.streams[i].func = NULL;
 800e658:	f843 4f08 	str.w	r4, [r3, #8]!
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800e65c:	429d      	cmp	r5, r3
 800e65e:	f102 0210 	add.w	r2, r2, #16
 800e662:	d1f7      	bne.n	800e654 <main+0x74>
  DMA1->IFCR = 0xFFFFFFFFU;
 800e664:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800e668:	2360      	movs	r3, #96	; 0x60
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800e66a:	2540      	movs	r5, #64	; 0x40
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800e66c:	4fc9      	ldr	r7, [pc, #804]	; (800e994 <main+0x3b4>)
 800e66e:	4aca      	ldr	r2, [pc, #808]	; (800e998 <main+0x3b8>)
  DMA2->IFCR = 0xFFFFFFFFU;
 800e670:	4eca      	ldr	r6, [pc, #808]	; (800e99c <main+0x3bc>)
  DMA1->IFCR = 0xFFFFFFFFU;
 800e672:	f8c2 9004 	str.w	r9, [r2, #4]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800e676:	f44f 7100 	mov.w	r1, #512	; 0x200
  DMA2->IFCR = 0xFFFFFFFFU;
 800e67a:	f8c6 9004 	str.w	r9, [r6, #4]
 800e67e:	f44f 7280 	mov.w	r2, #256	; 0x100
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800e682:	f887 3306 	strb.w	r3, [r7, #774]	; 0x306
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800e686:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 800e68a:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
 800e68e:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800e692:	603d      	str	r5, [r7, #0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800e694:	2580      	movs	r5, #128	; 0x80
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800e696:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800e69a:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800e69e:	603d      	str	r5, [r7, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800e6a0:	f887 3308 	strb.w	r3, [r7, #776]	; 0x308
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800e6a4:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800e6a8:	603a      	str	r2, [r7, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800e6aa:	f887 3309 	strb.w	r3, [r7, #777]	; 0x309
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800e6ae:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800e6b2:	6039      	str	r1, [r7, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800e6b4:	f887 330a 	strb.w	r3, [r7, #778]	; 0x30a
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800e6b8:	f8c7 c180 	str.w	ip, [r7, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800e6bc:	f8c7 c000 	str.w	ip, [r7]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800e6c0:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800e6c4:	f8c7 8180 	str.w	r8, [r7, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800e6c8:	f8c7 8000 	str.w	r8, [r7]
#endif

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, true);
 800e6cc:	f108 587e 	add.w	r8, r8, #1065353216	; 0x3f800000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800e6d0:	f887 3328 	strb.w	r3, [r7, #808]	; 0x328
 800e6d4:	f508 3804 	add.w	r8, r8, #135168	; 0x21000
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800e6d8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800e6dc:	607a      	str	r2, [r7, #4]
 800e6de:	f8d8 3018 	ldr.w	r3, [r8, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 800e6e2:	4daf      	ldr	r5, [pc, #700]	; (800e9a0 <main+0x3c0>)
  rccEnableAPB2(APB2_EN_MASK, true);
 800e6e4:	f443 73fe 	orr.w	r3, r3, #508	; 0x1fc
 800e6e8:	f043 0301 	orr.w	r3, r3, #1
 800e6ec:	f8c8 3018 	str.w	r3, [r8, #24]
 800e6f0:	f8d8 3018 	ldr.w	r3, [r8, #24]
  GPIOA->CRH = config->PAData.crh;
 800e6f4:	4bab      	ldr	r3, [pc, #684]	; (800e9a4 <main+0x3c4>)
  GPIOA->ODR = config->PAData.odr;
 800e6f6:	f8c5 900c 	str.w	r9, [r5, #12]
  GPIOA->CRH = config->PAData.crh;
 800e6fa:	606b      	str	r3, [r5, #4]
  GPIOA->CRL = config->PAData.crl;
 800e6fc:	4baa      	ldr	r3, [pc, #680]	; (800e9a8 <main+0x3c8>)
  GPIOB->ODR = config->PBData.odr;
 800e6fe:	49ab      	ldr	r1, [pc, #684]	; (800e9ac <main+0x3cc>)
  GPIOA->CRL = config->PAData.crl;
 800e700:	602b      	str	r3, [r5, #0]
  GPIOB->CRH = config->PBData.crh;
 800e702:	f105 4587 	add.w	r5, r5, #1132462080	; 0x43800000
 800e706:	f505 2523 	add.w	r5, r5, #667648	; 0xa3000
 800e70a:	f205 75b4 	addw	r5, r5, #1972	; 0x7b4
  GPIOB->ODR = config->PBData.odr;
 800e70e:	f8c1 900c 	str.w	r9, [r1, #12]
  GPIOB->CRH = config->PBData.crh;
 800e712:	604d      	str	r5, [r1, #4]
  GPIOB->CRL = config->PBData.crl;
 800e714:	4da6      	ldr	r5, [pc, #664]	; (800e9b0 <main+0x3d0>)
  sdcp->vmt      = &sdc_vmt;
 800e716:	4ea7      	ldr	r6, [pc, #668]	; (800e9b4 <main+0x3d4>)
 800e718:	600d      	str	r5, [r1, #0]
  sdcp->state    = BLK_STOP;
 800e71a:	f04f 0501 	mov.w	r5, #1
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 800e71e:	f101 6189 	add.w	r1, r1, #71827456	; 0x4480000
  GPIOC->ODR = config->PCData.odr;
 800e722:	4aa5      	ldr	r2, [pc, #660]	; (800e9b8 <main+0x3d8>)
  GPIOC->CRH = config->PCData.crh;
 800e724:	f501 312b 	add.w	r1, r1, #175104	; 0x2ac00
 800e728:	f201 31bb 	addw	r1, r1, #955	; 0x3bb
  GPIOC->ODR = config->PCData.odr;
 800e72c:	f8c2 900c 	str.w	r9, [r2, #12]
 800e730:	7135      	strb	r5, [r6, #4]
  sdcp->capacity = 0;
 800e732:	e9c6 440a 	strd	r4, r4, [r6, #40]	; 0x28
  sdcp->errors   = SDC_NO_ERROR;
 800e736:	6374      	str	r4, [r6, #52]	; 0x34
  SDCD1.thread = NULL;
 800e738:	63f4      	str	r4, [r6, #60]	; 0x3c
  SDCD1.dma    = NULL;
 800e73a:	6474      	str	r4, [r6, #68]	; 0x44
  GPIOC->CRH = config->PCData.crh;
 800e73c:	6051      	str	r1, [r2, #4]
  GPIOC->CRL = config->PCData.crl;
 800e73e:	499f      	ldr	r1, [pc, #636]	; (800e9bc <main+0x3dc>)
  GPIOD->ODR = config->PDData.odr;
 800e740:	4b9f      	ldr	r3, [pc, #636]	; (800e9c0 <main+0x3e0>)
  GPIOC->CRL = config->PCData.crl;
 800e742:	6011      	str	r1, [r2, #0]
  GPIOD->CRH = config->PDData.crh;
 800e744:	f04f 31bb 	mov.w	r1, #3149642683	; 0xbbbbbbbb
  GPIOD->CRL = config->PDData.crl;
 800e748:	4a9e      	ldr	r2, [pc, #632]	; (800e9c4 <main+0x3e4>)
  GPIOD->ODR = config->PDData.odr;
 800e74a:	f8c3 900c 	str.w	r9, [r3, #12]
  GPIOD->CRH = config->PDData.crh;
 800e74e:	6059      	str	r1, [r3, #4]
  GPIOD->CRL = config->PDData.crl;
 800e750:	601a      	str	r2, [r3, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 800e752:	f8c3 940c 	str.w	r9, [r3, #1036]	; 0x40c
  GPIOE->CRH = config->PEData.crh;
 800e756:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
  GPIOE->CRL = config->PEData.crl;
 800e75a:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
#if STM32_HAS_GPIOF || defined(__DOXYGEN__)
  GPIOF->ODR = config->PFData.odr;
 800e75e:	f46f 7370 	mvn.w	r3, #960	; 0x3c0
 800e762:	f8df e264 	ldr.w	lr, [pc, #612]	; 800e9c8 <main+0x3e8>
  usbp->state        = USB_STOP;
 800e766:	f8df b264 	ldr.w	fp, [pc, #612]	; 800e9cc <main+0x3ec>
 800e76a:	f8ce 300c 	str.w	r3, [lr, #12]
  GPIOF->CRH = config->PFData.crh;
 800e76e:	4b98      	ldr	r3, [pc, #608]	; (800e9d0 <main+0x3f0>)
  GPIOF->CRL = config->PFData.crl;
#if STM32_HAS_GPIOG || defined(__DOXYGEN__)
  GPIOG->ODR = config->PGData.odr;
 800e770:	44f4      	add	ip, lr
  GPIOF->CRH = config->PFData.crh;
 800e772:	f8ce 3004 	str.w	r3, [lr, #4]
  GPIOF->CRL = config->PFData.crl;
 800e776:	4b97      	ldr	r3, [pc, #604]	; (800e9d4 <main+0x3f4>)
 800e778:	4658      	mov	r0, fp
 800e77a:	f8ce 3000 	str.w	r3, [lr]
  GPIOG->ODR = config->PGData.odr;
 800e77e:	f46f 6300 	mvn.w	r3, #2048	; 0x800
 800e782:	f8cc 300c 	str.w	r3, [ip, #12]
  GPIOG->CRH = config->PGData.crh;
 800e786:	4b94      	ldr	r3, [pc, #592]	; (800e9d8 <main+0x3f8>)
    usbp->in_params[i]  = NULL;
 800e788:	2238      	movs	r2, #56	; 0x38
 800e78a:	f8cc 3004 	str.w	r3, [ip, #4]
  GPIOG->CRL = config->PGData.crl;
 800e78e:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 800e792:	3307      	adds	r3, #7
 800e794:	f8cc 3000 	str.w	r3, [ip]
  sdcp->vmt      = &sdc_vmt;
 800e798:	4b90      	ldr	r3, [pc, #576]	; (800e9dc <main+0x3fc>)
 800e79a:	2100      	movs	r1, #0
 800e79c:	6033      	str	r3, [r6, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800e79e:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800e7a2:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800e7a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e7aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800e7ae:	607b      	str	r3, [r7, #4]
  SDCD1.sdio   = SDIO;
 800e7b0:	4b8b      	ldr	r3, [pc, #556]	; (800e9e0 <main+0x400>)
  usbp->state        = USB_STOP;
 800e7b2:	f800 5b2c 	strb.w	r5, [r0], #44
 800e7b6:	64b3      	str	r3, [r6, #72]	; 0x48
    usbp->in_params[i]  = NULL;
 800e7b8:	f001 f9b2 	bl	800fb20 <memset>
  ST_ENABLE_CLOCK();
 800e7bc:	f8d8 201c 	ldr.w	r2, [r8, #28]
  usbp->transmitting = 0;
 800e7c0:	e9cb 4401 	strd	r4, r4, [fp, #4]
 800e7c4:	f042 0201 	orr.w	r2, r2, #1
 800e7c8:	f8c8 201c 	str.w	r2, [r8, #28]
 800e7cc:	f8d8 201c 	ldr.w	r2, [r8, #28]
  ch_system.state = ch_sys_initializing;
 800e7d0:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800e9e4 <main+0x404>
  ST_ENABLE_STOP();
 800e7d4:	f8df e210 	ldr.w	lr, [pc, #528]	; 800e9e8 <main+0x408>
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 800e7d8:	e9c8 4401 	strd	r4, r4, [r8, #4]
 800e7dc:	f8de 2004 	ldr.w	r2, [lr, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800e7e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 800e7e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7e8:	f8ce 2004 	str.w	r2, [lr, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800e7ec:	f648 4c9f 	movw	ip, #35999	; 0x8c9f
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800e7f0:	2201      	movs	r2, #1
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800e7f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800e7f6:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800e7fa:	62d8      	str	r0, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800e7fc:	619c      	str	r4, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800e7fe:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800e800:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 800e802:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800e804:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800e806:	601a      	str	r2, [r3, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800e808:	f06f 037f 	mvn.w	r3, #127	; 0x7f
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800e80c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800e810:	f887 331c 	strb.w	r3, [r7, #796]	; 0x31c
 800e814:	f04f 0301 	mov.w	r3, #1
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800e818:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
  tmp->cumulative = (rttime_t)0;
 800e81c:	2200      	movs	r2, #0
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800e81e:	6039      	str	r1, [r7, #0]
 800e820:	f888 3000 	strb.w	r3, [r8]
 800e824:	2300      	movs	r3, #0
}
 800e826:	2504      	movs	r5, #4
  tmp->worst      = (rtcnt_t)0;
 800e828:	e9cd 940e 	strd	r9, r4, [sp, #56]	; 0x38
  tmp->n          = (ucnt_t)0;
 800e82c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  tmp->cumulative = (rttime_t)0;
 800e830:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800e834:	af0e      	add	r7, sp, #56	; 0x38
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 800e836:	4638      	mov	r0, r7
 800e838:	f7f5 fe42 	bl	80044c0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800e83c:	4638      	mov	r0, r7
 800e83e:	f7f5 fe47 	bl	80044d0 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 800e842:	3d01      	subs	r5, #1
 800e844:	d1f7      	bne.n	800e836 <main+0x256>
  mp->align = align;
 800e846:	2204      	movs	r2, #4
  mp->object_size = size;
 800e848:	2014      	movs	r0, #20
 800e84a:	211c      	movs	r1, #28
  qp->next = qp;
 800e84c:	4b67      	ldr	r3, [pc, #412]	; (800e9ec <main+0x40c>)
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 800e84e:	4c68      	ldr	r4, [pc, #416]	; (800e9f0 <main+0x410>)
  mp->align = align;
 800e850:	61da      	str	r2, [r3, #28]
 800e852:	635a      	str	r2, [r3, #52]	; 0x34
  mp->provider = provider;
 800e854:	4a67      	ldr	r2, [pc, #412]	; (800e9f4 <main+0x414>)
  mp->object_size = size;
 800e856:	6198      	str	r0, [r3, #24]
  mp->provider = provider;
 800e858:	621a      	str	r2, [r3, #32]
 800e85a:	639a      	str	r2, [r3, #56]	; 0x38
  tcp->offset = tm.best;
 800e85c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  ch_memcore.basemem = __heap_base__;
 800e85e:	4866      	ldr	r0, [pc, #408]	; (800e9f8 <main+0x418>)
 800e860:	f8c8 2008 	str.w	r2, [r8, #8]
 800e864:	4a65      	ldr	r2, [pc, #404]	; (800e9fc <main+0x41c>)
  mp->object_size = size;
 800e866:	6319      	str	r1, [r3, #48]	; 0x30
 800e868:	6002      	str	r2, [r0, #0]
  ch_memcore.topmem  = __heap_end__;
 800e86a:	4a65      	ldr	r2, [pc, #404]	; (800ea00 <main+0x420>)
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800e86c:	4965      	ldr	r1, [pc, #404]	; (800ea04 <main+0x424>)
 800e86e:	6042      	str	r2, [r0, #4]
 800e870:	4a65      	ldr	r2, [pc, #404]	; (800ea08 <main+0x428>)
  qp->prev = qp;
 800e872:	e9c3 3300 	strd	r3, r3, [r3]
 800e876:	600a      	str	r2, [r1, #0]

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 800e878:	4a64      	ldr	r2, [pc, #400]	; (800ea0c <main+0x42c>)
  mp->owner = NULL;
 800e87a:	609d      	str	r5, [r3, #8]
 800e87c:	63a2      	str	r2, [r4, #56]	; 0x38
  qp->next = qp;
 800e87e:	f101 020c 	add.w	r2, r1, #12
  qp->prev = qp;
 800e882:	e9c1 2203 	strd	r2, r2, [r1, #12]
  dlp->next = (dyn_element_t *)dlp;
 800e886:	f103 0210 	add.w	r2, r3, #16
 800e88a:	611a      	str	r2, [r3, #16]
 800e88c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800e890:	625a      	str	r2, [r3, #36]	; 0x24
 800e892:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800e896:	629a      	str	r2, [r3, #40]	; 0x28
 800e898:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800e89c:	63da      	str	r2, [r3, #60]	; 0x3c
 800e89e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800e8a2:	641a      	str	r2, [r3, #64]	; 0x40
 800e8a4:	f103 0244 	add.w	r2, r3, #68	; 0x44
  mp->next = NULL;
 800e8a8:	615d      	str	r5, [r3, #20]
 800e8aa:	62dd      	str	r5, [r3, #44]	; 0x2c
  H_PAGES(&default_heap.header) = 0;
 800e8ac:	e9c1 5501 	strd	r5, r5, [r1, #4]
 800e8b0:	614d      	str	r5, [r1, #20]
  ch_system.instances[core_id] = oip;
 800e8b2:	f8c8 4004 	str.w	r4, [r8, #4]
  oip->core_id = core_id;
 800e8b6:	6325      	str	r5, [r4, #48]	; 0x30
 800e8b8:	645a      	str	r2, [r3, #68]	; 0x44
 800e8ba:	2020      	movs	r0, #32
 800e8bc:	f380 8811 	msr	BASEPRI, r0
  __ASM volatile ("cpsie i" : : : "memory");
 800e8c0:	b662      	cpsie	i
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e8c2:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  pqp->prio = (tprio_t)0;
 800e8c6:	e9c4 4501 	strd	r4, r5, [r4, #4]
  tp->epending          = (eventmask_t)0;
 800e8ca:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e8ce:	4b50      	ldr	r3, [pc, #320]	; (800ea10 <main+0x430>)
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 800e8d0:	6365      	str	r5, [r4, #52]	; 0x34
 800e8d2:	68d9      	ldr	r1, [r3, #12]
  reg_value  =  (reg_value                                   |
 800e8d4:	4a4f      	ldr	r2, [pc, #316]	; (800ea14 <main+0x434>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e8d6:	ea01 010c 	and.w	r1, r1, ip
  reg_value  =  (reg_value                                   |
 800e8da:	430a      	orrs	r2, r1
#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 800e8dc:	2101      	movs	r1, #1
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e8de:	f04f 0910 	mov.w	r9, #16
  return (systime_t)STM32_ST_TIM->CNT;
 800e8e2:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000

  ch_dlist_init(&vtlp->dlist);
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 800e8e6:	83a5      	strh	r5, [r4, #28]
  tp->owner             = oip;
 800e8e8:	6564      	str	r4, [r4, #84]	; 0x54
  SCB->AIRCR =  reg_value;
 800e8ea:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800e8ec:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800e8f0:	f8df c124 	ldr.w	ip, [pc, #292]	; 800ea18 <main+0x438>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800e8f4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800e8f8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800e8fc:	f8dc 2000 	ldr.w	r2, [ip]
 800e900:	430a      	orrs	r2, r1
 800e902:	f8cc 2000 	str.w	r2, [ip]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e906:	f883 901f 	strb.w	r9, [r3, #31]
 800e90a:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800e90e:	f8de 3024 	ldr.w	r3, [lr, #36]	; 0x24
  dlhp->delta = (sysinterval_t)-1;
 800e912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e916:	9303      	str	r3, [sp, #12]
  tp->hdr.pqueue.prio   = prio;
 800e918:	2380      	movs	r3, #128	; 0x80
 800e91a:	6463      	str	r3, [r4, #68]	; 0x44
  tp->realprio          = prio;
 800e91c:	67e3      	str	r3, [r4, #124]	; 0x7c
  tp->name              = name;
 800e91e:	4b3f      	ldr	r3, [pc, #252]	; (800ea1c <main+0x43c>)
 800e920:	61a2      	str	r2, [r4, #24]
 800e922:	65a3      	str	r3, [r4, #88]	; 0x58
  dlhp->next  = dlhp;
 800e924:	eb04 0309 	add.w	r3, r4, r9
  dlhp->prev  = dlhp;
 800e928:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->next       = qp;
 800e92c:	f104 0328 	add.w	r3, r4, #40	; 0x28
  p->prev       = qp->prev;
 800e930:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  p->prev->next = p;
 800e934:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  qp->prev      = p;
 800e938:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
  qp->next = qp;
 800e93c:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  qp->prev = qp;
 800e940:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
  lp->next = lp;
 800e944:	f104 0368 	add.w	r3, r4, #104	; 0x68
 800e948:	66a3      	str	r3, [r4, #104]	; 0x68
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 800e94a:	462b      	mov	r3, r5
 800e94c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
 800e950:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 800ea20 <main+0x440>
  pqp->next = pqp;
 800e954:	6024      	str	r4, [r4, #0]
 800e956:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800e95a:	4b32      	ldr	r3, [pc, #200]	; (800ea24 <main+0x444>)
 800e95c:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 800e960:	e9cd 3c0e 	strd	r3, ip, [sp, #56]	; 0x38
 800e964:	4b30      	ldr	r3, [pc, #192]	; (800ea28 <main+0x448>)
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 800e966:	4638      	mov	r0, r7
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 800e968:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
 800e96c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  oip->rlist.current->wabase = oicp->mainthread_base;
 800e970:	65e5      	str	r5, [r4, #92]	; 0x5c
  oip->rlist.current->state = CH_STATE_CURRENT;
 800e972:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  tp->refs              = (trefs_t)1;
 800e976:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    thread_descriptor_t idle_descriptor = {
 800e97a:	9312      	str	r3, [sp, #72]	; 0x48
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 800e97c:	f8c4 900c 	str.w	r9, [r4, #12]
    thread_descriptor_t idle_descriptor = {
 800e980:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 800e984:	9111      	str	r1, [sp, #68]	; 0x44
 800e986:	9513      	str	r5, [sp, #76]	; 0x4c
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 800e988:	f7f5 fcca 	bl	8004320 <chThdCreateSuspendedI>
 800e98c:	4603      	mov	r3, r0
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800e98e:	6982      	ldr	r2, [r0, #24]
 800e990:	e04c      	b.n	800ea2c <main+0x44c>
 800e992:	bf00      	nop
 800e994:	e000e100 	.word	0xe000e100
 800e998:	40020000 	.word	0x40020000
 800e99c:	40020400 	.word	0x40020400
 800e9a0:	40010800 	.word	0x40010800
 800e9a4:	444884bb 	.word	0x444884bb
 800e9a8:	b4b84b34 	.word	0xb4b84b34
 800e9ac:	40010c00 	.word	0x40010c00
 800e9b0:	ff844383 	.word	0xff844383
 800e9b4:	200008e8 	.word	0x200008e8
 800e9b8:	40011000 	.word	0x40011000
 800e9bc:	43808888 	.word	0x43808888
 800e9c0:	40011400 	.word	0x40011400
 800e9c4:	b4bb4bbb 	.word	0xb4bb4bbb
 800e9c8:	40011c00 	.word	0x40011c00
 800e9cc:	20000fc4 	.word	0x20000fc4
 800e9d0:	bbbb8833 	.word	0xbbbb8833
 800e9d4:	33bbbbbb 	.word	0x33bbbbbb
 800e9d8:	444b3bb4 	.word	0x444b3bb4
 800e9dc:	08012f4c 	.word	0x08012f4c
 800e9e0:	40018000 	.word	0x40018000
 800e9e4:	20001128 	.word	0x20001128
 800e9e8:	e0042000 	.word	0xe0042000
 800e9ec:	200010d8 	.word	0x200010d8
 800e9f0:	20001050 	.word	0x20001050
 800e9f4:	080009b1 	.word	0x080009b1
 800e9f8:	20001120 	.word	0x20001120
 800e9fc:	20002e80 	.word	0x20002e80
 800ea00:	20018000 	.word	0x20018000
 800ea04:	2000115c 	.word	0x2000115c
 800ea08:	080008d1 	.word	0x080008d1
 800ea0c:	08012eec 	.word	0x08012eec
 800ea10:	e000ed00 	.word	0xe000ed00
 800ea14:	05fa0300 	.word	0x05fa0300
 800ea18:	e0001000 	.word	0xe0001000
 800ea1c:	08012f00 	.word	0x08012f00
 800ea20:	20001e50 	.word	0x20001e50
 800ea24:	08012c64 	.word	0x08012c64
 800ea28:	080008c1 	.word	0x080008c1
  tp->state = CH_STATE_READY;
 800ea2c:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  } while (unlikely(pqp->prio >= p->prio));
 800ea30:	6880      	ldr	r0, [r0, #8]
    pqp = pqp->next;
 800ea32:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800ea34:	6891      	ldr	r1, [r2, #8]
 800ea36:	4281      	cmp	r1, r0
 800ea38:	d2fb      	bcs.n	800ea32 <main+0x452>
  ch_system.state = ch_sys_running;
 800ea3a:	2102      	movs	r1, #2
  p->prev       = pqp->prev;
 800ea3c:	6850      	ldr	r0, [r2, #4]
  p->next       = pqp;
 800ea3e:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800ea40:	6058      	str	r0, [r3, #4]
  p->prev->next = p;
 800ea42:	6003      	str	r3, [r0, #0]
 800ea44:	f888 1000 	strb.w	r1, [r8]
  pqp->prev     = p;
 800ea48:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800ea4a:	f04f 0800 	mov.w	r8, #0
 800ea4e:	f388 8811 	msr	BASEPRI, r8
  sdup->state = SDU_STOP;
 800ea52:	2301      	movs	r3, #1
  sdup->vmt = &vmt;
 800ea54:	4dbe      	ldr	r5, [pc, #760]	; (800ed50 <main+0x770>)
  ibqp->bsize     = size + sizeof (size_t);
 800ea56:	f44f 7082 	mov.w	r0, #260	; 0x104
 800ea5a:	462a      	mov	r2, r5
  sdup->state = SDU_STOP;
 800ea5c:	722b      	strb	r3, [r5, #8]
  ibqp->suspended = suspended;
 800ea5e:	752b      	strb	r3, [r5, #20]
  obqp->suspended = suspended;
 800ea60:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
  ibqp->notify    = infy;
 800ea64:	4bbb      	ldr	r3, [pc, #748]	; (800ed54 <main+0x774>)
  sdup->vmt = &vmt;
 800ea66:	f8df c2f0 	ldr.w	ip, [pc, #752]	; 800ed58 <main+0x778>
 800ea6a:	63eb      	str	r3, [r5, #60]	; 0x3c
  obqp->notify    = onfy;
 800ea6c:	4bbb      	ldr	r3, [pc, #748]	; (800ed5c <main+0x77c>)
 800ea6e:	f842 cb04 	str.w	ip, [r2], #4
 800ea72:	676b      	str	r3, [r5, #116]	; 0x74
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800ea74:	f505 7321 	add.w	r3, r5, #644	; 0x284
  obqp->bwrptr    = bp;
 800ea78:	e9c5 3315 	strd	r3, r3, [r5, #84]	; 0x54
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800ea7c:	626b      	str	r3, [r5, #36]	; 0x24
  obqp->buffers   = bp;
 800ea7e:	66ab      	str	r3, [r5, #104]	; 0x68
  ibqp->brdptr    = bp;
 800ea80:	f105 037c 	add.w	r3, r5, #124	; 0x7c
  ibqp->bwrptr    = bp;
 800ea84:	e9c5 3307 	strd	r3, r3, [r5, #28]
  ibqp->buffers   = bp;
 800ea88:	632b      	str	r3, [r5, #48]	; 0x30
  qp->next = qp;
 800ea8a:	f105 030c 	add.w	r3, r5, #12
  qp->prev = qp;
 800ea8e:	e9c5 3303 	strd	r3, r3, [r5, #12]
  qp->next = qp;
 800ea92:	f105 0344 	add.w	r3, r5, #68	; 0x44
  qp->prev = qp;
 800ea96:	e9c5 3311 	strd	r3, r3, [r5, #68]	; 0x44
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800ea9a:	f205 438c 	addw	r3, r5, #1164	; 0x48c
  ibqp->bcounter  = 0;
 800ea9e:	f8c5 8018 	str.w	r8, [r5, #24]
 800eaa2:	f04f 0920 	mov.w	r9, #32
  ibqp->top       = NULL;
 800eaa6:	e9c5 880d 	strd	r8, r8, [r5, #52]	; 0x34
  obqp->top       = NULL;
 800eaaa:	e9c5 881b 	strd	r8, r8, [r5, #108]	; 0x6c
  ibqp->bn        = n;
 800eaae:	62e9      	str	r1, [r5, #44]	; 0x2c
  obqp->bcounter  = n;
 800eab0:	6529      	str	r1, [r5, #80]	; 0x50
  obqp->bn        = n;
 800eab2:	6669      	str	r1, [r5, #100]	; 0x64
  ibqp->link      = link;
 800eab4:	642d      	str	r5, [r5, #64]	; 0x40
  obqp->link      = link;
 800eab6:	67ad      	str	r5, [r5, #120]	; 0x78
  esp->next = (event_listener_t *)esp;
 800eab8:	606a      	str	r2, [r5, #4]
  ibqp->bsize     = size + sizeof (size_t);
 800eaba:	62a8      	str	r0, [r5, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 800eabc:	6628      	str	r0, [r5, #96]	; 0x60
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800eabe:	65eb      	str	r3, [r5, #92]	; 0x5c
 800eac0:	f389 8811 	msr	BASEPRI, r9
  sdup->config = config;
 800eac4:	4ba6      	ldr	r3, [pc, #664]	; (800ed60 <main+0x780>)
  sdup->state = SDU_READY;
 800eac6:	7229      	strb	r1, [r5, #8]
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 800eac8:	f8cb 502c 	str.w	r5, [fp, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1U] = sdup;
 800eacc:	f8cb 5048 	str.w	r5, [fp, #72]	; 0x48
    usbp->in_params[config->int_in - 1U]  = sdup;
 800ead0:	f8cb 5030 	str.w	r5, [fp, #48]	; 0x30
  sdup->config = config;
 800ead4:	f8c5 348c 	str.w	r3, [r5, #1164]	; 0x48c
 800ead8:	f388 8811 	msr	BASEPRI, r8
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 800eadc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800eae0:	4ba0      	ldr	r3, [pc, #640]	; (800ed64 <main+0x784>)
 800eae2:	611a      	str	r2, [r3, #16]
 800eae4:	f389 8811 	msr	BASEPRI, r9
 800eae8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800eaec:	2008      	movs	r0, #8
 800eaee:	f7f4 f84f 	bl	8002b90 <chSchGoSleepTimeoutS>
 800eaf2:	f388 8811 	msr	BASEPRI, r8
 800eaf6:	f389 8811 	msr	BASEPRI, r9
  usbp->config = config;
 800eafa:	4b9b      	ldr	r3, [pc, #620]	; (800ed68 <main+0x788>)
    usbp->epc[i] = NULL;
 800eafc:	464a      	mov	r2, r9
 800eafe:	4641      	mov	r1, r8
 800eb00:	489a      	ldr	r0, [pc, #616]	; (800ed6c <main+0x78c>)
  usbp->config = config;
 800eb02:	f8cb 3004 	str.w	r3, [fp, #4]
    usbp->epc[i] = NULL;
 800eb06:	f001 f80b 	bl	800fb20 <memset>
  if (usbp->state == USB_STOP) {
 800eb0a:	f89b e000 	ldrb.w	lr, [fp]
 800eb0e:	f1be 0f01 	cmp.w	lr, #1
 800eb12:	d131      	bne.n	800eb78 <main+0x598>
  usbp->pmnext = 64;
 800eb14:	2340      	movs	r3, #64	; 0x40
      rccEnableUSB(true);
 800eb16:	4a96      	ldr	r2, [pc, #600]	; (800ed70 <main+0x790>)
  usbp->pmnext = 64;
 800eb18:	f8cb 3084 	str.w	r3, [fp, #132]	; 0x84
      rccEnableUSB(true);
 800eb1c:	69d1      	ldr	r1, [r2, #28]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800eb1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800eb22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800eb26:	61d1      	str	r1, [r2, #28]
 800eb28:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800eb2c:	f06f 012f 	mvn.w	r1, #47	; 0x2f
 800eb30:	f04f 09e0 	mov.w	r9, #224	; 0xe0
 800eb34:	69d2      	ldr	r2, [r2, #28]
      STM32_USB->CNTR = CNTR_FRES;
 800eb36:	4b8f      	ldr	r3, [pc, #572]	; (800ed74 <main+0x794>)
 800eb38:	4a8f      	ldr	r2, [pc, #572]	; (800ed78 <main+0x798>)
 800eb3a:	f8c3 e040 	str.w	lr, [r3, #64]	; 0x40
 800eb3e:	f882 1313 	strb.w	r1, [r2, #787]	; 0x313
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800eb42:	f8c2 c180 	str.w	ip, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800eb46:	f8c2 c000 	str.w	ip, [r2]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800eb4a:	f882 9314 	strb.w	r9, [r2, #788]	; 0x314
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800eb4e:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800eb52:	6010      	str	r0, [r2, #0]
  STM32_USB->DADDR  = DADDR_EF;
 800eb54:	2280      	movs	r2, #128	; 0x80
      STM32_USB->CNTR = 0;
 800eb56:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
  STM32_USB->BTABLE = BTABLE_ADDR;
 800eb5a:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
  STM32_USB->ISTR   = 0;
 800eb5e:	f8c3 8044 	str.w	r8, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 800eb62:	64da      	str	r2, [r3, #76]	; 0x4c
  STM32_USB->CNTR = cntr;
 800eb64:	f44f 421e 	mov.w	r2, #40448	; 0x9e00
 800eb68:	641a      	str	r2, [r3, #64]	; 0x40
  usbp->epc[0] = &ep0config;
 800eb6a:	4b84      	ldr	r3, [pc, #528]	; (800ed7c <main+0x79c>)
  usb_lld_init_endpoint(usbp, 0);
 800eb6c:	4641      	mov	r1, r8
 800eb6e:	4884      	ldr	r0, [pc, #528]	; (800ed80 <main+0x7a0>)
  usbp->epc[0] = &ep0config;
 800eb70:	f8cb 300c 	str.w	r3, [fp, #12]
  usb_lld_init_endpoint(usbp, 0);
 800eb74:	f7f3 fd3c 	bl	80025f0 <usb_lld_init_endpoint>
  usbp->state = USB_READY;
 800eb78:	2302      	movs	r3, #2
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f88b 3000 	strb.w	r3, [fp]
 800eb80:	f382 8811 	msr	BASEPRI, r2
  chThdSleepMilliseconds(1500);
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 800eb84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800eb88:	4b76      	ldr	r3, [pc, #472]	; (800ed64 <main+0x784>)
 800eb8a:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 800ed84 <main+0x7a4>
 800eb8e:	6159      	str	r1, [r3, #20]
 800eb90:	2320      	movs	r3, #32
 800eb92:	f8c8 8000 	str.w	r8, [r8]
 800eb96:	f383 8811 	msr	BASEPRI, r3
  sdcp->dmamode = STM32_DMA_CR_CHSEL(DMA_CHANNEL) |
 800eb9a:	f44f 536a 	mov.w	r3, #14976	; 0x3a80
 800eb9e:	6433      	str	r3, [r6, #64]	; 0x40
    sdcp->config = &sdc_default_cfg;
 800eba0:	4b79      	ldr	r3, [pc, #484]	; (800ed88 <main+0x7a8>)
 800eba2:	62f3      	str	r3, [r6, #44]	; 0x2c
  if (sdcp->state == BLK_STOP) {
 800eba4:	7933      	ldrb	r3, [r6, #4]
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	f000 80a4 	beq.w	800ecf4 <main+0x714>
  sdcp->sdio->POWER  = 0;
 800ebac:	2300      	movs	r3, #0
  sdcp->state = BLK_ACTIVE;
 800ebae:	2102      	movs	r1, #2
 800ebb0:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 800ebb2:	6013      	str	r3, [r2, #0]
  sdcp->sdio->CLKCR  = 0;
 800ebb4:	6053      	str	r3, [r2, #4]
  sdcp->sdio->DCTRL  = 0;
 800ebb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ebb8:	7131      	strb	r1, [r6, #4]
  sdcp->sdio->DTIMER = 0;
 800ebba:	6253      	str	r3, [r2, #36]	; 0x24
 800ebbc:	f383 8811 	msr	BASEPRI, r3
 800ebc0:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 800ed8c <main+0x7ac>
 800ebc4:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 800ed90 <main+0x7b0>
 800ebc8:	2320      	movs	r3, #32
 800ebca:	f8ca a000 	str.w	sl, [sl]
 800ebce:	f8c9 9000 	str.w	r9, [r9]
 800ebd2:	f383 8811 	msr	BASEPRI, r3
  cnt = POLLING_INTERVAL;
 800ebd6:	220a      	movs	r2, #10
 800ebd8:	4b6e      	ldr	r3, [pc, #440]	; (800ed94 <main+0x7b4>)
  return (bool)(vtp->dlist.next != NULL);
 800ebda:	486f      	ldr	r0, [pc, #444]	; (800ed98 <main+0x7b8>)
 800ebdc:	601a      	str	r2, [r3, #0]
  if (chVTIsArmedI(vtp)) {
 800ebde:	6803      	ldr	r3, [r0, #0]
 800ebe0:	b113      	cbz	r3, 800ebe8 <main+0x608>
    chVTDoResetI(vtp);
 800ebe2:	f7f3 ff8d 	bl	8002b00 <chVTDoResetI>
 800ebe6:	486c      	ldr	r0, [pc, #432]	; (800ed98 <main+0x7b8>)
  vtp->reload  = (sysinterval_t)0;
 800ebe8:	f04f 0b00 	mov.w	fp, #0
 800ebec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ebf0:	f8c0 b014 	str.w	fp, [r0, #20]
 800ebf4:	6a59      	ldr	r1, [r3, #36]	; 0x24
  vtp->func    = vtfunc;
 800ebf6:	4a69      	ldr	r2, [pc, #420]	; (800ed9c <main+0x7bc>)
  vtp->par     = par;
 800ebf8:	6106      	str	r6, [r0, #16]
  vtp->func    = vtfunc;
 800ebfa:	60c2      	str	r2, [r0, #12]
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 800ebfc:	b289      	uxth	r1, r1
 800ebfe:	2214      	movs	r2, #20
 800ec00:	4865      	ldr	r0, [pc, #404]	; (800ed98 <main+0x7b8>)
 800ec02:	f7ff fc9d 	bl	800e540 <vt_enqueue.constprop.0>
 800ec06:	f38b 8811 	msr	BASEPRI, fp
  tmr_init(&SDCD1);

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800ec0a:	2180      	movs	r1, #128	; 0x80
 800ec0c:	465b      	mov	r3, fp
 800ec0e:	4a64      	ldr	r2, [pc, #400]	; (800eda0 <main+0x7c0>)
 800ec10:	4864      	ldr	r0, [pc, #400]	; (800eda4 <main+0x7c4>)
 800ec12:	f7ff f9ad 	bl	800df70 <chThdCreateStatic.constprop.0>
 800ec16:	2220      	movs	r2, #32
 800ec18:	f382 8811 	msr	BASEPRI, r2
  elp->events   = events;
 800ec1c:	2601      	movs	r6, #1
  elp->wflags   = wflags;
 800ec1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  elp->next     = esp->next;
 800ec22:	f8da 1000 	ldr.w	r1, [sl]
  elp->flags    = (eventflags_t)0;
 800ec26:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  elp->next     = esp->next;
 800ec2a:	910e      	str	r1, [sp, #56]	; 0x38
  return __sch_get_currthread();
 800ec2c:	68e1      	ldr	r1, [r4, #12]
  esp->next     = elp;
 800ec2e:	f8ca 7000 	str.w	r7, [sl]
  elp->events   = events;
 800ec32:	e9cd 160f 	strd	r1, r6, [sp, #60]	; 0x3c
  elp->wflags   = wflags;
 800ec36:	9312      	str	r3, [sp, #72]	; 0x48
 800ec38:	f38b 8811 	msr	BASEPRI, fp
 800ec3c:	f382 8811 	msr	BASEPRI, r2
  elp->events   = events;
 800ec40:	2102      	movs	r1, #2
 800ec42:	910b      	str	r1, [sp, #44]	; 0x2c
  elp->next     = esp->next;
 800ec44:	f8d9 1000 	ldr.w	r1, [r9]
  elp->wflags   = wflags;
 800ec48:	e9cd b30c 	strd	fp, r3, [sp, #48]	; 0x30
  elp->next     = esp->next;
 800ec4c:	9109      	str	r1, [sp, #36]	; 0x24
 800ec4e:	68e1      	ldr	r1, [r4, #12]
  elp->listener = currtp;
 800ec50:	910a      	str	r1, [sp, #40]	; 0x28
  esp->next     = elp;
 800ec52:	a909      	add	r1, sp, #36	; 0x24
 800ec54:	f8c9 1000 	str.w	r1, [r9]
 800ec58:	f38b 8811 	msr	BASEPRI, fp
 800ec5c:	f382 8811 	msr	BASEPRI, r2
  elp->wflags   = wflags;
 800ec60:	9308      	str	r3, [sp, #32]
 800ec62:	68e3      	ldr	r3, [r4, #12]
  elp->next     = esp->next;
 800ec64:	f8d8 2000 	ldr.w	r2, [r8]
  elp->listener = currtp;
 800ec68:	9305      	str	r3, [sp, #20]
  elp->events   = events;
 800ec6a:	2304      	movs	r3, #4
 800ec6c:	9306      	str	r3, [sp, #24]
  esp->next     = elp;
 800ec6e:	ab04      	add	r3, sp, #16
  elp->flags    = (eventflags_t)0;
 800ec70:	f8cd b01c 	str.w	fp, [sp, #28]
  elp->next     = esp->next;
 800ec74:	9204      	str	r2, [sp, #16]
  esp->next     = elp;
 800ec76:	f8c8 3000 	str.w	r3, [r8]
 800ec7a:	f38b 8811 	msr	BASEPRI, fp
 800ec7e:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800eda8 <main+0x7c8>
 800ec82:	f8df b128 	ldr.w	fp, [pc, #296]	; 800edac <main+0x7cc>
 800ec86:	4f4a      	ldr	r7, [pc, #296]	; (800edb0 <main+0x7d0>)
  chEvtRegister(&inserted_event, &el0, 0);
  chEvtRegister(&removed_event, &el1, 1);
  chEvtRegister(&shell_terminated, &el2, 2);
  while (true) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE)) {
      shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 800ec88:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800edb4 <main+0x7d4>
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE)) {
 800ec8c:	f8d8 0000 	ldr.w	r0, [r8]
 800ec90:	b1e8      	cbz	r0, 800ecce <main+0x6ee>
                                    "shell", NORMALPRIO + 1,
                                    shellThread, (void *)&shell_cfg1);
    }
    chEvtDispatch(evhndl, chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(500)));
 800ec92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ec96:	f7ff f8eb 	bl	800de70 <chEvtWaitOneTimeout.constprop.0>
  while (events != (eventmask_t)0) {
 800ec9a:	4682      	mov	sl, r0
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	d0f5      	beq.n	800ec8c <main+0x6ac>
  eid = (eventid_t)0;
 800eca0:	2400      	movs	r4, #0
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800eca2:	fa2a f304 	lsr.w	r3, sl, r4
 800eca6:	07db      	lsls	r3, r3, #31
 800eca8:	d50f      	bpl.n	800ecca <main+0x6ea>
      events &= ~EVENT_MASK(eid);
 800ecaa:	fa06 f204 	lsl.w	r2, r6, r4
      handlers[eid](eid);
 800ecae:	4620      	mov	r0, r4
 800ecb0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 800ecb4:	ea2a 0a02 	bic.w	sl, sl, r2
      handlers[eid](eid);
 800ecb8:	3401      	adds	r4, #1
 800ecba:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 800ecbc:	f1ba 0f00 	cmp.w	sl, #0
 800ecc0:	d0e4      	beq.n	800ec8c <main+0x6ac>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800ecc2:	fa2a f304 	lsr.w	r3, sl, r4
 800ecc6:	07db      	lsls	r3, r3, #31
 800ecc8:	d4ef      	bmi.n	800ecaa <main+0x6ca>
    eid++;
 800ecca:	3401      	adds	r4, #1
  while (events != (eventmask_t)0) {
 800eccc:	e7e9      	b.n	800eca2 <main+0x6c2>
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE)) {
 800ecce:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	2b04      	cmp	r3, #4
 800ecd8:	d1db      	bne.n	800ec92 <main+0x6b2>
      shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 800ecda:	4c37      	ldr	r4, [pc, #220]	; (800edb8 <main+0x7d8>)
 800ecdc:	2381      	movs	r3, #129	; 0x81
 800ecde:	464a      	mov	r2, r9
 800ece0:	f44f 610f 	mov.w	r1, #2288	; 0x8f0
 800ece4:	f8cd b004 	str.w	fp, [sp, #4]
 800ece8:	9400      	str	r4, [sp, #0]
 800ecea:	f7f6 fc11 	bl	8005510 <chThdCreateFromHeap>
 800ecee:	f8c8 0000 	str.w	r0, [r8]
 800ecf2:	e7ce      	b.n	800ec92 <main+0x6b2>
    if ((dma.allocated_mask & mask) == 0U) {
 800ecf4:	f8da 3000 	ldr.w	r3, [sl]
 800ecf8:	f413 6080 	ands.w	r0, r3, #1024	; 0x400
 800ecfc:	d125      	bne.n	800ed4a <main+0x76a>
      dmaStreamDisable(dmastp);
 800ecfe:	f44f 4e60 	mov.w	lr, #57344	; 0xe000
      dma.allocated_mask  |= mask;
 800ed02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ed06:	f8ca 3000 	str.w	r3, [sl]
        rccEnableDMA2(true);
 800ed0a:	4b19      	ldr	r3, [pc, #100]	; (800ed70 <main+0x790>)
      dmaStreamDisable(dmastp);
 800ed0c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        rccEnableDMA2(true);
 800ed10:	6959      	ldr	r1, [r3, #20]
      dma.streams[i].param = param;
 800ed12:	e9ca 0016 	strd	r0, r0, [sl, #88]	; 0x58
        rccEnableDMA2(true);
 800ed16:	f041 0102 	orr.w	r1, r1, #2
 800ed1a:	6159      	str	r1, [r3, #20]
      dmaStreamDisable(dmastp);
 800ed1c:	f502 3201 	add.w	r2, r2, #132096	; 0x20400
        rccEnableDMA2(true);
 800ed20:	6959      	ldr	r1, [r3, #20]
      dmaStreamDisable(dmastp);
 800ed22:	f8d2 c044 	ldr.w	ip, [r2, #68]	; 0x44
    dmaStreamSetPeripheral(sdcp->dma, &sdcp->sdio->FIFO);
 800ed26:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800ed28:	f02c 0c0f 	bic.w	ip, ip, #15
 800ed2c:	3180      	adds	r1, #128	; 0x80
 800ed2e:	f8c2 c044 	str.w	ip, [r2, #68]	; 0x44
 800ed32:	f8c2 e004 	str.w	lr, [r2, #4]
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800ed36:	6450      	str	r0, [r2, #68]	; 0x44
 800ed38:	64d1      	str	r1, [r2, #76]	; 0x4c
    rccEnableSDIO(true);
 800ed3a:	695a      	ldr	r2, [r3, #20]
 800ed3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed40:	615a      	str	r2, [r3, #20]
 800ed42:	695b      	ldr	r3, [r3, #20]
    sdcp->dma = dmaStreamAllocI(STM32_SDC_SDIO_DMA_STREAM,
 800ed44:	4b1d      	ldr	r3, [pc, #116]	; (800edbc <main+0x7dc>)
 800ed46:	6473      	str	r3, [r6, #68]	; 0x44
 800ed48:	e730      	b.n	800ebac <main+0x5cc>
    dmaStreamSetPeripheral(sdcp->dma, &sdcp->sdio->FIFO);
 800ed4a:	6853      	ldr	r3, [r2, #4]
    sdcp->dma = dmaStreamAllocI(STM32_SDC_SDIO_DMA_STREAM,
 800ed4c:	6472      	str	r2, [r6, #68]	; 0x44
 800ed4e:	deff      	udf	#255	; 0xff
 800ed50:	20000b34 	.word	0x20000b34
 800ed54:	080018c1 	.word	0x080018c1
 800ed58:	08013090 	.word	0x08013090
 800ed5c:	080006e1 	.word	0x080006e1
 800ed60:	08012f70 	.word	0x08012f70
 800ed64:	40010c00 	.word	0x40010c00
 800ed68:	08013080 	.word	0x08013080
 800ed6c:	20000fd0 	.word	0x20000fd0
 800ed70:	40021000 	.word	0x40021000
 800ed74:	40005c00 	.word	0x40005c00
 800ed78:	e000e100 	.word	0xe000e100
 800ed7c:	08011b58 	.word	0x08011b58
 800ed80:	20000fc4 	.word	0x20000fc4
 800ed84:	2000126c 	.word	0x2000126c
 800ed88:	08012f48 	.word	0x08012f48
 800ed8c:	200024bc 	.word	0x200024bc
 800ed90:	20002654 	.word	0x20002654
 800ed94:	20001f50 	.word	0x20001f50
 800ed98:	200026f8 	.word	0x200026f8
 800ed9c:	0800ef21 	.word	0x0800ef21
 800eda0:	08009191 	.word	0x08009191
 800eda4:	20002d10 	.word	0x20002d10
 800eda8:	20002658 	.word	0x20002658
 800edac:	08012f78 	.word	0x08012f78
 800edb0:	08012f28 	.word	0x08012f28
 800edb4:	08010118 	.word	0x08010118
 800edb8:	08006651 	.word	0x08006651
 800edbc:	08011884 	.word	0x08011884

0800edc0 <rt_test_012_009_execute.lto_priv.0>:
  test_set_step(1);
 800edc0:	2101      	movs	r1, #1
static void rt_test_012_009_execute(void) {
 800edc2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 800edc6:	4b2c      	ldr	r3, [pc, #176]	; (800ee78 <rt_test_012_009_execute.lto_priv.0+0xb8>)
 800edc8:	f04f 0820 	mov.w	r8, #32
 800edcc:	6019      	str	r1, [r3, #0]
 800edce:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800edd2:	2008      	movs	r0, #8
 800edd4:	f7f3 fedc 	bl	8002b90 <chSchGoSleepTimeoutS>
 800edd8:	f04f 0a00 	mov.w	sl, #0
 800eddc:	f38a 8811 	msr	BASEPRI, sl
 800ede0:	f388 8811 	msr	BASEPRI, r8
 800ede4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ede8:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 800edea:	b2bf      	uxth	r7, r7
 800edec:	f38a 8811 	msr	BASEPRI, sl
 800edf0:	4d22      	ldr	r5, [pc, #136]	; (800ee7c <rt_test_012_009_execute.lto_priv.0+0xbc>)
 800edf2:	4e23      	ldr	r6, [pc, #140]	; (800ee80 <rt_test_012_009_execute.lto_priv.0+0xc0>)
 800edf4:	4c23      	ldr	r4, [pc, #140]	; (800ee84 <rt_test_012_009_execute.lto_priv.0+0xc4>)
 800edf6:	f388 8811 	msr	BASEPRI, r8
 800edfa:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
  vtp->par     = par;
 800edfe:	f04f 0b00 	mov.w	fp, #0
 800ee02:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 800ee06:	4628      	mov	r0, r5
 800ee08:	2201      	movs	r2, #1
 800ee0a:	b289      	uxth	r1, r1
  vtp->func    = vtfunc;
 800ee0c:	60ee      	str	r6, [r5, #12]
  vtp->par     = par;
 800ee0e:	f8c5 b010 	str.w	fp, [r5, #16]
  vtp->reload  = (sysinterval_t)0;
 800ee12:	f8c5 b014 	str.w	fp, [r5, #20]
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 800ee16:	f7ff fb93 	bl	800e540 <vt_enqueue.constprop.0>
 800ee1a:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
 800ee1e:	f242 7210 	movw	r2, #10000	; 0x2710
 800ee22:	b289      	uxth	r1, r1
 800ee24:	4620      	mov	r0, r4
  vtp->func    = vtfunc;
 800ee26:	e9c4 6b03 	strd	r6, fp, [r4, #12]
  vtp->reload  = (sysinterval_t)0;
 800ee2a:	f8c4 b014 	str.w	fp, [r4, #20]
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 800ee2e:	f7ff fb87 	bl	800e540 <vt_enqueue.constprop.0>
      chVTDoResetI(&vt1);
 800ee32:	4628      	mov	r0, r5
 800ee34:	f7f3 fe64 	bl	8002b00 <chVTDoResetI>
      chVTDoResetI(&vt2);
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f7f3 fe61 	bl	8002b00 <chVTDoResetI>
 800ee3e:	f38b 8811 	msr	BASEPRI, fp
 800ee42:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
      n++;
 800ee46:	f10a 0a01 	add.w	sl, sl, #1
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 800ee4a:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ee52:	d3d0      	bcc.n	800edf6 <rt_test_012_009_execute.lto_priv.0+0x36>
  test_set_step(2);
 800ee54:	2302      	movs	r3, #2
 800ee56:	4a08      	ldr	r2, [pc, #32]	; (800ee78 <rt_test_012_009_execute.lto_priv.0+0xb8>)
  test_printf("%s", msgp);
 800ee58:	490b      	ldr	r1, [pc, #44]	; (800ee88 <rt_test_012_009_execute.lto_priv.0+0xc8>)
 800ee5a:	480c      	ldr	r0, [pc, #48]	; (800ee8c <rt_test_012_009_execute.lto_priv.0+0xcc>)
 800ee5c:	6013      	str	r3, [r2, #0]
 800ee5e:	f7f9 f907 	bl	8008070 <test_printf>
  test_printf("%u", n);
 800ee62:	ea4f 014a 	mov.w	r1, sl, lsl #1
 800ee66:	480a      	ldr	r0, [pc, #40]	; (800ee90 <rt_test_012_009_execute.lto_priv.0+0xd0>)
 800ee68:	f7f9 f902 	bl	8008070 <test_printf>
}
 800ee6c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_printf("%s"TEST_CFG_EOL_STRING, msgp);
 800ee70:	4908      	ldr	r1, [pc, #32]	; (800ee94 <rt_test_012_009_execute.lto_priv.0+0xd4>)
 800ee72:	4809      	ldr	r0, [pc, #36]	; (800ee98 <rt_test_012_009_execute.lto_priv.0+0xd8>)
 800ee74:	f7f9 b8fc 	b.w	8008070 <test_printf>
 800ee78:	20001134 	.word	0x20001134
 800ee7c:	20002710 	.word	0x20002710
 800ee80:	08001031 	.word	0x08001031
 800ee84:	20002728 	.word	0x20002728
 800ee88:	08010d20 	.word	0x08010d20
 800ee8c:	08010188 	.word	0x08010188
 800ee90:	08010634 	.word	0x08010634
 800ee94:	08012c6c 	.word	0x08012c6c
 800ee98:	08012cc0 	.word	0x08012cc0
 800ee9c:	00000000 	.word	0x00000000

0800eea0 <job_slow>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800eea0:	4b1a      	ldr	r3, [pc, #104]	; (800ef0c <job_slow+0x6c>)
static void job_slow(void *arg) {
 800eea2:	b510      	push	{r4, lr}
 800eea4:	68da      	ldr	r2, [r3, #12]
 800eea6:	f103 0120 	add.w	r1, r3, #32
 800eeaa:	428a      	cmp	r2, r1
 800eeac:	b086      	sub	sp, #24
 800eeae:	d202      	bcs.n	800eeb6 <job_slow+0x16>
    *chtest.tokp++ = token;
 800eeb0:	1c51      	adds	r1, r2, #1
 800eeb2:	60d9      	str	r1, [r3, #12]
  test_emit_token((int)arg);
 800eeb4:	7010      	strb	r0, [r2, #0]
 800eeb6:	2320      	movs	r3, #32
 800eeb8:	f383 8811 	msr	BASEPRI, r3
  vtp->reload  = (sysinterval_t)0;
 800eebc:	2100      	movs	r1, #0
 800eebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  thread_t *tp = __instance_get_currthread(currcore);
 800eec2:	4c13      	ldr	r4, [pc, #76]	; (800ef10 <job_slow+0x70>)
 800eec4:	9105      	str	r1, [sp, #20]
  vtp->par     = par;
 800eec6:	68e2      	ldr	r2, [r4, #12]
 800eec8:	6a59      	ldr	r1, [r3, #36]	; 0x24
  vtp->func    = vtfunc;
 800eeca:	4812      	ldr	r0, [pc, #72]	; (800ef14 <job_slow+0x74>)
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 800eecc:	b289      	uxth	r1, r1
  vtp->par     = par;
 800eece:	e9cd 0203 	strd	r0, r2, [sp, #12]
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 800eed2:	2214      	movs	r2, #20
 800eed4:	4668      	mov	r0, sp
 800eed6:	f7ff fb33 	bl	800e540 <vt_enqueue.constprop.0>
  otp->state = newstate;
 800eeda:	2308      	movs	r3, #8
  ntp->state = CH_STATE_CURRENT;
 800eedc:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 800eede:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 800eee0:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800eee2:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800eee6:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800eee8:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800eeea:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  pqp->next       = p->next;
 800eeee:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 800eef0:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 800eef2:	f7f1 f9a5 	bl	8000240 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 800eef6:	9b00      	ldr	r3, [sp, #0]
 800eef8:	b113      	cbz	r3, 800ef00 <job_slow+0x60>
      chVTDoResetI(&vt);
 800eefa:	4668      	mov	r0, sp
 800eefc:	f7f3 fe00 	bl	8002b00 <chVTDoResetI>
 800ef00:	2300      	movs	r3, #0
 800ef02:	f383 8811 	msr	BASEPRI, r3
}
 800ef06:	b006      	add	sp, #24
 800ef08:	bd10      	pop	{r4, pc}
 800ef0a:	bf00      	nop
 800ef0c:	20001134 	.word	0x20001134
 800ef10:	20001050 	.word	0x20001050
 800ef14:	08001041 	.word	0x08001041
	...

0800ef20 <tmrfunc>:
                    void *p) {
 800ef20:	b570      	push	{r4, r5, r6, lr}
 800ef22:	2320      	movs	r3, #32
 800ef24:	460c      	mov	r4, r1
 800ef26:	f383 8811 	msr	BASEPRI, r3
  if (cnt > 0) {
 800ef2a:	4d1b      	ldr	r5, [pc, #108]	; (800ef98 <tmrfunc+0x78>)
 800ef2c:	682b      	ldr	r3, [r5, #0]
 800ef2e:	b1f3      	cbz	r3, 800ef6e <tmrfunc+0x4e>
    if (blkIsInserted(bbdp)) {
 800ef30:	680b      	ldr	r3, [r1, #0]
 800ef32:	4608      	mov	r0, r1
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	4798      	blx	r3
 800ef38:	b330      	cbz	r0, 800ef88 <tmrfunc+0x68>
      if (--cnt == 0) {
 800ef3a:	6829      	ldr	r1, [r5, #0]
 800ef3c:	3901      	subs	r1, #1
 800ef3e:	6029      	str	r1, [r5, #0]
 800ef40:	b329      	cbz	r1, 800ef8e <tmrfunc+0x6e>
  return (bool)(vtp->dlist.next != NULL);
 800ef42:	4d16      	ldr	r5, [pc, #88]	; (800ef9c <tmrfunc+0x7c>)
  if (chVTIsArmedI(vtp)) {
 800ef44:	682b      	ldr	r3, [r5, #0]
 800ef46:	b113      	cbz	r3, 800ef4e <tmrfunc+0x2e>
    chVTDoResetI(vtp);
 800ef48:	4628      	mov	r0, r5
 800ef4a:	f7f3 fdd9 	bl	8002b00 <chVTDoResetI>
 800ef4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  vtp->reload  = (sysinterval_t)0;
 800ef52:	2600      	movs	r6, #0
  vtp->func    = vtfunc;
 800ef54:	4912      	ldr	r1, [pc, #72]	; (800efa0 <tmrfunc+0x80>)
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 800ef56:	2214      	movs	r2, #20
  vtp->func    = vtfunc;
 800ef58:	60e9      	str	r1, [r5, #12]
 800ef5a:	6a59      	ldr	r1, [r3, #36]	; 0x24
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 800ef5c:	480f      	ldr	r0, [pc, #60]	; (800ef9c <tmrfunc+0x7c>)
 800ef5e:	b289      	uxth	r1, r1
  vtp->par     = par;
 800ef60:	612c      	str	r4, [r5, #16]
  vtp->reload  = (sysinterval_t)0;
 800ef62:	616e      	str	r6, [r5, #20]
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 800ef64:	f7ff faec 	bl	800e540 <vt_enqueue.constprop.0>
 800ef68:	f386 8811 	msr	BASEPRI, r6
}
 800ef6c:	bd70      	pop	{r4, r5, r6, pc}
    if (!blkIsInserted(bbdp)) {
 800ef6e:	680b      	ldr	r3, [r1, #0]
 800ef70:	4608      	mov	r0, r1
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	4798      	blx	r3
 800ef76:	2800      	cmp	r0, #0
 800ef78:	d1e3      	bne.n	800ef42 <tmrfunc+0x22>
      cnt = POLLING_INTERVAL;
 800ef7a:	230a      	movs	r3, #10
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 800ef7c:	4601      	mov	r1, r0
 800ef7e:	4809      	ldr	r0, [pc, #36]	; (800efa4 <tmrfunc+0x84>)
 800ef80:	602b      	str	r3, [r5, #0]
 800ef82:	f7f5 ff75 	bl	8004e70 <chEvtBroadcastFlagsI>
}
 800ef86:	e7dc      	b.n	800ef42 <tmrfunc+0x22>
      cnt = POLLING_INTERVAL;
 800ef88:	230a      	movs	r3, #10
 800ef8a:	602b      	str	r3, [r5, #0]
 800ef8c:	e7d9      	b.n	800ef42 <tmrfunc+0x22>
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 800ef8e:	4806      	ldr	r0, [pc, #24]	; (800efa8 <tmrfunc+0x88>)
 800ef90:	f7f5 ff6e 	bl	8004e70 <chEvtBroadcastFlagsI>
}
 800ef94:	e7d5      	b.n	800ef42 <tmrfunc+0x22>
 800ef96:	bf00      	nop
 800ef98:	20001f50 	.word	0x20001f50
 800ef9c:	200026f8 	.word	0x200026f8
 800efa0:	0800ef21 	.word	0x0800ef21
 800efa4:	20002654 	.word	0x20002654
 800efa8:	200024bc 	.word	0x200024bc
 800efac:	00000000 	.word	0x00000000

0800efb0 <chPipeWriteTimeout.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 800efb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 800efb4:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 800f0ac <chPipeWriteTimeout.constprop.0+0xfc>
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 800efb8:	b083      	sub	sp, #12
  if (pp->reset) {
 800efba:	f89b 7014 	ldrb.w	r7, [fp, #20]
 800efbe:	b11f      	cbz	r7, 800efc8 <chPipeWriteTimeout.constprop.0+0x18>
    return (size_t)0;
 800efc0:	2000      	movs	r0, #0
  }

  PW_UNLOCK(pp);

  return max - n;
}
 800efc2:	b003      	add	sp, #12
 800efc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efc8:	4681      	mov	r9, r0
 800efca:	f04f 0a20 	mov.w	sl, #32
 800efce:	f38a 8811 	msr	BASEPRI, sl
  chMtxLockS(mp);
 800efd2:	f10b 0030 	add.w	r0, fp, #48	; 0x30
 800efd6:	f7f5 fbeb 	bl	80047b0 <chMtxLockS>
 800efda:	f387 8811 	msr	BASEPRI, r7
 800efde:	464d      	mov	r5, r9
 800efe0:	4e33      	ldr	r6, [pc, #204]	; (800f0b0 <chPipeWriteTimeout.constprop.0+0x100>)
 800efe2:	eb0b 080a 	add.w	r8, fp, sl
 800efe6:	f38a 8811 	msr	BASEPRI, sl
 800efea:	4640      	mov	r0, r8
 800efec:	f7f5 fbe0 	bl	80047b0 <chMtxLockS>
 800eff0:	f387 8811 	msr	BASEPRI, r7
 */
static inline size_t chPipeGetSize(const pipe_t *pp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(pp->top - pp->buffer);
 800eff4:	e9db 4300 	ldrd	r4, r3, [fp]
 *
 * @api
 */
static inline size_t chPipeGetUsedCount(const pipe_t *pp) {

  return pp->cnt;
 800eff8:	f8db 2010 	ldr.w	r2, [fp, #16]
  return (size_t)(pp->top - pp->buffer);
 800effc:	1b1c      	subs	r4, r3, r4
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 800effe:	1aa4      	subs	r4, r4, r2
 800f000:	42ac      	cmp	r4, r5
 800f002:	bf28      	it	cs
 800f004:	462c      	movcs	r4, r5
  s1 = (size_t)(pp->top - pp->wrptr);
 800f006:	f8db 0008 	ldr.w	r0, [fp, #8]
  pp->cnt += n;
 800f00a:	4422      	add	r2, r4
  s1 = (size_t)(pp->top - pp->wrptr);
 800f00c:	1a1b      	subs	r3, r3, r0
  if (n < s1) {
 800f00e:	429c      	cmp	r4, r3
  pp->cnt += n;
 800f010:	f8cb 2010 	str.w	r2, [fp, #16]
  if (n < s1) {
 800f014:	d33f      	bcc.n	800f096 <chPipeWriteTimeout.constprop.0+0xe6>
  else if (n > s1) {
 800f016:	d935      	bls.n	800f084 <chPipeWriteTimeout.constprop.0+0xd4>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 800f018:	461a      	mov	r2, r3
 800f01a:	4631      	mov	r1, r6
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	f7f1 f925 	bl	800026c <memcpy>
    s2 = n - s1;
 800f022:	9b01      	ldr	r3, [sp, #4]
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 800f024:	f8db 0000 	ldr.w	r0, [fp]
    s2 = n - s1;
 800f028:	1ae2      	subs	r2, r4, r3
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 800f02a:	18f1      	adds	r1, r6, r3
 800f02c:	9201      	str	r2, [sp, #4]
 800f02e:	f7f1 f91d 	bl	800026c <memcpy>
    pp->wrptr = pp->buffer + s2;
 800f032:	f8db 3000 	ldr.w	r3, [fp]
 800f036:	9a01      	ldr	r2, [sp, #4]
 800f038:	441a      	add	r2, r3
 800f03a:	f8cb 2008 	str.w	r2, [fp, #8]
  PC_UNLOCK(pp);
 800f03e:	4640      	mov	r0, r8
      bp += done;
 800f040:	4426      	add	r6, r4
  PC_UNLOCK(pp);
 800f042:	f7f5 fc4d 	bl	80048e0 <chMtxUnlock>
    if (done == (size_t)0) {
 800f046:	b96c      	cbnz	r4, 800f064 <chPipeWriteTimeout.constprop.0+0xb4>
 800f048:	2320      	movs	r3, #32
 800f04a:	f383 8811 	msr	BASEPRI, r3
 800f04e:	f384 8811 	msr	BASEPRI, r4
  return max - n;
 800f052:	eba9 0905 	sub.w	r9, r9, r5
  PW_UNLOCK(pp);
 800f056:	4817      	ldr	r0, [pc, #92]	; (800f0b4 <chPipeWriteTimeout.constprop.0+0x104>)
 800f058:	f7f5 fc42 	bl	80048e0 <chMtxUnlock>
 800f05c:	4648      	mov	r0, r9
}
 800f05e:	b003      	add	sp, #12
 800f060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n  -= done;
 800f064:	1b2d      	subs	r5, r5, r4
 800f066:	f38a 8811 	msr	BASEPRI, sl
  if (*trp != NULL) {
 800f06a:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f06e:	b120      	cbz	r0, 800f07a <chPipeWriteTimeout.constprop.0+0xca>
    chSchWakeupS(tp, msg);
 800f070:	2100      	movs	r1, #0
    *trp = NULL;
 800f072:	f8cb 701c 	str.w	r7, [fp, #28]
    chSchWakeupS(tp, msg);
 800f076:	f7f5 f823 	bl	80040c0 <chSchWakeupS>
 800f07a:	f387 8811 	msr	BASEPRI, r7
  while (n > 0U) {
 800f07e:	2d00      	cmp	r5, #0
 800f080:	d1b1      	bne.n	800efe6 <chPipeWriteTimeout.constprop.0+0x36>
 800f082:	e7e8      	b.n	800f056 <chPipeWriteTimeout.constprop.0+0xa6>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800f084:	4631      	mov	r1, r6
 800f086:	4622      	mov	r2, r4
 800f088:	f7f1 f8f0 	bl	800026c <memcpy>
    pp->wrptr = pp->buffer;
 800f08c:	f8db 3000 	ldr.w	r3, [fp]
 800f090:	f8cb 3008 	str.w	r3, [fp, #8]
 800f094:	e7d3      	b.n	800f03e <chPipeWriteTimeout.constprop.0+0x8e>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800f096:	4622      	mov	r2, r4
 800f098:	4631      	mov	r1, r6
 800f09a:	f7f1 f8e7 	bl	800026c <memcpy>
    pp->wrptr += n;
 800f09e:	f8db 3008 	ldr.w	r3, [fp, #8]
 800f0a2:	4423      	add	r3, r4
 800f0a4:	f8cb 3008 	str.w	r3, [fp, #8]
 800f0a8:	e7c9      	b.n	800f03e <chPipeWriteTimeout.constprop.0+0x8e>
 800f0aa:	bf00      	nop
 800f0ac:	20000894 	.word	0x20000894
 800f0b0:	08012f34 	.word	0x08012f34
 800f0b4:	200008c4 	.word	0x200008c4
	...

0800f0c0 <chPipeReadTimeout.part.0.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 800f0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c4:	b083      	sub	sp, #12
 800f0c6:	f04f 0b20 	mov.w	fp, #32
 800f0ca:	4607      	mov	r7, r0
 800f0cc:	4688      	mov	r8, r1
 800f0ce:	9100      	str	r1, [sp, #0]
 800f0d0:	f38b 8811 	msr	BASEPRI, fp
 800f0d4:	4831      	ldr	r0, [pc, #196]	; (800f19c <chPipeReadTimeout.part.0.constprop.0+0xdc>)
 800f0d6:	f7f5 fb6b 	bl	80047b0 <chMtxLockS>
 800f0da:	f04f 0900 	mov.w	r9, #0
 800f0de:	f389 8811 	msr	BASEPRI, r9
 800f0e2:	4d2f      	ldr	r5, [pc, #188]	; (800f1a0 <chPipeReadTimeout.part.0.constprop.0+0xe0>)
 800f0e4:	eb05 0a0b 	add.w	sl, r5, fp
 800f0e8:	f38b 8811 	msr	BASEPRI, fp
 800f0ec:	4650      	mov	r0, sl
 800f0ee:	f7f5 fb5f 	bl	80047b0 <chMtxLockS>
 800f0f2:	f389 8811 	msr	BASEPRI, r9
  s1 = (size_t)(pp->top - pp->rdptr);
 800f0f6:	e9d5 1303 	ldrd	r1, r3, [r5, #12]
 800f0fa:	4543      	cmp	r3, r8
 800f0fc:	461c      	mov	r4, r3
 800f0fe:	bf28      	it	cs
 800f100:	4644      	movcs	r4, r8
 800f102:	686e      	ldr	r6, [r5, #4]
  pp->cnt -= n;
 800f104:	1b1b      	subs	r3, r3, r4
  s1 = (size_t)(pp->top - pp->rdptr);
 800f106:	1a76      	subs	r6, r6, r1
  if (n < s1) {
 800f108:	42b4      	cmp	r4, r6
  pp->cnt -= n;
 800f10a:	612b      	str	r3, [r5, #16]
  if (n < s1) {
 800f10c:	d33e      	bcc.n	800f18c <chPipeReadTimeout.part.0.constprop.0+0xcc>
    s2 = n - s1;
 800f10e:	eba4 0306 	sub.w	r3, r4, r6
 800f112:	9301      	str	r3, [sp, #4]
  else if (n > s1) {
 800f114:	d933      	bls.n	800f17e <chPipeReadTimeout.part.0.constprop.0+0xbe>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800f116:	4632      	mov	r2, r6
 800f118:	4638      	mov	r0, r7
 800f11a:	f7f1 f8a7 	bl	800026c <memcpy>
    memcpy((void *)bp, (void *)pp->buffer, s2);
 800f11e:	9b01      	ldr	r3, [sp, #4]
 800f120:	6829      	ldr	r1, [r5, #0]
 800f122:	461a      	mov	r2, r3
 800f124:	19b8      	adds	r0, r7, r6
 800f126:	f7f1 f8a1 	bl	800026c <memcpy>
    pp->rdptr = pp->buffer + s2;
 800f12a:	682a      	ldr	r2, [r5, #0]
 800f12c:	9b01      	ldr	r3, [sp, #4]
 800f12e:	4413      	add	r3, r2
 800f130:	60eb      	str	r3, [r5, #12]
  PC_UNLOCK(pp);
 800f132:	4650      	mov	r0, sl
        break;
      }
    }
    else {
      n  -= done;
      bp += done;
 800f134:	4427      	add	r7, r4
  PC_UNLOCK(pp);
 800f136:	f7f5 fbd3 	bl	80048e0 <chMtxUnlock>
    if (done == (size_t)0) {
 800f13a:	b97c      	cbnz	r4, 800f15c <chPipeReadTimeout.part.0.constprop.0+0x9c>
 800f13c:	2320      	movs	r3, #32
 800f13e:	f383 8811 	msr	BASEPRI, r3
 800f142:	f384 8811 	msr	BASEPRI, r4
    }
  }

  PR_UNLOCK(pp);

  return max - n;
 800f146:	9b00      	ldr	r3, [sp, #0]
 800f148:	eba3 0308 	sub.w	r3, r3, r8
 800f14c:	9300      	str	r3, [sp, #0]
  PR_UNLOCK(pp);
 800f14e:	4813      	ldr	r0, [pc, #76]	; (800f19c <chPipeReadTimeout.part.0.constprop.0+0xdc>)
 800f150:	f7f5 fbc6 	bl	80048e0 <chMtxUnlock>
}
 800f154:	9800      	ldr	r0, [sp, #0]
 800f156:	b003      	add	sp, #12
 800f158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n  -= done;
 800f15c:	eba8 0804 	sub.w	r8, r8, r4
 800f160:	f38b 8811 	msr	BASEPRI, fp
  if (*trp != NULL) {
 800f164:	69a8      	ldr	r0, [r5, #24]
 800f166:	b120      	cbz	r0, 800f172 <chPipeReadTimeout.part.0.constprop.0+0xb2>
    chSchWakeupS(tp, msg);
 800f168:	2100      	movs	r1, #0
    *trp = NULL;
 800f16a:	f8c5 9018 	str.w	r9, [r5, #24]
    chSchWakeupS(tp, msg);
 800f16e:	f7f4 ffa7 	bl	80040c0 <chSchWakeupS>
 800f172:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800f176:	f1b8 0f00 	cmp.w	r8, #0
 800f17a:	d1b5      	bne.n	800f0e8 <chPipeReadTimeout.part.0.constprop.0+0x28>
 800f17c:	e7e7      	b.n	800f14e <chPipeReadTimeout.part.0.constprop.0+0x8e>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800f17e:	4622      	mov	r2, r4
 800f180:	4638      	mov	r0, r7
 800f182:	f7f1 f873 	bl	800026c <memcpy>
    pp->rdptr = pp->buffer;
 800f186:	682b      	ldr	r3, [r5, #0]
 800f188:	60eb      	str	r3, [r5, #12]
 800f18a:	e7d2      	b.n	800f132 <chPipeReadTimeout.part.0.constprop.0+0x72>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800f18c:	4622      	mov	r2, r4
 800f18e:	4638      	mov	r0, r7
 800f190:	f7f1 f86c 	bl	800026c <memcpy>
    pp->rdptr += n;
 800f194:	68eb      	ldr	r3, [r5, #12]
 800f196:	4423      	add	r3, r4
 800f198:	60eb      	str	r3, [r5, #12]
 800f19a:	e7ca      	b.n	800f132 <chPipeReadTimeout.part.0.constprop.0+0x72>
 800f19c:	200008d4 	.word	0x200008d4
 800f1a0:	20000894 	.word	0x20000894
	...

0800f1b0 <oslib_test_003_001_execute.lto_priv.0>:
static void oslib_test_003_001_execute(void) {
 800f1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  test_set_step(1);
 800f1b2:	2701      	movs	r7, #1
 800f1b4:	4d5f      	ldr	r5, [pc, #380]	; (800f334 <oslib_test_003_001_execute.lto_priv.0+0x184>)
 800f1b6:	2620      	movs	r6, #32
static void oslib_test_003_001_execute(void) {
 800f1b8:	b085      	sub	sp, #20
  test_set_step(1);
 800f1ba:	602f      	str	r7, [r5, #0]
 800f1bc:	f386 8811 	msr	BASEPRI, r6
 800f1c0:	4c5d      	ldr	r4, [pc, #372]	; (800f338 <oslib_test_003_001_execute.lto_priv.0+0x188>)
 800f1c2:	19a0      	adds	r0, r4, r6
 800f1c4:	f7f5 faf4 	bl	80047b0 <chMtxLockS>
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f382 8811 	msr	BASEPRI, r2
  pp->wrptr = pp->buffer;
 800f1ce:	6823      	ldr	r3, [r4, #0]
  pp->reset = true;
 800f1d0:	7527      	strb	r7, [r4, #20]
  pp->rdptr = pp->buffer;
 800f1d2:	e9c4 3302 	strd	r3, r3, [r4, #8]
  pp->cnt   = (size_t)0;
 800f1d6:	6122      	str	r2, [r4, #16]
 800f1d8:	f386 8811 	msr	BASEPRI, r6
  if (*trp != NULL) {
 800f1dc:	69a3      	ldr	r3, [r4, #24]
 800f1de:	b183      	cbz	r3, 800f202 <oslib_test_003_001_execute.lto_priv.0+0x52>
    tp->u.rdymsg = msg;
 800f1e0:	f06f 0101 	mvn.w	r1, #1
    *trp = NULL;
 800f1e4:	61a2      	str	r2, [r4, #24]
  tp->state = CH_STATE_READY;
 800f1e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  } while (unlikely(pqp->prio >= p->prio));
 800f1ea:	6898      	ldr	r0, [r3, #8]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800f1ec:	699a      	ldr	r2, [r3, #24]
    tp->u.rdymsg = msg;
 800f1ee:	6299      	str	r1, [r3, #40]	; 0x28
    pqp = pqp->next;
 800f1f0:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800f1f2:	6891      	ldr	r1, [r2, #8]
 800f1f4:	4281      	cmp	r1, r0
 800f1f6:	d2fb      	bcs.n	800f1f0 <oslib_test_003_001_execute.lto_priv.0+0x40>
  p->prev       = pqp->prev;
 800f1f8:	6851      	ldr	r1, [r2, #4]
 800f1fa:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 800f1fe:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800f200:	6053      	str	r3, [r2, #4]
  if (*trp != NULL) {
 800f202:	69e3      	ldr	r3, [r4, #28]
 800f204:	b18b      	cbz	r3, 800f22a <oslib_test_003_001_execute.lto_priv.0+0x7a>
    *trp = NULL;
 800f206:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
 800f208:	f06f 0601 	mvn.w	r6, #1
 800f20c:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800f20e:	6898      	ldr	r0, [r3, #8]
 800f210:	629e      	str	r6, [r3, #40]	; 0x28
    *trp = NULL;
 800f212:	61e1      	str	r1, [r4, #28]
  tp->state = CH_STATE_READY;
 800f214:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 800f218:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800f21a:	6891      	ldr	r1, [r2, #8]
 800f21c:	4281      	cmp	r1, r0
 800f21e:	d2fb      	bcs.n	800f218 <oslib_test_003_001_execute.lto_priv.0+0x68>
  p->prev       = pqp->prev;
 800f220:	6851      	ldr	r1, [r2, #4]
 800f222:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 800f226:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800f228:	6053      	str	r3, [r2, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800f22a:	4b44      	ldr	r3, [pc, #272]	; (800f33c <oslib_test_003_001_execute.lto_priv.0+0x18c>)
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	68db      	ldr	r3, [r3, #12]
 800f230:	6892      	ldr	r2, [r2, #8]
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	429a      	cmp	r2, r3
 800f236:	d901      	bls.n	800f23c <oslib_test_003_001_execute.lto_priv.0+0x8c>
    __sch_reschedule_ahead();
 800f238:	f7f4 fcc2 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800f23c:	2300      	movs	r3, #0
 800f23e:	f383 8811 	msr	BASEPRI, r3
  PC_UNLOCK(pp);
 800f242:	483f      	ldr	r0, [pc, #252]	; (800f340 <oslib_test_003_001_execute.lto_priv.0+0x190>)
 800f244:	f7f5 fb4c 	bl	80048e0 <chMtxUnlock>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f248:	6822      	ldr	r2, [r4, #0]
 800f24a:	68e3      	ldr	r3, [r4, #12]
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d006      	beq.n	800f25e <oslib_test_003_001_execute.lto_priv.0+0xae>
  chtest.global_fail     = true;
 800f250:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800f254:	4a3b      	ldr	r2, [pc, #236]	; (800f344 <oslib_test_003_001_execute.lto_priv.0+0x194>)
  chtest.global_fail     = true;
 800f256:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800f258:	60aa      	str	r2, [r5, #8]
}
 800f25a:	b005      	add	sp, #20
 800f25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f25e:	68a2      	ldr	r2, [r4, #8]
 800f260:	4293      	cmp	r3, r2
 800f262:	d1f5      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
 800f264:	6923      	ldr	r3, [r4, #16]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d1f2      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
  test_set_step(2);
 800f26a:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800f26c:	2010      	movs	r0, #16
  test_set_step(2);
 800f26e:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800f270:	f7ff fe9e 	bl	800efb0 <chPipeWriteTimeout.constprop.0>
  if (!condition) {
 800f274:	2800      	cmp	r0, #0
 800f276:	d141      	bne.n	800f2fc <oslib_test_003_001_execute.lto_priv.0+0x14c>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f278:	6822      	ldr	r2, [r4, #0]
 800f27a:	68e3      	ldr	r3, [r4, #12]
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d1e7      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
 800f280:	68a2      	ldr	r2, [r4, #8]
 800f282:	4293      	cmp	r3, r2
 800f284:	d1e4      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
 800f286:	6923      	ldr	r3, [r4, #16]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d1e1      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
  test_set_step(3);
 800f28c:	2203      	movs	r2, #3
  if (pp->reset) {
 800f28e:	7d23      	ldrb	r3, [r4, #20]
 800f290:	602a      	str	r2, [r5, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d039      	beq.n	800f30a <oslib_test_003_001_execute.lto_priv.0+0x15a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f296:	6922      	ldr	r2, [r4, #16]
 800f298:	2a00      	cmp	r2, #0
 800f29a:	d1d9      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
  test_set_step(5);
 800f29c:	2305      	movs	r3, #5
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800f29e:	2010      	movs	r0, #16
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 800f2a0:	7522      	strb	r2, [r4, #20]
  test_set_step(5);
 800f2a2:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800f2a4:	f7ff fe84 	bl	800efb0 <chPipeWriteTimeout.constprop.0>
 800f2a8:	2810      	cmp	r0, #16
 800f2aa:	d13c      	bne.n	800f326 <oslib_test_003_001_execute.lto_priv.0+0x176>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f2ac:	6822      	ldr	r2, [r4, #0]
 800f2ae:	68e3      	ldr	r3, [r4, #12]
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d1cd      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
 800f2b4:	68a2      	ldr	r2, [r4, #8]
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d1ca      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
 800f2ba:	6921      	ldr	r1, [r4, #16]
 800f2bc:	2910      	cmp	r1, #16
 800f2be:	d1c7      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
  test_set_step(6);
 800f2c0:	2206      	movs	r2, #6
 800f2c2:	7d23      	ldrb	r3, [r4, #20]
 800f2c4:	602a      	str	r2, [r5, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d12d      	bne.n	800f326 <oslib_test_003_001_execute.lto_priv.0+0x176>
 800f2ca:	4668      	mov	r0, sp
 800f2cc:	f7ff fef8 	bl	800f0c0 <chPipeReadTimeout.part.0.constprop.0>
 800f2d0:	2810      	cmp	r0, #16
 800f2d2:	d128      	bne.n	800f326 <oslib_test_003_001_execute.lto_priv.0+0x176>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f2d4:	6822      	ldr	r2, [r4, #0]
 800f2d6:	68e3      	ldr	r3, [r4, #12]
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d1b9      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
 800f2dc:	68a2      	ldr	r2, [r4, #8]
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d1b6      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
 800f2e2:	6927      	ldr	r7, [r4, #16]
 800f2e4:	2f00      	cmp	r7, #0
 800f2e6:	d1b3      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800f2e8:	4b17      	ldr	r3, [pc, #92]	; (800f348 <oslib_test_003_001_execute.lto_priv.0+0x198>)
 800f2ea:	9a00      	ldr	r2, [sp, #0]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d033      	beq.n	800f358 <oslib_test_003_001_execute.lto_priv.0+0x1a8>
  chtest.global_fail     = true;
 800f2f0:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800f2f4:	4a15      	ldr	r2, [pc, #84]	; (800f34c <oslib_test_003_001_execute.lto_priv.0+0x19c>)
  chtest.global_fail     = true;
 800f2f6:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800f2f8:	60aa      	str	r2, [r5, #8]
 800f2fa:	e7ae      	b.n	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
  chtest.global_fail     = true;
 800f2fc:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800f300:	4a13      	ldr	r2, [pc, #76]	; (800f350 <oslib_test_003_001_execute.lto_priv.0+0x1a0>)
  chtest.global_fail     = true;
 800f302:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800f304:	60aa      	str	r2, [r5, #8]
}
 800f306:	b005      	add	sp, #20
 800f308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f30a:	2110      	movs	r1, #16
 800f30c:	4668      	mov	r0, sp
 800f30e:	f7ff fed7 	bl	800f0c0 <chPipeReadTimeout.part.0.constprop.0>
  if (!condition) {
 800f312:	2800      	cmp	r0, #0
 800f314:	d1f2      	bne.n	800f2fc <oslib_test_003_001_execute.lto_priv.0+0x14c>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f316:	6823      	ldr	r3, [r4, #0]
 800f318:	68e2      	ldr	r2, [r4, #12]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d198      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
 800f31e:	68a2      	ldr	r2, [r4, #8]
 800f320:	429a      	cmp	r2, r3
 800f322:	d195      	bne.n	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
 800f324:	e7b7      	b.n	800f296 <oslib_test_003_001_execute.lto_priv.0+0xe6>
  chtest.global_fail     = true;
 800f326:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800f32a:	4a0a      	ldr	r2, [pc, #40]	; (800f354 <oslib_test_003_001_execute.lto_priv.0+0x1a4>)
  chtest.global_fail     = true;
 800f32c:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800f32e:	60aa      	str	r2, [r5, #8]
 800f330:	e793      	b.n	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
 800f332:	bf00      	nop
 800f334:	20001134 	.word	0x20001134
 800f338:	20000894 	.word	0x20000894
 800f33c:	20001050 	.word	0x20001050
 800f340:	200008b4 	.word	0x200008b4
 800f344:	08012c98 	.word	0x08012c98
 800f348:	33323130 	.word	0x33323130
 800f34c:	08012c84 	.word	0x08012c84
 800f350:	08012c78 	.word	0x08012c78
 800f354:	08012914 	.word	0x08012914
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800f358:	9a01      	ldr	r2, [sp, #4]
 800f35a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 800f35e:	429a      	cmp	r2, r3
 800f360:	d1c6      	bne.n	800f2f0 <oslib_test_003_001_execute.lto_priv.0+0x140>
 800f362:	f103 6330 	add.w	r3, r3, #184549376	; 0xb000000
 800f366:	9a02      	ldr	r2, [sp, #8]
 800f368:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
 800f36c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f370:	429a      	cmp	r2, r3
 800f372:	d1bd      	bne.n	800f2f0 <oslib_test_003_001_execute.lto_priv.0+0x140>
 800f374:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800f378:	9a03      	ldr	r2, [sp, #12]
 800f37a:	f503 2381 	add.w	r3, r3, #264192	; 0x40800
 800f37e:	f203 330b 	addw	r3, r3, #779	; 0x30b
 800f382:	429a      	cmp	r2, r3
 800f384:	d1b4      	bne.n	800f2f0 <oslib_test_003_001_execute.lto_priv.0+0x140>
  test_set_step(7);
 800f386:	2307      	movs	r3, #7
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 800f388:	2004      	movs	r0, #4
  test_set_step(7);
 800f38a:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 800f38c:	f7ff fe10 	bl	800efb0 <chPipeWriteTimeout.constprop.0>
  if (!condition) {
 800f390:	2804      	cmp	r0, #4
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800f392:	f04f 0600 	mov.w	r6, #0
 800f396:	d1c6      	bne.n	800f326 <oslib_test_003_001_execute.lto_priv.0+0x176>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800f398:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800f39c:	4293      	cmp	r3, r2
 800f39e:	f43f af57 	beq.w	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
 800f3a2:	6822      	ldr	r2, [r4, #0]
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	f47f af53 	bne.w	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
 800f3aa:	6923      	ldr	r3, [r4, #16]
 800f3ac:	2b04      	cmp	r3, #4
 800f3ae:	f47f af4f 	bne.w	800f250 <oslib_test_003_001_execute.lto_priv.0+0xa0>
  test_set_step(8);
 800f3b2:	2308      	movs	r3, #8
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 800f3b4:	200c      	movs	r0, #12
  test_set_step(8);
 800f3b6:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 800f3b8:	f7ff fdfa 	bl	800efb0 <chPipeWriteTimeout.constprop.0>
 800f3bc:	280c      	cmp	r0, #12
 800f3be:	d1b2      	bne.n	800f326 <oslib_test_003_001_execute.lto_priv.0+0x176>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f3c0:	6822      	ldr	r2, [r4, #0]
 800f3c2:	68e3      	ldr	r3, [r4, #12]
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	f000 80ef 	beq.w	800f5a8 <oslib_test_003_001_execute.lto_priv.0+0x3f8>
 800f3ca:	2000      	movs	r0, #0
 800f3cc:	4993      	ldr	r1, [pc, #588]	; (800f61c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800f3ce:	f7f7 fdf7 	bl	8006fc0 <__test_assert>
 800f3d2:	2800      	cmp	r0, #0
 800f3d4:	f47f af41 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
  test_set_step(9);
 800f3d8:	2309      	movs	r3, #9
 800f3da:	602b      	str	r3, [r5, #0]
 800f3dc:	7d23      	ldrb	r3, [r4, #20]
 800f3de:	b91b      	cbnz	r3, 800f3e8 <oslib_test_003_001_execute.lto_priv.0+0x238>
 800f3e0:	2104      	movs	r1, #4
 800f3e2:	4668      	mov	r0, sp
 800f3e4:	f7ff fe6c 	bl	800f0c0 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == 4, "wrong size");
 800f3e8:	f1a0 0e04 	sub.w	lr, r0, #4
 800f3ec:	f1de 0000 	rsbs	r0, lr, #0
 800f3f0:	eb40 000e 	adc.w	r0, r0, lr
 800f3f4:	498a      	ldr	r1, [pc, #552]	; (800f620 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 800f3f6:	f7f7 fde3 	bl	8006fc0 <__test_assert>
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	f47f af2d 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800f400:	6823      	ldr	r3, [r4, #0]
 800f402:	68e2      	ldr	r2, [r4, #12]
 800f404:	429a      	cmp	r2, r3
 800f406:	d003      	beq.n	800f410 <oslib_test_003_001_execute.lto_priv.0+0x260>
 800f408:	68a2      	ldr	r2, [r4, #8]
 800f40a:	4293      	cmp	r3, r2
 800f40c:	f000 80f5 	beq.w	800f5fa <oslib_test_003_001_execute.lto_priv.0+0x44a>
 800f410:	4982      	ldr	r1, [pc, #520]	; (800f61c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800f412:	f7f7 fdd5 	bl	8006fc0 <__test_assert>
 800f416:	2800      	cmp	r0, #0
 800f418:	f47f af1f 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 800f41c:	4669      	mov	r1, sp
 800f41e:	2204      	movs	r2, #4
 800f420:	4880      	ldr	r0, [pc, #512]	; (800f624 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 800f422:	f000 fb49 	bl	800fab8 <memcmp>
 800f426:	fab0 f080 	clz	r0, r0
 800f42a:	497f      	ldr	r1, [pc, #508]	; (800f628 <oslib_test_003_001_execute.lto_priv.0+0x478>)
 800f42c:	0940      	lsrs	r0, r0, #5
 800f42e:	f7f7 fdc7 	bl	8006fc0 <__test_assert>
 800f432:	2800      	cmp	r0, #0
 800f434:	f47f af11 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
  test_set_step(10);
 800f438:	230a      	movs	r3, #10
 800f43a:	602b      	str	r3, [r5, #0]
 800f43c:	7d23      	ldrb	r3, [r4, #20]
 800f43e:	b91b      	cbnz	r3, 800f448 <oslib_test_003_001_execute.lto_priv.0+0x298>
 800f440:	210c      	movs	r1, #12
 800f442:	4668      	mov	r0, sp
 800f444:	f7ff fe3c 	bl	800f0c0 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 800f448:	f1a0 010c 	sub.w	r1, r0, #12
 800f44c:	4248      	negs	r0, r1
 800f44e:	4148      	adcs	r0, r1
 800f450:	4973      	ldr	r1, [pc, #460]	; (800f620 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 800f452:	f7f7 fdb5 	bl	8006fc0 <__test_assert>
 800f456:	2800      	cmp	r0, #0
 800f458:	f47f aeff 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f45c:	6822      	ldr	r2, [r4, #0]
 800f45e:	68e3      	ldr	r3, [r4, #12]
 800f460:	4293      	cmp	r3, r2
 800f462:	f000 80bc 	beq.w	800f5de <oslib_test_003_001_execute.lto_priv.0+0x42e>
 800f466:	496d      	ldr	r1, [pc, #436]	; (800f61c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800f468:	f7f7 fdaa 	bl	8006fc0 <__test_assert>
 800f46c:	2800      	cmp	r0, #0
 800f46e:	f47f aef4 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 800f472:	4669      	mov	r1, sp
 800f474:	220c      	movs	r2, #12
 800f476:	486b      	ldr	r0, [pc, #428]	; (800f624 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 800f478:	f000 fb1e 	bl	800fab8 <memcmp>
 800f47c:	fab0 f080 	clz	r0, r0
 800f480:	4969      	ldr	r1, [pc, #420]	; (800f628 <oslib_test_003_001_execute.lto_priv.0+0x478>)
 800f482:	0940      	lsrs	r0, r0, #5
 800f484:	f7f7 fd9c 	bl	8006fc0 <__test_assert>
 800f488:	2800      	cmp	r0, #0
 800f48a:	f47f aee6 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
  test_set_step(11);
 800f48e:	230b      	movs	r3, #11
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 800f490:	2005      	movs	r0, #5
  test_set_step(11);
 800f492:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 800f494:	f7ff fd8c 	bl	800efb0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 800f498:	1f42      	subs	r2, r0, #5
 800f49a:	4250      	negs	r0, r2
 800f49c:	4150      	adcs	r0, r2
 800f49e:	4960      	ldr	r1, [pc, #384]	; (800f620 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 800f4a0:	f7f7 fd8e 	bl	8006fc0 <__test_assert>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	f47f aed8 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800f4aa:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d003      	beq.n	800f4ba <oslib_test_003_001_execute.lto_priv.0+0x30a>
 800f4b2:	6822      	ldr	r2, [r4, #0]
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	f000 809b 	beq.w	800f5f0 <oslib_test_003_001_execute.lto_priv.0+0x440>
 800f4ba:	4958      	ldr	r1, [pc, #352]	; (800f61c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800f4bc:	f7f7 fd80 	bl	8006fc0 <__test_assert>
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	f47f aeca 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
  test_set_step(12);
 800f4c6:	230c      	movs	r3, #12
 800f4c8:	602b      	str	r3, [r5, #0]
 800f4ca:	7d23      	ldrb	r3, [r4, #20]
 800f4cc:	b91b      	cbnz	r3, 800f4d6 <oslib_test_003_001_execute.lto_priv.0+0x326>
 800f4ce:	2105      	movs	r1, #5
 800f4d0:	4668      	mov	r0, sp
 800f4d2:	f7ff fdf5 	bl	800f0c0 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == 5, "wrong size");
 800f4d6:	f1a0 0e05 	sub.w	lr, r0, #5
 800f4da:	f1de 0000 	rsbs	r0, lr, #0
 800f4de:	eb40 000e 	adc.w	r0, r0, lr
 800f4e2:	494f      	ldr	r1, [pc, #316]	; (800f620 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 800f4e4:	f7f7 fd6c 	bl	8006fc0 <__test_assert>
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	f47f aeb6 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800f4ee:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d06b      	beq.n	800f5ce <oslib_test_003_001_execute.lto_priv.0+0x41e>
 800f4f6:	4949      	ldr	r1, [pc, #292]	; (800f61c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800f4f8:	f7f7 fd62 	bl	8006fc0 <__test_assert>
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	f47f aeac 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 800f502:	4669      	mov	r1, sp
 800f504:	2205      	movs	r2, #5
 800f506:	4847      	ldr	r0, [pc, #284]	; (800f624 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 800f508:	f000 fad6 	bl	800fab8 <memcmp>
 800f50c:	fab0 f080 	clz	r0, r0
 800f510:	4945      	ldr	r1, [pc, #276]	; (800f628 <oslib_test_003_001_execute.lto_priv.0+0x478>)
 800f512:	0940      	lsrs	r0, r0, #5
 800f514:	f7f7 fd54 	bl	8006fc0 <__test_assert>
 800f518:	2800      	cmp	r0, #0
 800f51a:	f47f ae9e 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
  test_set_step(13);
 800f51e:	230d      	movs	r3, #13
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800f520:	2010      	movs	r0, #16
  test_set_step(13);
 800f522:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800f524:	f7ff fd44 	bl	800efb0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 800f528:	f1a0 0c10 	sub.w	ip, r0, #16
 800f52c:	f1dc 0000 	rsbs	r0, ip, #0
 800f530:	eb40 000c 	adc.w	r0, r0, ip
 800f534:	493a      	ldr	r1, [pc, #232]	; (800f620 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 800f536:	f7f7 fd43 	bl	8006fc0 <__test_assert>
 800f53a:	2800      	cmp	r0, #0
 800f53c:	f47f ae8d 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800f540:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800f544:	4293      	cmp	r3, r2
 800f546:	d039      	beq.n	800f5bc <oslib_test_003_001_execute.lto_priv.0+0x40c>
 800f548:	4934      	ldr	r1, [pc, #208]	; (800f61c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800f54a:	f7f7 fd39 	bl	8006fc0 <__test_assert>
 800f54e:	2800      	cmp	r0, #0
 800f550:	f47f ae83 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
  test_set_step(14);
 800f554:	230e      	movs	r3, #14
 800f556:	602b      	str	r3, [r5, #0]
 800f558:	7d23      	ldrb	r3, [r4, #20]
 800f55a:	b923      	cbnz	r3, 800f566 <oslib_test_003_001_execute.lto_priv.0+0x3b6>
 800f55c:	2110      	movs	r1, #16
 800f55e:	4668      	mov	r0, sp
 800f560:	f7ff fdae 	bl	800f0c0 <chPipeReadTimeout.part.0.constprop.0>
 800f564:	4607      	mov	r7, r0
    test_assert(n == PIPE_SIZE, "wrong size");
 800f566:	f1a7 0310 	sub.w	r3, r7, #16
 800f56a:	4258      	negs	r0, r3
 800f56c:	4158      	adcs	r0, r3
 800f56e:	492c      	ldr	r1, [pc, #176]	; (800f620 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 800f570:	f7f7 fd26 	bl	8006fc0 <__test_assert>
 800f574:	2800      	cmp	r0, #0
 800f576:	f47f ae70 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800f57a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800f57e:	4293      	cmp	r3, r2
 800f580:	d043      	beq.n	800f60a <oslib_test_003_001_execute.lto_priv.0+0x45a>
 800f582:	4630      	mov	r0, r6
 800f584:	4925      	ldr	r1, [pc, #148]	; (800f61c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800f586:	f7f7 fd1b 	bl	8006fc0 <__test_assert>
 800f58a:	2800      	cmp	r0, #0
 800f58c:	f47f ae65 	bne.w	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800f590:	4669      	mov	r1, sp
 800f592:	2210      	movs	r2, #16
 800f594:	4823      	ldr	r0, [pc, #140]	; (800f624 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 800f596:	f000 fa8f 	bl	800fab8 <memcmp>
 800f59a:	fab0 f080 	clz	r0, r0
 800f59e:	4922      	ldr	r1, [pc, #136]	; (800f628 <oslib_test_003_001_execute.lto_priv.0+0x478>)
 800f5a0:	0940      	lsrs	r0, r0, #5
 800f5a2:	f7f7 fd0d 	bl	8006fc0 <__test_assert>
 800f5a6:	e658      	b.n	800f25a <oslib_test_003_001_execute.lto_priv.0+0xaa>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f5a8:	68a2      	ldr	r2, [r4, #8]
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	f47f af0d 	bne.w	800f3ca <oslib_test_003_001_execute.lto_priv.0+0x21a>
 800f5b0:	6920      	ldr	r0, [r4, #16]
 800f5b2:	f1a0 0310 	sub.w	r3, r0, #16
 800f5b6:	4258      	negs	r0, r3
 800f5b8:	4158      	adcs	r0, r3
 800f5ba:	e707      	b.n	800f3cc <oslib_test_003_001_execute.lto_priv.0+0x21c>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800f5bc:	6822      	ldr	r2, [r4, #0]
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d0c2      	beq.n	800f548 <oslib_test_003_001_execute.lto_priv.0+0x398>
 800f5c2:	6920      	ldr	r0, [r4, #16]
 800f5c4:	f1a0 0210 	sub.w	r2, r0, #16
 800f5c8:	4250      	negs	r0, r2
 800f5ca:	4150      	adcs	r0, r2
 800f5cc:	e7bc      	b.n	800f548 <oslib_test_003_001_execute.lto_priv.0+0x398>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800f5ce:	6822      	ldr	r2, [r4, #0]
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d090      	beq.n	800f4f6 <oslib_test_003_001_execute.lto_priv.0+0x346>
 800f5d4:	6920      	ldr	r0, [r4, #16]
 800f5d6:	fab0 f080 	clz	r0, r0
 800f5da:	0940      	lsrs	r0, r0, #5
 800f5dc:	e78b      	b.n	800f4f6 <oslib_test_003_001_execute.lto_priv.0+0x346>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f5de:	68a2      	ldr	r2, [r4, #8]
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	f47f af40 	bne.w	800f466 <oslib_test_003_001_execute.lto_priv.0+0x2b6>
 800f5e6:	6920      	ldr	r0, [r4, #16]
 800f5e8:	fab0 f080 	clz	r0, r0
 800f5ec:	0940      	lsrs	r0, r0, #5
 800f5ee:	e73a      	b.n	800f466 <oslib_test_003_001_execute.lto_priv.0+0x2b6>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800f5f0:	6920      	ldr	r0, [r4, #16]
 800f5f2:	1f43      	subs	r3, r0, #5
 800f5f4:	4258      	negs	r0, r3
 800f5f6:	4158      	adcs	r0, r3
 800f5f8:	e75f      	b.n	800f4ba <oslib_test_003_001_execute.lto_priv.0+0x30a>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800f5fa:	6920      	ldr	r0, [r4, #16]
 800f5fc:	f1a0 0c0c 	sub.w	ip, r0, #12
 800f600:	f1dc 0000 	rsbs	r0, ip, #0
 800f604:	eb40 000c 	adc.w	r0, r0, ip
 800f608:	e702      	b.n	800f410 <oslib_test_003_001_execute.lto_priv.0+0x260>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800f60a:	6822      	ldr	r2, [r4, #0]
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d0b8      	beq.n	800f582 <oslib_test_003_001_execute.lto_priv.0+0x3d2>
 800f610:	6926      	ldr	r6, [r4, #16]
 800f612:	fab6 f686 	clz	r6, r6
 800f616:	0976      	lsrs	r6, r6, #5
 800f618:	e7b3      	b.n	800f582 <oslib_test_003_001_execute.lto_priv.0+0x3d2>
 800f61a:	bf00      	nop
 800f61c:	08012c98 	.word	0x08012c98
 800f620:	08012914 	.word	0x08012914
 800f624:	08012f34 	.word	0x08012f34
 800f628:	08012c84 	.word	0x08012c84
 800f62c:	00000000 	.word	0x00000000

0800f630 <oslib_test_003_002_execute.lto_priv.0>:

static void oslib_test_003_002_execute(void) {

  /* [3.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 800f630:	2201      	movs	r2, #1
static void oslib_test_003_002_execute(void) {
 800f632:	b530      	push	{r4, r5, lr}
 800f634:	4c1a      	ldr	r4, [pc, #104]	; (800f6a0 <oslib_test_003_002_execute.lto_priv.0+0x70>)
  test_set_step(1);
 800f636:	4d1b      	ldr	r5, [pc, #108]	; (800f6a4 <oslib_test_003_002_execute.lto_priv.0+0x74>)
 800f638:	7d23      	ldrb	r3, [r4, #20]
static void oslib_test_003_002_execute(void) {
 800f63a:	b085      	sub	sp, #20
  test_set_step(1);
 800f63c:	602a      	str	r2, [r5, #0]
 800f63e:	b153      	cbz	r3, 800f656 <oslib_test_003_002_execute.lto_priv.0+0x26>
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
    test_assert(n == 0, "wrong size");
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f640:	6822      	ldr	r2, [r4, #0]
 800f642:	68e3      	ldr	r3, [r4, #12]
 800f644:	4293      	cmp	r3, r2
 800f646:	d013      	beq.n	800f670 <oslib_test_003_002_execute.lto_priv.0+0x40>
  chtest.global_fail     = true;
 800f648:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800f64c:	4a16      	ldr	r2, [pc, #88]	; (800f6a8 <oslib_test_003_002_execute.lto_priv.0+0x78>)
  chtest.global_fail     = true;
 800f64e:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800f650:	60aa      	str	r2, [r5, #8]
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
  test_end_step(2);
}
 800f652:	b005      	add	sp, #20
 800f654:	bd30      	pop	{r4, r5, pc}
 800f656:	2110      	movs	r1, #16
 800f658:	4668      	mov	r0, sp
 800f65a:	f7ff fd31 	bl	800f0c0 <chPipeReadTimeout.part.0.constprop.0>
  if (!condition) {
 800f65e:	2800      	cmp	r0, #0
 800f660:	d0ee      	beq.n	800f640 <oslib_test_003_002_execute.lto_priv.0+0x10>
  chtest.global_fail     = true;
 800f662:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800f666:	4a11      	ldr	r2, [pc, #68]	; (800f6ac <oslib_test_003_002_execute.lto_priv.0+0x7c>)
  chtest.global_fail     = true;
 800f668:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800f66a:	60aa      	str	r2, [r5, #8]
 800f66c:	b005      	add	sp, #20
 800f66e:	bd30      	pop	{r4, r5, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f670:	68a2      	ldr	r2, [r4, #8]
 800f672:	4293      	cmp	r3, r2
 800f674:	d1e8      	bne.n	800f648 <oslib_test_003_002_execute.lto_priv.0+0x18>
 800f676:	6923      	ldr	r3, [r4, #16]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d1e5      	bne.n	800f648 <oslib_test_003_002_execute.lto_priv.0+0x18>
  test_set_step(2);
 800f67c:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800f67e:	2010      	movs	r0, #16
  test_set_step(2);
 800f680:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800f682:	f7ff fc95 	bl	800efb0 <chPipeWriteTimeout.constprop.0>
  if (!condition) {
 800f686:	2808      	cmp	r0, #8
 800f688:	d1eb      	bne.n	800f662 <oslib_test_003_002_execute.lto_priv.0+0x32>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800f68a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800f68e:	4293      	cmp	r3, r2
 800f690:	d1da      	bne.n	800f648 <oslib_test_003_002_execute.lto_priv.0+0x18>
 800f692:	6822      	ldr	r2, [r4, #0]
 800f694:	4293      	cmp	r3, r2
 800f696:	d1d7      	bne.n	800f648 <oslib_test_003_002_execute.lto_priv.0+0x18>
 800f698:	6923      	ldr	r3, [r4, #16]
 800f69a:	2b08      	cmp	r3, #8
 800f69c:	d1d4      	bne.n	800f648 <oslib_test_003_002_execute.lto_priv.0+0x18>
 800f69e:	e7d8      	b.n	800f652 <oslib_test_003_002_execute.lto_priv.0+0x22>
 800f6a0:	20000894 	.word	0x20000894
 800f6a4:	20001134 	.word	0x20001134
 800f6a8:	08012c98 	.word	0x08012c98
 800f6ac:	08012914 	.word	0x08012914

0800f6b0 <chSemSignalWait.constprop.0.isra.0>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 800f6b0:	b538      	push	{r3, r4, r5, lr}
 800f6b2:	2320      	movs	r3, #32
 800f6b4:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && ch_queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && ch_queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && ch_queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 800f6b8:	4b22      	ldr	r3, [pc, #136]	; (800f744 <chSemSignalWait.constprop.0.isra.0+0x94>)
 800f6ba:	689a      	ldr	r2, [r3, #8]
 800f6bc:	1c51      	adds	r1, r2, #1
 800f6be:	2900      	cmp	r1, #0
 800f6c0:	6099      	str	r1, [r3, #8]
 800f6c2:	dd2a      	ble.n	800f71a <chSemSignalWait.constprop.0.isra.0+0x6a>
    chSchReadyI((thread_t *)ch_queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 800f6c4:	2a00      	cmp	r2, #0
 800f6c6:	609a      	str	r2, [r3, #8]
 800f6c8:	db0c      	blt.n	800f6e4 <chSemSignalWait.constprop.0.isra.0+0x34>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800f6ca:	4b1f      	ldr	r3, [pc, #124]	; (800f748 <chSemSignalWait.constprop.0.isra.0+0x98>)
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	6892      	ldr	r2, [r2, #8]
 800f6d2:	689b      	ldr	r3, [r3, #8]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d901      	bls.n	800f6dc <chSemSignalWait.constprop.0.isra.0+0x2c>
    __sch_reschedule_ahead();
 800f6d8:	f7f4 fa72 	bl	8003bc0 <__sch_reschedule_ahead.lto_priv.0>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 800f6e2:	bd38      	pop	{r3, r4, r5, pc}
  otp->state = newstate;
 800f6e4:	f04f 0e05 	mov.w	lr, #5
  ntp->state = CH_STATE_CURRENT;
 800f6e8:	f04f 0c01 	mov.w	ip, #1
  return __sch_get_currthread();
 800f6ec:	4a16      	ldr	r2, [pc, #88]	; (800f748 <chSemSignalWait.constprop.0.isra.0+0x98>)
  p->prev       = qp->prev;
 800f6ee:	6858      	ldr	r0, [r3, #4]
 800f6f0:	68d1      	ldr	r1, [r2, #12]
  p->next       = qp;
 800f6f2:	600b      	str	r3, [r1, #0]
  p->prev       = qp->prev;
 800f6f4:	6048      	str	r0, [r1, #4]
  p->prev->next = p;
 800f6f6:	6001      	str	r1, [r0, #0]
  ch_priority_queue_t *p = pqp->next;
 800f6f8:	6810      	ldr	r0, [r2, #0]
  otp->state = newstate;
 800f6fa:	f881 e024 	strb.w	lr, [r1, #36]	; 0x24
    currtp->u.wtsemp = spw;
 800f6fe:	628b      	str	r3, [r1, #40]	; 0x28
  qp->prev      = p;
 800f700:	6059      	str	r1, [r3, #4]
  pqp->next       = p->next;
 800f702:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800f704:	605a      	str	r2, [r3, #4]
  pqp->next       = p->next;
 800f706:	6013      	str	r3, [r2, #0]
  ntp->state = CH_STATE_CURRENT;
 800f708:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 800f70c:	60d0      	str	r0, [r2, #12]
  chSysSwitch(ntp, otp);
 800f70e:	f7f0 fd97 	bl	8000240 <__port_switch>
 800f712:	2300      	movs	r3, #0
 800f714:	f383 8811 	msr	BASEPRI, r3
}
 800f718:	bd38      	pop	{r3, r4, r5, pc}
  tp->state = CH_STATE_READY;
 800f71a:	2400      	movs	r4, #0
  ch_queue_t *p = qp->next;
 800f71c:	6819      	ldr	r1, [r3, #0]
  qp->next       = p->next;
 800f71e:	6808      	ldr	r0, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800f720:	688d      	ldr	r5, [r1, #8]
  qp->next->prev = qp;
 800f722:	6043      	str	r3, [r0, #4]
  qp->next       = p->next;
 800f724:	6018      	str	r0, [r3, #0]
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800f726:	6988      	ldr	r0, [r1, #24]
  tp->state = CH_STATE_READY;
 800f728:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
    pqp = pqp->next;
 800f72c:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800f72e:	6884      	ldr	r4, [r0, #8]
 800f730:	42ac      	cmp	r4, r5
 800f732:	d2fb      	bcs.n	800f72c <chSemSignalWait.constprop.0.isra.0+0x7c>
  p->prev       = pqp->prev;
 800f734:	6844      	ldr	r4, [r0, #4]
 800f736:	e9c1 0400 	strd	r0, r4, [r1]
  p->prev->next = p;
 800f73a:	6021      	str	r1, [r4, #0]
    chSchReadyI((thread_t *)ch_queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 800f73c:	2400      	movs	r4, #0
  pqp->prev     = p;
 800f73e:	6041      	str	r1, [r0, #4]
 800f740:	628c      	str	r4, [r1, #40]	; 0x28
 800f742:	e7bf      	b.n	800f6c4 <chSemSignalWait.constprop.0.isra.0+0x14>
 800f744:	20001254 	.word	0x20001254
 800f748:	20001050 	.word	0x20001050
 800f74c:	00000000 	.word	0x00000000

0800f750 <test_execute_inner.isra.0>:
static bool test_execute_inner(const testsuite_t *tsp) {
 800f750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f754:	4680      	mov	r8, r0
 800f756:	b089      	sub	sp, #36	; 0x24
  test_printf(TEST_CFG_EOL_STRING);
 800f758:	48a1      	ldr	r0, [pc, #644]	; (800f9e0 <test_execute_inner.isra.0+0x290>)
 800f75a:	f7f8 fc89 	bl	8008070 <test_printf>
  if (tsp->name != NULL) {
 800f75e:	f8d8 1000 	ldr.w	r1, [r8]
 800f762:	2900      	cmp	r1, #0
 800f764:	f000 8138 	beq.w	800f9d8 <test_execute_inner.isra.0+0x288>
    test_printf("*** %s"TEST_CFG_EOL_STRING, tsp->name);
 800f768:	489e      	ldr	r0, [pc, #632]	; (800f9e4 <test_execute_inner.isra.0+0x294>)
 800f76a:	f7f8 fc81 	bl	8008070 <test_printf>
  test_printf("***"TEST_CFG_EOL_STRING);
 800f76e:	489e      	ldr	r0, [pc, #632]	; (800f9e8 <test_execute_inner.isra.0+0x298>)
 800f770:	f7f8 fc7e 	bl	8008070 <test_printf>
  test_printf("*** Compiled:     %s"TEST_CFG_EOL_STRING, __DATE__ " - " __TIME__);
 800f774:	499d      	ldr	r1, [pc, #628]	; (800f9ec <test_execute_inner.isra.0+0x29c>)
 800f776:	489e      	ldr	r0, [pc, #632]	; (800f9f0 <test_execute_inner.isra.0+0x2a0>)
 800f778:	f7f8 fc7a 	bl	8008070 <test_printf>
  test_printf("*** Platform:     %s"TEST_CFG_EOL_STRING, PLATFORM_NAME);
 800f77c:	499d      	ldr	r1, [pc, #628]	; (800f9f4 <test_execute_inner.isra.0+0x2a4>)
 800f77e:	489e      	ldr	r0, [pc, #632]	; (800f9f8 <test_execute_inner.isra.0+0x2a8>)
 800f780:	f7f8 fc76 	bl	8008070 <test_printf>
  test_printf("*** Test Board:   %s"TEST_CFG_EOL_STRING, BOARD_NAME);
 800f784:	499d      	ldr	r1, [pc, #628]	; (800f9fc <test_execute_inner.isra.0+0x2ac>)
 800f786:	489e      	ldr	r0, [pc, #632]	; (800fa00 <test_execute_inner.isra.0+0x2b0>)
 800f788:	f7f8 fc72 	bl	8008070 <test_printf>
    test_printf("***"TEST_CFG_EOL_STRING);
 800f78c:	4896      	ldr	r0, [pc, #600]	; (800f9e8 <test_execute_inner.isra.0+0x298>)
 800f78e:	f7f8 fc6f 	bl	8008070 <test_printf>
    test_printf("*** Text size:    %u bytes"TEST_CFG_EOL_STRING, &__text_end__   - &__text_base__);
 800f792:	4b9c      	ldr	r3, [pc, #624]	; (800fa04 <test_execute_inner.isra.0+0x2b4>)
 800f794:	499c      	ldr	r1, [pc, #624]	; (800fa08 <test_execute_inner.isra.0+0x2b8>)
 800f796:	489d      	ldr	r0, [pc, #628]	; (800fa0c <test_execute_inner.isra.0+0x2bc>)
 800f798:	1ac9      	subs	r1, r1, r3
 800f79a:	f7f8 fc69 	bl	8008070 <test_printf>
    test_printf("*** RO data size: %u bytes"TEST_CFG_EOL_STRING, &__rodata_end__ - &__rodata_base__);
 800f79e:	4b9c      	ldr	r3, [pc, #624]	; (800fa10 <test_execute_inner.isra.0+0x2c0>)
 800f7a0:	499c      	ldr	r1, [pc, #624]	; (800fa14 <test_execute_inner.isra.0+0x2c4>)
 800f7a2:	489d      	ldr	r0, [pc, #628]	; (800fa18 <test_execute_inner.isra.0+0x2c8>)
 800f7a4:	1ac9      	subs	r1, r1, r3
 800f7a6:	f7f8 fc63 	bl	8008070 <test_printf>
    test_printf("*** Data size:    %u bytes"TEST_CFG_EOL_STRING, &__data_end__   - &__data_base__);
 800f7aa:	4b9c      	ldr	r3, [pc, #624]	; (800fa1c <test_execute_inner.isra.0+0x2cc>)
 800f7ac:	499c      	ldr	r1, [pc, #624]	; (800fa20 <test_execute_inner.isra.0+0x2d0>)
 800f7ae:	489d      	ldr	r0, [pc, #628]	; (800fa24 <test_execute_inner.isra.0+0x2d4>)
 800f7b0:	1ac9      	subs	r1, r1, r3
 800f7b2:	f7f8 fc5d 	bl	8008070 <test_printf>
    test_printf("*** BSS size:     %u bytes"TEST_CFG_EOL_STRING, &__bss_end__    - &__bss_base__);
 800f7b6:	4b9c      	ldr	r3, [pc, #624]	; (800fa28 <test_execute_inner.isra.0+0x2d8>)
 800f7b8:	499c      	ldr	r1, [pc, #624]	; (800fa2c <test_execute_inner.isra.0+0x2dc>)
 800f7ba:	489d      	ldr	r0, [pc, #628]	; (800fa30 <test_execute_inner.isra.0+0x2e0>)
 800f7bc:	1ac9      	subs	r1, r1, r3
 800f7be:	f7f8 fc57 	bl	8008070 <test_printf>
  test_printf(TEST_CFG_EOL_STRING);
 800f7c2:	4887      	ldr	r0, [pc, #540]	; (800f9e0 <test_execute_inner.isra.0+0x290>)
 800f7c4:	f7f8 fc54 	bl	8008070 <test_printf>
  chtest.global_fail = false;
 800f7c8:	2300      	movs	r3, #0
  while (tsp->sequences[tseq] != NULL) {
 800f7ca:	f8d8 2004 	ldr.w	r2, [r8, #4]
  chtest.global_fail = false;
 800f7ce:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800fa34 <test_execute_inner.isra.0+0x2e4>
  while (tsp->sequences[tseq] != NULL) {
 800f7d2:	6812      	ldr	r2, [r2, #0]
  chtest.global_fail = false;
 800f7d4:	f889 3004 	strb.w	r3, [r9, #4]
  while (tsp->sequences[tseq] != NULL) {
 800f7d8:	2a00      	cmp	r2, #0
 800f7da:	f000 80cc 	beq.w	800f976 <test_execute_inner.isra.0+0x226>
 800f7de:	469b      	mov	fp, r3
 800f7e0:	4f95      	ldr	r7, [pc, #596]	; (800fa38 <test_execute_inner.isra.0+0x2e8>)
  tseq = 0U;
 800f7e2:	9301      	str	r3, [sp, #4]
  if (chtest.putchar != NULL) {
 800f7e4:	244c      	movs	r4, #76	; 0x4c
 800f7e6:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f7ea:	b18b      	cbz	r3, 800f810 <test_execute_inner.isra.0+0xc0>
    chtest.putchar(c);
 800f7ec:	203d      	movs	r0, #61	; 0x3d
 800f7ee:	4798      	blx	r3
  if (chtest.putchar != NULL) {
 800f7f0:	f8d9 3020 	ldr.w	r3, [r9, #32]
  for (i = 0; i < 76; i++) {
 800f7f4:	3c01      	subs	r4, #1
 800f7f6:	d1f8      	bne.n	800f7ea <test_execute_inner.isra.0+0x9a>
 800f7f8:	250a      	movs	r5, #10
  while ((c = *s) != '\0') {
 800f7fa:	200d      	movs	r0, #13
 800f7fc:	4c8f      	ldr	r4, [pc, #572]	; (800fa3c <test_execute_inner.isra.0+0x2ec>)
 800f7fe:	b103      	cbz	r3, 800f802 <test_execute_inner.isra.0+0xb2>
    chtest.putchar(c);
 800f800:	4798      	blx	r3
 800f802:	b15d      	cbz	r5, 800f81c <test_execute_inner.isra.0+0xcc>
  if (chtest.putchar != NULL) {
 800f804:	4628      	mov	r0, r5
 800f806:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f80a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800f80e:	e7f6      	b.n	800f7fe <test_execute_inner.isra.0+0xae>
  for (i = 0; i < 76; i++) {
 800f810:	3c01      	subs	r4, #1
 800f812:	d1ef      	bne.n	800f7f4 <test_execute_inner.isra.0+0xa4>
 800f814:	250a      	movs	r5, #10
  while ((c = *s) != '\0') {
 800f816:	200d      	movs	r0, #13
 800f818:	4c88      	ldr	r4, [pc, #544]	; (800fa3c <test_execute_inner.isra.0+0x2ec>)
 800f81a:	e7f0      	b.n	800f7fe <test_execute_inner.isra.0+0xae>
    test_printf("=== Test Sequence %u (%s)"TEST_CFG_EOL_STRING, tseq + 1U, tsp->sequences[tseq]->name);
 800f81c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f820:	9901      	ldr	r1, [sp, #4]
 800f822:	f853 300b 	ldr.w	r3, [r3, fp]
 800f826:	3101      	adds	r1, #1
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	4885      	ldr	r0, [pc, #532]	; (800fa40 <test_execute_inner.isra.0+0x2f0>)
 800f82c:	9101      	str	r1, [sp, #4]
 800f82e:	f7f8 fc1f 	bl	8008070 <test_printf>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 800f832:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f836:	f852 300b 	ldr.w	r3, [r2, fp]
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	f000 8092 	beq.w	800f968 <test_execute_inner.isra.0+0x218>
 800f844:	244c      	movs	r4, #76	; 0x4c
 800f846:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f84a:	00ae      	lsls	r6, r5, #2
 800f84c:	b193      	cbz	r3, 800f874 <test_execute_inner.isra.0+0x124>
    chtest.putchar(c);
 800f84e:	202d      	movs	r0, #45	; 0x2d
 800f850:	4798      	blx	r3
  if (chtest.putchar != NULL) {
 800f852:	f8d9 3020 	ldr.w	r3, [r9, #32]
  for (i = 0; i < 76; i++) {
 800f856:	3c01      	subs	r4, #1
 800f858:	d1f8      	bne.n	800f84c <test_execute_inner.isra.0+0xfc>
 800f85a:	240a      	movs	r4, #10
  while ((c = *s) != '\0') {
 800f85c:	200d      	movs	r0, #13
 800f85e:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800fa3c <test_execute_inner.isra.0+0x2ec>
 800f862:	b103      	cbz	r3, 800f866 <test_execute_inner.isra.0+0x116>
    chtest.putchar(c);
 800f864:	4798      	blx	r3
 800f866:	b164      	cbz	r4, 800f882 <test_execute_inner.isra.0+0x132>
  if (chtest.putchar != NULL) {
 800f868:	4620      	mov	r0, r4
 800f86a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f86e:	f81a 4f01 	ldrb.w	r4, [sl, #1]!
 800f872:	e7f6      	b.n	800f862 <test_execute_inner.isra.0+0x112>
  for (i = 0; i < 76; i++) {
 800f874:	3c01      	subs	r4, #1
 800f876:	d1ee      	bne.n	800f856 <test_execute_inner.isra.0+0x106>
 800f878:	240a      	movs	r4, #10
  while ((c = *s) != '\0') {
 800f87a:	200d      	movs	r0, #13
 800f87c:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 800fa3c <test_execute_inner.isra.0+0x2ec>
 800f880:	e7ef      	b.n	800f862 <test_execute_inner.isra.0+0x112>
      test_printf("--- Test Case %u.%u (%s)"TEST_CFG_EOL_STRING, tseq + 1U, tcase + 1U, tsp->sequences[tseq]->cases[tcase]->name);
 800f882:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f886:	3501      	adds	r5, #1
 800f888:	f853 300b 	ldr.w	r3, [r3, fp]
 800f88c:	462a      	mov	r2, r5
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	9901      	ldr	r1, [sp, #4]
 800f892:	599b      	ldr	r3, [r3, r6]
 800f894:	486b      	ldr	r0, [pc, #428]	; (800fa44 <test_execute_inner.isra.0+0x2f4>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f7f8 fbea 	bl	8008070 <test_printf>
 800f89c:	2320      	movs	r3, #32
 800f89e:	f383 8811 	msr	BASEPRI, r3
  vtp->func    = vtfunc;
 800f8a2:	4b69      	ldr	r3, [pc, #420]	; (800fa48 <test_execute_inner.isra.0+0x2f8>)
  vtp->reload  = (sysinterval_t)0;
 800f8a4:	9407      	str	r4, [sp, #28]
  vtp->func    = vtfunc;
 800f8a6:	9305      	str	r3, [sp, #20]
 800f8a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  vtp->par     = par;
 800f8ac:	68fa      	ldr	r2, [r7, #12]
 800f8ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f8b0:	9206      	str	r2, [sp, #24]
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 800f8b2:	a802      	add	r0, sp, #8
 800f8b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800f8b8:	b289      	uxth	r1, r1
 800f8ba:	f7fe fe41 	bl	800e540 <vt_enqueue.constprop.0>
  otp->state = newstate;
 800f8be:	2308      	movs	r3, #8
  ntp->state = CH_STATE_CURRENT;
 800f8c0:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 800f8c2:	68f9      	ldr	r1, [r7, #12]
  ch_priority_queue_t *p = pqp->next;
 800f8c4:	6838      	ldr	r0, [r7, #0]
  otp->state = newstate;
 800f8c6:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800f8ca:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800f8cc:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800f8ce:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  pqp->next       = p->next;
 800f8d2:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 800f8d4:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 800f8d6:	f7f0 fcb3 	bl	8000240 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 800f8da:	9b02      	ldr	r3, [sp, #8]
 800f8dc:	b113      	cbz	r3, 800f8e4 <test_execute_inner.isra.0+0x194>
      chVTDoResetI(&vt);
 800f8de:	a802      	add	r0, sp, #8
 800f8e0:	f7f3 f90e 	bl	8002b00 <chVTDoResetI>
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	f383 8811 	msr	BASEPRI, r3
      test_execute_case(tsp->sequences[tseq]->cases[tcase]);
 800f8ea:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f8ee:	f852 200b 	ldr.w	r2, [r2, fp]
 800f8f2:	6852      	ldr	r2, [r2, #4]
 800f8f4:	5994      	ldr	r4, [r2, r6]
  chtest.local_fail = false;
 800f8f6:	f889 3005 	strb.w	r3, [r9, #5]
  chtest.tokp = chtest.tokens_buffer;
 800f8fa:	4b54      	ldr	r3, [pc, #336]	; (800fa4c <test_execute_inner.isra.0+0x2fc>)
 800f8fc:	f8c9 300c 	str.w	r3, [r9, #12]
  if (tcp->setup != NULL) {
 800f900:	6863      	ldr	r3, [r4, #4]
 800f902:	b103      	cbz	r3, 800f906 <test_execute_inner.isra.0+0x1b6>
    tcp->setup();
 800f904:	4798      	blx	r3
  tcp->execute();
 800f906:	68e3      	ldr	r3, [r4, #12]
 800f908:	4798      	blx	r3
  if (tcp->teardown != NULL) {
 800f90a:	68a3      	ldr	r3, [r4, #8]
 800f90c:	b103      	cbz	r3, 800f910 <test_execute_inner.isra.0+0x1c0>
    tcp->teardown();
 800f90e:	4798      	blx	r3
      if (chtest.local_fail) {
 800f910:	f899 3005 	ldrb.w	r3, [r9, #5]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d044      	beq.n	800f9a2 <test_execute_inner.isra.0+0x252>
        test_printf("--- Result: FAILURE (#%u [", chtest.current_step, "", chtest.failure_message);
 800f918:	4a4d      	ldr	r2, [pc, #308]	; (800fa50 <test_execute_inner.isra.0+0x300>)
 800f91a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f91e:	f8d9 1000 	ldr.w	r1, [r9]
 800f922:	484c      	ldr	r0, [pc, #304]	; (800fa54 <test_execute_inner.isra.0+0x304>)
 800f924:	f7f8 fba4 	bl	8008070 <test_printf>
  while (cp < chtest.tokp) {
 800f928:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f92c:	4a47      	ldr	r2, [pc, #284]	; (800fa4c <test_execute_inner.isra.0+0x2fc>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d90b      	bls.n	800f94a <test_execute_inner.isra.0+0x1fa>
  char *cp = chtest.tokens_buffer;
 800f932:	4c46      	ldr	r4, [pc, #280]	; (800fa4c <test_execute_inner.isra.0+0x2fc>)
 800f934:	f8d9 3020 	ldr.w	r3, [r9, #32]
    test_putchar(*cp++);
 800f938:	3401      	adds	r4, #1
 800f93a:	b113      	cbz	r3, 800f942 <test_execute_inner.isra.0+0x1f2>
    chtest.putchar(c);
 800f93c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 800f940:	4798      	blx	r3
  while (cp < chtest.tokp) {
 800f942:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f946:	429c      	cmp	r4, r3
 800f948:	d3f4      	bcc.n	800f934 <test_execute_inner.isra.0+0x1e4>
        test_printf("] \"%s\")"TEST_CFG_EOL_STRING, chtest.failure_message);
 800f94a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800f94e:	4842      	ldr	r0, [pc, #264]	; (800fa58 <test_execute_inner.isra.0+0x308>)
 800f950:	f7f8 fb8e 	bl	8008070 <test_printf>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 800f954:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f958:	f852 300b 	ldr.w	r3, [r2, fp]
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	441e      	add	r6, r3
 800f960:	6873      	ldr	r3, [r6, #4]
 800f962:	2b00      	cmp	r3, #0
 800f964:	f47f af6e 	bne.w	800f844 <test_execute_inner.isra.0+0xf4>
  while (tsp->sequences[tseq] != NULL) {
 800f968:	f10b 0b04 	add.w	fp, fp, #4
 800f96c:	f852 300b 	ldr.w	r3, [r2, fp]
 800f970:	2b00      	cmp	r3, #0
 800f972:	f47f af37 	bne.w	800f7e4 <test_execute_inner.isra.0+0x94>
  if (chtest.putchar != NULL) {
 800f976:	244c      	movs	r4, #76	; 0x4c
 800f978:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f97c:	b1ab      	cbz	r3, 800f9aa <test_execute_inner.isra.0+0x25a>
    chtest.putchar(c);
 800f97e:	202d      	movs	r0, #45	; 0x2d
 800f980:	4798      	blx	r3
  if (chtest.putchar != NULL) {
 800f982:	f8d9 3020 	ldr.w	r3, [r9, #32]
  for (i = 0; i < 76; i++) {
 800f986:	3c01      	subs	r4, #1
 800f988:	d1f8      	bne.n	800f97c <test_execute_inner.isra.0+0x22c>
 800f98a:	240a      	movs	r4, #10
  while ((c = *s) != '\0') {
 800f98c:	200d      	movs	r0, #13
 800f98e:	4d2b      	ldr	r5, [pc, #172]	; (800fa3c <test_execute_inner.isra.0+0x2ec>)
 800f990:	b103      	cbz	r3, 800f994 <test_execute_inner.isra.0+0x244>
    chtest.putchar(c);
 800f992:	4798      	blx	r3
 800f994:	b17c      	cbz	r4, 800f9b6 <test_execute_inner.isra.0+0x266>
  if (chtest.putchar != NULL) {
 800f996:	4620      	mov	r0, r4
 800f998:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f99c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800f9a0:	e7f6      	b.n	800f990 <test_execute_inner.isra.0+0x240>
        test_printf("--- Result: SUCCESS"TEST_CFG_EOL_STRING);
 800f9a2:	482e      	ldr	r0, [pc, #184]	; (800fa5c <test_execute_inner.isra.0+0x30c>)
 800f9a4:	f7f8 fb64 	bl	8008070 <test_printf>
 800f9a8:	e7d4      	b.n	800f954 <test_execute_inner.isra.0+0x204>
  for (i = 0; i < 76; i++) {
 800f9aa:	3c01      	subs	r4, #1
 800f9ac:	d1eb      	bne.n	800f986 <test_execute_inner.isra.0+0x236>
 800f9ae:	240a      	movs	r4, #10
  while ((c = *s) != '\0') {
 800f9b0:	200d      	movs	r0, #13
 800f9b2:	4d22      	ldr	r5, [pc, #136]	; (800fa3c <test_execute_inner.isra.0+0x2ec>)
 800f9b4:	e7ec      	b.n	800f990 <test_execute_inner.isra.0+0x240>
  test_printf(TEST_CFG_EOL_STRING);
 800f9b6:	480a      	ldr	r0, [pc, #40]	; (800f9e0 <test_execute_inner.isra.0+0x290>)
 800f9b8:	f7f8 fb5a 	bl	8008070 <test_printf>
  test_printf("Final result: %s"TEST_CFG_EOL_STRING,
 800f9bc:	f899 1004 	ldrb.w	r1, [r9, #4]
 800f9c0:	4a27      	ldr	r2, [pc, #156]	; (800fa60 <test_execute_inner.isra.0+0x310>)
 800f9c2:	4b28      	ldr	r3, [pc, #160]	; (800fa64 <test_execute_inner.isra.0+0x314>)
 800f9c4:	4828      	ldr	r0, [pc, #160]	; (800fa68 <test_execute_inner.isra.0+0x318>)
 800f9c6:	2900      	cmp	r1, #0
 800f9c8:	bf14      	ite	ne
 800f9ca:	4611      	movne	r1, r2
 800f9cc:	4619      	moveq	r1, r3
}
 800f9ce:	b009      	add	sp, #36	; 0x24
 800f9d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_printf("Final result: %s"TEST_CFG_EOL_STRING,
 800f9d4:	f7f8 bb4c 	b.w	8008070 <test_printf>
    test_printf("*** Test Suite"TEST_CFG_EOL_STRING);
 800f9d8:	4824      	ldr	r0, [pc, #144]	; (800fa6c <test_execute_inner.isra.0+0x31c>)
 800f9da:	f7f8 fb49 	bl	8008070 <test_printf>
 800f9de:	e6c6      	b.n	800f76e <test_execute_inner.isra.0+0x1e>
 800f9e0:	08012df8 	.word	0x08012df8
 800f9e4:	08012cbc 	.word	0x08012cbc
 800f9e8:	08012cdc 	.word	0x08012cdc
 800f9ec:	08012ce4 	.word	0x08012ce4
 800f9f0:	08012cfc 	.word	0x08012cfc
 800f9f4:	08010254 	.word	0x08010254
 800f9f8:	08012d14 	.word	0x08012d14
 800f9fc:	08010280 	.word	0x08010280
 800fa00:	08012d2c 	.word	0x08012d2c
 800fa04:	08000160 	.word	0x08000160
 800fa08:	0800fe90 	.word	0x0800fe90
 800fa0c:	08012d44 	.word	0x08012d44
 800fa10:	0800fe90 	.word	0x0800fe90
 800fa14:	080130b8 	.word	0x080130b8
 800fa18:	08012d64 	.word	0x08012d64
 800fa1c:	20000800 	.word	0x20000800
 800fa20:	200008e4 	.word	0x200008e4
 800fa24:	08012d84 	.word	0x08012d84
 800fa28:	200008e8 	.word	0x200008e8
 800fa2c:	20002e80 	.word	0x20002e80
 800fa30:	08012da4 	.word	0x08012da4
 800fa34:	20001134 	.word	0x20001134
 800fa38:	20001050 	.word	0x20001050
 800fa3c:	08012df9 	.word	0x08012df9
 800fa40:	08012dc4 	.word	0x08012dc4
 800fa44:	08012de0 	.word	0x08012de0
 800fa48:	08001041 	.word	0x08001041
 800fa4c:	20001144 	.word	0x20001144
 800fa50:	08010190 	.word	0x08010190
 800fa54:	08012dfc 	.word	0x08012dfc
 800fa58:	08012e18 	.word	0x08012e18
 800fa5c:	08012e24 	.word	0x08012e24
 800fa60:	08012cac 	.word	0x08012cac
 800fa64:	08012cb4 	.word	0x08012cb4
 800fa68:	08012e3c 	.word	0x08012e3c
 800fa6c:	08012cc8 	.word	0x08012cc8

0800fa70 <sdu_start_receive.isra.0>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 800fa70:	b410      	push	{r4}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800fa72:	f8d0 348c 	ldr.w	r3, [r0, #1164]	; 0x48c
 800fa76:	681c      	ldr	r4, [r3, #0]
 800fa78:	7822      	ldrb	r2, [r4, #0]
 800fa7a:	2a04      	cmp	r2, #4
 800fa7c:	d102      	bne.n	800fa84 <sdu_start_receive.isra.0+0x14>
 800fa7e:	7a02      	ldrb	r2, [r0, #8]
 800fa80:	2a02      	cmp	r2, #2
 800fa82:	d001      	beq.n	800fa88 <sdu_start_receive.isra.0+0x18>
}
 800fa84:	bc10      	pop	{r4}
 800fa86:	4770      	bx	lr
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 800fa88:	2201      	movs	r2, #1
 800fa8a:	7959      	ldrb	r1, [r3, #5]
 800fa8c:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
 800fa90:	fa02 f301 	lsl.w	r3, r2, r1
 800fa94:	ea13 0f0c 	tst.w	r3, ip
 800fa98:	d1f4      	bne.n	800fa84 <sdu_start_receive.isra.0+0x14>
  if (ibqIsFullI(ibqp)) {
 800fa9a:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d006      	beq.n	800fab0 <sdu_start_receive.isra.0+0x40>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800faa2:	4620      	mov	r0, r4
 800faa4:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800faa8:	bc10      	pop	{r4}
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800faaa:	3204      	adds	r2, #4
 800faac:	f7f1 bed8 	b.w	8001860 <usbStartReceiveI>
 800fab0:	6983      	ldr	r3, [r0, #24]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d1e6      	bne.n	800fa84 <sdu_start_receive.isra.0+0x14>
 800fab6:	e7f4      	b.n	800faa2 <sdu_start_receive.isra.0+0x32>

0800fab8 <memcmp>:
 800fab8:	2a03      	cmp	r2, #3
 800faba:	b510      	push	{r4, lr}
 800fabc:	d916      	bls.n	800faec <memcmp+0x34>
 800fabe:	ea40 0c01 	orr.w	ip, r0, r1
 800fac2:	f01c 0f03 	tst.w	ip, #3
 800fac6:	4604      	mov	r4, r0
 800fac8:	460b      	mov	r3, r1
 800faca:	d122      	bne.n	800fb12 <memcmp+0x5a>
 800facc:	4619      	mov	r1, r3
 800face:	4620      	mov	r0, r4
 800fad0:	f8d1 e000 	ldr.w	lr, [r1]
 800fad4:	f8d0 c000 	ldr.w	ip, [r0]
 800fad8:	3304      	adds	r3, #4
 800fada:	45f4      	cmp	ip, lr
 800fadc:	f104 0404 	add.w	r4, r4, #4
 800fae0:	d117      	bne.n	800fb12 <memcmp+0x5a>
 800fae2:	3a04      	subs	r2, #4
 800fae4:	2a03      	cmp	r2, #3
 800fae6:	4620      	mov	r0, r4
 800fae8:	4619      	mov	r1, r3
 800faea:	d8ef      	bhi.n	800facc <memcmp+0x14>
 800faec:	1e54      	subs	r4, r2, #1
 800faee:	b1a2      	cbz	r2, 800fb1a <memcmp+0x62>
 800faf0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800faf4:	3901      	subs	r1, #1
 800faf6:	e001      	b.n	800fafc <memcmp+0x44>
 800faf8:	18c3      	adds	r3, r0, r3
 800fafa:	d00c      	beq.n	800fb16 <memcmp+0x5e>
 800fafc:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800fb00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fb04:	eba4 030c 	sub.w	r3, r4, ip
 800fb08:	4596      	cmp	lr, r2
 800fb0a:	d0f5      	beq.n	800faf8 <memcmp+0x40>
 800fb0c:	ebae 0002 	sub.w	r0, lr, r2
 800fb10:	bd10      	pop	{r4, pc}
 800fb12:	1e54      	subs	r4, r2, #1
 800fb14:	e7ec      	b.n	800faf0 <memcmp+0x38>
 800fb16:	4618      	mov	r0, r3
 800fb18:	bd10      	pop	{r4, pc}
 800fb1a:	4610      	mov	r0, r2
 800fb1c:	bd10      	pop	{r4, pc}
 800fb1e:	bf00      	nop

0800fb20 <memset>:
 800fb20:	0783      	lsls	r3, r0, #30
 800fb22:	b530      	push	{r4, r5, lr}
 800fb24:	d048      	beq.n	800fbb8 <memset+0x98>
 800fb26:	1e54      	subs	r4, r2, #1
 800fb28:	2a00      	cmp	r2, #0
 800fb2a:	d03f      	beq.n	800fbac <memset+0x8c>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	b2ca      	uxtb	r2, r1
 800fb30:	e001      	b.n	800fb36 <memset+0x16>
 800fb32:	3c01      	subs	r4, #1
 800fb34:	d33a      	bcc.n	800fbac <memset+0x8c>
 800fb36:	f803 2b01 	strb.w	r2, [r3], #1
 800fb3a:	079d      	lsls	r5, r3, #30
 800fb3c:	d1f9      	bne.n	800fb32 <memset+0x12>
 800fb3e:	2c03      	cmp	r4, #3
 800fb40:	d92d      	bls.n	800fb9e <memset+0x7e>
 800fb42:	b2cd      	uxtb	r5, r1
 800fb44:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800fb48:	2c0f      	cmp	r4, #15
 800fb4a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800fb4e:	d936      	bls.n	800fbbe <memset+0x9e>
 800fb50:	f1a4 0210 	sub.w	r2, r4, #16
 800fb54:	f022 0c0f 	bic.w	ip, r2, #15
 800fb58:	f103 0e20 	add.w	lr, r3, #32
 800fb5c:	44e6      	add	lr, ip
 800fb5e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800fb62:	f103 0210 	add.w	r2, r3, #16
 800fb66:	e942 5504 	strd	r5, r5, [r2, #-16]
 800fb6a:	e942 5502 	strd	r5, r5, [r2, #-8]
 800fb6e:	3210      	adds	r2, #16
 800fb70:	4572      	cmp	r2, lr
 800fb72:	d1f8      	bne.n	800fb66 <memset+0x46>
 800fb74:	f10c 0201 	add.w	r2, ip, #1
 800fb78:	f014 0f0c 	tst.w	r4, #12
 800fb7c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800fb80:	f004 0c0f 	and.w	ip, r4, #15
 800fb84:	d013      	beq.n	800fbae <memset+0x8e>
 800fb86:	f1ac 0304 	sub.w	r3, ip, #4
 800fb8a:	f023 0303 	bic.w	r3, r3, #3
 800fb8e:	3304      	adds	r3, #4
 800fb90:	4413      	add	r3, r2
 800fb92:	f842 5b04 	str.w	r5, [r2], #4
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d1fb      	bne.n	800fb92 <memset+0x72>
 800fb9a:	f00c 0403 	and.w	r4, ip, #3
 800fb9e:	b12c      	cbz	r4, 800fbac <memset+0x8c>
 800fba0:	b2ca      	uxtb	r2, r1
 800fba2:	441c      	add	r4, r3
 800fba4:	f803 2b01 	strb.w	r2, [r3], #1
 800fba8:	429c      	cmp	r4, r3
 800fbaa:	d1fb      	bne.n	800fba4 <memset+0x84>
 800fbac:	bd30      	pop	{r4, r5, pc}
 800fbae:	4664      	mov	r4, ip
 800fbb0:	4613      	mov	r3, r2
 800fbb2:	2c00      	cmp	r4, #0
 800fbb4:	d1f4      	bne.n	800fba0 <memset+0x80>
 800fbb6:	e7f9      	b.n	800fbac <memset+0x8c>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	4614      	mov	r4, r2
 800fbbc:	e7bf      	b.n	800fb3e <memset+0x1e>
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	46a4      	mov	ip, r4
 800fbc2:	e7e0      	b.n	800fb86 <memset+0x66>

0800fbc4 <strchr>:
 800fbc4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800fbc8:	4603      	mov	r3, r0
 800fbca:	d044      	beq.n	800fc56 <strchr+0x92>
 800fbcc:	0782      	lsls	r2, r0, #30
 800fbce:	d132      	bne.n	800fc36 <strchr+0x72>
 800fbd0:	b510      	push	{r4, lr}
 800fbd2:	6804      	ldr	r4, [r0, #0]
 800fbd4:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
 800fbd8:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
 800fbdc:	ea8e 0204 	eor.w	r2, lr, r4
 800fbe0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800fbe4:	ea23 0302 	bic.w	r3, r3, r2
 800fbe8:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800fbec:	ea22 0204 	bic.w	r2, r2, r4
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800fbf6:	d10f      	bne.n	800fc18 <strchr+0x54>
 800fbf8:	f850 4f04 	ldr.w	r4, [r0, #4]!
 800fbfc:	ea84 0c0e 	eor.w	ip, r4, lr
 800fc00:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 800fc04:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 800fc08:	ea23 0304 	bic.w	r3, r3, r4
 800fc0c:	ea22 020c 	bic.w	r2, r2, ip
 800fc10:	4313      	orrs	r3, r2
 800fc12:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800fc16:	d0ef      	beq.n	800fbf8 <strchr+0x34>
 800fc18:	7803      	ldrb	r3, [r0, #0]
 800fc1a:	b923      	cbnz	r3, 800fc26 <strchr+0x62>
 800fc1c:	e036      	b.n	800fc8c <strchr+0xc8>
 800fc1e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d032      	beq.n	800fc8c <strchr+0xc8>
 800fc26:	4299      	cmp	r1, r3
 800fc28:	d1f9      	bne.n	800fc1e <strchr+0x5a>
 800fc2a:	bd10      	pop	{r4, pc}
 800fc2c:	428a      	cmp	r2, r1
 800fc2e:	d011      	beq.n	800fc54 <strchr+0x90>
 800fc30:	079a      	lsls	r2, r3, #30
 800fc32:	4618      	mov	r0, r3
 800fc34:	d0cc      	beq.n	800fbd0 <strchr+0xc>
 800fc36:	4618      	mov	r0, r3
 800fc38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc3c:	2a00      	cmp	r2, #0
 800fc3e:	d1f5      	bne.n	800fc2c <strchr+0x68>
 800fc40:	4610      	mov	r0, r2
 800fc42:	4770      	bx	lr
 800fc44:	0799      	lsls	r1, r3, #30
 800fc46:	4618      	mov	r0, r3
 800fc48:	d007      	beq.n	800fc5a <strchr+0x96>
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	7802      	ldrb	r2, [r0, #0]
 800fc4e:	3301      	adds	r3, #1
 800fc50:	2a00      	cmp	r2, #0
 800fc52:	d1f7      	bne.n	800fc44 <strchr+0x80>
 800fc54:	4770      	bx	lr
 800fc56:	0782      	lsls	r2, r0, #30
 800fc58:	d1f7      	bne.n	800fc4a <strchr+0x86>
 800fc5a:	6802      	ldr	r2, [r0, #0]
 800fc5c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800fc60:	ea23 0302 	bic.w	r3, r3, r2
 800fc64:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800fc68:	d108      	bne.n	800fc7c <strchr+0xb8>
 800fc6a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800fc6e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800fc72:	ea23 0302 	bic.w	r3, r3, r2
 800fc76:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800fc7a:	d0f6      	beq.n	800fc6a <strchr+0xa6>
 800fc7c:	7803      	ldrb	r3, [r0, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d0e8      	beq.n	800fc54 <strchr+0x90>
 800fc82:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d1fb      	bne.n	800fc82 <strchr+0xbe>
 800fc8a:	4770      	bx	lr
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	bd10      	pop	{r4, pc}

0800fc90 <strcpy>:
 800fc90:	ea80 0201 	eor.w	r2, r0, r1
 800fc94:	4684      	mov	ip, r0
 800fc96:	f012 0f03 	tst.w	r2, #3
 800fc9a:	d14f      	bne.n	800fd3c <strcpy+0xac>
 800fc9c:	f011 0f03 	tst.w	r1, #3
 800fca0:	d132      	bne.n	800fd08 <strcpy+0x78>
 800fca2:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800fca6:	f011 0f04 	tst.w	r1, #4
 800fcaa:	f851 3b04 	ldr.w	r3, [r1], #4
 800fcae:	d00b      	beq.n	800fcc8 <strcpy+0x38>
 800fcb0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800fcb4:	439a      	bics	r2, r3
 800fcb6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800fcba:	bf04      	itt	eq
 800fcbc:	f84c 3b04 	streq.w	r3, [ip], #4
 800fcc0:	f851 3b04 	ldreq.w	r3, [r1], #4
 800fcc4:	d116      	bne.n	800fcf4 <strcpy+0x64>
 800fcc6:	bf00      	nop
 800fcc8:	f851 4b04 	ldr.w	r4, [r1], #4
 800fccc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800fcd0:	439a      	bics	r2, r3
 800fcd2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800fcd6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800fcda:	d10b      	bne.n	800fcf4 <strcpy+0x64>
 800fcdc:	f84c 3b04 	str.w	r3, [ip], #4
 800fce0:	43a2      	bics	r2, r4
 800fce2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800fce6:	bf04      	itt	eq
 800fce8:	f851 3b04 	ldreq.w	r3, [r1], #4
 800fcec:	f84c 4b04 	streq.w	r4, [ip], #4
 800fcf0:	d0ea      	beq.n	800fcc8 <strcpy+0x38>
 800fcf2:	4623      	mov	r3, r4
 800fcf4:	f80c 3b01 	strb.w	r3, [ip], #1
 800fcf8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fcfc:	ea4f 2333 	mov.w	r3, r3, ror #8
 800fd00:	d1f8      	bne.n	800fcf4 <strcpy+0x64>
 800fd02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd06:	4770      	bx	lr
 800fd08:	f011 0f01 	tst.w	r1, #1
 800fd0c:	d006      	beq.n	800fd1c <strcpy+0x8c>
 800fd0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd12:	f80c 2b01 	strb.w	r2, [ip], #1
 800fd16:	2a00      	cmp	r2, #0
 800fd18:	bf08      	it	eq
 800fd1a:	4770      	bxeq	lr
 800fd1c:	f011 0f02 	tst.w	r1, #2
 800fd20:	d0bf      	beq.n	800fca2 <strcpy+0x12>
 800fd22:	f831 2b02 	ldrh.w	r2, [r1], #2
 800fd26:	f012 0fff 	tst.w	r2, #255	; 0xff
 800fd2a:	bf16      	itet	ne
 800fd2c:	f82c 2b02 	strhne.w	r2, [ip], #2
 800fd30:	f88c 2000 	strbeq.w	r2, [ip]
 800fd34:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 800fd38:	d1b3      	bne.n	800fca2 <strcpy+0x12>
 800fd3a:	4770      	bx	lr
 800fd3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd40:	f80c 2b01 	strb.w	r2, [ip], #1
 800fd44:	2a00      	cmp	r2, #0
 800fd46:	d1f9      	bne.n	800fd3c <strcpy+0xac>
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop

0800fd4c <strlen>:
 800fd4c:	f020 0103 	bic.w	r1, r0, #3
 800fd50:	f010 0003 	ands.w	r0, r0, #3
 800fd54:	f1c0 0000 	rsb	r0, r0, #0
 800fd58:	f851 3b04 	ldr.w	r3, [r1], #4
 800fd5c:	f100 0c04 	add.w	ip, r0, #4
 800fd60:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800fd64:	f06f 0200 	mvn.w	r2, #0
 800fd68:	bf1c      	itt	ne
 800fd6a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800fd6e:	4313      	orrne	r3, r2
 800fd70:	f04f 0c01 	mov.w	ip, #1
 800fd74:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800fd78:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800fd7c:	eba3 020c 	sub.w	r2, r3, ip
 800fd80:	ea22 0203 	bic.w	r2, r2, r3
 800fd84:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800fd88:	bf04      	itt	eq
 800fd8a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800fd8e:	3004      	addeq	r0, #4
 800fd90:	d0f4      	beq.n	800fd7c <strlen+0x30>
 800fd92:	f1c2 0100 	rsb	r1, r2, #0
 800fd96:	ea02 0201 	and.w	r2, r2, r1
 800fd9a:	fab2 f282 	clz	r2, r2
 800fd9e:	f1c2 021f 	rsb	r2, r2, #31
 800fda2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800fda6:	4770      	bx	lr

0800fda8 <strncmp>:
 800fda8:	b3a2      	cbz	r2, 800fe14 <strncmp+0x6c>
 800fdaa:	b530      	push	{r4, r5, lr}
 800fdac:	ea40 0401 	orr.w	r4, r0, r1
 800fdb0:	07a4      	lsls	r4, r4, #30
 800fdb2:	4686      	mov	lr, r0
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	d02a      	beq.n	800fe0e <strncmp+0x66>
 800fdb8:	7804      	ldrb	r4, [r0, #0]
 800fdba:	780b      	ldrb	r3, [r1, #0]
 800fdbc:	42a3      	cmp	r3, r4
 800fdbe:	d12f      	bne.n	800fe20 <strncmp+0x78>
 800fdc0:	2a01      	cmp	r2, #1
 800fdc2:	d00c      	beq.n	800fdde <strncmp+0x36>
 800fdc4:	4684      	mov	ip, r0
 800fdc6:	b154      	cbz	r4, 800fdde <strncmp+0x36>
 800fdc8:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 800fdcc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fdd0:	429c      	cmp	r4, r3
 800fdd2:	d125      	bne.n	800fe20 <strncmp+0x78>
 800fdd4:	ea6f 030c 	mvn.w	r3, ip
 800fdd8:	4413      	add	r3, r2
 800fdda:	18c3      	adds	r3, r0, r3
 800fddc:	d1f3      	bne.n	800fdc6 <strncmp+0x1e>
 800fdde:	2000      	movs	r0, #0
 800fde0:	bd30      	pop	{r4, r5, pc}
 800fde2:	4619      	mov	r1, r3
 800fde4:	f8de 4000 	ldr.w	r4, [lr]
 800fde8:	4670      	mov	r0, lr
 800fdea:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 800fdee:	ea23 0c04 	bic.w	ip, r3, r4
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800fdf8:	f10e 0e04 	add.w	lr, lr, #4
 800fdfc:	42ac      	cmp	r4, r5
 800fdfe:	d10b      	bne.n	800fe18 <strncmp+0x70>
 800fe00:	3a04      	subs	r2, #4
 800fe02:	d0ec      	beq.n	800fdde <strncmp+0x36>
 800fe04:	f01c 3f80 	tst.w	ip, #2155905152	; 0x80808080
 800fe08:	d1e9      	bne.n	800fdde <strncmp+0x36>
 800fe0a:	4670      	mov	r0, lr
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	2a03      	cmp	r2, #3
 800fe10:	d8e7      	bhi.n	800fde2 <strncmp+0x3a>
 800fe12:	e7d1      	b.n	800fdb8 <strncmp+0x10>
 800fe14:	4610      	mov	r0, r2
 800fe16:	4770      	bx	lr
 800fe18:	7804      	ldrb	r4, [r0, #0]
 800fe1a:	780b      	ldrb	r3, [r1, #0]
 800fe1c:	429c      	cmp	r4, r3
 800fe1e:	d0d1      	beq.n	800fdc4 <strncmp+0x1c>
 800fe20:	1ae0      	subs	r0, r4, r3
 800fe22:	bd30      	pop	{r4, r5, pc}

0800fe24 <strpbrk>:
 800fe24:	4684      	mov	ip, r0
 800fe26:	7800      	ldrb	r0, [r0, #0]
 800fe28:	b1b8      	cbz	r0, 800fe5a <strpbrk+0x36>
 800fe2a:	b500      	push	{lr}
 800fe2c:	468e      	mov	lr, r1
 800fe2e:	7809      	ldrb	r1, [r1, #0]
 800fe30:	4672      	mov	r2, lr
 800fe32:	460b      	mov	r3, r1
 800fe34:	b919      	cbnz	r1, 800fe3e <strpbrk+0x1a>
 800fe36:	e00b      	b.n	800fe50 <strpbrk+0x2c>
 800fe38:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800fe3c:	b143      	cbz	r3, 800fe50 <strpbrk+0x2c>
 800fe3e:	4298      	cmp	r0, r3
 800fe40:	d1fa      	bne.n	800fe38 <strpbrk+0x14>
 800fe42:	7813      	ldrb	r3, [r2, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	bf14      	ite	ne
 800fe48:	4660      	movne	r0, ip
 800fe4a:	2000      	moveq	r0, #0
 800fe4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe50:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 800fe54:	2800      	cmp	r0, #0
 800fe56:	d1eb      	bne.n	800fe30 <strpbrk+0xc>
 800fe58:	e7f3      	b.n	800fe42 <strpbrk+0x1e>
 800fe5a:	4770      	bx	lr

0800fe5c <strspn>:
 800fe5c:	b510      	push	{r4, lr}
 800fe5e:	468e      	mov	lr, r1
 800fe60:	7801      	ldrb	r1, [r0, #0]
 800fe62:	b199      	cbz	r1, 800fe8c <strspn+0x30>
 800fe64:	4604      	mov	r4, r0
 800fe66:	4684      	mov	ip, r0
 800fe68:	f89e 0000 	ldrb.w	r0, [lr]
 800fe6c:	b158      	cbz	r0, 800fe86 <strspn+0x2a>
 800fe6e:	4672      	mov	r2, lr
 800fe70:	4603      	mov	r3, r0
 800fe72:	e002      	b.n	800fe7a <strspn+0x1e>
 800fe74:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800fe78:	b12b      	cbz	r3, 800fe86 <strspn+0x2a>
 800fe7a:	428b      	cmp	r3, r1
 800fe7c:	d1fa      	bne.n	800fe74 <strspn+0x18>
 800fe7e:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800fe82:	2900      	cmp	r1, #0
 800fe84:	d1f2      	bne.n	800fe6c <strspn+0x10>
 800fe86:	ebac 0004 	sub.w	r0, ip, r4
 800fe8a:	bd10      	pop	{r4, pc}
 800fe8c:	4608      	mov	r0, r1
 800fe8e:	bd10      	pop	{r4, pc}
